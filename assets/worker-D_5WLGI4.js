var jc={},Uc,i2,Uu={"./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm":(x,C,d)=>{x.exports=d.p+"ort-wasm-simd-threaded.jsep.wasm"},"./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?46eb":(x,C,d)=>{x.exports=d.p+"ort.bundle.min.mjs"},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(x,C,d)=>{d.r(C),d.d(C,{Environment:()=>Ee,Interpreter:()=>Pe,Template:()=>Oe,parse:()=>bA,tokenize:()=>S});var k=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",NullLiteral:"NullLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro"}),z=Object.freeze({set:k.Set,for:k.For,in:k.In,is:k.Is,if:k.If,else:k.Else,endif:k.EndIf,elif:k.ElseIf,endfor:k.EndFor,and:k.And,or:k.Or,not:k.Not,"not in":k.NotIn,macro:k.Macro,endmacro:k.EndMacro,true:k.BooleanLiteral,false:k.BooleanLiteral,none:k.NullLiteral,True:k.BooleanLiteral,False:k.BooleanLiteral,None:k.NullLiteral}),V=class{constructor(gA,$){this.value=gA,this.type=$}};function L(gA){return/\w/.test(gA)}function U(gA){return/[0-9]/.test(gA)}var q=[["{%",k.OpenStatement],["%}",k.CloseStatement],["{{",k.OpenExpression],["}}",k.CloseExpression],["(",k.OpenParen],[")",k.CloseParen],["{",k.OpenCurlyBracket],["}",k.CloseCurlyBracket],["[",k.OpenSquareBracket],["]",k.CloseSquareBracket],[",",k.Comma],[".",k.Dot],[":",k.Colon],["|",k.Pipe],["<=",k.ComparisonBinaryOperator],[">=",k.ComparisonBinaryOperator],["==",k.ComparisonBinaryOperator],["!=",k.ComparisonBinaryOperator],["<",k.ComparisonBinaryOperator],[">",k.ComparisonBinaryOperator],["+",k.AdditiveBinaryOperator],["-",k.AdditiveBinaryOperator],["*",k.MultiplicativeBinaryOperator],["/",k.MultiplicativeBinaryOperator],["%",k.MultiplicativeBinaryOperator],["=",k.Equals]],W=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function S(gA,$={}){const IA=[],OA=function(ce,ye={}){return ce.endsWith(`
`)&&(ce=ce.slice(0,-1)),ce=ce.replace(/{#.*?#}/gs,"{##}"),ye.lstrip_blocks&&(ce=ce.replace(/^[ \t]*({[#%])/gm,"$1")),ye.trim_blocks&&(ce=ce.replace(/([#%]})\n/g,"$1")),ce.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}(gA,$);let _A=0;const he=ce=>{let ye="";for(;ce(OA[_A]);)if(OA[_A]!=="\\"){if(ye+=OA[_A++],_A>=OA.length)throw new SyntaxError("Unexpected end of input")}else{if(++_A,_A>=OA.length)throw new SyntaxError("Unexpected end of input");const Qe=OA[_A++],Te=W.get(Qe);if(Te===void 0)throw new SyntaxError(`Unexpected escaped character: ${Qe}`);ye+=Te}return ye};A:for(;_A<OA.length;){const ce=IA.at(-1)?.type;if(ce===void 0||ce===k.CloseStatement||ce===k.CloseExpression){let Qe="";for(;_A<OA.length&&(OA[_A]!=="{"||OA[_A+1]!=="%"&&OA[_A+1]!=="{");)Qe+=OA[_A++];if(Qe.length>0){IA.push(new V(Qe,k.Text));continue}}he(Qe=>/\s/.test(Qe));const ye=OA[_A];if(ye==="-"||ye==="+"){const Qe=IA.at(-1)?.type;if(Qe===k.Text||Qe===void 0)throw new SyntaxError(`Unexpected character: ${ye}`);switch(Qe){case k.Identifier:case k.NumericLiteral:case k.BooleanLiteral:case k.NullLiteral:case k.StringLiteral:case k.CloseParen:case k.CloseSquareBracket:break;default:{++_A;const Te=he(U);IA.push(new V(`${ye}${Te}`,Te.length>0?k.NumericLiteral:k.UnaryOperator));continue}}}for(const[Qe,Te]of q)if(OA.slice(_A,_A+Qe.length)===Qe){IA.push(new V(Qe,Te)),_A+=Qe.length;continue A}if(ye!=="'"&&ye!=='"')if(U(ye)){const Qe=he(U);IA.push(new V(Qe,k.NumericLiteral))}else{if(!L(ye))throw new SyntaxError(`Unexpected character: ${ye}`);{const Qe=he(L),Te=Object.hasOwn(z,Qe)?z[Qe]:k.Identifier;Te===k.In&&IA.at(-1)?.type===k.Not?(IA.pop(),IA.push(new V("not in",k.NotIn))):IA.push(new V(Qe,Te))}}else{++_A;const Qe=he(Te=>Te!==ye);IA.push(new V(Qe,k.StringLiteral)),++_A}}return IA}var X=class{type="Statement"},R=class extends X{constructor(gA){super(),this.body=gA}type="Program"},aA=class extends X{constructor(gA,$,IA){super(),this.test=gA,this.body=$,this.alternate=IA}type="If"},CA=class extends X{constructor(gA,$,IA,OA){super(),this.loopvar=gA,this.iterable=$,this.body=IA,this.defaultBlock=OA}type="For"},kA=class extends X{constructor(gA,$){super(),this.assignee=gA,this.value=$}type="Set"},EA=class extends X{constructor(gA,$,IA){super(),this.name=gA,this.args=$,this.body=IA}type="Macro"},sA=class extends X{type="Expression"},nA=class extends sA{constructor(gA,$,IA){super(),this.object=gA,this.property=$,this.computed=IA}type="MemberExpression"},xA=class extends sA{constructor(gA,$){super(),this.callee=gA,this.args=$}type="CallExpression"},g=class extends sA{constructor(gA){super(),this.value=gA}type="Identifier"},b=class extends sA{constructor(gA){super(),this.value=gA}type="Literal"},A=class extends b{type="NumericLiteral"},l=class extends b{type="StringLiteral"},M=class extends b{type="BooleanLiteral"},uA=class extends b{type="NullLiteral"},D=class extends b{type="ArrayLiteral"},P=class extends b{type="TupleLiteral"},RA=class extends b{type="ObjectLiteral"},SA=class extends sA{constructor(gA,$,IA){super(),this.operator=gA,this.left=$,this.right=IA}type="BinaryExpression"},YA=class extends sA{constructor(gA,$){super(),this.operand=gA,this.filter=$}type="FilterExpression"},qA=class extends sA{constructor(gA,$){super(),this.iterable=gA,this.test=$}type="SelectExpression"},ee=class extends sA{constructor(gA,$,IA){super(),this.operand=gA,this.negate=$,this.test=IA}type="TestExpression"},xe=class extends sA{constructor(gA,$){super(),this.operator=gA,this.argument=$}type="UnaryExpression"},Ge=class extends sA{constructor(gA=void 0,$=void 0,IA=void 0){super(),this.start=gA,this.stop=$,this.step=IA}type="SliceExpression"},GA=class extends sA{constructor(gA,$){super(),this.key=gA,this.value=$}type="KeywordArgumentExpression"};function bA(gA){const $=new R([]);let IA=0;function OA(Xe,$e){const Ne=gA[IA++];if(!Ne||Ne.type!==Xe)throw new Error(`Parser Error: ${$e}. ${Ne.type} !== ${Xe}.`);return Ne}function _A(){switch(gA[IA].type){case k.Text:return new l(OA(k.Text,"Expected text token").value);case k.OpenStatement:return function(){let Xe;switch(OA(k.OpenStatement,"Expected opening statement token"),gA[IA].type){case k.Set:++IA,Xe=ye(),OA(k.CloseStatement,"Expected closing statement token");break;case k.If:++IA,Xe=Qe(),OA(k.OpenStatement,"Expected {% token"),OA(k.EndIf,"Expected endif token"),OA(k.CloseStatement,"Expected %} token");break;case k.Macro:++IA,Xe=function(){const $e=wa();if($e.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const Ne=Aa();OA(k.CloseStatement,"Expected closing statement token");const Zt=[];for(;he(k.OpenStatement,k.EndMacro);)Zt.push(_A());return new EA($e,Ne,Zt)}(),OA(k.OpenStatement,"Expected {% token"),OA(k.EndMacro,"Expected endmacro token"),OA(k.CloseStatement,"Expected %} token");break;case k.For:++IA,Xe=function(){const $e=Te(!0);if(!($e instanceof g||$e instanceof P))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${$e.type} instead`);OA(k.In,"Expected `in` keyword following loop variable");const Ne=Mt();OA(k.CloseStatement,"Expected closing statement token");const Zt=[];for(;he(k.OpenStatement,k.EndFor)&&he(k.OpenStatement,k.Else);)Zt.push(_A());const Ra=[];if(ce(k.OpenStatement,k.Else))for(++IA,++IA,OA(k.CloseStatement,"Expected closing statement token");he(k.OpenStatement,k.EndFor);)Ra.push(_A());return new CA($e,Ne,Zt,Ra)}(),OA(k.OpenStatement,"Expected {% token"),OA(k.EndFor,"Expected endfor token"),OA(k.CloseStatement,"Expected %} token");break;default:throw new SyntaxError(`Unknown statement type: ${gA[IA].type}`)}return Xe}();case k.OpenExpression:return function(){OA(k.OpenExpression,"Expected opening expression token");const Xe=Mt();return OA(k.CloseExpression,"Expected closing expression token"),Xe}();default:throw new SyntaxError(`Unexpected token type: ${gA[IA].type}`)}}function he(...Xe){return IA+Xe.length<=gA.length&&Xe.some(($e,Ne)=>$e!==gA[IA+Ne].type)}function ce(...Xe){return IA+Xe.length<=gA.length&&Xe.every(($e,Ne)=>$e===gA[IA+Ne].type)}function ye(){const Xe=Mt();if(ce(k.Equals)){++IA;const $e=ye();return new kA(Xe,$e)}return Xe}function Qe(){const Xe=Mt();OA(k.CloseStatement,"Expected closing statement token");const $e=[],Ne=[];for(;gA[IA]?.type!==k.OpenStatement||gA[IA+1]?.type!==k.ElseIf&&gA[IA+1]?.type!==k.Else&&gA[IA+1]?.type!==k.EndIf;)$e.push(_A());if(gA[IA]?.type===k.OpenStatement&&gA[IA+1]?.type!==k.EndIf)if(++IA,ce(k.ElseIf))OA(k.ElseIf,"Expected elseif token"),Ne.push(Qe());else for(OA(k.Else,"Expected else token"),OA(k.CloseStatement,"Expected closing statement token");gA[IA]?.type!==k.OpenStatement||gA[IA+1]?.type!==k.EndIf;)Ne.push(_A());return new aA(Xe,$e,Ne)}function Te(Xe=!1){const $e=Xe?wa:Mt,Ne=[$e()],Zt=ce(k.Comma);for(;Zt&&(++IA,Ne.push($e()),ce(k.Comma)););return Zt?new P(Ne):Ne[0]}function Mt(){return function(){const Xe=Tt();if(ce(k.If)){++IA;const $e=Tt();if(ce(k.Else)){++IA;const Ne=Tt();return new aA($e,[Xe],[Ne])}return new qA(Xe,$e)}return Xe}()}function Tt(){let Xe=dt();for(;ce(k.Or);){const $e=gA[IA];++IA;const Ne=dt();Xe=new SA($e,Xe,Ne)}return Xe}function dt(){let Xe=Ct();for(;ce(k.And);){const $e=gA[IA];++IA;const Ne=Ct();Xe=new SA($e,Xe,Ne)}return Xe}function Ct(){let Xe;for(;ce(k.Not);){const $e=gA[IA];++IA;const Ne=Ct();Xe=new xe($e,Ne)}return Xe??function(){let $e=$t();for(;ce(k.ComparisonBinaryOperator)||ce(k.In)||ce(k.NotIn);){const Ne=gA[IA];++IA;const Zt=$t();$e=new SA(Ne,$e,Zt)}return $e}()}function $t(){let Xe=Ka();for(;ce(k.AdditiveBinaryOperator);){const $e=gA[IA];++IA;const Ne=Ka();Xe=new SA($e,Xe,Ne)}return Xe}function Sr(){const Xe=function(){let $e=wa();for(;ce(k.Dot)||ce(k.OpenSquareBracket);){const Ne=gA[IA];let Zt;++IA;const Ra=Ne.type!==k.Dot;if(Ra)Zt=It(),OA(k.CloseSquareBracket,"Expected closing square bracket");else if(Zt=wa(),Zt.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");$e=new nA($e,Zt,Ra)}return $e}();return ce(k.OpenParen)?Ar(Xe):Xe}function Ar(Xe){let $e=new xA(Xe,Aa());return ce(k.OpenParen)&&($e=Ar($e)),$e}function Aa(){OA(k.OpenParen,"Expected opening parenthesis for arguments list");const Xe=function(){const $e=[];for(;!ce(k.CloseParen);){let Ne=Mt();if(ce(k.Equals)){if(++IA,!(Ne instanceof g))throw new SyntaxError("Expected identifier for keyword argument");const Zt=Mt();Ne=new GA(Ne,Zt)}$e.push(Ne),ce(k.Comma)&&++IA}return $e}();return OA(k.CloseParen,"Expected closing parenthesis for arguments list"),Xe}function It(){const Xe=[];let $e=!1;for(;!ce(k.CloseSquareBracket);)ce(k.Colon)?(Xe.push(void 0),++IA,$e=!0):(Xe.push(Mt()),ce(k.Colon)&&(++IA,$e=!0));if(Xe.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if($e){if(Xe.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new Ge(...Xe)}return Xe[0]}function Ka(){let Xe=La();for(;ce(k.MultiplicativeBinaryOperator);){const $e=gA[IA];++IA;const Ne=La();Xe=new SA($e,Xe,Ne)}return Xe}function La(){let Xe=function(){let $e=Sr();for(;ce(k.Pipe);){++IA;let Ne=wa();if(!(Ne instanceof g))throw new SyntaxError("Expected identifier for the filter");ce(k.OpenParen)&&(Ne=Ar(Ne)),$e=new YA($e,Ne)}return $e}();for(;ce(k.Is);){++IA;const $e=ce(k.Not);$e&&++IA;let Ne=wa();if(Ne instanceof M?Ne=new g(Ne.value.toString()):Ne instanceof uA&&(Ne=new g("none")),!(Ne instanceof g))throw new SyntaxError("Expected identifier for the test");Xe=new ee(Xe,$e,Ne)}return Xe}function wa(){const Xe=gA[IA];switch(Xe.type){case k.NumericLiteral:return++IA,new A(Number(Xe.value));case k.StringLiteral:return++IA,new l(Xe.value);case k.BooleanLiteral:return++IA,new M(Xe.value.toLowerCase()==="true");case k.NullLiteral:return++IA,new uA(null);case k.Identifier:return++IA,new g(Xe.value);case k.OpenParen:{++IA;const $e=Te();if(gA[IA].type!==k.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${gA[IA].type} instead`);return++IA,$e}case k.OpenSquareBracket:{++IA;const $e=[];for(;!ce(k.CloseSquareBracket);)$e.push(Mt()),ce(k.Comma)&&++IA;return++IA,new D($e)}case k.OpenCurlyBracket:{++IA;const $e=new Map;for(;!ce(k.CloseCurlyBracket);){const Ne=Mt();OA(k.Colon,"Expected colon between key and value in object literal");const Zt=Mt();$e.set(Ne,Zt),ce(k.Comma)&&++IA}return++IA,new RA($e)}default:throw new SyntaxError(`Unexpected token: ${Xe.type}`)}}for(;IA<gA.length;)$.body.push(_A());return $}function PA(gA,$,IA=1){$===void 0&&($=gA,gA=0);const OA=[];for(let _A=gA;_A<$;_A+=IA)OA.push(_A);return OA}function UA(gA,$,IA,OA=1){const _A=Math.sign(OA);_A>=0?($=($??=0)<0?Math.max(gA.length+$,0):Math.min($,gA.length),IA=(IA??=gA.length)<0?Math.max(gA.length+IA,0):Math.min(IA,gA.length)):($=($??=gA.length-1)<0?Math.max(gA.length+$,-1):Math.min($,gA.length-1),IA=(IA??=-1)<-1?Math.max(gA.length+IA,-1):Math.min(IA,gA.length-1));const he=[];for(let ce=$;_A*ce<_A*IA;ce+=OA)he.push(gA[ce]);return he}function TA(gA){return gA.replace(/\b\w/g,$=>$.toUpperCase())}var ke=class{type="RuntimeValue";value;builtins=new Map;constructor(gA=void 0){this.value=gA}__bool__(){return new ve(!!this.value)}},ae=class extends ke{type="NumericValue"},oe=class extends ke{type="StringValue";builtins=new Map([["upper",new be(()=>new oe(this.value.toUpperCase()))],["lower",new be(()=>new oe(this.value.toLowerCase()))],["strip",new be(()=>new oe(this.value.trim()))],["title",new be(()=>new oe(TA(this.value)))],["length",new ae(this.value.length)],["rstrip",new be(()=>new oe(this.value.trimEnd()))],["lstrip",new be(()=>new oe(this.value.trimStart()))]])},ve=class extends ke{type="BooleanValue"},ie=class extends ke{type="ObjectValue";__bool__(){return new ve(this.value.size>0)}builtins=new Map([["get",new be(([gA,$])=>{if(!(gA instanceof oe))throw new Error(`Object key must be a string: got ${gA.type}`);return this.value.get(gA.value)??$??new zA})],["items",new be(()=>new XA(Array.from(this.value.entries()).map(([gA,$])=>new XA([new oe(gA),$]))))]])},FA=class extends ie{type="KeywordArgumentsValue"},XA=class extends ke{type="ArrayValue";builtins=new Map([["length",new ae(this.value.length)]]);__bool__(){return new ve(this.value.length>0)}},me=class extends XA{type="TupleValue"},be=class extends ke{type="FunctionValue"},zA=class extends ke{type="NullValue"},fe=class extends ke{type="UndefinedValue"},Ee=class{constructor(gA){this.parent=gA}variables=new Map([["namespace",new be(gA=>{if(gA.length===0)return new ie(new Map);if(gA.length!==1||!(gA[0]instanceof ie))throw new Error("`namespace` expects either zero arguments or a single object argument");return gA[0]})]]);tests=new Map([["boolean",gA=>gA.type==="BooleanValue"],["callable",gA=>gA instanceof be],["odd",gA=>{if(gA.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${gA.type}`);return gA.value%2!=0}],["even",gA=>{if(gA.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${gA.type}`);return gA.value%2==0}],["false",gA=>gA.type==="BooleanValue"&&!gA.value],["true",gA=>gA.type==="BooleanValue"&&gA.value],["none",gA=>gA.type==="NullValue"],["string",gA=>gA.type==="StringValue"],["number",gA=>gA.type==="NumericValue"],["integer",gA=>gA.type==="NumericValue"&&Number.isInteger(gA.value)],["iterable",gA=>gA.type==="ArrayValue"||gA.type==="StringValue"],["mapping",gA=>gA.type==="ObjectValue"],["lower",gA=>{const $=gA.value;return gA.type==="StringValue"&&$===$.toLowerCase()}],["upper",gA=>{const $=gA.value;return gA.type==="StringValue"&&$===$.toUpperCase()}],["none",gA=>gA.type==="NullValue"],["defined",gA=>gA.type!=="UndefinedValue"],["undefined",gA=>gA.type==="UndefinedValue"],["equalto",(gA,$)=>gA.value===$.value],["eq",(gA,$)=>gA.value===$.value]]);set(gA,$){return this.declareVariable(gA,Ye($))}declareVariable(gA,$){if(this.variables.has(gA))throw new SyntaxError(`Variable already declared: ${gA}`);return this.variables.set(gA,$),$}setVariable(gA,$){return this.variables.set(gA,$),$}resolve(gA){if(this.variables.has(gA))return this;if(this.parent)return this.parent.resolve(gA);throw new Error(`Unknown variable: ${gA}`)}lookupVariable(gA){try{return this.resolve(gA).variables.get(gA)??new fe}catch{return new fe}}},Pe=class{global;constructor(gA){this.global=gA??new Ee}run(gA){return this.evaluate(gA,this.global)}evaluateBinaryExpression(gA,$){const IA=this.evaluate(gA.left,$);switch(gA.operator.value){case"and":return IA.__bool__().value?this.evaluate(gA.right,$):IA;case"or":return IA.__bool__().value?IA:this.evaluate(gA.right,$)}const OA=this.evaluate(gA.right,$);switch(gA.operator.value){case"==":return new ve(IA.value==OA.value);case"!=":return new ve(IA.value!=OA.value)}if(IA instanceof fe||OA instanceof fe)throw new Error("Cannot perform operation on undefined values");if(IA instanceof zA||OA instanceof zA)throw new Error("Cannot perform operation on null values");if(IA instanceof ae&&OA instanceof ae)switch(gA.operator.value){case"+":return new ae(IA.value+OA.value);case"-":return new ae(IA.value-OA.value);case"*":return new ae(IA.value*OA.value);case"/":return new ae(IA.value/OA.value);case"%":return new ae(IA.value%OA.value);case"<":return new ve(IA.value<OA.value);case">":return new ve(IA.value>OA.value);case">=":return new ve(IA.value>=OA.value);case"<=":return new ve(IA.value<=OA.value)}else if(IA instanceof XA&&OA instanceof XA){if(gA.operator.value==="+")return new XA(IA.value.concat(OA.value))}else if(OA instanceof XA){const _A=OA.value.find(he=>he.value===IA.value)!==void 0;switch(gA.operator.value){case"in":return new ve(_A);case"not in":return new ve(!_A)}}if((IA instanceof oe||OA instanceof oe)&&gA.operator.value==="+")return new oe(IA.value.toString()+OA.value.toString());if(IA instanceof oe&&OA instanceof oe)switch(gA.operator.value){case"in":return new ve(OA.value.includes(IA.value));case"not in":return new ve(!OA.value.includes(IA.value))}if(IA instanceof oe&&OA instanceof ie)switch(gA.operator.value){case"in":return new ve(OA.value.has(IA.value));case"not in":return new ve(!OA.value.has(IA.value))}throw new SyntaxError(`Unknown operator "${gA.operator.value}" between ${IA.type} and ${OA.type}`)}evaluateArguments(gA,$){const IA=[],OA=new Map;for(const _A of gA)if(_A.type==="KeywordArgumentExpression"){const he=_A;OA.set(he.key.value,this.evaluate(he.value,$))}else{if(OA.size>0)throw new Error("Positional arguments must come before keyword arguments");IA.push(this.evaluate(_A,$))}return[IA,OA]}evaluateFilterExpression(gA,$){const IA=this.evaluate(gA.operand,$);if(gA.filter.type==="Identifier"){const OA=gA.filter;if(OA.value==="tojson")return new oe(J(IA));if(IA instanceof XA)switch(OA.value){case"list":return IA;case"first":return IA.value[0];case"last":return IA.value[IA.value.length-1];case"length":return new ae(IA.value.length);case"reverse":return new XA(IA.value.reverse());case"sort":return new XA(IA.value.sort((_A,he)=>{if(_A.type!==he.type)throw new Error(`Cannot compare different types: ${_A.type} and ${he.type}`);switch(_A.type){case"NumericValue":return _A.value-he.value;case"StringValue":return _A.value.localeCompare(he.value);default:throw new Error(`Cannot compare type: ${_A.type}`)}}));default:throw new Error(`Unknown ArrayValue filter: ${OA.value}`)}else if(IA instanceof oe)switch(OA.value){case"length":return new ae(IA.value.length);case"upper":return new oe(IA.value.toUpperCase());case"lower":return new oe(IA.value.toLowerCase());case"title":return new oe(TA(IA.value));case"capitalize":return new oe(IA.value.charAt(0).toUpperCase()+IA.value.slice(1));case"trim":return new oe(IA.value.trim());case"indent":return new oe(IA.value.split(`
`).map((_A,he)=>he===0||_A.length===0?_A:"    "+_A).join(`
`));case"string":return IA;default:throw new Error(`Unknown StringValue filter: ${OA.value}`)}else{if(IA instanceof ae){if(OA.value==="abs")return new ae(Math.abs(IA.value));throw new Error(`Unknown NumericValue filter: ${OA.value}`)}if(IA instanceof ie)switch(OA.value){case"items":return new XA(Array.from(IA.value.entries()).map(([_A,he])=>new XA([new oe(_A),he])));case"length":return new ae(IA.value.size);default:throw new Error(`Unknown ObjectValue filter: ${OA.value}`)}}throw new Error(`Cannot apply filter "${OA.value}" to type: ${IA.type}`)}if(gA.filter.type==="CallExpression"){const OA=gA.filter;if(OA.callee.type!=="Identifier")throw new Error(`Unknown filter: ${OA.callee.type}`);const _A=OA.callee.value;if(_A==="tojson"){const[,he]=this.evaluateArguments(OA.args,$),ce=he.get("indent")??new zA;if(!(ce instanceof ae||ce instanceof zA))throw new Error("If set, indent must be a number");return new oe(J(IA,ce.value))}if(IA instanceof XA){switch(_A){case"selectattr":case"rejectattr":{const he=_A==="selectattr";if(IA.value.some(Tt=>!(Tt instanceof ie)))throw new Error(`\`${_A}\` can only be applied to array of objects`);if(OA.args.some(Tt=>Tt.type!=="StringLiteral"))throw new Error(`arguments of \`${_A}\` must be strings`);const[ce,ye,Qe]=OA.args.map(Tt=>this.evaluate(Tt,$));let Te;if(ye){const Tt=$.tests.get(ye.value);if(!Tt)throw new Error(`Unknown test: ${ye.value}`);Te=Tt}else Te=(...Tt)=>Tt[0].__bool__().value;const Mt=IA.value.filter(Tt=>{const dt=Tt.value.get(ce.value),Ct=!!dt&&Te(dt,Qe);return he?Ct:!Ct});return new XA(Mt)}case"map":{const[,he]=this.evaluateArguments(OA.args,$);if(he.has("attribute")){const ce=he.get("attribute");if(!(ce instanceof oe))throw new Error("attribute must be a string");const ye=he.get("default"),Qe=IA.value.map(Te=>{if(!(Te instanceof ie))throw new Error("items in map must be an object");return Te.value.get(ce.value)??ye??new fe});return new XA(Qe)}throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${_A}`)}if(IA instanceof oe){if(_A==="indent"){const[he,ce]=this.evaluateArguments(OA.args,$),ye=he.at(0)??ce.get("width")??new ae(4);if(!(ye instanceof ae))throw new Error("width must be a number");const Qe=he.at(1)??ce.get("first")??new ve(!1),Te=he.at(2)??ce.get("blank")??new ve(!1),Mt=IA.value.split(`
`),Tt=" ".repeat(ye.value),dt=Mt.map((Ct,$t)=>!Qe.value&&$t===0||!Te.value&&Ct.length===0?Ct:Tt+Ct);return new oe(dt.join(`
`))}throw new Error(`Unknown StringValue filter: ${_A}`)}throw new Error(`Cannot apply filter "${_A}" to type: ${IA.type}`)}throw new Error(`Unknown filter: ${gA.filter.type}`)}evaluateTestExpression(gA,$){const IA=this.evaluate(gA.operand,$),OA=$.tests.get(gA.test.value);if(!OA)throw new Error(`Unknown test: ${gA.test.value}`);const _A=OA(IA);return new ve(gA.negate?!_A:_A)}evaluateUnaryExpression(gA,$){const IA=this.evaluate(gA.argument,$);if(gA.operator.value==="not")return new ve(!IA.value);throw new SyntaxError(`Unknown operator: ${gA.operator.value}`)}evalProgram(gA,$){return this.evaluateBlock(gA.body,$)}evaluateBlock(gA,$){let IA="";for(const OA of gA){const _A=this.evaluate(OA,$);_A.type!=="NullValue"&&_A.type!=="UndefinedValue"&&(IA+=_A.value)}return new oe(IA)}evaluateIdentifier(gA,$){return $.lookupVariable(gA.value)}evaluateCallExpression(gA,$){const[IA,OA]=this.evaluateArguments(gA.args,$);OA.size>0&&IA.push(new FA(OA));const _A=this.evaluate(gA.callee,$);if(_A.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${_A.type}`);return _A.value(IA,$)}evaluateSliceExpression(gA,$,IA){if(!(gA instanceof XA||gA instanceof oe))throw new Error("Slice object must be an array or string");const OA=this.evaluate($.start,IA),_A=this.evaluate($.stop,IA),he=this.evaluate($.step,IA);if(!(OA instanceof ae||OA instanceof fe))throw new Error("Slice start must be numeric or undefined");if(!(_A instanceof ae||_A instanceof fe))throw new Error("Slice stop must be numeric or undefined");if(!(he instanceof ae||he instanceof fe))throw new Error("Slice step must be numeric or undefined");return gA instanceof XA?new XA(UA(gA.value,OA.value,_A.value,he.value)):new oe(UA(Array.from(gA.value),OA.value,_A.value,he.value).join(""))}evaluateMemberExpression(gA,$){const IA=this.evaluate(gA.object,$);let OA,_A;if(gA.computed){if(gA.property.type==="SliceExpression")return this.evaluateSliceExpression(IA,gA.property,$);OA=this.evaluate(gA.property,$)}else OA=new oe(gA.property.value);if(IA instanceof ie){if(!(OA instanceof oe))throw new Error(`Cannot access property with non-string: got ${OA.type}`);_A=IA.value.get(OA.value)??IA.builtins.get(OA.value)}else if(IA instanceof XA||IA instanceof oe)if(OA instanceof ae)_A=IA.value.at(OA.value),IA instanceof oe&&(_A=new oe(IA.value.at(OA.value)));else{if(!(OA instanceof oe))throw new Error(`Cannot access property with non-string/non-number: got ${OA.type}`);_A=IA.builtins.get(OA.value)}else{if(!(OA instanceof oe))throw new Error(`Cannot access property with non-string: got ${OA.type}`);_A=IA.builtins.get(OA.value)}return _A instanceof ke?_A:new fe}evaluateSet(gA,$){const IA=this.evaluate(gA.value,$);if(gA.assignee.type==="Identifier"){const OA=gA.assignee.value;$.setVariable(OA,IA)}else{if(gA.assignee.type!=="MemberExpression")throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(gA.assignee)}`);{const OA=gA.assignee,_A=this.evaluate(OA.object,$);if(!(_A instanceof ie))throw new Error("Cannot assign to member of non-object");if(OA.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");_A.value.set(OA.property.value,IA)}}return new zA}evaluateIf(gA,$){const IA=this.evaluate(gA.test,$);return this.evaluateBlock(IA.__bool__().value?gA.body:gA.alternate,$)}evaluateFor(gA,$){const IA=new Ee($);let OA,_A;if(gA.iterable.type==="SelectExpression"){const Te=gA.iterable;_A=this.evaluate(Te.iterable,IA),OA=Te.test}else _A=this.evaluate(gA.iterable,IA);if(!(_A instanceof XA))throw new Error(`Expected iterable type in for loop: got ${_A.type}`);const he=[],ce=[];for(let Te=0;Te<_A.value.length;++Te){const Mt=new Ee(IA),Tt=_A.value[Te];let dt;if(gA.loopvar.type==="Identifier")dt=Ct=>Ct.setVariable(gA.loopvar.value,Tt);else{if(gA.loopvar.type!=="TupleLiteral")throw new Error(`Invalid loop variable(s): ${gA.loopvar.type}`);{const Ct=gA.loopvar;if(Tt.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${Tt.type}`);const $t=Tt;if(Ct.value.length!==$t.value.length)throw new Error(`Too ${Ct.value.length>$t.value.length?"few":"many"} items to unpack`);dt=Sr=>{for(let Ar=0;Ar<Ct.value.length;++Ar){if(Ct.value[Ar].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Ct.value[Ar].type}`);Sr.setVariable(Ct.value[Ar].value,$t.value[Ar])}}}}OA&&(dt(Mt),!this.evaluate(OA,Mt).__bool__().value)||(he.push(Tt),ce.push(dt))}let ye="",Qe=!0;for(let Te=0;Te<he.length;++Te){const Mt=new Map([["index",new ae(Te+1)],["index0",new ae(Te)],["revindex",new ae(he.length-Te)],["revindex0",new ae(he.length-Te-1)],["first",new ve(Te===0)],["last",new ve(Te===he.length-1)],["length",new ae(he.length)],["previtem",Te>0?he[Te-1]:new fe],["nextitem",Te<he.length-1?he[Te+1]:new fe]]);IA.setVariable("loop",new ie(Mt)),ce[Te](IA),ye+=this.evaluateBlock(gA.body,IA).value,Qe=!1}return Qe&&(ye+=this.evaluateBlock(gA.defaultBlock,IA).value),new oe(ye)}evaluateMacro(gA,$){return $.setVariable(gA.name.value,new be((IA,OA)=>{const _A=new Ee(OA);let he;IA=IA.slice(),IA.at(-1)?.type==="KeywordArgumentsValue"&&(he=IA.pop());for(let ce=0;ce<gA.args.length;++ce){const ye=gA.args[ce],Qe=IA[ce];if(ye.type==="Identifier"){const Te=ye;if(!Qe)throw new Error(`Missing positional argument: ${Te.value}`);_A.setVariable(Te.value,Qe)}else{if(ye.type!=="KeywordArgumentExpression")throw new Error(`Unknown argument type: ${ye.type}`);{const Te=ye,Mt=Qe??he?.value.get(Te.key.value)??this.evaluate(Te.value,_A);_A.setVariable(Te.key.value,Mt)}}}return this.evaluateBlock(gA.body,_A)})),new zA}evaluate(gA,$){if(gA===void 0)return new fe;switch(gA.type){case"Program":return this.evalProgram(gA,$);case"Set":return this.evaluateSet(gA,$);case"If":return this.evaluateIf(gA,$);case"For":return this.evaluateFor(gA,$);case"Macro":return this.evaluateMacro(gA,$);case"NumericLiteral":return new ae(Number(gA.value));case"StringLiteral":return new oe(gA.value);case"BooleanLiteral":return new ve(gA.value);case"NullLiteral":return new zA(gA.value);case"ArrayLiteral":return new XA(gA.value.map(IA=>this.evaluate(IA,$)));case"TupleLiteral":return new me(gA.value.map(IA=>this.evaluate(IA,$)));case"ObjectLiteral":{const IA=new Map;for(const[OA,_A]of gA.value){const he=this.evaluate(OA,$);if(!(he instanceof oe))throw new Error(`Object keys must be strings: got ${he.type}`);IA.set(he.value,this.evaluate(_A,$))}return new ie(IA)}case"Identifier":return this.evaluateIdentifier(gA,$);case"CallExpression":return this.evaluateCallExpression(gA,$);case"MemberExpression":return this.evaluateMemberExpression(gA,$);case"UnaryExpression":return this.evaluateUnaryExpression(gA,$);case"BinaryExpression":return this.evaluateBinaryExpression(gA,$);case"FilterExpression":return this.evaluateFilterExpression(gA,$);case"TestExpression":return this.evaluateTestExpression(gA,$);default:throw new SyntaxError(`Unknown node type: ${gA.type}`)}}};function Ye(gA){switch(typeof gA){case"number":return new ae(gA);case"string":return new oe(gA);case"boolean":return new ve(gA);case"undefined":return new fe;case"object":return gA===null?new zA:Array.isArray(gA)?new XA(gA.map(Ye)):new ie(new Map(Object.entries(gA).map(([$,IA])=>[$,Ye(IA)])));case"function":return new be(($,IA)=>{const OA=gA(...$.map(_A=>_A.value))??null;return Ye(OA)});default:throw new Error(`Cannot convert to runtime value: ${gA}`)}}function J(gA,$,IA){const OA=IA??0;switch(gA.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(gA.value);case"ArrayValue":case"ObjectValue":{const _A=$?" ".repeat($):"",he=`
`+_A.repeat(OA),ce=he+_A;if(gA.type==="ArrayValue"){const ye=gA.value.map(Qe=>J(Qe,$,OA+1));return $?`[${ce}${ye.join(`,${ce}`)}${he}]`:`[${ye.join(", ")}]`}{const ye=Array.from(gA.value.entries()).map(([Qe,Te])=>{const Mt=`"${Qe}": ${J(Te,$,OA+1)}`;return $?`${ce}${Mt}`:Mt});return $?`{${ye.join(",")}${he}}`:`{${ye.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${gA.type}`)}}var Oe=class{parsed;constructor(gA){const $=S(gA,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=bA($)}render(gA){const $=new Ee;$.set("false",!1),$.set("true",!0),$.set("raise_exception",IA=>{throw new Error(IA)}),$.set("range",PA);for(const[IA,OA]of Object.entries(gA))$.set(IA,OA);return new Pe($).run(this.parsed).value}}},"./node_modules/onnxruntime-common/dist/esm/backend-impl.js":(x,C,d)=>{d.r(C),d.d(C,{registerBackend:()=>V,resolveBackendAndExecutionProviders:()=>U});const k=new Map,z=[],V=(q,W,S)=>{if(!W||typeof W.init!="function"||typeof W.createInferenceSessionHandler!="function")throw new TypeError("not a valid backend");{const X=k.get(q);if(X===void 0)k.set(q,{backend:W,priority:S});else{if(X.priority>S)return;if(X.priority===S&&X.backend!==W)throw new Error(`cannot register backend "${q}" using priority ${S}`)}if(S>=0){const R=z.indexOf(q);R!==-1&&z.splice(R,1);for(let aA=0;aA<z.length;aA++)if(k.get(z[aA]).priority<=S)return void z.splice(aA,0,q);z.push(q)}}},L=async q=>{const W=k.get(q);if(!W)return"backend not found.";if(W.initialized)return W.backend;if(W.aborted)return W.error;{const S=!!W.initPromise;try{return S||(W.initPromise=W.backend.init(q)),await W.initPromise,W.initialized=!0,W.backend}catch(X){return S||(W.error=`${X}`,W.aborted=!0),W.error}finally{delete W.initPromise}}},U=async q=>{const W=q.executionProviders||[],S=W.map(EA=>typeof EA=="string"?EA:EA.name),X=S.length===0?z:S;let R;const aA=[],CA=new Set;for(const EA of X){const sA=await L(EA);typeof sA=="string"?aA.push({name:EA,err:sA}):(R||(R=sA),R===sA&&CA.add(EA))}if(!R)throw new Error(`no available backend found. ERR: ${aA.map(EA=>`[${EA.name}] ${EA.err}`).join(", ")}`);for(const{name:EA,err:sA}of aA)S.includes(EA)&&console.warn(`removing requested execution provider "${EA}" from session options because it is not available: ${sA}`);const kA=W.filter(EA=>CA.has(typeof EA=="string"?EA:EA.name));return[R,new Proxy(q,{get:(EA,sA)=>sA==="executionProviders"?kA:Reflect.get(EA,sA)})]}},"./node_modules/onnxruntime-common/dist/esm/backend.js":(x,C,d)=>{d.r(C),d.d(C,{registerBackend:()=>k.registerBackend});var k=d("./node_modules/onnxruntime-common/dist/esm/backend-impl.js")},"./node_modules/onnxruntime-common/dist/esm/env-impl.js":(x,C,d)=>{d.r(C),d.d(C,{env:()=>V});var k=d("./node_modules/onnxruntime-common/dist/esm/version.js");let z="warning";const V={wasm:{},webgl:{},webgpu:{},versions:{common:k.version},set logLevel(L){if(L!==void 0){if(typeof L!="string"||["verbose","info","warning","error","fatal"].indexOf(L)===-1)throw new Error(`Unsupported logging level: ${L}`);z=L}},get logLevel(){return z}};Object.defineProperty(V,"logLevel",{enumerable:!0})},"./node_modules/onnxruntime-common/dist/esm/env.js":(x,C,d)=>{d.r(C),d.d(C,{env:()=>k});const k=d("./node_modules/onnxruntime-common/dist/esm/env-impl.js").env},"./node_modules/onnxruntime-common/dist/esm/index.js":(x,C,d)=>{d.r(C),d.d(C,{InferenceSession:()=>V.InferenceSession,TRACE:()=>U.TRACE,TRACE_FUNC_BEGIN:()=>U.TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>U.TRACE_FUNC_END,Tensor:()=>L.Tensor,TrainingSession:()=>q.TrainingSession,env:()=>z.env,registerBackend:()=>k.registerBackend});var k=d("./node_modules/onnxruntime-common/dist/esm/backend.js"),z=d("./node_modules/onnxruntime-common/dist/esm/env.js"),V=d("./node_modules/onnxruntime-common/dist/esm/inference-session.js"),L=d("./node_modules/onnxruntime-common/dist/esm/tensor.js");d("./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"),d("./node_modules/onnxruntime-common/dist/esm/tensor-factory.js");var U=d("./node_modules/onnxruntime-common/dist/esm/trace.js");d("./node_modules/onnxruntime-common/dist/esm/onnx-model.js"),d("./node_modules/onnxruntime-common/dist/esm/onnx-value.js");var q=d("./node_modules/onnxruntime-common/dist/esm/training-session.js")},"./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js":(x,C,d)=>{d.r(C),d.d(C,{InferenceSession:()=>L});var k=d("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),z=d("./node_modules/onnxruntime-common/dist/esm/tensor.js"),V=d("./node_modules/onnxruntime-common/dist/esm/trace.js");class L{constructor(q){this.handler=q}async run(q,W,S){(0,V.TRACE_FUNC_BEGIN)();const X={};let R={};if(typeof q!="object"||q===null||q instanceof z.Tensor||Array.isArray(q))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let aA=!0;if(typeof W=="object"){if(W===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(W instanceof z.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(W)){if(W.length===0)throw new TypeError("'fetches' cannot be an empty array.");aA=!1;for(const EA of W){if(typeof EA!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(EA)===-1)throw new RangeError(`'fetches' contains invalid output name: ${EA}.`);X[EA]=null}if(typeof S=="object"&&S!==null)R=S;else if(S!==void 0)throw new TypeError("'options' must be an object.")}else{let EA=!1;const sA=Object.getOwnPropertyNames(W);for(const nA of this.outputNames)if(sA.indexOf(nA)!==-1){const xA=W[nA];(xA===null||xA instanceof z.Tensor)&&(EA=!0,aA=!1,X[nA]=xA)}if(EA){if(typeof S=="object"&&S!==null)R=S;else if(S!==void 0)throw new TypeError("'options' must be an object.")}else R=W}}else if(W!==void 0)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const EA of this.inputNames)if(q[EA]===void 0)throw new Error(`input '${EA}' is missing in 'feeds'.`);if(aA)for(const EA of this.outputNames)X[EA]=null;const CA=await this.handler.run(q,X,R),kA={};for(const EA in CA)if(Object.hasOwnProperty.call(CA,EA)){const sA=CA[EA];sA instanceof z.Tensor?kA[EA]=sA:kA[EA]=new z.Tensor(sA.type,sA.data,sA.dims)}return(0,V.TRACE_FUNC_END)(),kA}async release(){return this.handler.dispose()}static async create(q,W,S,X){let R;(0,V.TRACE_FUNC_BEGIN)();let aA={};if(typeof q=="string"){if(R=q,typeof W=="object"&&W!==null)aA=W;else if(W!==void 0)throw new TypeError("'options' must be an object.")}else if(q instanceof Uint8Array){if(R=q,typeof W=="object"&&W!==null)aA=W;else if(W!==void 0)throw new TypeError("'options' must be an object.")}else{if(!(q instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&q instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{const sA=q;let nA=0,xA=q.byteLength;if(typeof W=="object"&&W!==null)aA=W;else if(typeof W=="number"){if(nA=W,!Number.isSafeInteger(nA))throw new RangeError("'byteOffset' must be an integer.");if(nA<0||nA>=sA.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${sA.byteLength}).`);if(xA=q.byteLength-nA,typeof S=="number"){if(xA=S,!Number.isSafeInteger(xA))throw new RangeError("'byteLength' must be an integer.");if(xA<=0||nA+xA>sA.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${sA.byteLength-nA}].`);if(typeof X=="object"&&X!==null)aA=X;else if(X!==void 0)throw new TypeError("'options' must be an object.")}else if(S!==void 0)throw new TypeError("'byteLength' must be a number.")}else if(W!==void 0)throw new TypeError("'options' must be an object.");R=new Uint8Array(sA,nA,xA)}}const[CA,kA]=await(0,k.resolveBackendAndExecutionProviders)(aA),EA=await CA.createInferenceSessionHandler(R,kA);return(0,V.TRACE_FUNC_END)(),new L(EA)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}},"./node_modules/onnxruntime-common/dist/esm/inference-session.js":(x,C,d)=>{d.r(C),d.d(C,{InferenceSession:()=>k});const k=d("./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js").InferenceSession},"./node_modules/onnxruntime-common/dist/esm/onnx-model.js":(x,C,d)=>{d.r(C)},"./node_modules/onnxruntime-common/dist/esm/onnx-value.js":(x,C,d)=>{d.r(C)},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js":(x,C,d)=>{d.r(C),d.d(C,{tensorToDataURL:()=>k,tensorToImageData:()=>z});const k=(V,L)=>{const U=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);U.width=V.dims[3],U.height=V.dims[2];const q=U.getContext("2d");if(q!=null){let W,S;L?.tensorLayout!==void 0&&L.tensorLayout==="NHWC"?(W=V.dims[2],S=V.dims[3]):(W=V.dims[3],S=V.dims[2]);const X=L?.format!==void 0?L.format:"RGB",R=L?.norm;let aA,CA;R===void 0||R.mean===void 0?aA=[255,255,255,255]:typeof R.mean=="number"?aA=[R.mean,R.mean,R.mean,R.mean]:(aA=[R.mean[0],R.mean[1],R.mean[2],0],R.mean[3]!==void 0&&(aA[3]=R.mean[3])),R===void 0||R.bias===void 0?CA=[0,0,0,0]:typeof R.bias=="number"?CA=[R.bias,R.bias,R.bias,R.bias]:(CA=[R.bias[0],R.bias[1],R.bias[2],0],R.bias[3]!==void 0&&(CA[3]=R.bias[3]));const kA=S*W;let EA=0,sA=kA,nA=2*kA,xA=-1;X==="RGBA"?(EA=0,sA=kA,nA=2*kA,xA=3*kA):X==="RGB"?(EA=0,sA=kA,nA=2*kA):X==="RBG"&&(EA=0,nA=kA,sA=2*kA);for(let g=0;g<S;g++)for(let b=0;b<W;b++){const A=(V.data[EA++]-CA[0])*aA[0],l=(V.data[sA++]-CA[1])*aA[1],M=(V.data[nA++]-CA[2])*aA[2],uA=xA===-1?255:(V.data[xA++]-CA[3])*aA[3];q.fillStyle="rgba("+A+","+l+","+M+","+uA+")",q.fillRect(b,g,1,1)}if("toDataURL"in U)return U.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},z=(V,L)=>{const U=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let q;if(U==null)throw new Error("Can not access image data");{let W,S,X;L?.tensorLayout!==void 0&&L.tensorLayout==="NHWC"?(W=V.dims[2],S=V.dims[1],X=V.dims[3]):(W=V.dims[3],S=V.dims[2],X=V.dims[1]);const R=L!==void 0&&L.format!==void 0?L.format:"RGB",aA=L?.norm;let CA,kA;aA===void 0||aA.mean===void 0?CA=[255,255,255,255]:typeof aA.mean=="number"?CA=[aA.mean,aA.mean,aA.mean,aA.mean]:(CA=[aA.mean[0],aA.mean[1],aA.mean[2],255],aA.mean[3]!==void 0&&(CA[3]=aA.mean[3])),aA===void 0||aA.bias===void 0?kA=[0,0,0,0]:typeof aA.bias=="number"?kA=[aA.bias,aA.bias,aA.bias,aA.bias]:(kA=[aA.bias[0],aA.bias[1],aA.bias[2],0],aA.bias[3]!==void 0&&(kA[3]=aA.bias[3]));const EA=S*W;if(L!==void 0&&(L.format!==void 0&&X===4&&L.format!=="RGBA"||X===3&&L.format!=="RGB"&&L.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const sA=4;let nA=0,xA=1,g=2,b=3,A=0,l=EA,M=2*EA,uA=-1;R==="RGBA"?(A=0,l=EA,M=2*EA,uA=3*EA):R==="RGB"?(A=0,l=EA,M=2*EA):R==="RBG"&&(A=0,M=EA,l=2*EA),q=U.createImageData(W,S);for(let D=0;D<S*W;nA+=sA,xA+=sA,g+=sA,b+=sA,D++)q.data[nA]=(V.data[A++]-kA[0])*CA[0],q.data[xA]=(V.data[l++]-kA[1])*CA[1],q.data[g]=(V.data[M++]-kA[2])*CA[2],q.data[b]=uA===-1?255:(V.data[uA++]-kA[3])*CA[3]}return q}},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js":(x,C,d)=>{d.r(C)},"./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js":(x,C,d)=>{d.r(C),d.d(C,{bufferToTensor:()=>z,tensorFromGpuBuffer:()=>U,tensorFromImage:()=>V,tensorFromMLTensor:()=>q,tensorFromPinnedBuffer:()=>W,tensorFromTexture:()=>L});var k=d("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const z=(S,X)=>{if(S===void 0)throw new Error("Image buffer must be defined");if(X.height===void 0||X.width===void 0)throw new Error("Image height and width must be defined");if(X.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:R,width:aA}=X,CA=X.norm??{mean:255,bias:0};let kA,EA;kA=typeof CA.mean=="number"?[CA.mean,CA.mean,CA.mean,CA.mean]:[CA.mean[0],CA.mean[1],CA.mean[2],CA.mean[3]??255],EA=typeof CA.bias=="number"?[CA.bias,CA.bias,CA.bias,CA.bias]:[CA.bias[0],CA.bias[1],CA.bias[2],CA.bias[3]??0];const sA=X.format!==void 0?X.format:"RGBA",nA=X.tensorFormat!==void 0&&X.tensorFormat!==void 0?X.tensorFormat:"RGB",xA=R*aA,g=nA==="RGBA"?new Float32Array(4*xA):new Float32Array(3*xA);let b=4,A=0,l=1,M=2,uA=3,D=0,P=xA,RA=2*xA,SA=-1;sA==="RGB"&&(b=3,A=0,l=1,M=2,uA=-1),nA==="RGBA"?SA=3*xA:nA==="RBG"?(D=0,RA=xA,P=2*xA):nA==="BGR"&&(RA=0,P=xA,D=2*xA);for(let YA=0;YA<xA;YA++,A+=b,M+=b,l+=b,uA+=b)g[D++]=(S[A]+EA[0])/kA[0],g[P++]=(S[l]+EA[1])/kA[1],g[RA++]=(S[M]+EA[2])/kA[2],SA!==-1&&uA!==-1&&(g[SA++]=(S[uA]+EA[3])/kA[3]);return nA==="RGBA"?new k.Tensor("float32",g,[1,4,R,aA]):new k.Tensor("float32",g,[1,3,R,aA])},V=async(S,X)=>{const R=typeof HTMLImageElement<"u"&&S instanceof HTMLImageElement,aA=typeof ImageData<"u"&&S instanceof ImageData,CA=typeof ImageBitmap<"u"&&S instanceof ImageBitmap,kA=typeof S=="string";let EA,sA=X??{};const nA=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},xA=g=>typeof HTMLCanvasElement<"u"&&g instanceof HTMLCanvasElement||g instanceof OffscreenCanvas?g.getContext("2d"):null;if(R){const g=nA();g.width=S.width,g.height=S.height;const b=xA(g);if(b==null)throw new Error("Can not access image data");{let A=S.height,l=S.width;if(X!==void 0&&X.resizedHeight!==void 0&&X.resizedWidth!==void 0&&(A=X.resizedHeight,l=X.resizedWidth),X!==void 0){if(sA=X,X.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");sA.tensorFormat="RGBA",sA.height=A,sA.width=l}else sA.tensorFormat="RGBA",sA.height=A,sA.width=l;b.drawImage(S,0,0),EA=b.getImageData(0,0,l,A).data}}else{if(!aA){if(CA){if(X===void 0)throw new Error("Please provide image config with format for Imagebitmap");const g=nA();g.width=S.width,g.height=S.height;const b=xA(g);if(b!=null){const A=S.height,l=S.width;return b.drawImage(S,0,0,l,A),EA=b.getImageData(0,0,l,A).data,sA.height=A,sA.width=l,z(EA,sA)}throw new Error("Can not access image data")}if(kA)return new Promise((g,b)=>{const A=nA(),l=xA(A);if(!S||!l)return b();const M=new Image;M.crossOrigin="Anonymous",M.src=S,M.onload=()=>{A.width=M.width,A.height=M.height,l.drawImage(M,0,0,A.width,A.height);const uA=l.getImageData(0,0,A.width,A.height);sA.height=A.height,sA.width=A.width,g(z(uA.data,sA))}});throw new Error("Input data provided is not supported - aborted tensor creation")}{let g,b;if(X!==void 0&&X.resizedWidth!==void 0&&X.resizedHeight!==void 0?(g=X.resizedHeight,b=X.resizedWidth):(g=S.height,b=S.width),X!==void 0&&(sA=X),sA.format="RGBA",sA.height=g,sA.width=b,X!==void 0){const A=nA();A.width=b,A.height=g;const l=xA(A);if(l==null)throw new Error("Can not access image data");l.putImageData(S,0,0),EA=l.getImageData(0,0,b,g).data}else EA=S.data}}if(EA!==void 0)return z(EA,sA);throw new Error("Input data provided is not supported - aborted tensor creation")},L=(S,X)=>{const{width:R,height:aA,download:CA,dispose:kA}=X,EA=[1,aA,R,4];return new k.Tensor({location:"texture",type:"float32",texture:S,dims:EA,download:CA,dispose:kA})},U=(S,X)=>{const{dataType:R,dims:aA,download:CA,dispose:kA}=X;return new k.Tensor({location:"gpu-buffer",type:R??"float32",gpuBuffer:S,dims:aA,download:CA,dispose:kA})},q=(S,X)=>{const{dataType:R,dims:aA,download:CA,dispose:kA}=X;return new k.Tensor({location:"ml-tensor",type:R??"float32",mlTensor:S,dims:aA,download:CA,dispose:kA})},W=(S,X,R)=>new k.Tensor({location:"cpu-pinned",type:S,data:X,dims:R??[X.length]})},"./node_modules/onnxruntime-common/dist/esm/tensor-factory.js":(x,C,d)=>{d.r(C)},"./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js":(x,C,d)=>{d.r(C),d.d(C,{NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP:()=>z,NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP:()=>k,checkTypedArray:()=>L});const k=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),z=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let V=!1;const L=()=>{if(!V){V=!0;const U=typeof BigInt64Array<"u"&&BigInt64Array.from,q=typeof BigUint64Array<"u"&&BigUint64Array.from,W=typeof Float16Array<"u"&&Float16Array.from;U&&(k.set("int64",BigInt64Array),z.set(BigInt64Array,"int64")),q&&(k.set("uint64",BigUint64Array),z.set(BigUint64Array,"uint64")),W?(k.set("float16",Float16Array),z.set(Float16Array,"float16")):k.set("float16",Uint16Array)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js":(x,C,d)=>{d.r(C),d.d(C,{Tensor:()=>U});var k=d("./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"),z=d("./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"),V=d("./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"),L=d("./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js");class U{constructor(W,S,X){let R,aA;if((0,V.checkTypedArray)(),typeof W=="object"&&"location"in W)switch(this.dataLocation=W.location,R=W.type,aA=W.dims,W.location){case"cpu-pinned":{const kA=V.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(R);if(!kA)throw new TypeError(`unsupported type "${R}" to create tensor from pinned buffer`);if(!(W.data instanceof kA))throw new TypeError(`buffer should be of type ${kA.name}`);this.cpuData=W.data;break}case"texture":if(R!=="float32")throw new TypeError(`unsupported type "${R}" to create tensor from texture`);this.gpuTextureData=W.texture,this.downloader=W.download,this.disposer=W.dispose;break;case"gpu-buffer":if(R!=="float32"&&R!=="float16"&&R!=="int32"&&R!=="int64"&&R!=="uint32"&&R!=="uint8"&&R!=="bool"&&R!=="uint4"&&R!=="int4")throw new TypeError(`unsupported type "${R}" to create tensor from gpu buffer`);this.gpuBufferData=W.gpuBuffer,this.downloader=W.download,this.disposer=W.dispose;break;case"ml-tensor":if(R!=="float32"&&R!=="float16"&&R!=="int32"&&R!=="int64"&&R!=="uint32"&&R!=="uint64"&&R!=="int8"&&R!=="uint8"&&R!=="bool")throw new TypeError(`unsupported type "${R}" to create tensor from MLTensor`);this.mlTensorData=W.mlTensor,this.downloader=W.download,this.disposer=W.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let kA,EA;if(typeof W=="string")if(R=W,EA=X,W==="string"){if(!Array.isArray(S))throw new TypeError("A string tensor's data must be a string array.");kA=S}else{const sA=V.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(W);if(sA===void 0)throw new TypeError(`Unsupported tensor type: ${W}.`);if(Array.isArray(S)){if(W==="float16"&&sA===Uint16Array||W==="uint4"||W==="int4")throw new TypeError(`Creating a ${W} tensor from number array is not supported. Please use ${sA.name} as data.`);kA=W==="uint64"||W==="int64"?sA.from(S,BigInt):sA.from(S)}else if(S instanceof sA)kA=S;else{if(!(S instanceof Uint8ClampedArray))throw new TypeError(`A ${R} tensor's data must be type of ${sA}`);if(W!=="uint8")throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");kA=Uint8Array.from(S)}}else if(EA=S,Array.isArray(W)){if(W.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const sA=typeof W[0];if(sA==="string")R="string",kA=W;else{if(sA!=="boolean")throw new TypeError(`Invalid element type of data array: ${sA}.`);R="bool",kA=Uint8Array.from(W)}}else if(W instanceof Uint8ClampedArray)R="uint8",kA=Uint8Array.from(W);else{const sA=V.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(W.constructor);if(sA===void 0)throw new TypeError(`Unsupported type for tensor data: ${W.constructor}.`);R=sA,kA=W}if(EA===void 0)EA=[kA.length];else if(!Array.isArray(EA))throw new TypeError("A tensor's dims must be a number array");aA=EA,this.cpuData=kA,this.dataLocation="cpu"}const CA=(0,L.calculateSize)(aA);if(this.cpuData&&CA!==this.cpuData.length&&(R!=="uint4"&&R!=="int4"||Math.ceil(CA/2)!==this.cpuData.length))throw new Error(`Tensor's size(${CA}) does not match data length(${this.cpuData.length}).`);this.type=R,this.dims=aA,this.size=CA}static async fromImage(W,S){return(0,z.tensorFromImage)(W,S)}static fromTexture(W,S){return(0,z.tensorFromTexture)(W,S)}static fromGpuBuffer(W,S){return(0,z.tensorFromGpuBuffer)(W,S)}static fromMLTensor(W,S){return(0,z.tensorFromMLTensor)(W,S)}static fromPinnedBuffer(W,S,X){return(0,z.tensorFromPinnedBuffer)(W,S,X)}toDataURL(W){return(0,k.tensorToDataURL)(this,W)}toImageData(W){return(0,k.tensorToImageData)(this,W)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(W){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const S=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=S,W&&this.disposer&&(this.disposer(),this.disposer=void 0),S}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(W){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return(0,L.tensorReshape)(this,W)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js":(x,C,d)=>{d.r(C),d.d(C,{calculateSize:()=>z,tensorReshape:()=>V});var k=d("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const z=L=>{let U=1;for(let q=0;q<L.length;q++){const W=L[q];if(typeof W!="number"||!Number.isSafeInteger(W))throw new TypeError(`dims[${q}] must be an integer, got: ${W}`);if(W<0)throw new RangeError(`dims[${q}] must be a non-negative integer, got: ${W}`);U*=W}return U},V=(L,U)=>{switch(L.location){case"cpu":return new k.Tensor(L.type,L.data,U);case"cpu-pinned":return new k.Tensor({location:"cpu-pinned",data:L.data,type:L.type,dims:U});case"texture":return new k.Tensor({location:"texture",texture:L.texture,type:L.type,dims:U});case"gpu-buffer":return new k.Tensor({location:"gpu-buffer",gpuBuffer:L.gpuBuffer,type:L.type,dims:U});case"ml-tensor":return new k.Tensor({location:"ml-tensor",mlTensor:L.mlTensor,type:L.type,dims:U});default:throw new Error(`tensorReshape: tensor location ${L.location} is not supported`)}}},"./node_modules/onnxruntime-common/dist/esm/tensor.js":(x,C,d)=>{d.r(C),d.d(C,{Tensor:()=>k});const k=d("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js").Tensor},"./node_modules/onnxruntime-common/dist/esm/trace.js":(x,C,d)=>{d.r(C),d.d(C,{TRACE:()=>z,TRACE_FUNC_BEGIN:()=>L,TRACE_FUNC_END:()=>U});var k=d("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const z=(q,W)=>{(k.env.trace===void 0?k.env.wasm.trace:k.env.trace)&&console.timeStamp(`${q}::ORT::${W}`)},V=(q,W)=>{const S=new Error().stack?.split(/\r\n|\r|\n/g)||[];let X=!1;for(let R=0;R<S.length;R++){if(X&&!S[R].includes("TRACE_FUNC")){let aA=`FUNC_${q}::${S[R].trim().split(" ")[1]}`;return W&&(aA+=`::${W}`),void z("CPU",aA)}S[R].includes("TRACE_FUNC")&&(X=!0)}},L=q=>{(k.env.trace===void 0?k.env.wasm.trace:k.env.trace)&&V("BEGIN",q)},U=q=>{(k.env.trace===void 0?k.env.wasm.trace:k.env.trace)&&V("END",q)}},"./node_modules/onnxruntime-common/dist/esm/training-session-impl.js":(x,C,d)=>{d.r(C),d.d(C,{TrainingSession:()=>V});var k=d("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),z=d("./node_modules/onnxruntime-common/dist/esm/tensor.js");class V{constructor(U,q,W){this.handler=U,this.hasOptimizerModel=q,this.hasEvalModel=W}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(U,q){const W=U.evalModel||"",S=U.optimizerModel||"",X=q||{},[R,aA]=await(0,k.resolveBackendAndExecutionProviders)(X);if(R.createTrainingSessionHandler){const CA=await R.createTrainingSessionHandler(U.checkpointState,U.trainModel,W,S,aA);return new V(CA,!!U.optimizerModel,!!U.evalModel)}throw new Error("Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.")}typeNarrowingForRunStep(U,q,W,S,X){const R={};let aA={};if(typeof W!="object"||W===null||W instanceof z.Tensor||Array.isArray(W))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let CA=!0;if(typeof S=="object"){if(S===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(S instanceof z.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(S)){if(S.length===0)throw new TypeError("'fetches' cannot be an empty array.");CA=!1;for(const kA of S){if(typeof kA!="string")throw new TypeError("'fetches' must be a string array or an object.");if(q.indexOf(kA)===-1)throw new RangeError(`'fetches' contains invalid output name: ${kA}.`);R[kA]=null}if(typeof X=="object"&&X!==null)aA=X;else if(X!==void 0)throw new TypeError("'options' must be an object.")}else{let kA=!1;const EA=Object.getOwnPropertyNames(S);for(const sA of q)if(EA.indexOf(sA)!==-1){const nA=S[sA];(nA===null||nA instanceof z.Tensor)&&(kA=!0,CA=!1,R[sA]=nA)}if(kA){if(typeof X=="object"&&X!==null)aA=X;else if(X!==void 0)throw new TypeError("'options' must be an object.")}else aA=S}}else if(S!==void 0)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const kA of U)if(W[kA]===void 0)throw new Error(`input '${kA}' is missing in 'feeds'.`);if(CA)for(const kA of q)R[kA]=null;return[R,aA]}convertHandlerReturnTypeToMapOfTensors(U){const q={};for(const W in U)if(Object.hasOwnProperty.call(U,W)){const S=U[W];S instanceof z.Tensor?q[W]=S:q[W]=new z.Tensor(S.type,S.data,S.dims)}return q}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(U,q,W){const[S,X]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,U,q,W),R=await this.handler.runTrainStep(U,S,X);return this.convertHandlerReturnTypeToMapOfTensors(R)}async runOptimizerStep(U){if(!this.hasOptimizerModel)throw new Error("This TrainingSession has no OptimizerModel loaded.");await this.handler.runOptimizerStep(U||{})}async runEvalStep(U,q,W){if(this.hasEvalModel){const[S,X]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,U,q,W),R=await this.handler.runEvalStep(U,S,X);return this.convertHandlerReturnTypeToMapOfTensors(R)}throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(U=!0){return this.handler.getParametersSize(U)}async loadParametersBuffer(U,q=!0){const W=await this.getParametersSize(q);if(U.length!==4*W)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(U,q)}async getContiguousParameters(U=!0){return this.handler.getContiguousParameters(U)}async release(){return this.handler.dispose()}}},"./node_modules/onnxruntime-common/dist/esm/training-session.js":(x,C,d)=>{d.r(C),d.d(C,{TrainingSession:()=>k});const k=d("./node_modules/onnxruntime-common/dist/esm/training-session-impl.js").TrainingSession},"./node_modules/onnxruntime-common/dist/esm/version.js":(x,C,d)=>{d.r(C),d.d(C,{version:()=>k});const k="1.20.1"},"./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?3a96":(x,C,d)=>{d.r(C),d.d(C,{InferenceSession:()=>xe,TRACE:()=>RA,TRACE_FUNC_BEGIN:()=>YA,TRACE_FUNC_END:()=>qA,Tensor:()=>P,default:()=>uf,env:()=>X,registerBackend:()=>V});var k,z,V,L,U,q,W,S,X,R,aA,CA,kA,EA,sA,nA,xA,g,b,A,l,M,uA,D,P,RA,SA,YA,qA,ee,xe,Ge=Object.defineProperty,GA=Object.getOwnPropertyDescriptor,bA=Object.getOwnPropertyNames,PA=Object.prototype.hasOwnProperty,UA=(n=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(n,{get:(u,h)=>(typeof require<"u"?require:u)[h]}):n)(function(n){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+n+'" is not supported')}),TA=(n,u)=>()=>(n&&(u=n(n=0)),u),ke=(n,u)=>{for(var h in u)Ge(n,h,{get:u[h],enumerable:!0})},ae=n=>((u,h,w,B)=>{if(h&&typeof h=="object"||typeof h=="function")for(let v of bA(h))!PA.call(u,v)&&v!==w&&Ge(u,v,{get:()=>h[v],enumerable:!(B=GA(h,v))||B.enumerable});return u})(Ge({},"__esModule",{value:!0}),n),oe=TA(()=>{k=new Map,z=[],V=(n,u,h)=>{if(!u||typeof u.init!="function"||typeof u.createInferenceSessionHandler!="function")throw new TypeError("not a valid backend");{let w=k.get(n);if(w===void 0)k.set(n,{backend:u,priority:h});else{if(w.priority>h)return;if(w.priority===h&&w.backend!==u)throw new Error(`cannot register backend "${n}" using priority ${h}`)}if(h>=0){let B=z.indexOf(n);B!==-1&&z.splice(B,1);for(let v=0;v<z.length;v++)if(k.get(z[v]).priority<=h)return void z.splice(v,0,n);z.push(n)}}},L=async n=>{let u=k.get(n);if(!u)return"backend not found.";if(u.initialized)return u.backend;if(u.aborted)return u.error;{let h=!!u.initPromise;try{return h||(u.initPromise=u.backend.init(n)),await u.initPromise,u.initialized=!0,u.backend}catch(w){return h||(u.error=`${w}`,u.aborted=!0),u.error}finally{delete u.initPromise}}},U=async n=>{let u,h=n.executionProviders||[],w=h.map(N=>typeof N=="string"?N:N.name),B=w.length===0?z:w,v=[],y=new Set;for(let N of B){let Y=await L(N);typeof Y=="string"?v.push({name:N,err:Y}):(u||(u=Y),u===Y&&y.add(N))}if(!u)throw new Error(`no available backend found. ERR: ${v.map(N=>`[${N.name}] ${N.err}`).join(", ")}`);for(let{name:N,err:Y}of v)w.includes(N)&&console.warn(`removing requested execution provider "${N}" from session options because it is not available: ${Y}`);let F=h.filter(N=>y.has(typeof N=="string"?N:N.name));return[u,new Proxy(n,{get:(N,Y)=>Y==="executionProviders"?F:Reflect.get(N,Y)})]}}),ve=TA(()=>{oe()}),ie=TA(()=>{q="1.21.0-dev.20241212-1f88284f96"}),FA=TA(()=>{ie(),W="warning",S={wasm:{},webgl:{},webgpu:{},versions:{common:q},set logLevel(n){if(n!==void 0){if(typeof n!="string"||["verbose","info","warning","error","fatal"].indexOf(n)===-1)throw new Error(`Unsupported logging level: ${n}`);W=n}},get logLevel(){return W}},Object.defineProperty(S,"logLevel",{enumerable:!0})}),XA=TA(()=>{FA(),X=S}),me=TA(()=>{R=(n,u)=>{let h=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);h.width=n.dims[3],h.height=n.dims[2];let w=h.getContext("2d");if(w!=null){let B,v;u?.tensorLayout!==void 0&&u.tensorLayout==="NHWC"?(B=n.dims[2],v=n.dims[3]):(B=n.dims[3],v=n.dims[2]);let y,F,N=u?.format!==void 0?u.format:"RGB",Y=u?.norm;Y===void 0||Y.mean===void 0?y=[255,255,255,255]:typeof Y.mean=="number"?y=[Y.mean,Y.mean,Y.mean,Y.mean]:(y=[Y.mean[0],Y.mean[1],Y.mean[2],0],Y.mean[3]!==void 0&&(y[3]=Y.mean[3])),Y===void 0||Y.bias===void 0?F=[0,0,0,0]:typeof Y.bias=="number"?F=[Y.bias,Y.bias,Y.bias,Y.bias]:(F=[Y.bias[0],Y.bias[1],Y.bias[2],0],Y.bias[3]!==void 0&&(F[3]=Y.bias[3]));let tA=v*B,Q=0,iA=tA,oA=2*tA,dA=-1;N==="RGBA"?(Q=0,iA=tA,oA=2*tA,dA=3*tA):N==="RGB"?(Q=0,iA=tA,oA=2*tA):N==="RBG"&&(Q=0,oA=tA,iA=2*tA);for(let fA=0;fA<v;fA++)for(let wA=0;wA<B;wA++){let MA=(n.data[Q++]-F[0])*y[0],DA=(n.data[iA++]-F[1])*y[1],LA=(n.data[oA++]-F[2])*y[2],ZA=dA===-1?255:(n.data[dA++]-F[3])*y[3];w.fillStyle="rgba("+MA+","+DA+","+LA+","+ZA+")",w.fillRect(wA,fA,1,1)}if("toDataURL"in h)return h.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},aA=(n,u)=>{let h,w=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");if(w==null)throw new Error("Can not access image data");{let B,v,y;u?.tensorLayout!==void 0&&u.tensorLayout==="NHWC"?(B=n.dims[2],v=n.dims[1],y=n.dims[3]):(B=n.dims[3],v=n.dims[2],y=n.dims[1]);let F,N,Y=u!==void 0&&u.format!==void 0?u.format:"RGB",tA=u?.norm;tA===void 0||tA.mean===void 0?F=[255,255,255,255]:typeof tA.mean=="number"?F=[tA.mean,tA.mean,tA.mean,tA.mean]:(F=[tA.mean[0],tA.mean[1],tA.mean[2],255],tA.mean[3]!==void 0&&(F[3]=tA.mean[3])),tA===void 0||tA.bias===void 0?N=[0,0,0,0]:typeof tA.bias=="number"?N=[tA.bias,tA.bias,tA.bias,tA.bias]:(N=[tA.bias[0],tA.bias[1],tA.bias[2],0],tA.bias[3]!==void 0&&(N[3]=tA.bias[3]));let Q=v*B;if(u!==void 0&&(u.format!==void 0&&y===4&&u.format!=="RGBA"||y===3&&u.format!=="RGB"&&u.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let iA=4,oA=0,dA=1,fA=2,wA=3,MA=0,DA=Q,LA=2*Q,ZA=-1;Y==="RGBA"?(MA=0,DA=Q,LA=2*Q,ZA=3*Q):Y==="RGB"?(MA=0,DA=Q,LA=2*Q):Y==="RBG"&&(MA=0,LA=Q,DA=2*Q),h=w.createImageData(B,v);for(let JA=0;JA<v*B;oA+=iA,dA+=iA,fA+=iA,wA+=iA,JA++)h.data[oA]=(n.data[MA++]-N[0])*F[0],h.data[dA]=(n.data[DA++]-N[1])*F[1],h.data[fA]=(n.data[LA++]-N[2])*F[2],h.data[wA]=ZA===-1?255:(n.data[ZA++]-N[3])*F[3]}return h}}),be=TA(()=>{Ee(),CA=(n,u)=>{if(n===void 0)throw new Error("Image buffer must be defined");if(u.height===void 0||u.width===void 0)throw new Error("Image height and width must be defined");if(u.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let h,w,{height:B,width:v}=u,y=u.norm??{mean:255,bias:0};h=typeof y.mean=="number"?[y.mean,y.mean,y.mean,y.mean]:[y.mean[0],y.mean[1],y.mean[2],y.mean[3]??255],w=typeof y.bias=="number"?[y.bias,y.bias,y.bias,y.bias]:[y.bias[0],y.bias[1],y.bias[2],y.bias[3]??0];let F=u.format!==void 0?u.format:"RGBA",N=u.tensorFormat!==void 0&&u.tensorFormat!==void 0?u.tensorFormat:"RGB",Y=B*v,tA=N==="RGBA"?new Float32Array(4*Y):new Float32Array(3*Y),Q=4,iA=0,oA=1,dA=2,fA=3,wA=0,MA=Y,DA=2*Y,LA=-1;F==="RGB"&&(Q=3,iA=0,oA=1,dA=2,fA=-1),N==="RGBA"?LA=3*Y:N==="RBG"?(wA=0,DA=Y,MA=2*Y):N==="BGR"&&(DA=0,MA=Y,wA=2*Y);for(let ZA=0;ZA<Y;ZA++,iA+=Q,dA+=Q,oA+=Q,fA+=Q)tA[wA++]=(n[iA]+w[0])/h[0],tA[MA++]=(n[oA]+w[1])/h[1],tA[DA++]=(n[dA]+w[2])/h[2],LA!==-1&&fA!==-1&&(tA[LA++]=(n[fA]+w[3])/h[3]);return new D("float32",tA,N==="RGBA"?[1,4,B,v]:[1,3,B,v])},kA=async(n,u)=>{let h,w=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,B=typeof ImageData<"u"&&n instanceof ImageData,v=typeof ImageBitmap<"u"&&n instanceof ImageBitmap,y=typeof n=="string",F=u??{},N=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},Y=tA=>typeof HTMLCanvasElement<"u"&&tA instanceof HTMLCanvasElement||tA instanceof OffscreenCanvas?tA.getContext("2d"):null;if(w){let tA=N();tA.width=n.width,tA.height=n.height;let Q=Y(tA);if(Q==null)throw new Error("Can not access image data");{let iA=n.height,oA=n.width;if(u!==void 0&&u.resizedHeight!==void 0&&u.resizedWidth!==void 0&&(iA=u.resizedHeight,oA=u.resizedWidth),u!==void 0){if(F=u,u.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");F.tensorFormat="RGBA",F.height=iA,F.width=oA}else F.tensorFormat="RGBA",F.height=iA,F.width=oA;Q.drawImage(n,0,0),h=Q.getImageData(0,0,oA,iA).data}}else{if(!B){if(v){if(u===void 0)throw new Error("Please provide image config with format for Imagebitmap");let tA=N();tA.width=n.width,tA.height=n.height;let Q=Y(tA);if(Q!=null){let iA=n.height,oA=n.width;return Q.drawImage(n,0,0,oA,iA),h=Q.getImageData(0,0,oA,iA).data,F.height=iA,F.width=oA,CA(h,F)}throw new Error("Can not access image data")}if(y)return new Promise((tA,Q)=>{let iA=N(),oA=Y(iA);if(!n||!oA)return Q();let dA=new Image;dA.crossOrigin="Anonymous",dA.src=n,dA.onload=()=>{iA.width=dA.width,iA.height=dA.height,oA.drawImage(dA,0,0,iA.width,iA.height);let fA=oA.getImageData(0,0,iA.width,iA.height);F.height=iA.height,F.width=iA.width,tA(CA(fA.data,F))}});throw new Error("Input data provided is not supported - aborted tensor creation")}{let tA,Q;if(u!==void 0&&u.resizedWidth!==void 0&&u.resizedHeight!==void 0?(tA=u.resizedHeight,Q=u.resizedWidth):(tA=n.height,Q=n.width),u!==void 0&&(F=u),F.format="RGBA",F.height=tA,F.width=Q,u!==void 0){let iA=N();iA.width=Q,iA.height=tA;let oA=Y(iA);if(oA==null)throw new Error("Can not access image data");oA.putImageData(n,0,0),h=oA.getImageData(0,0,Q,tA).data}else h=n.data}}if(h!==void 0)return CA(h,F);throw new Error("Input data provided is not supported - aborted tensor creation")},EA=(n,u)=>{let{width:h,height:w,download:B,dispose:v}=u;return new D({location:"texture",type:"float32",texture:n,dims:[1,w,h,4],download:B,dispose:v})},sA=(n,u)=>{let{dataType:h,dims:w,download:B,dispose:v}=u;return new D({location:"gpu-buffer",type:h??"float32",gpuBuffer:n,dims:w,download:B,dispose:v})},nA=(n,u)=>{let{dataType:h,dims:w,download:B,dispose:v}=u;return new D({location:"ml-tensor",type:h??"float32",mlTensor:n,dims:w,download:B,dispose:v})},xA=(n,u,h)=>new D({location:"cpu-pinned",type:n,data:u,dims:h??[u.length]})}),zA=TA(()=>{g=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),b=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),A=!1,l=()=>{if(!A){A=!0;let n=typeof BigInt64Array<"u"&&BigInt64Array.from,u=typeof BigUint64Array<"u"&&BigUint64Array.from,h=typeof Float16Array<"u"&&Float16Array.from;n&&(g.set("int64",BigInt64Array),b.set(BigInt64Array,"int64")),u&&(g.set("uint64",BigUint64Array),b.set(BigUint64Array,"uint64")),h?(g.set("float16",Float16Array),b.set(Float16Array,"float16")):g.set("float16",Uint16Array)}}}),fe=TA(()=>{Ee(),M=n=>{let u=1;for(let h=0;h<n.length;h++){let w=n[h];if(typeof w!="number"||!Number.isSafeInteger(w))throw new TypeError(`dims[${h}] must be an integer, got: ${w}`);if(w<0)throw new RangeError(`dims[${h}] must be a non-negative integer, got: ${w}`);u*=w}return u},uA=(n,u)=>{switch(n.location){case"cpu":return new D(n.type,n.data,u);case"cpu-pinned":return new D({location:"cpu-pinned",data:n.data,type:n.type,dims:u});case"texture":return new D({location:"texture",texture:n.texture,type:n.type,dims:u});case"gpu-buffer":return new D({location:"gpu-buffer",gpuBuffer:n.gpuBuffer,type:n.type,dims:u});case"ml-tensor":return new D({location:"ml-tensor",mlTensor:n.mlTensor,type:n.type,dims:u});default:throw new Error(`tensorReshape: tensor location ${n.location} is not supported`)}}}),Ee=TA(()=>{me(),be(),zA(),fe(),D=class{constructor(n,u,h){let w,B;if(l(),typeof n=="object"&&"location"in n)switch(this.dataLocation=n.location,w=n.type,B=n.dims,n.location){case"cpu-pinned":{let y=g.get(w);if(!y)throw new TypeError(`unsupported type "${w}" to create tensor from pinned buffer`);if(!(n.data instanceof y))throw new TypeError(`buffer should be of type ${y.name}`);this.cpuData=n.data;break}case"texture":if(w!=="float32")throw new TypeError(`unsupported type "${w}" to create tensor from texture`);this.gpuTextureData=n.texture,this.downloader=n.download,this.disposer=n.dispose;break;case"gpu-buffer":if(w!=="float32"&&w!=="float16"&&w!=="int32"&&w!=="int64"&&w!=="uint32"&&w!=="uint8"&&w!=="bool"&&w!=="uint4"&&w!=="int4")throw new TypeError(`unsupported type "${w}" to create tensor from gpu buffer`);this.gpuBufferData=n.gpuBuffer,this.downloader=n.download,this.disposer=n.dispose;break;case"ml-tensor":if(w!=="float32"&&w!=="float16"&&w!=="int32"&&w!=="int64"&&w!=="uint32"&&w!=="uint64"&&w!=="int8"&&w!=="uint8"&&w!=="bool"&&w!=="uint4"&&w!=="int4")throw new TypeError(`unsupported type "${w}" to create tensor from MLTensor`);this.mlTensorData=n.mlTensor,this.downloader=n.download,this.disposer=n.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let y,F;if(typeof n=="string")if(w=n,F=h,n==="string"){if(!Array.isArray(u))throw new TypeError("A string tensor's data must be a string array.");y=u}else{let N=g.get(n);if(N===void 0)throw new TypeError(`Unsupported tensor type: ${n}.`);if(Array.isArray(u)){if(n==="float16"&&N===Uint16Array||n==="uint4"||n==="int4")throw new TypeError(`Creating a ${n} tensor from number array is not supported. Please use ${N.name} as data.`);y=n==="uint64"||n==="int64"?N.from(u,BigInt):N.from(u)}else if(u instanceof N)y=u;else{if(!(u instanceof Uint8ClampedArray))throw new TypeError(`A ${w} tensor's data must be type of ${N}`);if(n!=="uint8")throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");y=Uint8Array.from(u)}}else if(F=u,Array.isArray(n)){if(n.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let N=typeof n[0];if(N==="string")w="string",y=n;else{if(N!=="boolean")throw new TypeError(`Invalid element type of data array: ${N}.`);w="bool",y=Uint8Array.from(n)}}else if(n instanceof Uint8ClampedArray)w="uint8",y=Uint8Array.from(n);else{let N=b.get(n.constructor);if(N===void 0)throw new TypeError(`Unsupported type for tensor data: ${n.constructor}.`);w=N,y=n}if(F===void 0)F=[y.length];else if(!Array.isArray(F))throw new TypeError("A tensor's dims must be a number array");B=F,this.cpuData=y,this.dataLocation="cpu"}let v=M(B);if(this.cpuData&&v!==this.cpuData.length&&(w!=="uint4"&&w!=="int4"||Math.ceil(v/2)!==this.cpuData.length))throw new Error(`Tensor's size(${v}) does not match data length(${this.cpuData.length}).`);this.type=w,this.dims=B,this.size=v}static async fromImage(n,u){return kA(n,u)}static fromTexture(n,u){return EA(n,u)}static fromGpuBuffer(n,u){return sA(n,u)}static fromMLTensor(n,u){return nA(n,u)}static fromPinnedBuffer(n,u,h){return xA(n,u,h)}toDataURL(n){return R(this,n)}toImageData(n){return aA(this,n)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(n){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let u=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=u,n&&this.disposer&&(this.disposer(),this.disposer=void 0),u}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(n){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return uA(this,n)}}}),Pe=TA(()=>{Ee(),P=D}),Ye=TA(()=>{FA(),RA=(n,u)=>{(typeof S.trace>"u"?!S.wasm.trace:!S.trace)||console.timeStamp(`${n}::ORT::${u}`)},SA=(n,u)=>{let h=new Error().stack?.split(/\r\n|\r|\n/g)||[],w=!1;for(let B=0;B<h.length;B++){if(w&&!h[B].includes("TRACE_FUNC")){let v=`FUNC_${n}::${h[B].trim().split(" ")[1]}`;return u&&(v+=`::${u}`),void RA("CPU",v)}h[B].includes("TRACE_FUNC")&&(w=!0)}},YA=n=>{(typeof S.trace>"u"?!S.wasm.trace:!S.trace)||SA("BEGIN",n)},qA=n=>{(typeof S.trace>"u"?!S.wasm.trace:!S.trace)||SA("END",n)}}),J=TA(()=>{oe(),Pe(),Ye(),ee=class Ku{constructor(u){this.handler=u}async run(u,h,w){YA();let B={},v={};if(typeof u!="object"||u===null||u instanceof P||Array.isArray(u))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let y=!0;if(typeof h=="object"){if(h===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(h instanceof P)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(h)){if(h.length===0)throw new TypeError("'fetches' cannot be an empty array.");y=!1;for(let Y of h){if(typeof Y!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(Y)===-1)throw new RangeError(`'fetches' contains invalid output name: ${Y}.`);B[Y]=null}if(typeof w=="object"&&w!==null)v=w;else if(typeof w<"u")throw new TypeError("'options' must be an object.")}else{let Y=!1,tA=Object.getOwnPropertyNames(h);for(let Q of this.outputNames)if(tA.indexOf(Q)!==-1){let iA=h[Q];(iA===null||iA instanceof P)&&(Y=!0,y=!1,B[Q]=iA)}if(Y){if(typeof w=="object"&&w!==null)v=w;else if(typeof w<"u")throw new TypeError("'options' must be an object.")}else v=h}}else if(typeof h<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let Y of this.inputNames)if(typeof u[Y]>"u")throw new Error(`input '${Y}' is missing in 'feeds'.`);if(y)for(let Y of this.outputNames)B[Y]=null;let F=await this.handler.run(u,B,v),N={};for(let Y in F)if(Object.hasOwnProperty.call(F,Y)){let tA=F[Y];N[Y]=tA instanceof P?tA:new P(tA.type,tA.data,tA.dims)}return qA(),N}async release(){return this.handler.dispose()}static async create(u,h,w,B){YA();let v,y={};if(typeof u=="string"){if(v=u,typeof h=="object"&&h!==null)y=h;else if(typeof h<"u")throw new TypeError("'options' must be an object.")}else if(u instanceof Uint8Array){if(v=u,typeof h=="object"&&h!==null)y=h;else if(typeof h<"u")throw new TypeError("'options' must be an object.")}else{if(!(u instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&u instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{let tA=u,Q=0,iA=u.byteLength;if(typeof h=="object"&&h!==null)y=h;else if(typeof h=="number"){if(Q=h,!Number.isSafeInteger(Q))throw new RangeError("'byteOffset' must be an integer.");if(Q<0||Q>=tA.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${tA.byteLength}).`);if(iA=u.byteLength-Q,typeof w=="number"){if(iA=w,!Number.isSafeInteger(iA))throw new RangeError("'byteLength' must be an integer.");if(iA<=0||Q+iA>tA.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${tA.byteLength-Q}].`);if(typeof B=="object"&&B!==null)y=B;else if(typeof B<"u")throw new TypeError("'options' must be an object.")}else if(typeof w<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof h<"u")throw new TypeError("'options' must be an object.");v=new Uint8Array(tA,Q,iA)}}let[F,N]=await U(y),Y=await F.createInferenceSessionHandler(v,N);return qA(),new Ku(Y)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}),Oe=TA(()=>{J(),xe=ee}),gA=TA(()=>{}),$=TA(()=>{}),IA=TA(()=>{}),OA=TA(()=>{}),_A={};ke(_A,{InferenceSession:()=>xe,TRACE:()=>RA,TRACE_FUNC_BEGIN:()=>YA,TRACE_FUNC_END:()=>qA,Tensor:()=>P,env:()=>X,registerBackend:()=>V});var he=TA(()=>{ve(),XA(),Oe(),Pe(),gA(),$(),Ye(),IA(),OA()}),ce=TA(()=>{}),ye={};ke(ye,{default:()=>Mt});var Qe,Te,Mt,Tt=TA(()=>{fg(),Vn(),s1(),Qe="ort-wasm-proxy-worker",(Te=globalThis.self?.name===Qe)&&(self.onmessage=n=>{let{type:u,in:h}=n.data;try{switch(u){case"init-wasm":Ma(h.wasm).then(()=>{Q0(h).then(()=>{postMessage({type:u})},w=>{postMessage({type:u,err:w})})},w=>{postMessage({type:u,err:w})});break;case"init-ep":{let{epName:w,env:B}=h;$0(B,w).then(()=>{postMessage({type:u})},v=>{postMessage({type:u,err:v})});break}case"copy-from":{let{buffer:w}=h,B=A2(w);postMessage({type:u,out:B});break}case"create":{let{model:w,options:B}=h;Ao(w,B).then(v=>{postMessage({type:u,out:v})},v=>{postMessage({type:u,err:v})});break}case"release":T0(h),postMessage({type:u});break;case"run":{let{sessionId:w,inputIndices:B,inputs:v,outputIndices:y,options:F}=h;e2(w,B,v,y,new Array(y.length).fill(null),F).then(N=>{N.some(Y=>Y[3]!=="cpu")?postMessage({type:u,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:u,out:N},P0([...v,...N]))},N=>{postMessage({type:u,err:N})});break}case"end-profiling":to(h),postMessage({type:u})}}catch(w){postMessage({type:u,err:w})}}),Mt=Te?null:n=>new Worker(n??Aa,{type:"module",name:Qe})}),dt={};ke(dt,{default:()=>Sr});var Ct,$t,Sr,Ar,Aa,It,Ka,La,wa,Xe,$e,Ne,Zt,Ra,Za,Qs,bs,Is,Ts,ea,xt,Ma,Dr,Hr,cs,Xt,Xa,gs,di,qs,Js,fi,Ur,ts,us,_s,qa,ws,kr,Ps,zs,pi,Fs,ks,Ss,xs,wt,zt,ka,$s,Bs,Ns,rs,Os,te,_,BA,NA,VA,$A,de,Se,HA,Ve,Ce,Yt,Vt,cr,sr,jt,je,Ke,Jt,Ya,pa,ir,rt,dr,ge,Je,ha,Nr,Rr,Qr,Cr,Ut,xr,Ai,Ha,Pi,Ga,zi,Gt,ta,Wa,e0,t0,r0,a0,ei,Ls,s0,Fi,Ta,Kr,qe,Da,nn,Si,on,i0,n0,ln,R0,Pa,rr,hi,mi,xa,Ys,as,cn,gn,Hs,un,dn,fn,De,Rs,Re,pn,Ni,Ba,za,ti,Ci,hn,Pr,o0,l0,vs,ri,c0,Oi,ai,He,Ja,mn,bi,ds,Cn,g0,u0,Li,d0,f0,Or,p0,h0,bt,Ht,bn,ss,m0,ra,fs,aa,ps,Yi,In,C0,Hi,vr,Ii,wn,sa,si,hs,kn,xn,Bn,Ri,is,Wi,b0,vn,yn,ms,Vi,Lr,En,ji,wi,Fa,ki,Mn,_a,Gn,Ui,Dn,ii,I0,w0,Qn,ma,xi,ia,Tn,Ki,Va,fr,Pn,ys,ni,k0,zn,Fn,x0,Es,$a,Sn,Bi,Zr,ar,vi,B0,Cs,Ws,Vs,Nn,Ca,On,v0,oi,yi,na,Zi,Ln,js,y0,li,lt,e,t,r,a,s,i,o,c,f,m,p,I,E,T,O,Z,AA,cA,hA,vA,QA,WA,KA,re,le,Me,ze,At,at,ft,Nt,Kt,er,pr,hr,yr,Er,zr,Wr,oa,Xr,la,va,As,ns,os,Us,Ei,Ms,Mi,Gi,Yn,E0,M0,Hn,f2,p2,uo,h2,m2,C2,b2,fo,I2,w2,po,k2,x2,ho,B2,v2,mo,y2,E2,M2,G2,Gs,ci,Xi,qi,D2,Q2,T2,Co,P2,z2,bo,F2,S2,ca,N2,O2,Io,L2,Rn,Y2,H2,R2,W2,W0,wo,V2,j2,G0,U2,ko,K2,xo,V0,Z2,X2,q2,I1,J2,_2,$2,Wn,Al,el,tl,rl,al,sl,il,j0,w1,nl,ol,ll,cl,D0,U0,Bo,vo,K0,gl,ul,Z0,yo,dl,X0,Eo,fl,pl,Mo,Go,q0,k1,hl,ml,Do,Cl,bl,Qo,Il,wl,To,x1,B1,Po,zo,kl,xl,Fo,Bl,vl,So,yl,El,No,Ml,Oo,Gl,Dl,Ql,Tl,Pl,zl,Fl,Lo,Sl,Nl,Yo,Ol,Ll,br,J0,v1,Yl,Ho,Hl,Rl,Wl,Vl,Ro,Wo,y1,Vo,jl,jo,E1,M1,Ul,Kl,Zl,Xl,ql,Jl,_l,$l,A1,e1,t1,Uo,G1,Ko,Zo,Xo,r1,a1,qo,D1,Q1,ac=TA(()=>{Ct=import.meta.url,$t=async function(n={}){function u(){return gt.buffer!=et.buffer&&ua(),et}function h(){return gt.buffer!=et.buffer&&ua(),yt}function w(){return gt.buffer!=et.buffer&&ua(),gr}function B(){return gt.buffer!=et.buffer&&ua(),ga}function v(){return gt.buffer!=et.buffer&&ua(),Ti}function y(){return gt.buffer!=et.buffer&&ua(),Xn}function F(){return gt.buffer!=et.buffer&&ua(),t2}function N(){return gt.buffer!=et.buffer&&ua(),so}var Y,tA,Q=Object.assign({},n),iA=new Promise((G,H)=>{Y=G,tA=H}),oA=typeof window=="object",dA=typeof importScripts=="function",fA=dA&&self.name=="em-pthread";Q.mountExternalData=(G,H)=>{G.startsWith("./")&&(G=G.substring(2)),(Q.Fb||(Q.Fb=new Map)).set(G,H)},Q.unmountExternalData=()=>{delete Q.Fb};var wA=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let MA=()=>{let G=(eA,lA,mA)=>(...jA)=>{let Ie=an,Be=lA?.();jA=eA(...jA);let it=lA?.();return Be!==it&&(eA=it,mA(Be),lA=mA=null),an!=Ie?new Promise((nt,Et)=>{Nc={resolve:nt,reject:Et}}):jA},H=eA=>async(...lA)=>{try{if(Q.Gb)throw Error("Session already started");let mA=Q.Gb={hc:lA[0],errors:[]},jA=await eA(...lA);if(Q.Gb!==mA)throw Error("Session mismatch");Q.Hb?.flush();let Ie=mA.errors;if(0<Ie.length){let Be=await Promise.all(Ie);if(Be=Be.filter(it=>it),0<Be.length)throw Error(Be.join(`
`))}return jA}finally{Q.Gb=null}};Q._OrtCreateSession=G(Q._OrtCreateSession,()=>Q._OrtCreateSession,eA=>Q._OrtCreateSession=eA),Q._OrtRun=H(G(Q._OrtRun,()=>Q._OrtRun,eA=>Q._OrtRun=eA)),Q._OrtRunWithBinding=H(G(Q._OrtRunWithBinding,()=>Q._OrtRunWithBinding,eA=>Q._OrtRunWithBinding=eA)),Q._OrtBindInput=G(Q._OrtBindInput,()=>Q._OrtBindInput,eA=>Q._OrtBindInput=eA),MA=void 0};Q.jsepInit=(G,H)=>{if(MA?.(),G==="webgpu"){[Q.Hb,Q.Vb,Q.Zb,Q.Ob,Q.Yb,Q.kb,Q.$b,Q.cc,Q.Wb,Q.Xb,Q.ac]=H;let eA=Q.Hb;Q.jsepRegisterBuffer=(lA,mA,jA,Ie)=>eA.registerBuffer(lA,mA,jA,Ie),Q.jsepGetBuffer=lA=>eA.getBuffer(lA),Q.jsepCreateDownloader=(lA,mA,jA)=>eA.createDownloader(lA,mA,jA),Q.jsepOnCreateSession=lA=>{eA.onCreateSession(lA)},Q.jsepOnReleaseSession=lA=>{eA.onReleaseSession(lA)},Q.jsepOnRunStart=lA=>eA.onRunStart(lA),Q.dc=(lA,mA)=>{eA.upload(lA,mA)}}else if(G==="webnn"){[Q.Hb,Q.bc,Q.Pb,Q.jsepEnsureTensor,Q.ec,Q.jsepDownloadTensor]=H,Q.jsepReleaseTensorId=Q.Pb;let eA=Q.Hb;Q.jsepOnRunStart=lA=>eA.onRunStart(lA),Q.jsepRegisterMLContext=(lA,mA)=>{eA.registerMLContext(lA,mA)},Q.jsepOnReleaseSession=lA=>{eA.onReleaseSession(lA)},Q.jsepCreateMLTensorDownloader=(lA,mA)=>eA.createMLTensorDownloader(lA,mA),Q.jsepRegisterMLTensor=(lA,mA,jA)=>eA.registerMLTensor(lA,mA,jA),Q.jsepCreateMLContext=lA=>eA.createMLContext(lA),Q.jsepRegisterMLConstant=(lA,mA,jA,Ie,Be)=>eA.registerMLConstant(lA,mA,jA,Ie,Be,Q.Fb)}};var DA,LA,ZA=Object.assign({},Q),JA=(G,H)=>{throw H},ne="";(oA||dA)&&(dA?ne=self.location.href:typeof document<"u"&&document.currentScript&&(ne=document.currentScript.src),Ct&&(ne=Ct),ne=ne.startsWith("blob:")?"":ne.substr(0,ne.replace(/[?#].*/,"").lastIndexOf("/")+1),dA&&(LA=G=>{var H=new XMLHttpRequest;return H.open("GET",G,!1),H.responseType="arraybuffer",H.send(null),new Uint8Array(H.response)}),DA=(G,H,eA)=>{var lA=new XMLHttpRequest;lA.open("GET",G,!0),lA.responseType="arraybuffer",lA.onload=()=>{lA.status==200||lA.status==0&&lA.response?H(lA.response):eA()},lA.onerror=eA,lA.send(null)});var Le,st=console.log.bind(console),ht=console.error.bind(console),pt=st,mt=ht;if(Object.assign(Q,ZA),ZA=null,fA){let G=function(H){try{var eA=H.data,lA=eA.cmd;if(lA==="load"){let mA=[];self.onmessage=jA=>mA.push(jA),self.startWorker=()=>{postMessage({cmd:"loaded"});for(let jA of mA)G(jA);self.onmessage=G};for(let jA of eA.handlers)Q[jA]&&!Q[jA].proxy||(Q[jA]=(...Ie)=>{postMessage({Nb:"callHandler",pc:jA,args:Ie})},jA=="print"&&(pt=Q[jA]),jA=="printErr"&&(mt=Q[jA]));gt=eA.wasmMemory,ua(),vt(eA.wasmModule)}else if(lA==="run"){Hc(eA.pthread_ptr,0,0,1,0,0),Fc(eA.pthread_ptr),pf(),Mg(),tt||(vu(),tt=!0);try{hf(eA.start_routine,eA.arg)}catch(mA){if(mA!="unwind")throw mA}}else lA==="cancel"?s2()&&J1(-1):eA.target!=="setimmediate"&&(lA==="checkMailbox"?tt&&H1():lA&&(mt(`worker: received unknown command ${lA}`),mt(eA)))}catch(mA){throw yu(),mA}};var vt,tt=!1;mt=function(...H){H=H.join(" "),console.error(H)},self.alert=function(...H){postMessage({Nb:"alert",text:H.join(" "),rc:s2()})},Q.instantiateWasm=(H,eA)=>new Promise(lA=>{vt=mA=>{mA=new WebAssembly.Instance(mA,xg()),eA(mA),lA()}}),self.onunhandledrejection=H=>{throw H.reason||H},self.onmessage=G}Q.wasmBinary&&(Le=Q.wasmBinary);var gt,we,Ue,et,yt,gr,ga,Ti,Xn,t2,Oa,en,so,Fr=!1;function ua(){var G=gt.buffer;Q.HEAP8=et=new Int8Array(G),Q.HEAP16=gr=new Int16Array(G),Q.HEAPU8=yt=new Uint8Array(G),Q.HEAPU16=ga=new Uint16Array(G),Q.HEAP32=Ti=new Int32Array(G),Q.HEAPU32=Xn=new Uint32Array(G),Q.HEAPF32=t2=new Float32Array(G),Q.HEAPF64=so=new Float64Array(G),Q.HEAP64=Oa=new BigInt64Array(G),Q.HEAPU64=en=new BigUint64Array(G)}if(!fA){if(!((gt=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof wA))throw mt("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");ua()}var F0=[],u1=[],kc=[],d1=0,f1=null;function Cg(){if(--d1==0&&f1){var G=f1;f1=null,G()}}function S0(G){throw mt(G="Aborted("+G+")"),Fr=!0,Ue=1,G=new WebAssembly.RuntimeError(G+". Build with -sASSERTIONS for more info."),tA(G),G}var xc,bg=G=>G.startsWith("data:application/octet-stream;base64,"),Ig=G=>G.startsWith("file://");function wg(G){if(G==xc&&Le)return new Uint8Array(Le);if(LA)return LA(G);throw"both async and sync fetching of the wasm failed"}function kg(G,H,eA){return function(lA){if(!Le&&(oA||dA)){if(typeof fetch=="function"&&!Ig(lA))return fetch(lA,{credentials:"same-origin"}).then(mA=>{if(!mA.ok)throw`failed to load wasm binary file at '${lA}'`;return mA.arrayBuffer()}).catch(()=>wg(lA));if(DA)return new Promise((mA,jA)=>{DA(lA,Ie=>mA(new Uint8Array(Ie)),jA)})}return Promise.resolve().then(()=>wg(lA))}(G).then(lA=>WebAssembly.instantiate(lA,H)).then(eA,lA=>{mt(`failed to asynchronously prepare wasm: ${lA}`),S0(lA)})}function xg(){return{a:{O:ff,Aa:df,b:Cf,aa:Tg,B:Fg,qa:Sg,Y:Og,_:Lg,ra:Yg,oa:Hg,ha:Rg,na:Wg,L:Vg,Z:jg,W:Ug,pa:Kg,X:Zg,va:bf,F:If,Q:wf,P:xf,E:vf,u:yf,q:Ef,G:Mf,A:Ff,R:Sf,ua:Nf,ka:Of,U:Lf,ba:Yf,H:Hf,ja:Fc,ta:Rf,t:Wf,Ba:Vf,x:Kf,n:Zf,l:qf,c:Pc,o:Jf,j:Ap,w:ep,p:tp,f:rp,s:ap,m:sp,e:ip,k:np,i:op,h:lp,d:cp,ea:gp,fa:up,ga:dp,ca:ou,da:lu,T:fp,g:pp,D:hp,I:mp,M:Cp,y:bp,sa:Ip,V:wp,v:gu,z:kp,N:xp,S:Bp,za:vp,ya:yp,la:fu,ma:pu,$:Mc,C:hu,K:mu,ia:Cu,J:bu,a:gt,xa:Ec,wa:ku,r:Gp}}}var Bc={913700:(G,H,eA,lA,mA)=>{if(Q===void 0||!Q.Fb)return 1;if((G=ya(Number(G>>>0))).startsWith("./")&&(G=G.substring(2)),!(G=Q.Fb.get(G)))return 2;if(H=Number(H>>>0),eA=Number(eA>>>0),lA=Number(lA>>>0),H+eA>G.byteLength)return 3;try{let jA=G.subarray(H,H+eA);switch(mA){case 0:h().set(jA,lA>>>0);break;case 1:Q.dc(lA,jA);break;default:return 4}return 0}catch{return 4}},914415:(G,H,eA)=>{Q.ec(G,h().subarray(H>>>0,H+eA>>>0))},914478:()=>Q.bc(),914519:G=>{Q.Pb(G)},914555:()=>{Q.Wb()},914586:()=>{Q.Xb()},914615:()=>{Q.ac()},914640:G=>Q.Vb(G),914673:G=>Q.Zb(G),914705:(G,H,eA)=>{Q.Ob(Number(G),Number(H),Number(eA),!0)},914768:(G,H,eA)=>{Q.Ob(Number(G),Number(H),Number(eA))},914825:()=>typeof wasmOffsetConverter<"u",914882:G=>{Q.kb("Abs",G,void 0)},914933:G=>{Q.kb("Neg",G,void 0)},914984:G=>{Q.kb("Floor",G,void 0)},915037:G=>{Q.kb("Ceil",G,void 0)},915089:G=>{Q.kb("Reciprocal",G,void 0)},915147:G=>{Q.kb("Sqrt",G,void 0)},915199:G=>{Q.kb("Exp",G,void 0)},915250:G=>{Q.kb("Erf",G,void 0)},915301:G=>{Q.kb("Sigmoid",G,void 0)},915356:(G,H,eA)=>{Q.kb("HardSigmoid",G,{alpha:H,beta:eA})},915435:G=>{Q.kb("Log",G,void 0)},915486:G=>{Q.kb("Sin",G,void 0)},915537:G=>{Q.kb("Cos",G,void 0)},915588:G=>{Q.kb("Tan",G,void 0)},915639:G=>{Q.kb("Asin",G,void 0)},915691:G=>{Q.kb("Acos",G,void 0)},915743:G=>{Q.kb("Atan",G,void 0)},915795:G=>{Q.kb("Sinh",G,void 0)},915847:G=>{Q.kb("Cosh",G,void 0)},915899:G=>{Q.kb("Asinh",G,void 0)},915952:G=>{Q.kb("Acosh",G,void 0)},916005:G=>{Q.kb("Atanh",G,void 0)},916058:G=>{Q.kb("Tanh",G,void 0)},916110:G=>{Q.kb("Not",G,void 0)},916161:(G,H,eA)=>{Q.kb("Clip",G,{min:H,max:eA})},916230:G=>{Q.kb("Clip",G,void 0)},916282:(G,H)=>{Q.kb("Elu",G,{alpha:H})},916340:G=>{Q.kb("Gelu",G,void 0)},916392:G=>{Q.kb("Relu",G,void 0)},916444:(G,H)=>{Q.kb("LeakyRelu",G,{alpha:H})},916508:(G,H)=>{Q.kb("ThresholdedRelu",G,{alpha:H})},916578:(G,H)=>{Q.kb("Cast",G,{to:H})},916636:G=>{Q.kb("Add",G,void 0)},916687:G=>{Q.kb("Sub",G,void 0)},916738:G=>{Q.kb("Mul",G,void 0)},916789:G=>{Q.kb("Div",G,void 0)},916840:G=>{Q.kb("Pow",G,void 0)},916891:G=>{Q.kb("Equal",G,void 0)},916944:G=>{Q.kb("Greater",G,void 0)},916999:G=>{Q.kb("GreaterOrEqual",G,void 0)},917061:G=>{Q.kb("Less",G,void 0)},917113:G=>{Q.kb("LessOrEqual",G,void 0)},917172:(G,H,eA,lA,mA)=>{Q.kb("ReduceMean",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},917347:(G,H,eA,lA,mA)=>{Q.kb("ReduceMax",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},917521:(G,H,eA,lA,mA)=>{Q.kb("ReduceMin",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},917695:(G,H,eA,lA,mA)=>{Q.kb("ReduceProd",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},917870:(G,H,eA,lA,mA)=>{Q.kb("ReduceSum",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},918044:(G,H,eA,lA,mA)=>{Q.kb("ReduceL1",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},918217:(G,H,eA,lA,mA)=>{Q.kb("ReduceL2",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},918390:(G,H,eA,lA,mA)=>{Q.kb("ReduceLogSum",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},918567:(G,H,eA,lA,mA)=>{Q.kb("ReduceSumSquare",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},918747:(G,H,eA,lA,mA)=>{Q.kb("ReduceLogSumExp",G,{keepDims:!!H,noopWithEmptyAxes:!!eA,axes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},918927:G=>{Q.kb("Where",G,void 0)},918980:(G,H,eA)=>{Q.kb("Transpose",G,{perm:H?Array.from(v().subarray(Number(H)>>>0,Number(eA)>>>0)):[]})},919104:(G,H,eA,lA)=>{Q.kb("DepthToSpace",G,{blocksize:H,mode:ya(eA),format:lA?"NHWC":"NCHW"})},919237:(G,H,eA,lA)=>{Q.kb("DepthToSpace",G,{blocksize:H,mode:ya(eA),format:lA?"NHWC":"NCHW"})},919370:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et,nr,wr,pe,lr)=>{Q.kb("ConvTranspose",G,{format:it?"NHWC":"NCHW",autoPad:H,dilations:[eA],group:lA,kernelShape:[mA],pads:[jA,Ie],strides:[Be],wIsConst:()=>!!u()[nt>>>0],outputPadding:Et?Array.from(v().subarray(Number(Et)>>>0,Number(nr)>>>0)):[],outputShape:wr?Array.from(v().subarray(Number(wr)>>>0,Number(pe)>>>0)):[],activation:ya(lr)})},919803:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et,nr,wr,pe)=>{Q.kb("ConvTranspose",G,{format:Be?"NHWC":"NCHW",autoPad:H,dilations:Array.from(v().subarray(Number(eA)>>>0,2+(Number(eA)>>>0)>>>0)),group:lA,kernelShape:Array.from(v().subarray(Number(mA)>>>0,2+(Number(mA)>>>0)>>>0)),pads:Array.from(v().subarray(Number(jA)>>>0,4+(Number(jA)>>>0)>>>0)),strides:Array.from(v().subarray(Number(Ie)>>>0,2+(Number(Ie)>>>0)>>>0)),wIsConst:()=>!!u()[it>>>0],outputPadding:nt?Array.from(v().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],outputShape:nr?Array.from(v().subarray(Number(nr)>>>0,Number(wr)>>>0)):[],activation:ya(pe)})},920464:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et,nr,wr,pe,lr)=>{Q.kb("ConvTranspose",G,{format:it?"NHWC":"NCHW",autoPad:H,dilations:[eA],group:lA,kernelShape:[mA],pads:[jA,Ie],strides:[Be],wIsConst:()=>!!u()[nt>>>0],outputPadding:Et?Array.from(v().subarray(Number(Et)>>>0,Number(nr)>>>0)):[],outputShape:wr?Array.from(v().subarray(Number(wr)>>>0,Number(pe)>>>0)):[],activation:ya(lr)})},920897:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et,nr,wr,pe)=>{Q.kb("ConvTranspose",G,{format:Be?"NHWC":"NCHW",autoPad:H,dilations:Array.from(v().subarray(Number(eA)>>>0,2+(Number(eA)>>>0)>>>0)),group:lA,kernelShape:Array.from(v().subarray(Number(mA)>>>0,2+(Number(mA)>>>0)>>>0)),pads:Array.from(v().subarray(Number(jA)>>>0,4+(Number(jA)>>>0)>>>0)),strides:Array.from(v().subarray(Number(Ie)>>>0,2+(Number(Ie)>>>0)>>>0)),wIsConst:()=>!!u()[it>>>0],outputPadding:nt?Array.from(v().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],outputShape:nr?Array.from(v().subarray(Number(nr)>>>0,Number(wr)>>>0)):[],activation:ya(pe)})},921558:(G,H)=>{Q.kb("GlobalAveragePool",G,{format:H?"NHWC":"NCHW"})},921649:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et,nr,wr,pe)=>{Q.kb("AveragePool",G,{format:pe?"NHWC":"NCHW",auto_pad:H,ceil_mode:eA,count_include_pad:lA,storage_order:mA,dilations:jA?Array.from(v().subarray(Number(jA)>>>0,Number(Ie)>>>0)):[],kernel_shape:Be?Array.from(v().subarray(Number(Be)>>>0,Number(it)>>>0)):[],pads:nt?Array.from(v().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],strides:nr?Array.from(v().subarray(Number(nr)>>>0,Number(wr)>>>0)):[]})},922128:(G,H)=>{Q.kb("GlobalAveragePool",G,{format:H?"NHWC":"NCHW"})},922219:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et,nr,wr,pe)=>{Q.kb("AveragePool",G,{format:pe?"NHWC":"NCHW",auto_pad:H,ceil_mode:eA,count_include_pad:lA,storage_order:mA,dilations:jA?Array.from(v().subarray(Number(jA)>>>0,Number(Ie)>>>0)):[],kernel_shape:Be?Array.from(v().subarray(Number(Be)>>>0,Number(it)>>>0)):[],pads:nt?Array.from(v().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],strides:nr?Array.from(v().subarray(Number(nr)>>>0,Number(wr)>>>0)):[]})},922698:(G,H)=>{Q.kb("GlobalMaxPool",G,{format:H?"NHWC":"NCHW"})},922785:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et,nr,wr,pe)=>{Q.kb("MaxPool",G,{format:pe?"NHWC":"NCHW",auto_pad:H,ceil_mode:eA,count_include_pad:lA,storage_order:mA,dilations:jA?Array.from(v().subarray(Number(jA)>>>0,Number(Ie)>>>0)):[],kernel_shape:Be?Array.from(v().subarray(Number(Be)>>>0,Number(it)>>>0)):[],pads:nt?Array.from(v().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],strides:nr?Array.from(v().subarray(Number(nr)>>>0,Number(wr)>>>0)):[]})},923260:(G,H)=>{Q.kb("GlobalMaxPool",G,{format:H?"NHWC":"NCHW"})},923347:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et,nr,wr,pe)=>{Q.kb("MaxPool",G,{format:pe?"NHWC":"NCHW",auto_pad:H,ceil_mode:eA,count_include_pad:lA,storage_order:mA,dilations:jA?Array.from(v().subarray(Number(jA)>>>0,Number(Ie)>>>0)):[],kernel_shape:Be?Array.from(v().subarray(Number(Be)>>>0,Number(it)>>>0)):[],pads:nt?Array.from(v().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],strides:nr?Array.from(v().subarray(Number(nr)>>>0,Number(wr)>>>0)):[]})},923822:(G,H,eA,lA,mA)=>{Q.kb("Gemm",G,{alpha:H,beta:eA,transA:lA,transB:mA})},923926:G=>{Q.kb("MatMul",G,void 0)},923980:(G,H,eA,lA)=>{Q.kb("ArgMax",G,{keepDims:!!H,selectLastIndex:!!eA,axis:lA})},924088:(G,H,eA,lA)=>{Q.kb("ArgMin",G,{keepDims:!!H,selectLastIndex:!!eA,axis:lA})},924196:(G,H)=>{Q.kb("Softmax",G,{axis:H})},924259:(G,H)=>{Q.kb("Concat",G,{axis:H})},924319:(G,H,eA,lA,mA)=>{Q.kb("Split",G,{axis:H,numOutputs:eA,splitSizes:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},924475:G=>{Q.kb("Expand",G,void 0)},924529:(G,H)=>{Q.kb("Gather",G,{axis:Number(H)})},924600:(G,H)=>{Q.kb("GatherElements",G,{axis:Number(H)})},924679:(G,H)=>{Q.kb("GatherND",G,{batch_dims:Number(H)})},924758:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et)=>{Q.kb("Resize",G,{antialias:H,axes:eA?Array.from(v().subarray(Number(eA)>>>0,Number(lA)>>>0)):[],coordinateTransformMode:ya(mA),cubicCoeffA:jA,excludeOutside:Ie,extrapolationValue:Be,keepAspectRatioPolicy:ya(it),mode:ya(nt),nearestMode:ya(Et)})},925120:(G,H,eA,lA,mA,jA,Ie)=>{Q.kb("Slice",G,{starts:H?Array.from(v().subarray(Number(H)>>>0,Number(eA)>>>0)):[],ends:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[],axes:jA?Array.from(v().subarray(Number(jA)>>>0,Number(Ie)>>>0)):[]})},925384:G=>{Q.kb("Tile",G,void 0)},925436:(G,H,eA)=>{Q.kb("InstanceNormalization",G,{epsilon:H,format:eA?"NHWC":"NCHW"})},925550:(G,H,eA)=>{Q.kb("InstanceNormalization",G,{epsilon:H,format:eA?"NHWC":"NCHW"})},925664:G=>{Q.kb("Range",G,void 0)},925717:(G,H)=>{Q.kb("Einsum",G,{equation:ya(H)})},925798:(G,H,eA,lA,mA)=>{Q.kb("Pad",G,{mode:H,value:eA,pads:lA?Array.from(v().subarray(Number(lA)>>>0,Number(mA)>>>0)):[]})},925941:(G,H,eA,lA,mA,jA)=>{Q.kb("BatchNormalization",G,{epsilon:H,momentum:eA,spatial:!!mA,trainingMode:!!lA,format:jA?"NHWC":"NCHW"})},926110:(G,H,eA,lA,mA,jA)=>{Q.kb("BatchNormalization",G,{epsilon:H,momentum:eA,spatial:!!mA,trainingMode:!!lA,format:jA?"NHWC":"NCHW"})},926279:(G,H,eA)=>{Q.kb("CumSum",G,{exclusive:Number(H),reverse:Number(eA)})},926376:(G,H,eA)=>{Q.kb("DequantizeLinear",G,{axis:H,blockSize:eA})},926466:(G,H,eA,lA,mA)=>{Q.kb("GridSample",G,{align_corners:H,mode:ya(eA),padding_mode:ya(lA),format:mA?"NHWC":"NCHW"})},926636:(G,H,eA,lA,mA)=>{Q.kb("GridSample",G,{align_corners:H,mode:ya(eA),padding_mode:ya(lA),format:mA?"NHWC":"NCHW"})},926806:(G,H,eA,lA,mA,jA,Ie,Be,it)=>{Q.kb("Attention",G,{numHeads:H,isUnidirectional:eA,maskFilterValue:lA,scale:mA,doRotary:jA,qkvHiddenSizes:Ie?Array.from(v().subarray(Number(Be)>>>0,Number(Be)+Ie>>>0)):[],pastPresentShareBuffer:!!it})},927078:G=>{Q.kb("BiasAdd",G,void 0)},927133:G=>{Q.kb("BiasSplitGelu",G,void 0)},927194:G=>{Q.kb("FastGelu",G,void 0)},927250:(G,H,eA,lA,mA,jA,Ie,Be,it,nt,Et,nr,wr,pe,lr,Ia)=>{Q.kb("Conv",G,{format:nr?"NHWC":"NCHW",auto_pad:H,dilations:eA?Array.from(v().subarray(Number(eA)>>>0,Number(lA)>>>0)):[],group:mA,kernel_shape:jA?Array.from(v().subarray(Number(jA)>>>0,Number(Ie)>>>0)):[],pads:Be?Array.from(v().subarray(Number(Be)>>>0,Number(it)>>>0)):[],strides:nt?Array.from(v().subarray(Number(nt)>>>0,Number(Et)>>>0)):[],w_is_const:()=>!!u()[Number(wr)>>>0],activation:ya(pe),activation_params:lr?Array.from(F().subarray(Number(lr)>>>0,Number(Ia)>>>0)):[]})},927834:G=>{Q.kb("Gelu",G,void 0)},927886:(G,H,eA,lA,mA,jA,Ie,Be,it)=>{Q.kb("GroupQueryAttention",G,{numHeads:H,kvNumHeads:eA,scale:lA,softcap:mA,doRotary:jA,rotaryInterleaved:Ie,smoothSoftmax:Be,localWindowSize:it})},928103:(G,H,eA,lA)=>{Q.kb("LayerNormalization",G,{axis:H,epsilon:eA,simplified:!!lA})},928214:(G,H,eA,lA)=>{Q.kb("LayerNormalization",G,{axis:H,epsilon:eA,simplified:!!lA})},928325:(G,H,eA,lA,mA,jA)=>{Q.kb("MatMulNBits",G,{k:H,n:eA,accuracyLevel:lA,bits:mA,blockSize:jA})},928452:(G,H,eA,lA,mA,jA)=>{Q.kb("MultiHeadAttention",G,{numHeads:H,isUnidirectional:eA,maskFilterValue:lA,scale:mA,doRotary:jA})},928611:(G,H)=>{Q.kb("QuickGelu",G,{alpha:H})},928675:(G,H,eA,lA,mA)=>{Q.kb("RotaryEmbedding",G,{interleaved:!!H,numHeads:eA,rotaryEmbeddingDim:lA,scale:mA})},928814:(G,H,eA)=>{Q.kb("SkipLayerNormalization",G,{epsilon:H,simplified:!!eA})},928916:(G,H,eA)=>{Q.kb("SkipLayerNormalization",G,{epsilon:H,simplified:!!eA})},929018:(G,H,eA,lA)=>{Q.kb("GatherBlockQuantized",G,{gatherAxis:H,quantizeAxis:eA,blockSize:lA})},929139:G=>{Q.$b(G)},929173:(G,H)=>Q.cc(Number(G),Number(H),Q.Gb.hc,Q.Gb.errors)};function df(G,H,eA){return ru(async()=>{await Q.Yb(Number(G),Number(H),Number(eA))})}function ff(){return typeof wasmOffsetConverter<"u"}function vc(G){this.name="ExitStatus",this.message=`Program terminated with exit(${G})`,this.status=G}var yc=G=>{G.terminate(),G.onmessage=()=>{}},Bg=G=>{N0.length==0&&(Dg(),Gg(N0[0]));var H=N0.pop();if(!H)return 6;no.push(H),tn[G.Bb]=H,H.Bb=G.Bb;var eA={cmd:"run",start_routine:G.ic,arg:G.Rb,pthread_ptr:G.Bb};return H.postMessage(eA,G.nc),0},io=0,da=(G,H,...eA)=>{for(var lA=2*eA.length,mA=Vc(),jA=Wc(8*lA),Ie=jA>>>3,Be=0;Be<eA.length;Be++){var it=eA[Be];typeof it=="bigint"?(Oa[Ie+2*Be]=1n,Oa[Ie+2*Be+1]=it):(Oa[Ie+2*Be]=0n,N()[Ie+2*Be+1>>>0]=it)}return G=Eu(G,0,lA,jA,H),_1(mA),G};function Ec(G){if(fA)return da(0,1,G);if(Ue=G,!(0<io)){for(var H of no)yc(H);for(H of N0)yc(H);N0=[],no=[],tn=[],Fr=!0}JA(0,new vc(G))}function vg(G){if(fA)return da(1,0,G);Mc(G)}var Mc=G=>{if(Ue=G,fA)throw vg(G),"unwind";Ec(G)},N0=[],no=[],yg=[],tn={},Eg=G=>{var H=G.Bb;delete tn[H],N0.push(G),no.splice(no.indexOf(G),1),G.Bb=0,Rc(H)};function Mg(){yg.forEach(G=>G())}var Gg=G=>new Promise(H=>{G.onmessage=mA=>{var jA=(mA=mA.data).cmd;if(mA.targetThread&&mA.targetThread!=s2()){var Ie=tn[mA.targetThread];Ie?Ie.postMessage(mA,mA.transferList):mt(`Internal error! Worker sent a message "${jA}" to target pthread ${mA.targetThread}, but that thread no longer exists!`)}else jA==="checkMailbox"?H1():jA==="spawnThread"?Bg(mA):jA==="cleanupThread"?Eg(tn[mA.thread]):jA==="killThread"?(mA=mA.thread,jA=tn[mA],delete tn[mA],yc(jA),Rc(mA),no.splice(no.indexOf(jA),1),jA.Bb=0):jA==="cancelThread"?tn[mA.thread].postMessage({cmd:"cancel"}):jA==="loaded"?(G.loaded=!0,H(G)):jA==="alert"?alert(`Thread ${mA.threadId}: ${mA.text}`):mA.target==="setimmediate"?G.postMessage(mA):jA==="callHandler"?Q[mA.handler](...mA.args):jA&&mt(`worker sent an unknown command ${jA}`)},G.onerror=mA=>{throw mt(`worker sent an error! ${mA.filename}:${mA.lineno}: ${mA.message}`),mA};var eA,lA=[];for(eA of[])Q.hasOwnProperty(eA)&&lA.push(eA);G.postMessage({cmd:"load",handlers:lA,wasmMemory:gt,wasmModule:we})});function Dg(){var G=new Worker(import.meta.url.startsWith("file:")?new URL(d("./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?46eb"),d.b):new URL(import.meta.url),{type:"module",workerData:"em-pthread",name:"em-pthread"});N0.push(G)}var Y1=G=>{for(;0<G.length;)G.shift()(Q)},pf=()=>{var G=s2(),H=y()[G+52>>>2>>>0];G=y()[G+56>>>2>>>0],Gu(H,H-G),_1(H)},hf=(G,H)=>{io=0,G=Du(G,H),0<io?Ue=G:J1(G)};class mf{constructor(H){this.Kb=H-24}}function Cf(G,H,eA){var lA=new mf(G>>>=0);throw H>>>=0,eA>>>=0,y()[lA.Kb+16>>>2>>>0]=0,y()[lA.Kb+4>>>2>>>0]=H,y()[lA.Kb+8>>>2>>>0]=eA,G}function Qg(G,H,eA,lA){return fA?da(2,1,G,H,eA,lA):Tg(G,H,eA,lA)}function Tg(G,H,eA,lA){if(G>>>=0,H>>>=0,eA>>>=0,lA>>>=0,wA===void 0)return mt("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var mA=[];return fA&&mA.length===0?Qg(G,H,eA,lA):(G={ic:eA,Bb:G,Rb:lA,nc:mA},fA?(G.Nb="spawnThread",postMessage(G,mA),0):Bg(G))}var Pg=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,zg=(G,H,eA)=>{var lA=(H>>>=0)+eA;for(eA=H;G[eA]&&!(eA>=lA);)++eA;if(16<eA-H&&G.buffer&&Pg)return Pg.decode(G.buffer instanceof wA?G.slice(H,eA):G.subarray(H,eA));for(lA="";H<eA;){var mA=G[H++];if(128&mA){var jA=63&G[H++];if((224&mA)==192)lA+=String.fromCharCode((31&mA)<<6|jA);else{var Ie=63&G[H++];65536>(mA=(240&mA)==224?(15&mA)<<12|jA<<6|Ie:(7&mA)<<18|jA<<12|Ie<<6|63&G[H++])?lA+=String.fromCharCode(mA):(mA-=65536,lA+=String.fromCharCode(55296|mA>>10,56320|1023&mA))}}else lA+=String.fromCharCode(mA)}return lA},ya=(G,H)=>(G>>>=0)?zg(h(),G,H):"";function Fg(G,H,eA){return fA?da(3,1,G,H,eA):0}function Sg(G,H){if(fA)return da(4,1,G,H)}var Gc=G=>{for(var H=0,eA=0;eA<G.length;++eA){var lA=G.charCodeAt(eA);127>=lA?H++:2047>=lA?H+=2:55296<=lA&&57343>=lA?(H+=4,++eA):H+=3}return H},Ng=(G,H,eA,lA)=>{if(!(0<lA))return 0;var mA=eA>>>=0;lA=eA+lA-1;for(var jA=0;jA<G.length;++jA){var Ie=G.charCodeAt(jA);if(55296<=Ie&&57343>=Ie&&(Ie=65536+((1023&Ie)<<10)|1023&G.charCodeAt(++jA)),127>=Ie){if(eA>=lA)break;H[eA++>>>0]=Ie}else{if(2047>=Ie){if(eA+1>=lA)break;H[eA++>>>0]=192|Ie>>6}else{if(65535>=Ie){if(eA+2>=lA)break;H[eA++>>>0]=224|Ie>>12}else{if(eA+3>=lA)break;H[eA++>>>0]=240|Ie>>18,H[eA++>>>0]=128|Ie>>12&63}H[eA++>>>0]=128|Ie>>6&63}H[eA++>>>0]=128|63&Ie}}return H[eA>>>0]=0,eA-mA},r2=(G,H,eA)=>Ng(G,h(),H,eA);function Og(G,H){if(fA)return da(5,1,G,H)}function Lg(G,H,eA){if(fA)return da(6,1,G,H,eA)}function Yg(G,H,eA){return fA?da(7,1,G,H,eA):0}function Hg(G,H){if(fA)return da(8,1,G,H)}function Rg(G,H,eA){if(fA)return da(9,1,G,H,eA)}function Wg(G,H,eA,lA){if(fA)return da(10,1,G,H,eA,lA)}function Vg(G,H,eA,lA){if(fA)return da(11,1,G,H,eA,lA)}function jg(G,H,eA,lA){if(fA)return da(12,1,G,H,eA,lA)}function Ug(G){if(fA)return da(13,1,G)}function Kg(G,H){if(fA)return da(14,1,G,H)}function Zg(G,H,eA){if(fA)return da(15,1,G,H,eA)}var Xg,O0,bf=()=>{S0("")},rn=G=>{for(var H="";h()[G>>>0];)H+=Xg[h()[G++>>>0]];return H},Dc={},Qc={};function qn(G,H,eA={}){if(!("argPackAdvance"in H))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(lA,mA,jA={}){var Ie=mA.name;if(!lA)throw new O0(`type "${Ie}" must have a positive integer typeid pointer`);if(Qc.hasOwnProperty(lA)){if(jA.Tb)return;throw new O0(`Cannot register type '${Ie}' twice`)}Qc[lA]=mA,Dc.hasOwnProperty(lA)&&(mA=Dc[lA],delete Dc[lA],mA.forEach(Be=>Be()))}(G,H,eA)}var qg=(G,H,eA)=>{switch(H){case 1:return eA?lA=>u()[lA>>>0]:lA=>h()[lA>>>0];case 2:return eA?lA=>w()[lA>>>1>>>0]:lA=>B()[lA>>>1>>>0];case 4:return eA?lA=>v()[lA>>>2>>>0]:lA=>y()[lA>>>2>>>0];case 8:return eA?lA=>Oa[lA>>>3]:lA=>en[lA>>>3];default:throw new TypeError(`invalid integer width (${H}): ${G}`)}};function If(G,H,eA){eA>>>=0,qn(G>>>=0,{name:H=rn(H>>>0),fromWireType:lA=>lA,toWireType:function(lA,mA){if(typeof mA!="bigint"&&typeof mA!="number")throw mA=mA===null?"null":(lA=typeof mA)=="object"||lA==="array"||lA==="function"?mA.toString():""+mA,new TypeError(`Cannot convert "${mA}" to ${this.name}`);return typeof mA=="number"&&(mA=BigInt(mA)),mA},argPackAdvance:L0,readValueFromPointer:qg(H,eA,H.indexOf("u")==-1),Eb:null})}var L0=8;function wf(G,H,eA,lA){qn(G>>>=0,{name:H=rn(H>>>0),fromWireType:function(mA){return!!mA},toWireType:function(mA,jA){return jA?eA:lA},argPackAdvance:L0,readValueFromPointer:function(mA){return this.fromWireType(h()[mA>>>0])},Eb:null})}var Tc=[],Jn=[];function Pc(G){9<(G>>>=0)&&--Jn[G+1]==0&&(Jn[G]=void 0,Tc.push(G))}var Xs=G=>{if(!G)throw new O0("Cannot use deleted val. handle = "+G);return Jn[G]},ui=G=>{switch(G){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let H=Tc.pop()||Jn.length;return Jn[H]=G,Jn[H+1]=1,H}};function zc(G){return this.fromWireType(y()[G>>>2>>>0])}var kf={name:"emscripten::val",fromWireType:G=>{var H=Xs(G);return Pc(G),H},toWireType:(G,H)=>ui(H),argPackAdvance:L0,readValueFromPointer:zc,Eb:null};function xf(G){return qn(G>>>0,kf)}var Bf=(G,H)=>{switch(H){case 4:return function(eA){return this.fromWireType(F()[eA>>>2>>>0])};case 8:return function(eA){return this.fromWireType(N()[eA>>>3>>>0])};default:throw new TypeError(`invalid float width (${H}): ${G}`)}};function vf(G,H,eA){eA>>>=0,qn(G>>>=0,{name:H=rn(H>>>0),fromWireType:lA=>lA,toWireType:(lA,mA)=>mA,argPackAdvance:L0,readValueFromPointer:Bf(H,eA),Eb:null})}function yf(G,H,eA,lA,mA){if(G>>>=0,eA>>>=0,H=rn(H>>>0),mA===-1&&(mA=4294967295),mA=Be=>Be,lA===0){var jA=32-8*eA;mA=Be=>Be<<jA>>>jA}var Ie=H.includes("unsigned")?function(Be,it){return it>>>0}:function(Be,it){return it};qn(G,{name:H,fromWireType:mA,toWireType:Ie,argPackAdvance:L0,readValueFromPointer:qg(H,eA,lA!==0),Eb:null})}function Ef(G,H,eA){function lA(jA){var Ie=y()[jA>>>2>>>0];return jA=y()[jA+4>>>2>>>0],new mA(u().buffer,jA,Ie)}var mA=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][H];qn(G>>>=0,{name:eA=rn(eA>>>0),fromWireType:lA,argPackAdvance:L0,readValueFromPointer:lA},{Tb:!0})}function Mf(G,H){G>>>=0;var eA=(H=rn(H>>>0))==="std::string";qn(G,{name:H,fromWireType:function(lA){var mA=y()[lA>>>2>>>0],jA=lA+4;if(eA)for(var Ie=jA,Be=0;Be<=mA;++Be){var it=jA+Be;if(Be==mA||h()[it>>>0]==0){if(Ie=ya(Ie,it-Ie),nt===void 0)var nt=Ie;else nt+="\0",nt+=Ie;Ie=it+1}}else{for(nt=Array(mA),Be=0;Be<mA;++Be)nt[Be]=String.fromCharCode(h()[jA+Be>>>0]);nt=nt.join("")}return sn(lA),nt},toWireType:function(lA,mA){mA instanceof ArrayBuffer&&(mA=new Uint8Array(mA));var jA=typeof mA=="string";if(!(jA||mA instanceof Uint8Array||mA instanceof Uint8ClampedArray||mA instanceof Int8Array))throw new O0("Cannot pass non-string to std::string");var Ie=eA&&jA?Gc(mA):mA.length,Be=q1(4+Ie+1),it=Be+4;if(y()[Be>>>2>>>0]=Ie,eA&&jA)r2(mA,it,Ie+1);else if(jA)for(jA=0;jA<Ie;++jA){var nt=mA.charCodeAt(jA);if(255<nt)throw sn(it),new O0("String has UTF-16 code units that do not fit in 8 bits");h()[it+jA>>>0]=nt}else for(jA=0;jA<Ie;++jA)h()[it+jA>>>0]=mA[jA];return lA!==null&&lA.push(sn,Be),Be},argPackAdvance:L0,readValueFromPointer:zc,Eb(lA){sn(lA)}})}var Jg=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Gf=(G,H)=>{for(var eA=G>>1,lA=eA+H/2;!(eA>=lA)&&B()[eA>>>0];)++eA;if(32<(eA<<=1)-G&&Jg)return Jg.decode(h().slice(G,eA));for(eA="",lA=0;!(lA>=H/2);++lA){var mA=w()[G+2*lA>>>1>>>0];if(mA==0)break;eA+=String.fromCharCode(mA)}return eA},Df=(G,H,eA)=>{if(eA??=2147483647,2>eA)return 0;var lA=H;eA=(eA-=2)<2*G.length?eA/2:G.length;for(var mA=0;mA<eA;++mA){var jA=G.charCodeAt(mA);w()[H>>>1>>>0]=jA,H+=2}return w()[H>>>1>>>0]=0,H-lA},Qf=G=>2*G.length,Tf=(G,H)=>{for(var eA=0,lA="";!(eA>=H/4);){var mA=v()[G+4*eA>>>2>>>0];if(mA==0)break;++eA,65536<=mA?(mA-=65536,lA+=String.fromCharCode(55296|mA>>10,56320|1023&mA)):lA+=String.fromCharCode(mA)}return lA},Pf=(G,H,eA)=>{if(H>>>=0,eA??=2147483647,4>eA)return 0;var lA=H;eA=lA+eA-4;for(var mA=0;mA<G.length;++mA){var jA=G.charCodeAt(mA);if(55296<=jA&&57343>=jA&&(jA=65536+((1023&jA)<<10)|1023&G.charCodeAt(++mA)),v()[H>>>2>>>0]=jA,(H+=4)+4>eA)break}return v()[H>>>2>>>0]=0,H-lA},zf=G=>{for(var H=0,eA=0;eA<G.length;++eA){var lA=G.charCodeAt(eA);55296<=lA&&57343>=lA&&++eA,H+=4}return H};function Ff(G,H,eA){if(G>>>=0,H>>>=0,eA=rn(eA>>>=0),H===2)var lA=Gf,mA=Df,jA=Qf,Ie=Be=>B()[Be>>>1>>>0];else H===4&&(lA=Tf,mA=Pf,jA=zf,Ie=Be=>y()[Be>>>2>>>0]);qn(G,{name:eA,fromWireType:Be=>{for(var it,nt=y()[Be>>>2>>>0],Et=Be+4,nr=0;nr<=nt;++nr){var wr=Be+4+nr*H;nr!=nt&&Ie(wr)!=0||(Et=lA(Et,wr-Et),it===void 0?it=Et:(it+="\0",it+=Et),Et=wr+H)}return sn(Be),it},toWireType:(Be,it)=>{if(typeof it!="string")throw new O0(`Cannot pass non-string to C++ string type ${eA}`);var nt=jA(it),Et=q1(4+nt+H);return y()[Et>>>2>>>0]=nt/H,mA(it,Et+4,nt+H),Be!==null&&Be.push(sn,Et),Et},argPackAdvance:L0,readValueFromPointer:zc,Eb(Be){sn(Be)}})}function Sf(G,H){qn(G>>>=0,{Ub:!0,name:H=rn(H>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var Nf=()=>1;function Of(G){Hc(G>>>0,!dA,1,!oA,131072,!1),Mg()}var _g=G=>{if(!Fr)try{if(G(),!(0<io))try{fA?J1(Ue):Mc(Ue)}catch(H){H instanceof vc||H=="unwind"||JA(0,H)}}catch(H){H instanceof vc||H=="unwind"||JA(0,H)}};function Fc(G){G>>>=0,typeof Atomics.oc=="function"&&(Atomics.oc(v(),G>>>2,G).value.then(H1),G+=128,Atomics.store(v(),G>>>2,1))}var H1=()=>{var G=s2();G&&(Fc(G),_g(Mu))};function Lf(G,H){(G>>>=0)==H>>>0?setTimeout(H1):fA?postMessage({targetThread:G,cmd:"checkMailbox"}):(G=tn[G])&&G.postMessage({cmd:"checkMailbox"})}var Sc=[];function Yf(G,H,eA,lA,mA){for(H>>>=0,lA/=2,Sc.length=lA,eA=mA>>>0>>>3,mA=0;mA<lA;mA++)Sc[mA]=Oa[eA+2*mA]?Oa[eA+2*mA+1]:N()[eA+2*mA+1>>>0];return(H?Bc[H]:Dp[G])(...Sc)}function Hf(G){G>>>=0,fA?postMessage({cmd:"cleanupThread",thread:G}):Eg(tn[G])}function Rf(G){}var R1=(G,H)=>{var eA=Qc[G];if(eA===void 0)throw G=Bu(G),eA=rn(G),sn(G),new O0(`${H} has unknown type ${eA}`);return eA},$g=(G,H,eA)=>{var lA=[];return G=G.toWireType(lA,eA),lA.length&&(y()[H>>>2>>>0]=ui(lA)),G};function Wf(G,H,eA){return H>>>=0,eA>>>=0,G=Xs(G>>>0),H=R1(H,"emval::as"),$g(H,eA,G)}function Vf(G,H){return H>>>=0,G=Xs(G>>>0),(H=R1(H,"emval::as")).toWireType(null,G)}var W1=G=>{try{G()}catch(H){S0(H)}},Y0=0,an=null,Au=0,V1=[],eu={},tu={},jf=0,Nc=null,Uf=[];function ru(G){return function(){if(!Fr){if(Y0===0){var H=!1,eA=!1;(lA=>{G().then(lA)})((lA=0)=>{if(!Fr&&(Au=lA,H=!0,eA)){Y0=2,W1(()=>Pu(an)),typeof Browser<"u"&&Browser.Lb.Sb&&Browser.Lb.resume(),lA=!1;try{var mA=function(){var Be=v()[an+8>>>2>>>0];return Be=kt[tu[Be]],--io,Be()}()}catch(Be){mA=Be,lA=!0}var jA=!1;if(!an){var Ie=Nc;Ie&&(Nc=null,(lA?Ie.reject:Ie.resolve)(mA),jA=!0)}if(lA&&!jA)throw mA}}),eA=!0,H||(Y0=1,an=function(){var lA=q1(65548),mA=lA+12;y()[lA>>>2>>>0]=mA,y()[lA+4>>>2>>>0]=mA+65536,mA=V1[0];var jA=eu[mA];return jA===void 0&&(jA=jf++,eu[mA]=jA,tu[jA]=mA),mA=jA,v()[lA+8>>>2>>>0]=mA,lA}(),typeof Browser<"u"&&Browser.Lb.Sb&&Browser.Lb.pause(),W1(()=>Qu(an)))}else Y0===2?(Y0=0,W1(zu),sn(an),an=null,Uf.forEach(_g)):S0(`invalid state: ${Y0}`);return Au}}()}function Kf(G){return G>>>=0,ru(()=>(G=Xs(G)).then(ui))}var j1=[];function Zf(G,H,eA,lA){return eA>>>=0,lA>>>=0,(G=j1[G>>>0])(null,H=Xs(H>>>0),eA,lA)}var Xf={},U1=G=>{var H=Xf[G];return H===void 0?rn(G):H};function qf(G,H,eA,lA,mA){return eA>>>=0,lA>>>=0,mA>>>=0,(G=j1[G>>>0])(H=Xs(H>>>0),H[eA=U1(eA)],lA,mA)}var au=()=>typeof globalThis=="object"?globalThis:Function("return this")();function Jf(G){return(G>>>=0)==0?ui(au()):(G=U1(G),ui(au()[G]))}var _f=G=>{var H=j1.length;return j1.push(G),H},$f=(G,H)=>{for(var eA=Array(G),lA=0;lA<G;++lA)eA[lA]=R1(y()[H+4*lA>>>2>>>0],"parameter "+lA);return eA},su=(G,H)=>Object.defineProperty(H,"name",{value:G});function Ap(G,H,eA){var lA=(H=$f(G,H>>>0)).shift();G--;var mA=`return function (obj, func, destructorsRef, args) {
`,jA=0,Ie=[];eA===0&&Ie.push("obj");for(var Be=["retType"],it=[lA],nt=0;nt<G;++nt)Ie.push("arg"+nt),Be.push("argType"+nt),it.push(H[nt]),mA+=`  var arg${nt} = argType${nt}.readValueFromPointer(args${jA?"+"+jA:""});
`,jA+=H[nt].argPackAdvance;return mA+=`  var rv = ${eA===1?"new func":"func.call"}(${Ie.join(", ")});
`,lA.Ub||(Be.push("emval_returnValue"),it.push($g),mA+=`  return emval_returnValue(retType, destructorsRef, rv);
`),Be.push(mA+`};
`),G=function(Et){var nr=Function;if(!(nr instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof nr} which is not a function`);var wr=su(nr.name||"unknownFunctionName",function(){});return wr.prototype=nr.prototype,wr=new wr,(Et=nr.apply(wr,Et))instanceof Object?Et:wr}(Be)(...it),eA=`methodCaller<(${H.map(Et=>Et.name).join(", ")}) => ${lA.name}>`,_f(su(eA,G))}function ep(G){return G=U1(G>>>0),ui(Q[G])}function tp(G,H){return H>>>=0,G=Xs(G>>>0),H=Xs(H),ui(G[H])}function rp(G){9<(G>>>=0)&&(Jn[G+1]+=1)}function ap(){return ui([])}function sp(G){G=Xs(G>>>0);for(var H=Array(G.length),eA=0;eA<G.length;eA++)H[eA]=G[eA];return ui(H)}function ip(G){return ui(U1(G>>>0))}function np(){return ui({})}function op(G){for(var H=Xs(G>>>=0);H.length;){var eA=H.pop();H.pop()(eA)}Pc(G)}function lp(G,H,eA){H>>>=0,eA>>>=0,G=Xs(G>>>0),H=Xs(H),eA=Xs(eA),G[H]=eA}function cp(G,H){return H>>>=0,G=(G=R1(G>>>0,"_emval_take_value")).readValueFromPointer(H),ui(G)}function gp(G,H){G=-9007199254740992>G||9007199254740992<G?NaN:Number(G),H>>>=0,G=new Date(1e3*G),v()[H>>>2>>>0]=G.getUTCSeconds(),v()[H+4>>>2>>>0]=G.getUTCMinutes(),v()[H+8>>>2>>>0]=G.getUTCHours(),v()[H+12>>>2>>>0]=G.getUTCDate(),v()[H+16>>>2>>>0]=G.getUTCMonth(),v()[H+20>>>2>>>0]=G.getUTCFullYear()-1900,v()[H+24>>>2>>>0]=G.getUTCDay(),G=(G.getTime()-Date.UTC(G.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,v()[H+28>>>2>>>0]=G}var a2=G=>G%4==0&&(G%100!=0||G%400==0),iu=[0,31,60,91,121,152,182,213,244,274,305,335],nu=[0,31,59,90,120,151,181,212,243,273,304,334];function up(G,H){G=-9007199254740992>G||9007199254740992<G?NaN:Number(G),H>>>=0,G=new Date(1e3*G),v()[H>>>2>>>0]=G.getSeconds(),v()[H+4>>>2>>>0]=G.getMinutes(),v()[H+8>>>2>>>0]=G.getHours(),v()[H+12>>>2>>>0]=G.getDate(),v()[H+16>>>2>>>0]=G.getMonth(),v()[H+20>>>2>>>0]=G.getFullYear()-1900,v()[H+24>>>2>>>0]=G.getDay();var eA=(a2(G.getFullYear())?iu:nu)[G.getMonth()]+G.getDate()-1|0;v()[H+28>>>2>>>0]=eA,v()[H+36>>>2>>>0]=-60*G.getTimezoneOffset(),eA=new Date(G.getFullYear(),6,1).getTimezoneOffset();var lA=new Date(G.getFullYear(),0,1).getTimezoneOffset();G=0|(eA!=lA&&G.getTimezoneOffset()==Math.min(lA,eA)),v()[H+32>>>2>>>0]=G}function dp(G){G>>>=0;var H=new Date(v()[G+20>>>2>>>0]+1900,v()[G+16>>>2>>>0],v()[G+12>>>2>>>0],v()[G+8>>>2>>>0],v()[G+4>>>2>>>0],v()[G>>>2>>>0],0),eA=v()[G+32>>>2>>>0],lA=H.getTimezoneOffset(),mA=new Date(H.getFullYear(),6,1).getTimezoneOffset(),jA=new Date(H.getFullYear(),0,1).getTimezoneOffset(),Ie=Math.min(jA,mA);return 0>eA?v()[G+32>>>2>>>0]=+(mA!=jA&&Ie==lA):0<eA!=(Ie==lA)&&(mA=Math.max(jA,mA),H.setTime(H.getTime()+6e4*((0<eA?Ie:mA)-lA))),v()[G+24>>>2>>>0]=H.getDay(),eA=(a2(H.getFullYear())?iu:nu)[H.getMonth()]+H.getDate()-1|0,v()[G+28>>>2>>>0]=eA,v()[G>>>2>>>0]=H.getSeconds(),v()[G+4>>>2>>>0]=H.getMinutes(),v()[G+8>>>2>>>0]=H.getHours(),v()[G+12>>>2>>>0]=H.getDate(),v()[G+16>>>2>>>0]=H.getMonth(),v()[G+20>>>2>>>0]=H.getYear(),G=H.getTime(),BigInt(isNaN(G)?-1:G/1e3)}function ou(G,H,eA,lA,mA,jA,Ie){return fA?da(16,1,G,H,eA,lA,mA,jA,Ie):-52}function lu(G,H,eA,lA,mA,jA){if(fA)return da(17,1,G,H,eA,lA,mA,jA)}function fp(G,H,eA,lA){G>>>=0,H>>>=0,eA>>>=0,lA>>>=0;var mA=new Date().getFullYear(),jA=new Date(mA,0,1),Ie=new Date(mA,6,1);mA=jA.getTimezoneOffset();var Be=Ie.getTimezoneOffset(),it=Math.max(mA,Be);y()[G>>>2>>>0]=60*it,v()[H>>>2>>>0]=+(mA!=Be),jA=(G=nt=>nt.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:"short"}).split(" ")[1])(jA),Ie=G(Ie),Be<mA?(r2(jA,eA,17),r2(Ie,lA,17)):(r2(jA,lA,17),r2(Ie,eA,17))}var Oc=[],cu=(G,H)=>{Oc.length=0;for(var eA;eA=h()[G++>>>0];){var lA=eA!=105;H+=(lA&=eA!=112)&&H%8?4:0,Oc.push(eA==112?y()[H>>>2>>>0]:eA==106?Oa[H>>>3]:eA==105?v()[H>>>2>>>0]:N()[H>>>3>>>0]),H+=lA?8:4}return Oc};function pp(G,H,eA){return G>>>=0,H=cu(H>>>0,eA>>>0),Bc[G](...H)}function hp(G,H,eA){return G>>>=0,H=cu(H>>>0,eA>>>0),Bc[G](...H)}var mp=()=>{},Cp=()=>Date.now();function bp(G,H){return mt(ya(G>>>0,H>>>0))}var gu,Ip=()=>{throw io+=1,"unwind"};function wp(){return 4294901760}gu=()=>performance.timeOrigin+performance.now();var kp=()=>navigator.hardwareConcurrency;function xp(){return S0("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function Bp(G){G>>>=0;var H=h().length;if(G<=H||4294901760<G)return!1;for(var eA=1;4>=eA;eA*=2){var lA=H*(1+.2/eA);lA=Math.min(lA,G+100663296);var mA=Math;lA=Math.max(G,lA);A:{mA=(mA.min.call(mA,4294901760,lA+(65536-lA%65536)%65536)-gt.buffer.byteLength+65535)/65536;try{gt.grow(mA),ua();var jA=1;break A}catch{}jA=void 0}if(jA)return!0}return!1}var K1=()=>(S0("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),p1={},uu=G=>{G.forEach(H=>{K1()})};function vp(){var G=Error().stack.toString().split(`
`);return G[0]=="Error"&&G.shift(),uu(G),p1.Qb=K1(),p1.fc=G,p1.Qb}function yp(G,H,eA){if(G>>>=0,H>>>=0,p1.Qb==G)var lA=p1.fc;else(lA=Error().stack.toString().split(`
`))[0]=="Error"&&lA.shift(),uu(lA);for(var mA=3;lA[mA]&&K1()!=G;)++mA;for(G=0;G<eA&&lA[G+mA];++G)v()[H+4*G>>>2>>>0]=K1();return G}var Lc,Yc={},du=()=>{if(!Lc){var G,H={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(G in Yc)Yc[G]===void 0?delete H[G]:H[G]=Yc[G];var eA=[];for(G in H)eA.push(`${G}=${H[G]}`);Lc=eA}return Lc};function fu(G,H){if(fA)return da(18,1,G,H);G>>>=0,H>>>=0;var eA=0;return du().forEach((lA,mA)=>{var jA=H+eA;for(mA=y()[G+4*mA>>>2>>>0]=jA,jA=0;jA<lA.length;++jA)u()[mA++>>>0]=lA.charCodeAt(jA);u()[mA>>>0]=0,eA+=lA.length+1}),0}function pu(G,H){if(fA)return da(19,1,G,H);G>>>=0,H>>>=0;var eA=du();y()[G>>>2>>>0]=eA.length;var lA=0;return eA.forEach(mA=>lA+=mA.length+1),y()[H>>>2>>>0]=lA,0}function hu(G){return fA?da(20,1,G):52}function mu(G,H,eA,lA){return fA?da(21,1,G,H,eA,lA):52}function Cu(G,H,eA,lA){return fA?da(22,1,G,H,eA,lA):70}var Ep=[null,[],[]];function bu(G,H,eA,lA){if(fA)return da(23,1,G,H,eA,lA);H>>>=0,eA>>>=0,lA>>>=0;for(var mA=0,jA=0;jA<eA;jA++){var Ie=y()[H>>>2>>>0],Be=y()[H+4>>>2>>>0];H+=8;for(var it=0;it<Be;it++){var nt=h()[Ie+it>>>0],Et=Ep[G];nt===0||nt===10?((G===1?pt:mt)(zg(Et,0)),Et.length=0):Et.push(nt)}mA+=Be}return y()[lA>>>2>>>0]=mA,0}var Iu=[31,29,31,30,31,30,31,31,30,31,30,31],wu=[31,28,31,30,31,30,31,31,30,31,30,31],Mp=(G,H)=>{u().set(G,H>>>0)};function ku(G,H,eA,lA){function mA(pe,lr,Ia){for(pe=typeof pe=="number"?pe.toString():pe||"";pe.length<lr;)pe=Ia[0]+pe;return pe}function jA(pe,lr){return mA(pe,lr,"0")}function Ie(pe,lr){function Ia(Su){return 0>Su?-1:0<Su?1:0}var oo;return(oo=Ia(pe.getFullYear()-lr.getFullYear()))===0&&(oo=Ia(pe.getMonth()-lr.getMonth()))===0&&(oo=Ia(pe.getDate()-lr.getDate())),oo}function Be(pe){switch(pe.getDay()){case 0:return new Date(pe.getFullYear()-1,11,29);case 1:return pe;case 2:return new Date(pe.getFullYear(),0,3);case 3:return new Date(pe.getFullYear(),0,2);case 4:return new Date(pe.getFullYear(),0,1);case 5:return new Date(pe.getFullYear()-1,11,31);case 6:return new Date(pe.getFullYear()-1,11,30)}}function it(pe){var lr=pe.Cb;for(pe=new Date(new Date(pe.Db+1900,0,1).getTime());0<lr;){var Ia=pe.getMonth(),oo=(a2(pe.getFullYear())?Iu:wu)[Ia];if(!(lr>oo-pe.getDate())){pe.setDate(pe.getDate()+lr);break}lr-=oo-pe.getDate()+1,pe.setDate(1),11>Ia?pe.setMonth(Ia+1):(pe.setMonth(0),pe.setFullYear(pe.getFullYear()+1))}return Ia=new Date(pe.getFullYear()+1,0,4),lr=Be(new Date(pe.getFullYear(),0,4)),Ia=Be(Ia),0>=Ie(lr,pe)?0>=Ie(Ia,pe)?pe.getFullYear()+1:pe.getFullYear():pe.getFullYear()-1}G>>>=0,H>>>=0,eA>>>=0,lA>>>=0;var nt=y()[lA+40>>>2>>>0];for(var Et in lA={lc:v()[lA>>>2>>>0],kc:v()[lA+4>>>2>>>0],Ib:v()[lA+8>>>2>>>0],Mb:v()[lA+12>>>2>>>0],Jb:v()[lA+16>>>2>>>0],Db:v()[lA+20>>>2>>>0],vb:v()[lA+24>>>2>>>0],Cb:v()[lA+28>>>2>>>0],sc:v()[lA+32>>>2>>>0],jc:v()[lA+36>>>2>>>0],mc:nt?ya(nt):""},eA=ya(eA),nt={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})eA=eA.replace(new RegExp(Et,"g"),nt[Et]);var nr="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),wr="January February March April May June July August September October November December".split(" ");for(Et in nt={"%a":pe=>nr[pe.vb].substring(0,3),"%A":pe=>nr[pe.vb],"%b":pe=>wr[pe.Jb].substring(0,3),"%B":pe=>wr[pe.Jb],"%C":pe=>jA((pe.Db+1900)/100|0,2),"%d":pe=>jA(pe.Mb,2),"%e":pe=>mA(pe.Mb,2," "),"%g":pe=>it(pe).toString().substring(2),"%G":it,"%H":pe=>jA(pe.Ib,2),"%I":pe=>((pe=pe.Ib)==0?pe=12:12<pe&&(pe-=12),jA(pe,2)),"%j":pe=>{for(var lr=0,Ia=0;Ia<=pe.Jb-1;lr+=(a2(pe.Db+1900)?Iu:wu)[Ia++]);return jA(pe.Mb+lr,3)},"%m":pe=>jA(pe.Jb+1,2),"%M":pe=>jA(pe.kc,2),"%n":()=>`
`,"%p":pe=>0<=pe.Ib&&12>pe.Ib?"AM":"PM","%S":pe=>jA(pe.lc,2),"%t":()=>"	","%u":pe=>pe.vb||7,"%U":pe=>jA(Math.floor((pe.Cb+7-pe.vb)/7),2),"%V":pe=>{var lr=Math.floor((pe.Cb+7-(pe.vb+6)%7)/7);if(2>=(pe.vb+371-pe.Cb-2)%7&&lr++,lr)lr==53&&((Ia=(pe.vb+371-pe.Cb)%7)==4||Ia==3&&a2(pe.Db)||(lr=1));else{lr=52;var Ia=(pe.vb+7-pe.Cb-1)%7;(Ia==4||Ia==5&&a2(pe.Db%400-1))&&lr++}return jA(lr,2)},"%w":pe=>pe.vb,"%W":pe=>jA(Math.floor((pe.Cb+7-(pe.vb+6)%7)/7),2),"%y":pe=>(pe.Db+1900).toString().substring(2),"%Y":pe=>pe.Db+1900,"%z":pe=>(0<=(pe=pe.jc)?"+":"-")+("0000"+((pe=Math.abs(pe)/60)/60*100+pe%60)).slice(-4),"%Z":pe=>pe.mc,"%%":()=>"%"},eA=eA.replace(/%%/g,"\0\0"),nt)eA.includes(Et)&&(eA=eA.replace(new RegExp(Et,"g"),nt[Et](lA)));return Et=function(pe){var lr=Array(Gc(pe)+1);return Ng(pe,lr,0,lr.length),lr}(eA=eA.replace(/\0\0/g,"%")),Et.length>H?0:(Mp(Et,G),Et.length-1)}function Gp(G,H,eA,lA){return ku(G>>>0,H>>>0,eA>>>0,lA>>>0)}fA||function(){for(var G=Q.numThreads-1;G--;)Dg();F0.unshift(()=>{d1++,function(H){fA?H():Promise.all(N0.map(Gg)).then(H)}(()=>Cg())})}();for(var xu=Array(256),Z1=0;256>Z1;++Z1)xu[Z1]=String.fromCharCode(Z1);Xg=xu,O0=Q.BindingError=class extends Error{constructor(G){super(G),this.name="BindingError"}},Q.InternalError=class extends Error{constructor(G){super(G),this.name="InternalError"}},Jn.push(0,1,void 0,1,null,1,!0,1,!1,1),Q.count_emval_handles=()=>Jn.length/2-5-Tc.length;var Dp=[Ec,vg,Qg,Fg,Sg,Og,Lg,Yg,Hg,Rg,Wg,Vg,jg,Ug,Kg,Zg,ou,lu,fu,pu,hu,mu,Cu,bu],kt=function(){function G(eA,lA){return kt=eA.exports,kt=function(){var mA=kt,jA={};for(let[Ie,Be]of Object.entries(mA))jA[Ie]=typeof Be=="function"?(...it)=>{V1.push(Ie);try{return Be(...it)}finally{Fr||(V1.pop(),an&&Y0===1&&V1.length===0&&(Y0=0,io+=1,W1(Tu),typeof Fibers<"u"&&Fibers.tc()))}}:Be;return jA}(),kt=function(){var mA=kt,jA=Be=>it=>Be(it)>>>0,Ie=Be=>()=>Be()>>>0;return(mA=Object.assign({},mA)).Da=jA(mA.Da),mA.gb=Ie(mA.gb),mA.ib=jA(mA.ib),mA.emscripten_main_runtime_thread_id=Ie(mA.emscripten_main_runtime_thread_id),mA.tb=jA(mA.tb),mA.ub=Ie(mA.ub),mA}(),yg.push(kt.jb),u1.unshift(kt.Ca),we=lA,Cg(),kt}var H=xg();if(d1++,Q.instantiateWasm)try{return Q.instantiateWasm(H,G)}catch(eA){mt(`Module.instantiateWasm callback failed with error: ${eA}`),tA(eA)}return xc||=Q.locateFile?bg("ort-wasm-simd-threaded.jsep.wasm")?"ort-wasm-simd-threaded.jsep.wasm":Q.locateFile?Q.locateFile("ort-wasm-simd-threaded.jsep.wasm",ne):ne+"ort-wasm-simd-threaded.jsep.wasm":new URL(d("./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm"),d.b).href,function(eA,lA){var mA=xc;return Le||typeof WebAssembly.instantiateStreaming!="function"||bg(mA)||Ig(mA)||typeof fetch!="function"?kg(mA,eA,lA):fetch(mA,{credentials:"same-origin"}).then(jA=>WebAssembly.instantiateStreaming(jA,eA).then(lA,function(Ie){return mt(`wasm streaming compile failed: ${Ie}`),mt("falling back to ArrayBuffer instantiation"),kg(mA,eA,lA)}))}(H,function(eA){G(eA.instance,eA.module)}).catch(tA),{}}(),Bu=G=>(Bu=kt.Da)(G),vu=()=>(vu=kt.Ea)();Q._OrtInit=(G,H)=>(Q._OrtInit=kt.Fa)(G,H),Q._OrtGetLastError=(G,H)=>(Q._OrtGetLastError=kt.Ga)(G,H),Q._OrtCreateSessionOptions=(G,H,eA,lA,mA,jA,Ie,Be,it,nt)=>(Q._OrtCreateSessionOptions=kt.Ha)(G,H,eA,lA,mA,jA,Ie,Be,it,nt),Q._OrtAppendExecutionProvider=(G,H)=>(Q._OrtAppendExecutionProvider=kt.Ia)(G,H),Q._OrtAddFreeDimensionOverride=(G,H,eA)=>(Q._OrtAddFreeDimensionOverride=kt.Ja)(G,H,eA),Q._OrtAddSessionConfigEntry=(G,H,eA)=>(Q._OrtAddSessionConfigEntry=kt.Ka)(G,H,eA),Q._OrtReleaseSessionOptions=G=>(Q._OrtReleaseSessionOptions=kt.La)(G),Q._OrtCreateSession=(G,H,eA)=>(Q._OrtCreateSession=kt.Ma)(G,H,eA),Q._OrtReleaseSession=G=>(Q._OrtReleaseSession=kt.Na)(G),Q._OrtGetInputOutputCount=(G,H,eA)=>(Q._OrtGetInputOutputCount=kt.Oa)(G,H,eA),Q._OrtGetInputName=(G,H)=>(Q._OrtGetInputName=kt.Pa)(G,H),Q._OrtGetOutputName=(G,H)=>(Q._OrtGetOutputName=kt.Qa)(G,H),Q._OrtFree=G=>(Q._OrtFree=kt.Ra)(G),Q._OrtCreateTensor=(G,H,eA,lA,mA,jA)=>(Q._OrtCreateTensor=kt.Sa)(G,H,eA,lA,mA,jA),Q._OrtGetTensorData=(G,H,eA,lA,mA)=>(Q._OrtGetTensorData=kt.Ta)(G,H,eA,lA,mA),Q._OrtReleaseTensor=G=>(Q._OrtReleaseTensor=kt.Ua)(G),Q._OrtCreateRunOptions=(G,H,eA,lA)=>(Q._OrtCreateRunOptions=kt.Va)(G,H,eA,lA),Q._OrtAddRunConfigEntry=(G,H,eA)=>(Q._OrtAddRunConfigEntry=kt.Wa)(G,H,eA),Q._OrtReleaseRunOptions=G=>(Q._OrtReleaseRunOptions=kt.Xa)(G),Q._OrtCreateBinding=G=>(Q._OrtCreateBinding=kt.Ya)(G),Q._OrtBindInput=(G,H,eA)=>(Q._OrtBindInput=kt.Za)(G,H,eA),Q._OrtBindOutput=(G,H,eA,lA)=>(Q._OrtBindOutput=kt._a)(G,H,eA,lA),Q._OrtClearBoundOutputs=G=>(Q._OrtClearBoundOutputs=kt.$a)(G),Q._OrtReleaseBinding=G=>(Q._OrtReleaseBinding=kt.ab)(G),Q._OrtRunWithBinding=(G,H,eA,lA,mA)=>(Q._OrtRunWithBinding=kt.bb)(G,H,eA,lA,mA),Q._OrtRun=(G,H,eA,lA,mA,jA,Ie,Be)=>(Q._OrtRun=kt.cb)(G,H,eA,lA,mA,jA,Ie,Be),Q._OrtEndProfiling=G=>(Q._OrtEndProfiling=kt.db)(G),Q._JsepOutput=(G,H,eA)=>(Q._JsepOutput=kt.eb)(G,H,eA),Q._JsepGetNodeName=G=>(Q._JsepGetNodeName=kt.fb)(G);var X1,s2=()=>(s2=kt.gb)(),sn=Q._free=G=>(sn=Q._free=kt.hb)(G),q1=Q._malloc=G=>(q1=Q._malloc=kt.ib)(G),Hc=(G,H,eA,lA,mA,jA)=>(Hc=kt.lb)(G,H,eA,lA,mA,jA),yu=()=>(yu=kt.mb)(),Eu=(G,H,eA,lA,mA)=>(Eu=kt.nb)(G,H,eA,lA,mA),Rc=G=>(Rc=kt.ob)(G),J1=G=>(J1=kt.pb)(G),Mu=()=>(Mu=kt.qb)(),Gu=(G,H)=>(Gu=kt.rb)(G,H),_1=G=>(_1=kt.sb)(G),Wc=G=>(Wc=kt.tb)(G),Vc=()=>(Vc=kt.ub)(),Du=Q.dynCall_ii=(G,H)=>(Du=Q.dynCall_ii=kt.wb)(G,H),Qu=G=>(Qu=kt.xb)(G),Tu=()=>(Tu=kt.yb)(),Pu=G=>(Pu=kt.zb)(G),zu=()=>(zu=kt.Ab)();function Fu(){0<d1||(fA?(Y(Q),fA||Y1(u1),startWorker(Q)):(Y1(F0),0<d1||X1||(X1=!0,Q.calledRun=!0,Fr||(fA||Y1(u1),Y(Q),fA||Y1(kc)))))}return Q.___start_em_js=929301,Q.___stop_em_js=929547,Q.stackSave=()=>Vc(),Q.stackRestore=G=>_1(G),Q.stackAlloc=G=>Wc(G),Q.setValue=function(G,H,eA="i8"){switch(eA.endsWith("*")&&(eA="*"),eA){case"i1":case"i8":u()[G>>>0]=H;break;case"i16":w()[G>>>1>>>0]=H;break;case"i32":v()[G>>>2>>>0]=H;break;case"i64":Oa[G>>>3]=BigInt(H);break;case"float":F()[G>>>2>>>0]=H;break;case"double":N()[G>>>3>>>0]=H;break;case"*":y()[G>>>2>>>0]=H;break;default:S0(`invalid type for setValue: ${eA}`)}},Q.getValue=function(G,H="i8"){switch(H.endsWith("*")&&(H="*"),H){case"i1":case"i8":return u()[G>>>0];case"i16":return w()[G>>>1>>>0];case"i32":return v()[G>>>2>>>0];case"i64":return Oa[G>>>3];case"float":return F()[G>>>2>>>0];case"double":return N()[G>>>3>>>0];case"*":return y()[G>>>2>>>0];default:S0(`invalid type for getValue: ${H}`)}},Q.UTF8ToString=ya,Q.stringToUTF8=r2,Q.lengthBytesUTF8=Gc,f1=function G(){X1||Fu(),X1||(f1=G)},Fu(),Q.PTR_SIZE=4,iA},Sr=$t,globalThis.self?.name==="em-pthread"&&$t()}),s1=TA(()=>{ce(),Ar=typeof location>"u"?void 0:location.origin,Aa=import.meta.url?.startsWith("file:")?new URL(new URL(d("./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?46eb"),d.b).href,Ar).href:import.meta.url,It=()=>{if(Aa&&!Aa.startsWith("blob:"))return Aa.substring(0,Aa.lastIndexOf("/")+1)},Ka=(n,u)=>{try{let h=u??Aa;return(h?new URL(n,h):new URL(n)).origin===Ar}catch{return!1}},La=(n,u)=>{let h=u??Aa;try{return(h?new URL(n,h):new URL(n)).href}catch{return}},wa=(n,u)=>`${u??"./"}${n}`,Xe=async n=>{let u=await(await fetch(n,{credentials:"same-origin"})).blob();return URL.createObjectURL(u)},$e=async n=>(await import(n)).default,Ne=(Tt(),ae(ye)).default,Zt=async()=>{if(!Aa)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Ka(Aa))return[void 0,Ne()];let n=await Xe(Aa);return[n,Ne(n)]},Ra=(ac(),ae(dt)).default,Za=async(n,u,h)=>{if(!n&&!u&&Ra&&Aa&&Ka(Aa))return[void 0,Ra];{let w="ort-wasm-simd-threaded.jsep.mjs",B=n??La(w,u),v=h&&B&&!Ka(B,u),y=v?await Xe(B):B??wa(w,u);return[v?y:void 0,await $e(y)]}}}),Vn=TA(()=>{s1(),bs=!1,Is=!1,Ts=!1,ea=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},xt=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Ma=async n=>{if(bs)return Promise.resolve();if(Is)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Ts)throw new Error("previous call to 'initializeWebAssembly()' failed.");Is=!0;let u=n.initTimeout,h=n.numThreads;if(!xt())throw new Error("WebAssembly SIMD is not supported in the current environment.");let w=ea();h>1&&!w&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+h+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),n.numThreads=h=1);let B=n.wasmPaths,v=typeof B=="string"?B:void 0,y=B?.mjs,F=y?.href??y,N=B?.wasm,Y=N?.href??N,tA=n.wasmBinary,[Q,iA]=await Za(F,v,h>1),oA=!1,dA=[];if(u>0&&dA.push(new Promise(fA=>{setTimeout(()=>{oA=!0,fA()},u)})),dA.push(new Promise((fA,wA)=>{let MA={numThreads:h};if(tA)MA.wasmBinary=tA;else if(Y||v)MA.locateFile=DA=>Y??v+DA;else if(F&&F.indexOf("blob:")!==0)MA.locateFile=DA=>new URL(DA,F).href;else if(Q){let DA=It();DA&&(MA.locateFile=LA=>DA+LA)}iA(MA).then(DA=>{Is=!1,bs=!0,Qs=DA,fA(),Q&&URL.revokeObjectURL(Q)},DA=>{Is=!1,Ts=!0,wA(DA)})})),await Promise.race(dA),oA)throw new Error(`WebAssembly backend initializing failed due to timeout: ${u}ms`)},Dr=()=>{if(bs&&Qs)return Qs;throw new Error("WebAssembly is not initialized yet.")}}),i1=TA(()=>{Vn(),Hr=(n,u)=>{let h=Dr(),w=h.lengthBytesUTF8(n)+1,B=h._malloc(w);return h.stringToUTF8(n,B,w),u.push(B),B},cs=(n,u,h,w)=>{if(typeof n=="object"&&n!==null){if(h.has(n))throw new Error("Circular reference in options");h.add(n)}Object.entries(n).forEach(([B,v])=>{let y=u?u+B:B;if(typeof v=="object")cs(v,y+".",h,w);else if(typeof v=="string"||typeof v=="number")w(y,v.toString());else{if(typeof v!="boolean")throw new Error("Can't handle extra config type: "+typeof v);w(y,v?"1":"0")}})},Xt=n=>{let u=Dr(),h=u.stackSave();try{let w=u.PTR_SIZE,B=u.stackAlloc(2*w);u._OrtGetLastError(B,B+w);let v=Number(u.getValue(B,w===4?"i32":"i64")),y=u.getValue(B+w,"*"),F=y?u.UTF8ToString(y):"";throw new Error(`${n} ERROR_CODE: ${v}, ERROR_MESSAGE: ${F}`)}finally{u.stackRestore(h)}}}),sc=TA(()=>{Vn(),i1(),Xa=n=>{let u=Dr(),h=0,w=[],B=n||{};try{if(n?.logSeverityLevel===void 0)B.logSeverityLevel=2;else if(typeof n.logSeverityLevel!="number"||!Number.isInteger(n.logSeverityLevel)||n.logSeverityLevel<0||n.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${n.logSeverityLevel}`);if(n?.logVerbosityLevel===void 0)B.logVerbosityLevel=0;else if(typeof n.logVerbosityLevel!="number"||!Number.isInteger(n.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${n.logVerbosityLevel}`);n?.terminate===void 0&&(B.terminate=!1);let v=0;return n?.tag!==void 0&&(v=Hr(n.tag,w)),h=u._OrtCreateRunOptions(B.logSeverityLevel,B.logVerbosityLevel,!!B.terminate,v),h===0&&Xt("Can't create run options."),n?.extra!==void 0&&cs(n.extra,"",new WeakSet,(y,F)=>{let N=Hr(y,w),Y=Hr(F,w);u._OrtAddRunConfigEntry(h,N,Y)!==0&&Xt(`Can't set a run config entry: ${y} - ${F}.`)}),[h,w]}catch(v){throw h!==0&&u._OrtReleaseRunOptions(h),w.forEach(y=>u._free(y)),v}}}),ic=TA(()=>{Vn(),i1(),gs=n=>{switch(n){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${n}`)}},di=n=>{switch(n){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${n}`)}},qs=n=>{n.extra||(n.extra={}),n.extra.session||(n.extra.session={});let u=n.extra.session;u.use_ort_model_bytes_directly||(u.use_ort_model_bytes_directly="1"),n.executionProviders&&n.executionProviders.some(h=>(typeof h=="string"?h:h.name)==="webgpu")&&(n.enableMemPattern=!1)},Js=(n,u,h)=>{for(let w of u){let B=typeof w=="string"?w:w.name;switch(B){case"webnn":if(B="WEBNN",typeof w!="string"){let y=w?.deviceType;if(y){let F=Hr("deviceType",h),N=Hr(y,h);Dr()._OrtAddSessionConfigEntry(n,F,N)!==0&&Xt(`Can't set a session config entry: 'deviceType' - ${y}.`)}}break;case"webgpu":if(B="JS",typeof w!="string"){let y=w;if(y?.preferredLayout){if(y.preferredLayout!=="NCHW"&&y.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${y.preferredLayout}`);let F=Hr("preferredLayout",h),N=Hr(y.preferredLayout,h);Dr()._OrtAddSessionConfigEntry(n,F,N)!==0&&Xt(`Can't set a session config entry: 'preferredLayout' - ${y.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${B}`)}let v=Hr(B,h);Dr()._OrtAppendExecutionProvider(n,v)!==0&&Xt(`Can't append execution provider: ${B}.`)}},fi=n=>{let u=Dr(),h=0,w=[],B=n||{};qs(B);try{let v=gs(B.graphOptimizationLevel??"all"),y=di(B.executionMode??"sequential"),F=typeof B.logId=="string"?Hr(B.logId,w):0,N=B.logSeverityLevel??2;if(!Number.isInteger(N)||N<0||N>4)throw new Error(`log serverity level is not valid: ${N}`);let Y=B.logVerbosityLevel??0;if(!Number.isInteger(Y)||Y<0||Y>4)throw new Error(`log verbosity level is not valid: ${Y}`);let tA=typeof B.optimizedModelFilePath=="string"?Hr(B.optimizedModelFilePath,w):0;if(h=u._OrtCreateSessionOptions(v,!!B.enableCpuMemArena,!!B.enableMemPattern,y,!!B.enableProfiling,0,F,N,Y,tA),h===0&&Xt("Can't create session options."),B.executionProviders&&Js(h,B.executionProviders,w),B.enableGraphCapture!==void 0){if(typeof B.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${B.enableGraphCapture}`);let Q=Hr("enableGraphCapture",w),iA=Hr(B.enableGraphCapture.toString(),w);u._OrtAddSessionConfigEntry(h,Q,iA)!==0&&Xt(`Can't set a session config entry: 'enableGraphCapture' - ${B.enableGraphCapture}.`)}if(B.freeDimensionOverrides)for(let[Q,iA]of Object.entries(B.freeDimensionOverrides)){if(typeof Q!="string")throw new Error(`free dimension override name must be a string: ${Q}`);if(typeof iA!="number"||!Number.isInteger(iA)||iA<0)throw new Error(`free dimension override value must be a non-negative integer: ${iA}`);let oA=Hr(Q,w);u._OrtAddFreeDimensionOverride(h,oA,iA)!==0&&Xt(`Can't set a free dimension override: ${Q} - ${iA}.`)}return B.extra!==void 0&&cs(B.extra,"",new WeakSet,(Q,iA)=>{let oA=Hr(Q,w),dA=Hr(iA,w);u._OrtAddSessionConfigEntry(h,oA,dA)!==0&&Xt(`Can't set a session config entry: ${Q} - ${iA}.`)}),[h,w]}catch(v){throw h!==0&&u._OrtReleaseSessionOptions(h)!==0&&Xt("Can't release session options."),w.forEach(y=>u._free(y)),v}}}),Dt=TA(()=>{Ur=n=>{switch(n){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${n}`)}},ts=n=>{switch(n){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${n}`)}},us=(n,u)=>{let h=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][n],w=typeof u=="number"?u:u.reduce((B,v)=>B*v,1);return h>0?Math.ceil(w*h):void 0},_s=n=>{switch(n){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${n}`)}},qa=n=>{switch(n){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${n}`)}},ws=n=>n==="float32"||n==="float16"||n==="int32"||n==="int64"||n==="uint32"||n==="uint8"||n==="bool"||n==="uint4"||n==="int4",kr=n=>n==="float32"||n==="float16"||n==="int32"||n==="int64"||n==="uint32"||n==="uint64"||n==="int8"||n==="uint8"||n==="bool"||n==="uint4"||n==="int4",Ps=n=>{switch(n){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${n}`)}}}),T1=TA(()=>{ce(),zs=async n=>{if(typeof n=="string"){let u=await fetch(n);if(!u.ok)throw new Error(`failed to load external data file: ${n}`);let h=u.headers.get("Content-Length"),w=h?parseInt(h,10):0;if(w<1073741824)return new Uint8Array(await u.arrayBuffer());{if(!u.body)throw new Error(`failed to load external data file: ${n}, no response body.`);let B,v=u.body.getReader();try{B=new ArrayBuffer(w)}catch(F){if(!(F instanceof RangeError))throw F;{let N=Math.ceil(w/65536);B=new WebAssembly.Memory({initial:N,maximum:N}).buffer}}let y=0;for(;;){let{done:F,value:N}=await v.read();if(F)break;let Y=N.byteLength;new Uint8Array(B,y,Y).set(N),y+=Y}return new Uint8Array(B,0,w)}}return n instanceof Blob?new Uint8Array(await n.arrayBuffer()):n instanceof Uint8Array?n:new Uint8Array(n)}}),Di=TA(()=>{Dt(),pi=["V","I","W","E","F"],Fs=(n,u)=>{console.log(`[${pi[n]},${new Date().toISOString()}]${u}`)},xs=(n,u)=>{ks=n,Ss=u},wt=(n,u)=>{let h=qa(n);h>=qa(ks)&&Fs(h,typeof u=="function"?u():u)},zt=(...n)=>{Ss&&wt(...n)}}),P1=TA(()=>{Dt(),ka=(n,u)=>new(_s(u))(n)}),n1=TA(()=>{}),nc=TA(()=>{Di(),n1(),$s=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),Bs=[],Ns=n=>16*Math.ceil(Number(n)/16),rs=n=>{for(let u=0;u<Bs.length;u++){let h=Bs[u];if(n<=h)return h}return 16*Math.ceil(n/16)},Os=1,te=()=>Os++,_=async(n,u,h,w)=>{let B=Ns(h),v=n.device.createBuffer({size:B,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let y=n.getCommandEncoder();n.endComputePass(),y.copyBufferToBuffer(u,0,v,0,B),n.flush(),await v.mapAsync(GPUMapMode.READ);let F=v.getMappedRange();if(w){let N=w();return N.set(new Uint8Array(F,0,h)),N}return new Uint8Array(F.slice(0,h))}finally{v.destroy()}},BA=class{constructor(n){this.backend=n,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[u]of $s)Bs.push(u),this.freeBuffers.set(u,[]),this.freeUniformBuffers.set(u,[]);this.sessionCount=0}upload(n,u){let h=u.buffer,w=u.byteOffset,B=u.byteLength,v=Ns(B),y=this.storageCache.get(n);if(!y)throw new Error("gpu data for uploading does not exist");if(Number(y.originalSize)!==B)throw new Error(`inconsistent data size. gpu data size=${y.originalSize}, data size=${B}`);let F=this.backend.device.createBuffer({mappedAtCreation:!0,size:v,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),N=F.getMappedRange();new Uint8Array(N).set(new Uint8Array(h,w,B)),F.unmap();let Y=this.backend.device.createCommandEncoder();Y.copyBufferToBuffer(F,0,y.gpuData.buffer,0,v),this.backend.device.queue.submit([Y.finish()]),F.destroy(),zt("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${n})`)}memcpy(n,u){let h=this.storageCache.get(n);if(!h)throw new Error("source gpu data for memcpy does not exist");let w=this.storageCache.get(u);if(!w)throw new Error("destination gpu data for memcpy does not exist");if(h.originalSize!==w.originalSize)throw new Error("inconsistent source and destination gpu data size");let B=Ns(h.originalSize),v=this.backend.getCommandEncoder();this.backend.endComputePass(),v.copyBufferToBuffer(h.gpuData.buffer,0,w.gpuData.buffer,0,B)}registerExternalBuffer(n,u,h){let w;if(h){if(w=h[0],n===h[1])return zt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${u}) => id=${w}, buffer is the same, skip.`),w;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else w=te();return this.storageCache.set(w,{gpuData:{id:w,type:0,buffer:n},originalSize:u}),zt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${u}) => id=${w}, registered.`),w}unregisterExternalBuffer(n){n!==void 0&&(this.storageCache.delete(n),zt("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${n}`))}create(n,u=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let h,w=rs(n),B=(u&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,v=(u&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(B||v){let F=(B?this.freeBuffers:this.freeUniformBuffers).get(w);h=F&&F.length>0?F.pop():this.backend.device.createBuffer({size:w,usage:u})}else h=this.backend.device.createBuffer({size:w,usage:u});let y={id:te(),type:0,buffer:h};return this.storageCache.set(y.id,{gpuData:y,originalSize:Number(n)}),zt("verbose",()=>`[WebGPU] GpuDataManager.create(size=${n}) => id=${y.id}`),y}get(n){return this.storageCache.get(n)?.gpuData}release(n){let u=typeof n=="bigint"?Number(n):n,h=this.storageCache.get(u);if(!h){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return zt("verbose",()=>`[WebGPU] GpuDataManager.release(id=${u}), gpuDataId=${h.gpuData.id}`),this.storageCache.delete(u),this.buffersPending.push(h.gpuData.buffer),h.originalSize}async download(n,u){let h=this.storageCache.get(Number(n));if(!h)throw new Error("data does not exist");await _(this.backend,h.gpuData.buffer,h.originalSize,u)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let n of this.buffersPending){let u=$s.get(n.size);if((n.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let h=this.freeBuffers.get(n.size)||[];u===void 0||h.length>=u?n.destroy():h.push(n)}else if((n.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let h=this.freeUniformBuffers.get(n.size)||[];u===void 0||h.length>=u?n.destroy():h.push(n)}else n.destroy()}this.buffersPending=[]}else{let n=this.capturedPendingBuffers.get(this.backend.currentSessionId);n||(n=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,n));for(let u of this.buffersPending)n.push(u);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(n=>{n.forEach(u=>{u.destroy()})}),this.freeUniformBuffers.forEach(n=>{n.forEach(u=>{u.destroy()})}),this.storageCache.forEach(n=>{n.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(n=>{n.forEach(u=>{u.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(n){let u=this.capturedPendingBuffers.get(n);u&&(u.forEach(h=>{h.destroy()}),this.capturedPendingBuffers.delete(n)),this.sessionCount-=1,this.sessionCount===0&&(zt("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(h=>{h.gpuData.buffer.destroy()}),this.storageCache=new Map)}},NA=(...n)=>new BA(...n)}),qr=TA(()=>{VA=class{constructor(n){Object.assign(this,n)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(n=>`${this[n]}`).join(";")),this.key}},$A=n=>new VA(n)}),St=TA(()=>{de=class{static calcMatMulShape(n,u){return n[1]!==u[0]?void 0:[n[0],u[1]]}},Se=class{static calcShape(n,u,h=!1){let w=n.length,B=u.length;if(w===0)return u;if(B===0)return n;let v=Math.max(n.length,u.length),y=new Array(v);if(h){if(w<2||B<2)return;let F=de.calcMatMulShape([n[w-2],n[w-1]],[u[B-2],u[B-1]]);if(F===void 0)return;[y[v-2],y[v-1]]=F}for(let F=h?3:1;F<=v;F++){let N=w-F<0?1:n[w-F],Y=B-F<0?1:u[B-F];if(N!==Y&&N>1&&Y>1)return;let tA=Math.max(N,Y);if(N&&Y)y[v-F]=Math.max(N,Y);else{if(tA>1)return;y[v-F]=0}}return y}static isValidBroadcast(n,u){let h=n.length,w=u.length;if(h>w)return!1;for(let B=1;B<=h;B++)if(n[h-B]!==1&&n[h-B]!==u[w-B])return!1;return!0}},HA=class $1{static size(u){return $1.getSizeFromDimensionRange(u,0,u.length)}static convertShape(u,h=4){let w=u.length;if(w===0)return[];let B=new Array(w),v=w-1;for(;v>=0;){if(u[v]%h==0){B[v]=u[v]/h;break}if(h%u[v]!=0)throw new Error("cannot convert shape");B[v]=1,h/=u[v],v--}for(v--;v>=0;v--)B[v]=u[v];return B}static sizeFromDimension(u,h){if(h<0||h>u.length)throw new Error(`invalid dimension of ${h} for sizeFromDimension as Tensor has ${u.length} dimensions.`);return $1.getSizeFromDimensionRange(u,h,u.length)}static sizeToDimension(u,h){if(h<0||h>u.length)throw new Error(`invalid dimension of ${h} for sizeToDimension as Tensor has ${u.length} dimensions.`);return $1.getSizeFromDimensionRange(u,0,h)}static getSizeFromDimensionRange(u,h,w){let B=1;for(let v=h;v<w;v++){if(u[v]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");B*=Number(u[v])}return B}static computeStrides(u){let h=u.length;if(h===0)return[];if(h===1)return[1];let w=new Array(h);w[h-1]=1,w[h-2]=u[h-1];for(let B=h-3;B>=0;--B)w[B]=w[B+1]*u[B+1];return w}static normalizeAxis(u,h){if(u<-h&&u>=h)throw new Error("unsupported axis for this operation.");return u<0?u+h:u}static normalizeAxes(u,h){return u.map(w=>this.normalizeAxis(w,h??u.length))}static sortBasedOnPerm(u,h){return h?h.map(w=>u[w]):u.slice().reverse()}static padShape(u,h){let w=u.length;return u.map((B,v)=>B+h[v]+h[v+w])}static areEqual(u,h){return u.length===h.length&&u.every((w,B)=>w===h[B])}},Ve=class m1{static adjustPoolAttributes(u,h,w,B,v,y){if(!u&&w.length!==h.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(u)for(let F=0;F<h.length-2;F++)F>=w.length?w.push(h[F+2]):w[F]=h[F+2];for(let F=0;F<w.length;F++)if(F<B.length){if(B[F]<0)throw new Error("strides should be greater than or equal to 1")}else B.push(1);for(let F=0;F<w.length;F++)if(F<v.length){if(v[F]<0)throw new Error("dilations should be greater than or equal to 1")}else v.push(1);for(let F=0;F<2*w.length;F++)if(F<y.length){if(y[F]<0)throw new Error("pad should be greater than or equal to 1")}else y.push(0);for(let F=0;F<w.length;F++){if(w[F]<=0)throw new Error("kernel shapes need to be greater than 0");if(y[F]>=w[F]||y[F+w.length]>=w[F])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(u,h,w,B,v,y,F){if(F){if(v.length!==2*(u.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(h.length!==u.length-2)throw new Error("length of strides should be the length of data dimensions");if(B.length!==u.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let N=0;N<u.length-2;N++)m1.adjustPadAndReturnShape(u[N+(y?1:2)],h[N],w[N],B[N],v,N,N+u.length-2,F)}}static computePoolOutputShape(u,h,w,B,v,y,F){if(h.length<=0)throw new Error("input shape must be of size greater than 0");let N=[h[0],h[1]];return m1.computeShapeHelper(u,h,N,w,B,v,y,F),N}static computeConvOutputShape(u,h,w,B,v,y,F){if(u.length<=0||h.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let N=[u[0],h[0]];return m1.computeShapeHelper(!1,u,N,w,B,v,y,F),N}static computeShapeHelper(u,h,w,B,v,y,F,N){if(u)for(let Y=0;Y<h.length-2;Y++)w.push(1);else for(let Y=0;Y<h.length-2;Y++)w.push(m1.adjustPadAndReturnShape(h[Y+2],B[Y],v[Y],y[Y],F,Y,Y+h.length-2,N))}static adjustPadAndReturnShape(u,h,w,B,v,y,F,N){let Y=w*(B-1)+1;if(!N||N==="NOTSET")return Math.floor((u+v[y]+v[F]-Y)/h+1);switch(N){case"VALID":return v[y]=0,v[F]=0,Math.floor((u-Y)/h+1);case"SAME_LOWER":case"SAME_UPPER":if(w!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let tA=((u+h-1)/h-1)*h+B-u;return v[y]=Math.floor(N==="SAME_LOWER"?(tA+1)/2:tA/2),v[F]=tA-v[y],Math.floor((u+tA-B)/h+1)}default:throw new Error("Unsupported AutoPad type")}}},Ce=class{static getShapeOfGemmResult(n,u,h,w,B){if(n.length!==2||h.length!==2)throw new Error("shape need to be of size 2");let v,y,F;u?(v=n[1],y=n[0]):(v=n[0],y=n[1]);let N=-1;if(w?(F=h[0],N=1):(F=h[1],N=0),h[N]!==y)throw new Error("dimension mismatch");if(v<=0||F<=0||y<=0)throw new Error("invalid shape specified");if(B&&!Se.isValidBroadcast(B,[v,F]))throw new Error("gemm: invalid bias shape for broadcast");return[v,F,y]}},Yt=-34028234663852886e22,Vt=34028234663852886e22}),Rt=TA(()=>{Dt(),St(),cr=64,sr=(n,u)=>{if(u===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(n)){case 10:return u>1?`vec${u}<f16>`:"f16";case 1:return u>1?`vec${u}<f32>`:"f32";case 6:return u>1?`vec${u}<i32>`:"i32";case 12:return u>1?`vec${u}<u32>`:"u32";case 7:if(u>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(u>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(u!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${n}`)}},jt=(n,u=1)=>{let h=sr(n,u);return typeof h=="string"?h:h[0]},je=(n,u=1)=>{let h=sr(n,u);return typeof h=="string"?h:h[1]},Ke=(...n)=>{let u=[];return n.forEach(h=>{h.length!==0&&u.push({type:12,data:h},{type:12,data:HA.computeStrides(h)})}),u},Jt=n=>n%4==0?4:n%2==0?2:1,Ya=(n="f32",u,h="0")=>u&&u!==1?`vec${u}<${n}>(${h})`:`${n}(${h})`,pa=(n,u,h)=>n==="f32"?h:u===1?`f32(${h})`:`vec${u}<f32>(${h})`,ir=(n,u)=>u===4?`(${n}.x + ${n}.y + ${n}.z + ${n}.w)`:u===2?`(${n}.x + ${n}.y)`:u===3?`(${n}.x + ${n}.y + ${n}.z)`:n,rt=(n,u,h,w)=>n.startsWith("uniforms.")&&h>4?typeof u=="string"?w==="f16"?`${n}[(${u}) / 8][(${u}) % 8 / 4][(${u}) % 8 % 4]`:`${n}[(${u}) / 4][(${u}) % 4]`:w==="f16"?`${n}[${Math.floor(u/8)}][${Math.floor(u%8/4)}][${u%8%4}]`:`${n}[${Math.floor(u/4)}][${u%4}]`:h>1?`${n}[${u}]`:n,dr=(n,u,h,w,B)=>{let v=typeof h=="number",y=v?h:h.length,F=[...new Array(y).keys()],N=y<2?"u32":y<=4?`vec${y}<u32>`:`array<u32, ${y}>`,Y=sr(u,B),tA=typeof Y=="string"?Y:Y[1],Q=typeof Y=="string"?Y:Y[0],iA={indices:N,value:tA,storage:Q,tensor:u},oA=we=>typeof we=="string"?we:`${we}u`,dA={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},fA=v?"uniforms.":"",wA=`${fA}${n}_shape`,MA=`${fA}${n}_strides`,DA="";for(let we=0;we<y-1;we++)DA+=`
    let dim${we} = current / ${rt(MA,we,y)};
    let rest${we} = current % ${rt(MA,we,y)};
    indices[${we}] = dim${we};
    current = rest${we};
    `;DA+=`indices[${y-1}] = current;`;let LA=y<2?"":`
  fn o2i_${n}(offset: u32) -> ${iA.indices} {
    var indices: ${iA.indices};
    var current = offset;
    ${DA}
    return indices;
  }`,ZA=[];if(y>=2)for(let we=y-1;we>=0;we--)ZA.push(`${rt(MA,we,y)} * (indices[${we}])`);let JA=y<2?"":`
  fn i2o_${n}(indices: ${iA.indices}) -> u32 {
    return ${ZA.join("+")};
  }`,ne=(...we)=>y===0?"0u":`${iA.indices}(${we.map(oA).join(",")})`,Le=(we,Ue)=>y<2?`${we}`:`${rt(we,Ue,y)}`,st={},ht=(we,Ue)=>(()=>{if(iA.storage===iA.value)return`${n}[${we}]=${Ue};`;if(iA.storage==="vec2<u32>"&&iA.value==="i32")return`${n}[${we}]=vec2<u32>(u32(${Ue}), select(0u, 0xFFFFFFFFu, ${Ue} < 0));`;if(iA.storage==="vec2<u32>"&&iA.value==="u32")return`${n}[${we}]=vec2<u32>(u32(${Ue}), 0u);`;if(iA.storage==="u32"&&iA.value==="vec4<bool>")return`${n}[${we}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${Ue}));`;throw new Error(`not supported combination of storage type ${iA.storage} and value type ${iA.value} yet`)})(),pt=we=>(()=>{if(iA.storage===iA.value)return`${n}[${we}]`;if(iA.storage==="vec2<u32>"&&iA.value==="i32")return`i32(${n}[${we}].x)`;if(iA.storage==="vec2<u32>"&&iA.value==="u32")return`u32(${n}[${we}].x)`;if(iA.storage==="u32"&&iA.value==="vec4<bool>")return`vec4<bool>(bool(${n}[${we}] & 0xFFu), bool(${n}[${we}] & 0xFF00u), bool(${n}[${we}] & 0xFF0000u), bool(${n}[${we}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${iA.storage} and value type ${iA.value} yet`)})(),mt=y<2?"":`
  fn get_${n}ByIndices(indices: ${iA.indices}) -> ${tA} {
    return ${pt(`i2o_${n}(indices)`)};
  }`,vt=y<2?"":(()=>{let we=F.map(et=>`d${et}: u32`).join(", "),Ue=F.map(et=>`d${et}`).join(", ");return`
  fn get_${n}(${we}) -> ${tA} {
    return get_${n}ByIndices(${ne(Ue)});
  }`})(),tt=y<2?"":`
  fn set_${n}ByIndices(indices: ${iA.indices}, value: ${tA}) {
    ${ht(`i2o_${n}(indices)`,"value")}
  }`,gt=y<2?"":(()=>{let we=F.map(et=>`d${et}: u32`).join(", "),Ue=F.map(et=>`d${et}`).join(", ");return`
  fn set_${n}(${we}, value: ${tA}) {
    set_${n}ByIndices(${ne(Ue)}, value);
  }`})();return{impl:()=>{let we=[],Ue=!1;return dA.offsetToIndices&&(we.push(LA),Ue=!0),dA.indicesToOffset&&(we.push(JA),Ue=!0),dA.broadcastedIndicesToOffset&&(Object.values(st).forEach(et=>we.push(et)),Ue=!0),dA.set&&(we.push(gt),Ue=!0),dA.setByIndices&&(we.push(tt),Ue=!0),dA.get&&(we.push(vt),Ue=!0),dA.getByIndices&&(we.push(mt),Ue=!0),!v&&Ue&&we.unshift(`const ${wA} = ${iA.indices}(${h.join(",")});`,`const ${MA} = ${iA.indices}(${HA.computeStrides(h).join(",")});`),we.join(`
`)},type:iA,offsetToIndices:we=>(dA.offsetToIndices=!0,y<2?we:`o2i_${n}(${we})`),indicesToOffset:we=>(dA.indicesToOffset=!0,y<2?we:`i2o_${n}(${we})`),broadcastedIndicesToOffset:(we,Ue)=>{dA.broadcastedIndicesToOffset=!0;let et=`${Ue.name}broadcastedIndicesTo${n}Offset`;if(et in st)return`${et}(${we})`;let yt=[];for(let gr=y-1;gr>=0;gr--){let ga=Ue.indicesGet("outputIndices",gr+Ue.rank-y);yt.push(`${Le(MA,gr)} * (${ga} % ${Le(wA,gr)})`)}return st[et]=`fn ${et}(outputIndices: ${Ue.type.indices}) -> u32 {
             return ${yt.length>0?yt.join("+"):"0u"};
           }`,`${et}(${we})`},indices:ne,indicesGet:Le,indicesSet:(we,Ue,et)=>y<2?`${we}=${et};`:`${rt(we,Ue,y)}=${et};`,set:(...we)=>{if(we.length!==y+1)throw new Error(`indices length must be ${y}`);let Ue=we[y];if(typeof Ue!="string")throw new Error("value must be string");let et=we.slice(0,y).map(oA).join(",");return y===0?ht("0u",Ue):y===1?ht(et[0],Ue):(dA.set=!0,dA.setByIndices=!0,dA.indicesToOffset=!0,`set_${n}(${et}, ${Ue})`)},setByOffset:ht,setByIndices:(we,Ue)=>y<2?ht(we,Ue):(dA.setByIndices=!0,dA.indicesToOffset=!0,`set_${n}ByIndices(${we}, ${Ue});`),get:(...we)=>{if(we.length!==y)throw new Error(`indices length must be ${y}`);let Ue=we.map(oA).join(",");return y===0?pt("0u"):y===1?pt(Ue[0]):(dA.get=!0,dA.getByIndices=!0,dA.indicesToOffset=!0,`get_${n}(${Ue})`)},getByOffset:pt,getByIndices:we=>y<2?pt(we):(dA.getByIndices=!0,dA.indicesToOffset=!0,`get_${n}ByIndices(${we})`),usage:w,name:n,strides:MA,shape:wA,rank:y}},ge=(n,u,h,w=1)=>dr(n,u,h,"input",w),Je=(n,u,h,w=1)=>dr(n,u,h,"output",w),ha=(n,u,h)=>dr(n,u,h,"atomicOutput",1),Nr=(n,u,h,w=1)=>dr(n,u,h,"internal",w),Rr=class{constructor(n,u){this.normalizedDispatchGroup=n,this.limits=u,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(n){return`if (global_idx >= ${typeof n=="number"?`${n}u`:n}) { return; }`}mainStart(n=cr){let u=typeof n=="number"?n:n[0],h=typeof n=="number"?1:n[1],w=typeof n=="number"?1:n[2];if(u>this.limits.maxComputeWorkgroupSizeX||h>this.limits.maxComputeWorkgroupSizeY||w>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${u}, ${h}, ${w}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(u*h*w>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${u}, ${h}, ${w}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let B=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1;return`@compute @workgroup_size(${u}, ${h}, ${w})
  fn main(${B?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`}) {
    ${B?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${u*h*w}u + local_idx;`}
  `}appendVariableUniforms(n){n.rank!==0&&(n.shape.startsWith("uniforms.")&&this.uniforms.push({name:n.shape.replace("uniforms.",""),type:"u32",length:n.rank}),n.strides.startsWith("uniforms.")&&this.uniforms.push({name:n.strides.replace("uniforms.",""),type:"u32",length:n.rank}))}declareVariable(n,u){if(n.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(n),this.appendVariableUniforms(n);let h=n.usage==="input"?"read":"read_write",w=n.usage==="atomicOutput"?"atomic<i32>":n.type.storage;return`@group(0) @binding(${u}) var<storage, ${h}> ${n.name}: array<${w}>;`}declareVariables(...n){return n.map(u=>this.declareVariable(u,this.variableIndex++)).join(`
`)}registerInternalVariable(n){if(n.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(n),this.appendVariableUniforms(n)}registerInternalVariables(...n){return n.forEach(u=>this.registerInternalVariable(u)),this}registerUniform(n,u,h=1){return this.uniforms.push({name:n,type:u,length:h}),this}registerUniforms(n){return this.uniforms=this.uniforms.concat(n),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let n=[];for(let{name:u,type:h,length:w}of this.uniforms)if(w&&w>4)h==="f16"?n.push(`@align(16) ${u}:array<mat2x4<${h}>, ${Math.ceil(w/8)}>`):n.push(`${u}:array<vec4<${h}>, ${Math.ceil(w/4)}>`);else{let B=w==null||w===1?h:`vec${w}<${h}>`;n.push(`${u}:${B}`)}return`
      struct Uniforms { ${n.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(n=>n.impl()).join(`
`)+this.internalVariables.map(n=>n.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let n=u=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(u)];return this.uniforms.map(u=>[n(u.type),u.length??1])}},Qr=(n,u)=>new Rr(n,u)}),Ji=TA(()=>{Dt(),St(),qr(),Rt(),Cr=(n,u)=>{if(!n||n.length!==1)throw new Error("Transpose requires 1 input.");if(u.length!==0&&u.length!==n[0].dims.length)throw new Error(`perm size ${u.length} does not match input rank ${n[0].dims.length}`)},Ut=(n,u)=>u.length!==0?u:[...new Array(n).keys()].reverse(),xr=(n,u)=>HA.sortBasedOnPerm(n,Ut(n.length,u)),Ai=(n,u,h,w)=>{let B=`fn perm(i: ${w.type.indices}) -> ${h.type.indices} {
    var a: ${h.type.indices};`;for(let v=0;v<u;++v)B+=`a[${n[v]}]=i[${v}];`;return B+"return a;}"},Ha=(n,u)=>{let h=[],w=[];for(let B=0;B<n.length;++B)n[B]!==1&&h.push(n[B]),n[u[B]]!==1&&w.push(u[B]);return{newShape:h,newPerm:w}},Pi=(n,u)=>{let h=0;for(let w=0;w<n.length;++w)if(u[n[w]]!==1){if(n[w]<h)return!1;h=n[w]}return!0},Ga=(n,u)=>{let h,w=n.dataType,B=n.dims.length,v=Ut(B,u),y=xr(n.dims,v),F=n.dims,N=y;if(B<2||Pi(v,n.dims))return h=oA=>{let dA=ge("input",w,F,4),fA=Je("output",w,N,4);return`
  ${oA.registerUniform("output_size","u32").declareVariables(dA,fA)}
  ${oA.mainStart()}
    ${oA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let oA=HA.size(y);return{outputs:[{dims:y,dataType:n.dataType}],dispatchGroup:{x:Math.ceil(oA/64/4)},programUniforms:[{type:12,data:Math.ceil(oA/4)}]}},getShaderSource:h};let{newShape:Y,newPerm:tA}=Ha(n.dims,v),Q=HA.areEqual(tA,[2,3,1]),iA=HA.areEqual(tA,[3,1,2]);if(Y.length===2||Q||iA){F=Q?[Y[0],Y[1]*Y[2]]:iA?[Y[0]*Y[1],Y[2]]:Y,N=[F[1],F[0]];let oA=16;return h=dA=>{let fA=ge("a",w,F.length),wA=Je("output",w,N.length);return`
  ${dA.registerUniform("output_size","u32").declareVariables(fA,wA)}
  var<workgroup> tile : array<array<${wA.type.value}, ${oA+1}>, ${oA}>;
  ${dA.mainStart([oA,oA,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${oA} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${oA}u + local_id.x;
    let input_row = workgroup_id_x * ${oA}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${fA.getByIndices(`${fA.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${oA}u + local_id.x;
    let output_row = workgroup_id_y * ${oA}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${wA.setByIndices(`${wA.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let dA=HA.size(y);return{outputs:[{dims:y,dataType:n.dataType}],dispatchGroup:{x:Math.ceil(N[1]/oA),y:Math.ceil(N[0]/oA)},programUniforms:[{type:12,data:dA},...Ke(F,N)]}},getShaderSource:h}}return h=oA=>{let dA=ge("a",w,F.length),fA=Je("output",w,N.length);return`
  ${oA.registerUniform("output_size","u32").declareVariables(dA,fA)}

  ${Ai(v,B,dA,fA)}

  ${oA.mainStart()}
    ${oA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${fA.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${fA.setByOffset("global_idx",dA.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${u}`,inputDependencies:["rank"]},getRunData:()=>{let oA=HA.size(y);return{outputs:[{dims:y,dataType:n.dataType}],dispatchGroup:{x:Math.ceil(oA/64)},programUniforms:[{type:12,data:oA},...Ke(F,N)]}},getShaderSource:h}},zi=(n,u)=>{Cr(n.inputs,u.perm),n.compute(Ga(n.inputs[0],u.perm))},Gt=n=>$A({perm:n.perm})}),oc=TA(()=>{Dt(),St(),Rt(),o1(),Ji(),ta={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Wa={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},e0={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},t0={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},r0=(n,u)=>{let h=[];for(let w=u-n;w<u;++w)h.push(w);return h},a0=(n,u)=>{let h=[],w=n.length;for(let v=0;v<w;v++)u.indexOf(v)===-1&&h.push(n[v]);let B=u.map(v=>n[v]);return[h,B]},ei=(n,u)=>{let h=n.length+u.length,w=[],B=0;for(let v=0;v<h;v++)u.indexOf(v)===-1?w.push(n[B++]):w.push(1);return w},Ls=(n,u)=>{for(let h=0;h<n.length;++h)if(n[n.length-h-1]!==u-1-h)return!1;return!0},s0=(n,u)=>{let h=[];if(!Ls(n,u)){for(let w=0;w<u;++w)n.indexOf(w)===-1&&h.push(w);n.forEach(w=>h.push(w))}return h},Fi=(n,u,h,w,B,v,y)=>{let F=h[0].dims,N=HA.size(v),Y=HA.size(y),tA=ge("_A",h[0].dataType,F),Q=Je("output",B,v),iA=64;N===1&&(iA=256);let oA=`
          var<workgroup> aBestValues : array<f32, ${iA}>;
       `;return{name:n,shaderCache:{hint:`${u};${iA}`,inputDependencies:["type"]},getShaderSource:dA=>`
        ${dA.registerUniform("reduceSize","u32").declareVariables(tA,Q)}
        ${oA}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${dA.mainStart(iA)}

          let outputIndex = global_idx / ${iA};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${e0[w]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${iA}) {
           let candidate = f32(${tA.getByOffset("offset + k")});
           bestValue = ${ta[w]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${iA}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Wa[w]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${Q.setByOffset("outputIndex",w==="mean"?`${Q.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${Q.type.storage}(${t0[w]})`)};
         }
        }`,getRunData:()=>({outputs:[{dims:v,dataType:B}],dispatchGroup:{x:N},programUniforms:[{type:12,data:Y}]})}},Ta=(n,u,h,w)=>{let B=n.inputs.length===1?h:mi(n.inputs,h),v=B.axes;v.length===0&&!B.noopWithEmptyAxes&&(v=n.inputs[0].dims.map((oA,dA)=>dA));let y=HA.normalizeAxes(v,n.inputs[0].dims.length),F=y,N=n.inputs[0],Y=s0(F,n.inputs[0].dims.length);Y.length>0&&(N=n.compute(Ga(n.inputs[0],Y),{inputs:[0],outputs:[-1]})[0],F=r0(F.length,N.dims.length));let[tA,Q]=a0(N.dims,F),iA=tA;B.keepDims&&(iA=ei(tA,y)),n.compute(Fi(u,B.cacheKey,[N],w,n.inputs[0].dataType,iA,Q),{inputs:[N]})},Kr=(n,u)=>{Ta(n,"ReduceMeanShared",u,"mean")},qe=(n,u)=>{Ta(n,"ReduceL1Shared",u,"l1")},Da=(n,u)=>{Ta(n,"ReduceL2Shared",u,"l2")},nn=(n,u)=>{Ta(n,"ReduceLogSumExpShared",u,"logSumExp")},Si=(n,u)=>{Ta(n,"ReduceMaxShared",u,"max")},on=(n,u)=>{Ta(n,"ReduceMinShared",u,"min")},i0=(n,u)=>{Ta(n,"ReduceProdShared",u,"prod")},n0=(n,u)=>{Ta(n,"ReduceSumShared",u,"sum")},ln=(n,u)=>{Ta(n,"ReduceSumSquareShared",u,"sumSquare")},R0=(n,u)=>{Ta(n,"ReduceLogSumShared",u,"logSum")}}),o1=TA(()=>{Dt(),St(),qr(),Rt(),oc(),Pa=n=>{if(!n||n.length===0||n.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(n.length===2&&n[1].dims.length!==1)throw new Error("Invalid axes input dims.")},rr=n=>["","",`var value = ${n.getByIndices("input_indices")};`,""],hi=(n,u,h,w,B,v,y=!1,F=!1)=>{let N=[],Y=h[0].dims,tA=Y.length,Q=HA.normalizeAxes(B,tA),iA=!F&&Q.length===0;Y.forEach((fA,wA)=>{iA||Q.indexOf(wA)>=0?y&&N.push(1):N.push(fA)});let oA=N.length,dA=HA.size(N);return{name:n,shaderCache:u,getShaderSource:fA=>{let wA=[],MA=ge("_A",h[0].dataType,tA),DA=Je("output",v,oA),LA=w(MA,DA,Q),ZA=LA[2];for(let JA=0,ne=0;JA<tA;JA++)iA||Q.indexOf(JA)>=0?(y&&ne++,ZA=`for(var j${JA}: u32 = 0; j${JA} < ${Y[JA]}; j${JA}++) {
                  ${LA[2].includes("last_index")?`let last_index = j${JA};`:""}
                  ${MA.indicesSet("input_indices",JA,`j${JA}`)}
                  ${ZA}
                }`):(wA.push(`${MA.indicesSet("input_indices",JA,DA.indicesGet("output_indices",ne))};`),ne++);return`

        ${fA.registerUniform("output_size","u32").declareVariables(MA,DA)}

        ${fA.mainStart()}
          ${fA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${MA.type.indices};
          let output_indices = ${DA.offsetToIndices("global_idx")};

          ${wA.join(`
`)}
          ${LA[0]}       // init ops for reduce max/min
          ${LA[1]}
          ${ZA}
          ${LA[3]}
          ${LA.length===4?DA.setByOffset("global_idx","value"):LA.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:N,dataType:v}],dispatchGroup:{x:Math.ceil(dA/64)},programUniforms:[{type:12,data:dA},...Ke(Y,N)]})}},mi=(n,u)=>{let h=[];return n[1].dims[0]>0&&n[1].getBigInt64Array().forEach(w=>h.push(Number(w))),$A({axes:h,keepDims:u.keepDims,noopWithEmptyAxes:u.noopWithEmptyAxes})},xa=(n,u,h,w)=>{let B=n.inputs,v=B.length===1?h:mi(B,h);n.compute(hi(u,{hint:v.cacheKey,inputDependencies:["rank"]},[B[0]],v.noopWithEmptyAxes&&v.axes.length===0?rr:w,v.axes,B[0].dataType,v.keepDims,v.noopWithEmptyAxes),{inputs:[0]})},Ys=(n,u)=>{Pa(n.inputs),xa(n,"ReduceLogSum",u,(h,w)=>[`var value = ${w.type.storage}(0);`,"",`value += ${h.getByIndices("input_indices")};`,"value = log(value);"])},as=(n,u)=>{Pa(n.inputs),xa(n,"ReduceL1",u,(h,w)=>[`var value = ${w.type.storage}(0);`,"",`value += abs(${h.getByIndices("input_indices")});`,""])},cn=(n,u)=>{Pa(n.inputs),xa(n,"ReduceL2",u,(h,w)=>[`var t = ${w.type.value}(0); var value = ${w.type.value}(0);`,"",`t = ${h.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},gn=(n,u)=>{Pa(n.inputs),xa(n,"ReduceLogSumExp",u,(h,w)=>[`var value = ${w.type.storage}(0);`,"",`value += exp(${h.getByIndices("input_indices")});`,"value = log(value);"])},Hs=(n,u)=>{Pa(n.inputs),xa(n,"ReduceMax",u,(h,w,B)=>{let v=[];for(let y=0;y<h.rank;y++)(B.indexOf(y)>=0||B.length===0)&&v.push(h.indicesSet("input_indices",y,0));return[`${v.join(`
`)}`,`var value = ${h.getByIndices("input_indices")};`,`value = max(value, ${h.getByIndices("input_indices")});`,""]})},un=(n,u)=>{Pa(n.inputs),xa(n,"ReduceMean",u,(h,w,B)=>{let v=1;for(let y=0;y<h.rank;y++)(B.indexOf(y)>=0||B.length===0)&&(v*=n.inputs[0].dims[y]);return["var sum = f32(0);","",`sum += f32(${h.getByIndices("input_indices")});`,`let value = ${w.type.value}(sum / ${v});`]})},dn=(n,u)=>{Pa(n.inputs),xa(n,"ReduceMin",u,(h,w,B)=>{let v=[];for(let y=0;y<h.rank;y++)(B.indexOf(y)>=0||B.length===0)&&v.push(`input_indices[${y}] = 0;`);return[`${v.join(`
`)}`,`var value = ${h.getByIndices("input_indices")};`,`value = min(value, ${h.getByIndices("input_indices")});`,""]})},fn=(n,u)=>{Pa(n.inputs),xa(n,"ReduceProd",u,(h,w)=>[`var value = ${w.type.storage}(1);`,"",`value *= ${h.getByIndices("input_indices")};`,""])},De=(n,u)=>{Pa(n.inputs),xa(n,"ReduceSum",u,(h,w)=>[`var value = ${w.type.storage}(0);`,"",`value += ${h.getByIndices("input_indices")};`,""])},Rs=(n,u)=>{Pa(n.inputs),xa(n,"ReduceSumSquare",u,(h,w)=>[`var t = ${w.type.value}(0); var value = ${w.type.value}(0);`,"",`t = ${h.getByIndices("input_indices")}; value += t * t;`,""])},Re=(n,u,h)=>{if(u.length===0)return h;let w=1,B=1;for(let v=0;v<u.length;v++)u.indexOf(v)===-1?w*=n[v]:B*=n[v];return B<32&&w>1024},pn=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?un(n,u):Kr(n,u)},Ni=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?as(n,u):qe(n,u)},Ba=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?cn(n,u):Da(n,u)},za=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?gn(n,u):nn(n,u)},ti=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?Hs(n,u):Si(n,u)},Ci=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?dn(n,u):on(n,u)},hn=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?fn(n,u):i0(n,u)},Pr=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?De(n,u):n0(n,u)},o0=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?Rs(n,u):ln(n,u)},l0=(n,u)=>{Re(n.inputs[0].dims,u.axes,u.noopWithEmptyAxes)?Ys(n,u):R0(n,u)}}),lc=TA(()=>{Dt(),qr(),o1(),vs=n=>{if(!n||n.length===0||n.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(n[0].dataType!==1)throw new Error("Invalid input type.")},ri=(n,u)=>{vs(n.inputs),n.compute(hi("ArgMin",{hint:u.cacheKey,inputDependencies:["rank"]},[n.inputs[0]],(h,w,B)=>{let v=[];for(let y=0;y<h.rank;y++)(B.indexOf(y)>=0||B.length===0)&&v.push(`input_indices[${y}] = 0;`);return[`${v.join(`
`)}`,`var value = ${h.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${h.getByIndices("input_indices")} ${u.selectLastIndex>0?"<=":"<"} value) {
         value = ${h.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",w.setByOffset("global_idx","best_index")]},[u.axis],7,u.keepDims),{inputs:[0]})},c0=(n,u)=>{vs(n.inputs),n.compute(hi("argMax",{hint:u.cacheKey,inputDependencies:["rank"]},[n.inputs[0]],(h,w,B)=>{let v=[];for(let y=0;y<h.rank;y++)(B.indexOf(y)>=0||B.length===0)&&v.push(`input_indices[${y}] = 0;`);return[`${v.join(`
`)}`,`var value = ${h.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${h.getByIndices("input_indices")} ${u.selectLastIndex>0?">=":">"} value) {
         value = ${h.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",w.setByOffset("global_idx","best_index")]},[u.axis],7,u.keepDims),{inputs:[0]})},Oi=n=>$A(n)}),l1=TA(()=>{Dt(),St(),n1(),Rt(),ai=(n,u)=>{let h=n[0],w=n[1],B=n[2],v=n[3],y=n[4],F=n[5];if(y&&F)throw new Error("Attention cannot have both past and attention_bias");if(h.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let N=h.dims[0],Y=h.dims[1],tA=h.dims[2];if(B.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(w.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(w.dims[0]!==tA)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(B.dims[0]!==w.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let Q=B.dims[0]/3,iA=Q,oA=iA;if(u.qkvHiddenSizes.length>0){if(u.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let MA of u.qkvHiddenSizes)if(MA%u.numHeads!=0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");Q=u.qkvHiddenSizes[0],iA=u.qkvHiddenSizes[1],oA=u.qkvHiddenSizes[2]}let dA=Y;if(Q!==iA)throw new Error("qkv_hidden_sizes first element should be same as the second");if(B.dims[0]!==Q+iA+oA)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let fA=0;if(y){if(iA!==oA)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(y.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(y.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(y.dims[1]!==N)throw new Error('Input "past" second dimension must be batch_size');if(y.dims[2]!==u.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(y.dims[4]!==iA/u.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');u.pastPresentShareBuffer||(fA=y.dims[3])}let wA=dA+fA;if(v)throw new Error("Mask not supported");if(y)throw new Error("past is not supported");if(F){if(F.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(F.dims[0]!==N||F.dims[1]!==u.numHeads||F.dims[2]!==Y||F.dims[3]!==wA)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:N,sequenceLength:Y,pastSequenceLength:fA,kvSequenceLength:dA,totalSequenceLength:wA,maxSequenceLength:-1,inputHiddenSize:tA,hiddenSize:Q,vHiddenSize:oA,headSize:Math.floor(Q/u.numHeads),vHeadSize:Math.floor(oA/u.numHeads),numHeads:u.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:u.maskFilterValue,maskType:0,scale:u.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},He=(n,u,h)=>u&&n?`
      let total_sequence_length_input = u32(${u.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${n?.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${h?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,Ja=(n,u,h,w,B,v,y,F)=>{let N=Jt(y?1:v),Y=64,tA=v/N;tA<Y&&(Y=32);let Q=Math.ceil(v/N/Y),iA=[{type:12,data:u},{type:12,data:h},{type:12,data:w},{type:12,data:B},{type:12,data:tA},{type:12,data:Q}],oA=jt(n.dataType,N),dA=je(1,N),fA=["type"];return y&&fA.push("type"),F&&fA.push("type"),{name:"AttentionProbsSoftmax",shaderCache:{hint:`${Y};${oA};${N}`,inputDependencies:fA},getShaderSource:wA=>{let MA=Je("x",n.dataType,n.dims,N),DA=[MA],LA=y?ge("seq_lens",y.dataType,y.dims):void 0;LA&&DA.push(LA);let ZA=F?ge("total_sequence_length_input",F.dataType,F.dims):void 0;ZA&&DA.push(ZA);let JA=je(n.dataType);return`
  var<workgroup> thread_max: array<f32, ${Y}>;
  var<workgroup> thread_sum: array<f32, ${Y}>;
  ${wA.registerUniforms([{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}]).declareVariables(...DA)}
  ${wA.mainStart([Y,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${He(LA,ZA,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${Y}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${y?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${dA}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${dA}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(N){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${N}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${Y}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${dA}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${dA}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(N){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${N}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${Y}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${MA.type.value}(${JA}(1.0) / ${JA}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${dA}(x[offset + i]);
        x[offset + i] = ${MA.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${y?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${MA.type.value}(${JA}(0));
        }`:""};
  }`},getRunData:()=>({outputs:[],dispatchGroup:{x:Math.ceil(v/Y),y:B,z:u*h},programUniforms:iA})}},mn=(n,u,h,w,B,v,y,F,N)=>{let Y=y+v.kvSequenceLength,tA=[v.batchSize,v.numHeads,v.sequenceLength,Y],Q=n>1&&w,iA=v.kvNumHeads?v.kvNumHeads:v.numHeads,oA=Q?[v.batchSize,iA,Y,v.headSize]:void 0,dA=v.nReps?v.nReps:1,fA=v.scale===0?1/Math.sqrt(v.headSize):v.scale,wA=Jt(v.headSize),MA=v.headSize/wA,DA=12,LA={x:Math.ceil(Y/DA),y:Math.ceil(v.sequenceLength/DA),z:v.batchSize*v.numHeads},ZA=[{type:12,data:v.sequenceLength},{type:12,data:MA},{type:12,data:Y},{type:12,data:v.numHeads},{type:12,data:v.headSize},{type:1,data:fA},{type:12,data:y},{type:12,data:v.kvSequenceLength},{type:12,data:dA}],JA=Q&&w&&HA.size(w.dims)>0,ne=["type","type"];JA&&ne.push("type"),B&&ne.push("type"),F&&ne.push("type"),N&&ne.push("type");let Le=[{dims:tA,dataType:u.dataType,gpuDataType:0}];return Q&&Le.push({dims:oA,dataType:u.dataType,gpuDataType:0}),{name:"AttentionProbs",shaderCache:{hint:`${wA};${B!==void 0};${w!==void 0};${n}`,inputDependencies:ne},getRunData:()=>({outputs:Le,dispatchGroup:LA,programUniforms:ZA}),getShaderSource:st=>{let ht=ge("q",u.dataType,u.dims,wA),pt=[ht,ge("key",h.dataType,h.dims,wA)];if(JA){let Ue=ge("past_key",w.dataType,w.dims,wA);pt.push(Ue)}B&&pt.push(ge("attention_bias",B.dataType,B.dims));let mt=F?ge("seq_lens",F.dataType,F.dims):void 0;mt&&pt.push(mt);let vt=N?ge("total_sequence_length_input",N.dataType,N.dims):void 0;vt&&pt.push(vt);let tt=Je("output",u.dataType,tA),gt=[tt];Q&&gt.push(Je("present_key",u.dataType,oA,wA));let we=je(1,wA);return`
  const TILE_SIZE = 12u;

  var<workgroup> tileQ: array<${ht.type.storage}, 144>;
  var<workgroup> tileK: array<${ht.type.storage}, 144>;
  ${st.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}]).declareVariables(...pt,...gt)}
  ${st.mainStart([DA,DA,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${dA===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${dA===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${He(mt,vt,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${JA&&Q?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${Q?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${we}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${JA&&Q?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${Q?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${we}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(wA){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${wA}`)}})()};
        output[outputIdx] = ${tt.type.value} (sum * uniforms.alpha) + ${B?"attention_bias[outputIdx]":"0.0"};
    }
  }`}}},bi=(n,u,h,w,B,v,y=void 0,F=void 0)=>{let N=v+B.kvSequenceLength,Y=B.nReps?B.nReps:1,tA=B.vHiddenSize*Y,Q=n>1&&w,iA=B.kvNumHeads?B.kvNumHeads:B.numHeads,oA=Q?[B.batchSize,iA,N,B.headSize]:void 0,dA=[B.batchSize,B.sequenceLength,tA],fA=12,wA={x:Math.ceil(B.vHeadSize/fA),y:Math.ceil(B.sequenceLength/fA),z:B.batchSize*B.numHeads},MA=[{type:12,data:B.sequenceLength},{type:12,data:N},{type:12,data:B.vHeadSize},{type:12,data:B.numHeads},{type:12,data:B.headSize},{type:12,data:tA},{type:12,data:v},{type:12,data:B.kvSequenceLength},{type:12,data:Y}],DA=Q&&w&&HA.size(w.dims)>0,LA=["type","type"];DA&&LA.push("type"),y&&LA.push("type"),F&&LA.push("type");let ZA=[{dims:dA,dataType:u.dataType,gpuDataType:0}];return Q&&ZA.push({dims:oA,dataType:u.dataType,gpuDataType:0}),{name:"AttentionScore",shaderCache:{hint:`${w!==void 0};${n}`,inputDependencies:LA},getRunData:()=>({outputs:ZA,dispatchGroup:wA,programUniforms:MA}),getShaderSource:JA=>{let ne=ge("probs",u.dataType,u.dims),Le=[ne,ge("v",h.dataType,h.dims)];DA&&Le.push(ge("past_value",w.dataType,w.dims));let st=y?ge("seq_lens",y.dataType,y.dims):void 0;y&&Le.push(st);let ht=F?ge("total_sequence_length_input",F.dataType,F.dims):void 0;F&&Le.push(ht);let pt=[Je("output",u.dataType,dA)];return Q&&pt.push(Je("present_value",u.dataType,oA)),`
  const TILE_SIZE = 12u;
  var<workgroup> tileQ: array<${ne.type.value}, 144>;
  var<workgroup> tileV: array<${ne.type.value}, 144>;
  ${JA.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}]).declareVariables(...Le,...pt)}
  ${JA.mainStart([fA,fA,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${Y===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${Y===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${He(st,ht,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${DA&&Q?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${Q?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${ne.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${DA&&Q?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${Q?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`}}},ds=(n,u,h,w,B,v,y,F,N,Y,tA=void 0,Q=void 0)=>{let iA=Math.min(n.outputCount,1+(y?1:0)+(F?1:0)),oA=iA>1?Y.pastSequenceLength:0,dA=oA+Y.kvSequenceLength,fA=N&&HA.size(N.dims)>0?N:void 0,wA=[u,h];iA>1&&y&&HA.size(y.dims)>0&&wA.push(y),fA&&wA.push(fA),tA&&wA.push(tA),Q&&wA.push(Q);let MA=n.compute(mn(iA,u,h,y,fA,Y,oA,tA,Q),{inputs:wA,outputs:iA>1?[-1,1]:[-1]})[0];n.compute(Ja(MA,Y.batchSize,Y.numHeads,oA,Y.sequenceLength,dA,tA,Q),{inputs:tA&&Q?[MA,tA,Q]:[MA],outputs:[]});let DA=[MA,w];iA>1&&F&&HA.size(F.dims)>0&&DA.push(F),tA&&DA.push(tA),Q&&DA.push(Q),n.compute(bi(iA,MA,w,F,Y,oA,tA,Q),{inputs:DA,outputs:iA>1?[0,2]:[0]})},Cn=(n,u)=>{let h=[u.batchSize,u.numHeads,u.sequenceLength,u.headSize],w=u.sequenceLength,B=u.inputHiddenSize,v=u.headSize,y=12,F={x:Math.ceil(u.headSize/y),y:Math.ceil(u.sequenceLength/y),z:u.batchSize*u.numHeads},N=[n.inputs[0],n.inputs[1],n.inputs[2]],Y=[{type:12,data:w},{type:12,data:B},{type:12,data:v},{type:12,data:u.numHeads},{type:12,data:u.headSize},{type:12,data:u.hiddenSize},{type:12,data:u.hiddenSize+u.hiddenSize+u.vHiddenSize}];return n.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:h,dataType:n.inputs[0].dataType,gpuDataType:0},{dims:h,dataType:n.inputs[0].dataType,gpuDataType:0},{dims:h,dataType:n.inputs[0].dataType,gpuDataType:0}],dispatchGroup:F,programUniforms:Y}),getShaderSource:tA=>{let Q=Je("output_q",N[0].dataType,h),iA=Je("output_k",N[0].dataType,h),oA=Je("output_v",N[0].dataType,h),dA=ge("input",N[0].dataType,N[0].dims),fA=ge("weight",N[1].dataType,N[1].dims),wA=ge("bias",N[2].dataType,N[2].dims),MA=dA.type.storage;return`
  const TILE_SIZE = 12u;
  var<workgroup> tileInput: array<${MA}, 144>;
  var<workgroup> tileWeightQ: array<${MA}, 144>;
  var<workgroup> tileWeightK: array<${MA}, 144>;
  var<workgroup> tileWeightV: array<${MA}, 144>;
  ${tA.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}]).declareVariables(dA,fA,wA,Q,iA,oA)}
  ${tA.mainStart([y,y,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${MA}(0);
    var valueK = ${MA}(0);
    var valueV = ${MA}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`}},{inputs:N,outputs:[-1,-1,-1]})},g0=(n,u)=>{let h=ai(n.inputs,u),[w,B,v]=Cn(n,h);return ds(n,w,B,v,n.inputs[4],void 0,void 0,void 0,n.inputs[5],h)}}),cc=TA(()=>{he(),Dt(),St(),qr(),Rt(),u0=(n,u)=>{if(!n||n.length!==5)throw new Error("BatchNormalization requires 5 inputs");let h=(w,B,v)=>{let y=B.length;if(y!==w.length)throw new Error(`${v}: num dimensions != ${y}`);B.forEach((F,N)=>{if(F!==w[N])throw new Error(`${v}: dim[${N}] do not match`)})};if(n[0].dims.length>1){let w=u.format==="NHWC"?u.spatial?n[0].dims.slice(-1):n[0].dims.slice(-1).concat(n[0].dims.slice(1,n[0].dims.length-1)):n[0].dims.slice(1,u.spatial?2:void 0);h(n[1].dims,w,"Invalid input scale"),h(n[2].dims,w,"Invalid input B"),h(n[3].dims,w,"Invalid input mean"),h(n[4].dims,w,"Invalid input var")}else h(n[1].dims,[1],"Invalid input scale"),h(n[2].dims,[1],"Invalid input B"),h(n[3].dims,[1],"Invalid input mean"),h(n[4].dims,[1],"Invalid input var")},Li=(n,u)=>{let{epsilon:h,spatial:w,format:B}=u,v=n[0].dims,y=w?Jt(v[v.length-1]):1,F=B==="NHWC"&&v.length>1?y:1,N=HA.size(v)/y,Y=w,tA=Y?v.length:v,Q=ge("x",n[0].dataType,n[0].dims,y),iA=ge("scale",n[1].dataType,n[1].dims,F),oA=ge("bias",n[2].dataType,n[2].dims,F),dA=ge("inputMean",n[3].dataType,n[3].dims,F),fA=ge("inputVar",n[4].dataType,n[4].dims,F),wA=Je("y",n[0].dataType,tA,y);return{name:"BatchNormalization",shaderCache:{hint:`${u.epsilon}_${u.format}_${w}_${y}`,inputDependencies:Y?["rank","type","type","type","type"]:void 0},getShaderSource:MA=>`
  const epsilon = ${h};
  ${MA.registerUniform("outputSize","u32").declareVariables(Q,iA,oA,dA,fA,wA)}
  ${MA.mainStart()}
  ${MA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${wA.offsetToIndices(`global_idx * ${y}`)};
    ${(()=>{let DA="";if(w)DA=`let cOffset = ${v.length===1?"0u":B==="NHWC"?`outputIndices[${v.length-1}] / ${y}`:"outputIndices[1]"};`;else if(B==="NCHW")DA=`
            ${wA.indicesSet("outputIndices","0","0")}
            let cOffset = ${wA.indicesToOffset("outputIndices")};`;else{DA=`var cIndices = ${iA.type.indices}(0);
                       cIndices[0] = outputIndices[${v.length-1}];`;for(let LA=1;LA<iA.rank;LA++)DA+=`cIndices[${LA}] = outputIndices[${LA}];`;DA+=`let cOffset = ${iA.indicesToOffset("cIndices")};`}return DA})()}
    let scale = ${iA.getByOffset("cOffset")};
    let bias = ${oA.getByOffset("cOffset")};
    let inputMean = ${dA.getByOffset("cOffset")};
    let inputVar = ${fA.getByOffset("cOffset")};
    let x = ${Q.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${wA.setByOffset("global_idx","value")}
  }`,getRunData:()=>({outputs:[{dims:n[0].dims,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:Y?[{type:12,data:N},...Ke(v)]:[{type:12,data:N}]})}},d0=n=>$A(n),f0=(n,u)=>{let{inputs:h,outputCount:w}=n,B=d0({...u,outputCount:w});if(X.webgpu.validateInputContent&&u0(h,B),u.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");n.compute(Li(h,B))}}),gc=TA(()=>{St(),Rt(),Or=n=>{if(n[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(n[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(n[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(n[0].dims[2]!==n[1].dims[0])throw new Error("last dimension of input and bias are not the same")},p0=n=>{let u=n[0].dims,h=n[0].dims[2],w=HA.size(u)/4,B=n[0].dataType,v=ge("input",B,u,4),y=ge("bias",B,[h],4),F=ge("residual",B,u,4),N=Je("output",B,u,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:u,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)}}),getShaderSource:Y=>`
  const channels = ${h}u / 4;
  ${Y.declareVariables(v,y,F,N)}

  ${Y.mainStart()}
    ${Y.guardAgainstOutOfBoundsWorkgroupSizes(w)}
    let value = ${v.getByOffset("global_idx")}
      + ${y.getByOffset("global_idx % channels")} + ${F.getByOffset("global_idx")};
    ${N.setByOffset("global_idx","value")}
  }`}},h0=n=>{Or(n.inputs),n.compute(p0(n.inputs))}}),c1=TA(()=>{Dt(),St(),qr(),Rt(),bt=(n,u,h,w,B,v,y)=>{let F=Math.ceil(u/4),N="";N=typeof B=="string"?`${B}(a)`:B("a");let Y=ge("inputData",h,[F],4),tA=Je("outputData",w,[F],4),Q=[{name:"vec_size",type:"u32"}];return y&&Q.push(...y),`
      ${n.registerUniforms(Q).declareVariables(Y,tA)}

  ${v??""}

  ${n.mainStart()}
    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${Y.getByOffset("global_idx")};
    ${tA.setByOffset("global_idx",N)}
  }`},Ht=(n,u,h,w,B,v=n.dataType,y,F)=>{let N=[{type:12,data:Math.ceil(HA.size(n.dims)/4)}];return y&&N.push(...y),{name:u,shaderCache:{hint:B,inputDependencies:["type"]},getShaderSource:Y=>bt(Y,HA.size(n.dims),n.dataType,v,h,w,F),getRunData:Y=>({outputs:[{dims:n.dims,dataType:v}],dispatchGroup:{x:Math.ceil(HA.size(Y[0].dims)/64/4)},programUniforms:N})}},bn=n=>{n.compute(Ht(n.inputs[0],"Abs","abs"))},ss=n=>{n.compute(Ht(n.inputs[0],"Acos","acos"))},m0=n=>{n.compute(Ht(n.inputs[0],"Acosh","acosh"))},ra=n=>{n.compute(Ht(n.inputs[0],"Asin","asin"))},fs=n=>{n.compute(Ht(n.inputs[0],"Asinh","asinh"))},aa=n=>{n.compute(Ht(n.inputs[0],"Atan","atan"))},ps=n=>{n.compute(Ht(n.inputs[0],"Atanh","atanh"))},Yi=n=>$A(n),In=(n,u)=>{let h;switch(u.to){case 10:h="vec4<f16>";break;case 1:h="vec4<f32>";break;case 12:h="vec4<u32>";break;case 6:h="vec4<i32>";break;case 9:h="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${u.to}`)}n.compute(Ht(n.inputs[0],"Cast",h,void 0,u.cacheKey,u.to))},C0=n=>{let u,h,w=n.length>=2&&n[1].data!==0,B=n.length>=3&&n[2].data!==0;switch(n[0].dataType){case 1:u=w?n[1].getFloat32Array()[0]:-34028234663852886e22,h=B?n[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:u=w?n[1].getUint16Array()[0]:64511,h=B?n[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return $A({min:u,max:h})},Hi=(n,u)=>{let h=u||C0(n.inputs),w=je(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Clip",B=>`clamp(${B}, vec4<${w}>(uniforms.min), vec4<${w}>(uniforms.max))`,void 0,h.cacheKey,void 0,[{type:n.inputs[0].dataType,data:h.min},{type:n.inputs[0].dataType,data:h.max}],[{name:"min",type:w},{name:"max",type:w}]),{inputs:[0]})},vr=n=>{n.compute(Ht(n.inputs[0],"Ceil","ceil"))},Ii=n=>{n.compute(Ht(n.inputs[0],"Cos","cos"))},wn=n=>{n.compute(Ht(n.inputs[0],"Cosh","cosh"))},sa=n=>$A(n),si=(n,u)=>{let h=je(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Elu",w=>`elu_vf32(${w})`,`
  const elu_alpha_ = ${h}(${u.alpha});

  fn elu_f32(a: ${h}) -> ${h} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${h}>) -> vec4<${h}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,u.cacheKey))},hs=(n="f32")=>`
const r0: ${n} = 0.3275911;
const r1: ${n} = 0.254829592;
const r2: ${n} = -0.284496736;
const r3: ${n} = 1.421413741;
const r4: ${n} = -1.453152027;
const r5: ${n} = 1.061405429;

fn erf_vf32(v: vec4<${n}>) -> vec4<${n}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,kn=n=>{let u=je(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Erf",h=>`erf_vf32(${h})`,hs(u)))},xn=n=>{n.compute(Ht(n.inputs[0],"Exp","exp"))},Bn=n=>{n.compute(Ht(n.inputs[0],"Floor","floor"))},Ri=n=>{let u=je(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Gelu",h=>`0.5 * ${h} * (1.0 + erf_vf32(${h} * 0.7071067811865475))`,hs(u)))},is=(n,u)=>{let h=je(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"LeakyRelu",w=>`select(leaky_relu_alpha_ * ${w}, ${w}, ${w} >= vec4<${h}>(0.0))`,`const leaky_relu_alpha_ = ${h}(${u.alpha});`,u.cacheKey))},Wi=n=>{n.compute(Ht(n.inputs[0],"Not",u=>`!${u}`))},b0=n=>{n.compute(Ht(n.inputs[0],"Neg",u=>`-${u}`))},vn=n=>{n.compute(Ht(n.inputs[0],"Reciprocal",u=>`1.0/${u}`))},yn=n=>{let u=je(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"Relu",h=>`select(vec4<${u}>(0.0), ${h}, ${h} > vec4<${u}>(0.0))`))},ms=n=>{n.compute(Ht(n.inputs[0],"Sigmoid",u=>`(1.0 / (1.0 + exp(-${u})))`))},Vi=n=>$A(n),Lr=(n,u)=>{let h=je(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"HardSigmoid",w=>`max(vec4<${h}>(0.0), min(vec4<${h}>(1.0), ${u.alpha} * ${w} + vec4<${h}>(${u.beta})))`,void 0,u.cacheKey))},En=n=>{n.compute(Ht(n.inputs[0],"Sin","sin"))},ji=n=>{n.compute(Ht(n.inputs[0],"Sinh","sinh"))},wi=n=>{n.compute(Ht(n.inputs[0],"Sqrt","sqrt"))},Fa=n=>{n.compute(Ht(n.inputs[0],"Tan","tan"))},ki=n=>`sign(${n}) * (1 - exp(-2 * abs(${n}))) / (1 + exp(-2 * abs(${n})))`,Mn=n=>{n.compute(Ht(n.inputs[0],"Tanh",ki))},_a=(n="f32")=>`
const fast_gelu_a: ${n} = 0.5;
const fast_gelu_b: ${n} = 0.7978845608028654;
const fast_gelu_c: ${n} = 0.035677408136300125;

fn tanh_v(v: vec4<${n}>) -> vec4<${n}> {
  return ${ki("v")};
}
`,Gn=n=>`(fast_gelu_a + fast_gelu_a * tanh_v(${n} * (fast_gelu_c * ${n} * ${n} + fast_gelu_b))) * ${n}`,Ui=n=>{let u=je(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"FastGelu",Gn,_a(u),void 0,n.inputs[0].dataType))},Dn=(n,u)=>{let h=je(n.inputs[0].dataType);return n.compute(Ht(n.inputs[0],"ThresholdedRelu",w=>`select(vec4<${h}>(0.0), ${w}, ${w} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${h}>(${u.alpha});`,u.cacheKey)),0},ii=n=>{n.compute(Ht(n.inputs[0],"Log","log"))},I0=(n,u)=>`
const alpha = vec4<${n}>(${u});
const one = ${n}(1.0);
const zero = ${n}(0.0);

fn quick_gelu_impl(x: vec4<${n}>) -> vec4<${n}> {
  let v = x *alpha;
  var x1 : vec4<${n}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,w0=n=>`quick_gelu_impl(${n})`,Qn=(n,u)=>{let h=je(n.inputs[0].dataType);n.compute(Ht(n.inputs[0],"QuickGelu",w0,I0(h,u.alpha),u.cacheKey,n.inputs[0].dataType))}}),uc=TA(()=>{St(),Rt(),c1(),ma=n=>{if(n[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(n[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(n[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(n[0].dims[2]!==n[1].dims[0])throw new Error("last dimension of input and bias are not the same")},xi=n=>{let u=n[0].dims.slice();u[2]=u[2]/2;let h=ge("input",n[0].dataType,n[0].dims,4),w=ge("bias",n[0].dataType,[n[0].dims[2]],4),B=Je("output",n[0].dataType,u,4),v=HA.size(u)/4,y=jt(n[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:u,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)}}),getShaderSource:F=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${n[0].dims[2]/4/2}u;

  ${F.declareVariables(h,w,B)}

  ${hs(y)}

  ${F.mainStart()}
    ${F.guardAgainstOutOfBoundsWorkgroupSizes(v)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${B.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},ia=n=>{ma(n.inputs),n.compute(xi(n.inputs))}}),dc=TA(()=>{Dt(),St(),Rt(),Tn=(n,u,h,w,B,v,y,F,N,Y,tA,Q)=>{let iA,oA;typeof F=="string"?iA=oA=(DA,LA)=>`${F}((${DA}),(${LA}))`:typeof F=="function"?iA=oA=F:(iA=F.scalar,oA=F.vector);let dA,fA=Je("outputData",tA,w.length,4),wA=ge("aData",N,u.length,4),MA=ge("bData",Y,h.length,4);if(B)if(v){let DA=HA.size(u)===1,LA=HA.size(h)===1,ZA=u.length>0&&u[u.length-1]%4==0,JA=h.length>0&&h[h.length-1]%4==0;dA=DA||LA?fA.setByOffset("global_idx",oA(DA?`${wA.type.value}(${wA.getByOffset("0")}.x)`:wA.getByOffset("global_idx"),LA?`${MA.type.value}(${MA.getByOffset("0")}.x)`:MA.getByOffset("global_idx"))):`
            let outputIndices = ${fA.offsetToIndices("global_idx * 4u")};
            let offsetA = ${wA.broadcastedIndicesToOffset("outputIndices",fA)};
            let offsetB = ${MA.broadcastedIndicesToOffset("outputIndices",fA)};
            ${fA.setByOffset("global_idx",oA(y||ZA?wA.getByOffset("offsetA / 4u"):`${wA.type.value}(${wA.getByOffset("offsetA / 4u")}[offsetA % 4u])`,y||JA?MA.getByOffset("offsetB / 4u"):`${MA.type.value}(${MA.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else dA=fA.setByOffset("global_idx",oA(wA.getByOffset("global_idx"),MA.getByOffset("global_idx")));else{if(!v)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let DA=(LA,ZA,JA="")=>{let ne=`aData[indexA${ZA}][componentA${ZA}]`,Le=`bData[indexB${ZA}][componentB${ZA}]`;return`
            let outputIndices${ZA} = ${fA.offsetToIndices(`global_idx * 4u + ${ZA}u`)};
            let offsetA${ZA} = ${wA.broadcastedIndicesToOffset(`outputIndices${ZA}`,fA)};
            let offsetB${ZA} = ${MA.broadcastedIndicesToOffset(`outputIndices${ZA}`,fA)};
            let indexA${ZA} = offsetA${ZA} / 4u;
            let indexB${ZA} = offsetB${ZA} / 4u;
            let componentA${ZA} = offsetA${ZA} % 4u;
            let componentB${ZA} = offsetB${ZA} % 4u;
            ${LA}[${ZA}] = ${JA}(${iA(ne,Le)});
          `};dA=tA===9?`
            var data = vec4<u32>(0);
            ${DA("data",0,"u32")}
            ${DA("data",1,"u32")}
            ${DA("data",2,"u32")}
            ${DA("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`
            ${DA("outputData[global_idx]",0)}
            ${DA("outputData[global_idx]",1)}
            ${DA("outputData[global_idx]",2)}
            ${DA("outputData[global_idx]",3)}
          `}return`
        ${n.registerUniform("vec_size","u32").declareVariables(wA,MA,fA)}

        ${Q??""}

        ${n.mainStart()}
        ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${dA}
      }`},Ki=(n,u,h,w,B,v,y=h.dataType)=>{let F=h.dims.map(fA=>Number(fA)??1),N=w.dims.map(fA=>Number(fA)??1),Y=!HA.areEqual(F,N),tA=F,Q=HA.size(F),iA=!1,oA=!1,dA=[Y];if(Y){let fA=Se.calcShape(F,N,!1);if(!fA)throw new Error("Can't perform binary op on the given tensors");tA=fA.slice(),Q=HA.size(tA);let wA=HA.size(F)===1,MA=HA.size(N)===1,DA=F.length>0&&F[F.length-1]%4==0,LA=N.length>0&&N[N.length-1]%4==0;dA.push(wA),dA.push(MA),dA.push(DA),dA.push(LA);let ZA=1;for(let JA=1;JA<tA.length;JA++){let ne=F[F.length-JA];if(ne!==N[N.length-JA])break;ZA*=ne}ZA%4==0?(oA=!0,iA=!0):(wA||MA||DA||LA)&&(iA=!0)}else iA=!0;return dA.push(iA),{name:n,shaderCache:{hint:u+dA.map(fA=>fA.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:fA=>Tn(fA,F,N,tA,iA,Y,oA,B,h.dataType,w.dataType,y,v),getRunData:()=>({outputs:[{dims:tA,dataType:y}],dispatchGroup:{x:Math.ceil(Q/64/4)},programUniforms:[{type:12,data:Math.ceil(HA.size(tA)/4)},...Ke(F,N,tA)]})}},Va=(n,u,h,w,B,v)=>{n.compute(Ki(u,B??"",n.inputs[0],n.inputs[1],h,w,v))},fr=n=>{Va(n,"Add",(u,h)=>`${u}+${h}`)},Pn=n=>{Va(n,"Div",(u,h)=>`${u}/${h}`)},ys=n=>{Va(n,"Equal",{scalar:(u,h)=>`u32(${u}==${h})`,vector:(u,h)=>`vec4<u32>(${u}==${h})`},void 0,void 0,9)},ni=n=>{Va(n,"Mul",(u,h)=>`${u}*${h}`)},k0=n=>{let u=ge("input",n.inputs[0].dataType,n.inputs[0].dims).type.value;Va(n,"Pow",{scalar:(h,w)=>`pow_custom(${h},${w})`,vector:(h,w)=>`pow_vector_custom(${h},${w})`},`
    fn pow_custom(a : ${u}, b : ${u}) -> ${u} {
      if (b == ${u}(0.0)) {
        return ${u}(1.0);
      } else if (a < ${u}(0.0) && f32(b) != floor(f32(b))) {
        return ${u}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${u}(1.0), round(f32(abs(b) % ${u}(2.0))) != 1.0) * ${u}(${u==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${u}>, b : vec4<${u}>) -> vec4<${u}> {
      // TODO: implement vectorized pow
      return vec4<${u}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},zn=n=>{Va(n,"Sub",(u,h)=>`${u}-${h}`)},Fn=n=>{Va(n,"Greater",{scalar:(u,h)=>`u32(${u}>${h})`,vector:(u,h)=>`vec4<u32>(${u}>${h})`},void 0,void 0,9)},x0=n=>{Va(n,"Less",{scalar:(u,h)=>`u32(${u}<${h})`,vector:(u,h)=>`vec4<u32>(${u}<${h})`},void 0,void 0,9)},Es=n=>{Va(n,"GreaterOrEqual",{scalar:(u,h)=>`u32(${u}>=${h})`,vector:(u,h)=>`vec4<u32>(${u}>=${h})`},void 0,void 0,9)},$a=n=>{Va(n,"LessOrEqual",{scalar:(u,h)=>`u32(${u}<=${h})`,vector:(u,h)=>`vec4<u32>(${u}<=${h})`},void 0,void 0,9)}}),fc=TA(()=>{Dt(),St(),qr(),Rt(),Sn=(n,u)=>{if(!n||n.length<1)throw new Error("too few inputs");let h=n[0],w=h.dataType,B=h.dims.length;n.forEach((v,y)=>{if(y!==0){if(v.dataType!==w)throw new Error("input tensors should be one type");if(v.dims.length!==B)throw new Error("input tensors should have the same shape");v.dims.forEach((F,N)=>{if(N!==u&&F!==h.dims[N])throw new Error("non concat dimensions must match")})}})},Bi=(n,u)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${n}u>(${u});
    for (var i: u32 = 0u; i < ${n}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${n}u;
  }`,Zr=(n,u)=>{let h=n.length,w=[];for(let B=0;B<h;++B){let v=u.setByOffset("global_idx",n[B].getByIndices("indices"));h===1?w.push(v):B===0?w.push(`if (inputIndex == ${B}u) { ${v} }`):B===h-1?w.push(`else { ${v} }`):w.push(`else if (inputIndex == ${B}) { ${v} }`)}return w.join(`
`)},ar=(n,u,h,w)=>{let B=HA.size(h),v=new Array(n.length),y=new Array(n.length),F=0,N=[],Y=[],tA=[{type:12,data:B}];for(let dA=0;dA<n.length;++dA)F+=n[dA].dims[u],v[dA]=F,Y.push(n[dA].dims.length),y[dA]=ge(`input${dA}`,w,Y[dA]),N.push("rank"),tA.push({type:12,data:v[dA]});for(let dA=0;dA<n.length;++dA)tA.push(...Ke(n[dA].dims));tA.push(...Ke(h));let Q=Je("output",w,h.length),iA=Q.indicesGet("indices",u),oA=Array.from(Array(v.length).keys()).map(dA=>`uniforms.sizeInConcatAxis${dA}`).join(",");return{name:"Concat",shaderCache:{hint:`${u}`,inputDependencies:N},getRunData:()=>({outputs:[{dims:h,dataType:w}],dispatchGroup:{x:Math.ceil(B/64)},programUniforms:tA}),getShaderSource:dA=>`

  ${(()=>{dA.registerUniform("outputSize","u32");for(let fA=0;fA<n.length;fA++)dA.registerUniform(`sizeInConcatAxis${fA}`,"u32");return dA.declareVariables(...y,Q)})()}

  ${Bi(v.length,oA)}

  ${dA.mainStart()}
    ${dA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${Q.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${iA});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${v.length}u>(${oA});
      ${iA} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Zr(y,Q)}
  }`}},vi=(n,u)=>{let h=n.inputs,w=h[0].dims,B=HA.normalizeAxis(u.axis,w.length);Sn(h,B);let v=w.slice();v[B]=h.reduce((F,N)=>F+(N.dims.length>B?N.dims[B]:0),0);let y=h.filter(F=>HA.size(F.dims)>0);n.compute(ar(y,B,v,h[0].dataType),{inputs:y})},B0=n=>$A({axis:n.axis})}),jn=TA(()=>{Dt(),St(),Cs=(n,u,h="f32")=>{switch(n.activation){case"Relu":return`value = max(value, ${u}(0.0));`;case"Sigmoid":return`value = (${u}(1.0) / (${u}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${u}(${h}(uniforms.clip_min)), ${u}(${h}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${u}(0.0), min(${u}(1.0), ${h}(uniforms.alpha) * value + ${h}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${h}(uniforms.alpha) * value, value, value >= ${u}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${n.activation}`)}},Ws=(n,u)=>{n.activation==="Clip"?u.push({type:1,data:n.clipMax},{type:1,data:n.clipMin}):n.activation==="HardSigmoid"?u.push({type:1,data:n.alpha},{type:1,data:n.beta}):n.activation==="LeakyRelu"&&u.push({type:1,data:n.alpha})},Vs=(n,u)=>{n.activation==="Clip"?u.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):n.activation==="HardSigmoid"?u.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):n.activation==="LeakyRelu"&&u.push({name:"alpha",type:"f32"})},Nn=n=>{let u=n?.activation||"";if(u==="HardSigmoid"){let[h,w]=n?.activation_params||[.2,.5];return{activation:u,alpha:h,beta:w}}if(u==="Clip"){let[h,w]=n?.activation_params||[Yt,Vt];return{activation:u,clipMax:w,clipMin:h}}if(u==="LeakyRelu"){let[h]=n?.activation_params||[.01];return{activation:u,alpha:h}}return{activation:u}}}),g1=TA(()=>{Ca=(n,u)=>{switch(n){case 1:return u;case 2:return`vec2<${u}>`;case 3:return`vec3<${u}>`;case 4:return`vec4<${u}>`;default:throw new Error(`${n}-component is not supported.`)}},On=n=>`
      ${n?"value = value + getBiasByOutputCoords(coords);":""}
      `}),pc=TA(()=>{v0=n=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${n}.x), i32(${n}.y), i32(${n}.z), 1));
}
`}),Pt=TA(()=>{Dt(),St(),Rt(),jn(),oi=(n,u,h,w,B)=>{let v=w-h;return`
      ${Array.from({length:h}).map((y,F)=>`
      if (${rt(u.shape,F,u.rank)} != 1) {
        ${u.indicesSet(n,F,rt(B,F+v,w))}
      } else {
        ${u.indicesSet(n,F,0)}
      }`).join("")}
`},yi=(n,u,h,w,B=!1,v)=>{let y=n[0].dims,F=n[1].dims,N=y[y.length-2],Y=F[F.length-1],tA=y[y.length-1],Q=Jt(Y),iA=Jt(tA),oA=Jt(N),dA=HA.size(h)/Q/oA,fA=n.length>2,wA=w?w.slice(0,-2):h.slice(0,-2),MA=[HA.size(wA),N,Y],DA=[{type:12,data:dA},{type:12,data:N},{type:12,data:Y},{type:12,data:tA}];return Ws(u,DA),DA.push(...Ke(wA,y,F)),fA&&DA.push(...Ke(n[2].dims)),DA.push(...Ke(MA)),{name:"MatMulNaive",shaderCache:{hint:`${u.activation};${Q};${iA};${oA};${B}`,inputDependencies:fA?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:v?v(h):h,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(dA/64)},programUniforms:DA}),getShaderSource:LA=>{let ZA=Nr("batch_dims",n[0].dataType,wA.length),JA=ge("a",n[0].dataType,y.length,iA),ne=ge("b",n[1].dataType,F.length,Q),Le=Je("output",n[0].dataType,MA.length,Q),st=jt(Le.type.tensor),ht=Cs(u,Le.type.value,st),pt=[JA,ne],mt="";if(fA){let tt=B?Q:1;pt.push(ge("bias",n[2].dataType,n[2].dims.length,tt)),mt=B?`value += bias[col / ${tt}];`:`value += ${Le.type.value}(bias[row + i]);`}let vt=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];return Vs(u,vt),`
  ${LA.registerUniforms(vt).registerInternalVariables(ZA).declareVariables(...pt,Le)}
  ${LA.mainStart()}
    ${LA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${Q})) * ${Q};
    var index1 = global_idx / (uniforms.N / ${Q});
    let stride1 = uniforms.M / ${oA};
    let row = (index1 % stride1) * ${oA};
    let batch = index1 / stride1;

    ${h.length===2?"":`let batch_indices = ${ZA.offsetToIndices("batch")};`}

    var a_indices: ${JA.type.indices};
    ${oi("a_indices",JA,JA.rank-2,ZA.rank,"batch_indices")}
    ${JA.indicesSet("a_indices",JA.rank-2,0)}
    ${JA.indicesSet("a_indices",JA.rank-1,0)}
    let a_offset = ${JA.indicesToOffset("a_indices")};

    var b_indices: ${ne.type.indices};
    ${oi("b_indices",ne,ne.rank-2,ZA.rank,"batch_indices")}
    ${ne.indicesSet("b_indices",ne.rank-2,0)}
    ${ne.indicesSet("b_indices",ne.rank-1,0)}
    let b_offset = ${ne.indicesToOffset("b_indices")};
    var values: array<${Le.type.value}, ${oA}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${iA}) {
      ${(()=>{let tt=`var a_data: ${JA.type.value};`;for(let gt=0;gt<iA;gt++)tt+=`
              let b_data${gt} = b[(b_offset + (k + ${gt}) * uniforms.N + col) / ${Q}];`;for(let gt=0;gt<oA;gt++){tt+=`a_data = a[(a_offset + (row + ${gt}) * uniforms.K + k) / ${iA}];`;for(let we=0;we<iA;we++)tt+=`
            values[${gt}] = fma(${ne.type.value}(a_data${iA===1?"":`[${we}]`}), b_data${we}, values[${gt}]);
`}return tt})()}
    }
    for (var i = 0u; i < ${oA}u; i++) {
      var value = values[i];
      ${mt}
      ${ht}
      let cur_indices = ${Le.type.indices}(batch, row + i, col);
      let offset = ${Le.indicesToOffset("cur_indices")};
      ${Le.setByOffset(`offset / ${Q}`,"value")};
    }
  }
  `}}}}),Jo=TA(()=>{Dt(),St(),Rt(),jn(),Pt(),g1(),na=(n,u)=>n?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${u?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${u?", batchIndices":""});
        `,Zi=(n,u)=>n?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${u===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${u===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${u===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Ln=(n,u,h="f32",w,B=!1,v=32,y=!1,F=32)=>{let N=u[1]*n[1],Y=u[0]*n[0],tA=B?N:v,Q=B?v:N,iA=tA/u[0],oA=v/u[1];if((!B||iA!==4||n[1]!==4)&&(B||iA!==3&&iA!==4)||tA%u[0]!=0||v%u[1]!=0||n[0]!==4)throw new Error(`If transposeA ${B} is true, innerElementSize ${iA} and workPerThread[1] ${n[1]} must be 4.
      Otherwise, innerElementSize ${iA} must be 3 or 4.
  tileAWidth ${tA} must be divisible by workgroupSize[0]${u[0]}. tileInner ${v} must be divisible by workgroupSize[1] ${u[1]}. colPerThread ${n[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${iA}<${h}>, ${tA/iA}>, ${Q}>;
var<workgroup> mm_Bsub: array<array<vec4<${h}>, ${Y/n[0]}>, ${v}>;

const rowPerThread = ${n[1]};
const colPerThread = ${n[0]};
const innerElementSize = ${iA};
const tileInner = ${v};

@compute @workgroup_size(${u[0]}, ${u[1]}, ${u[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${y?"0":"i32(globalId.z)"};
  ${w?`let batchIndices = ${w.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${N};

  let num_tiles = ${y?`${Math.ceil(F/v)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${y?`i32(globalId.z) * ${F}`:"0"};

  var acc: array<vec4<${h}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${oA};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${na(B,w)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${oA}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${w?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${iA===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Zi(B,iA)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},js=(n,u)=>n?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${u?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${u?", batchIndices":""});
            `,y0=n=>n?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",li=(n,u,h="f32",w,B=!1,v=32,y=!1,F=32,N=!1)=>{let Y=n[1]*u[1],tA=n[0]*u[0],Q=B?Y:v,iA=B?v:Y;if(iA%u[1]!=0||Q%u[0]!=0||v%u[1]!=0)throw new Error(`tileAHight ${iA} must be divisible by workgroupSize[1]${u[1]}, tileAWidth ${Q} must be divisible by workgroupSize[0]${u[0]}, tileInner ${v} must be divisible by workgroupSize[1]${u[1]}`);let oA=iA/u[1],dA=Q/u[0],fA=v/u[1],wA=N?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${Y};
    let globalColStart = i32(workgroupId.x) * ${tA};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${iA}; inputRow = inputRow + ${u[1]}) {
        for (var inputCol = localCol; inputCol < ${Q}; inputCol = inputCol + ${u[0]}) {
          ${js(B,w)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${v}; inputRow = inputRow + ${u[1]}) {
            for (var inputCol = localCol; inputCol < ${tA}; inputCol = inputCol + ${u[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${w?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${h}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${u[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${B?`mm_Asub[k][localRow + innerRow * ${u[1]}];`:`mm_Asub[localRow + innerRow * ${u[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${u[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${u[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${Y};

let tileRowA = i32(localId.y) * ${oA};
let tileColA = i32(localId.x) * ${dA};
let tileRowB = i32(localId.y) * ${fA};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${oA}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${dA}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${js(B,w)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${fA}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${w?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${h}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${y0(B)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${h}, ${Q}>, ${iA}>;
  var<workgroup> mm_Bsub : array<array<${h}, ${tA}>, ${v}>;
  const rowPerThread = ${n[1]};
  const colPerThread = ${n[0]};
  const tileInner = ${v};

@compute @workgroup_size(${u[0]}, ${u[1]}, ${u[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${y?"0":"i32(globalId.z)"};
    ${w?`let batchIndices = ${w.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${y?`${Math.ceil(F/v)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${y?`i32(globalId.z) * ${F}`:"0"};

    var acc : array<array<${h}, colPerThread>, rowPerThread>;
    ${wA}
  }
`},lt=(n,u,h,w,B=!1)=>{let[v,y,F,N]=w,Y=jt(w[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${v.type.indices}) -> ${Ca(n,Y)} {
      var value = ${Ca(n,Y)}(0.0);
      let col = colIn * ${n};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${y.type.indices};
        ${oi("aIndices",y,y.rank-2,v.rank,"batchIndices")}
        ${y.indicesSet("aIndices",y.rank-2,"u32(row)")}
        ${y.indicesSet("aIndices",y.rank-1,"u32(colIn)")}
        value = ${y.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${v.type.indices}) -> ${Ca(n,Y)} {
      var value = ${Ca(n,Y)}(0.0);
      let col = colIn * ${n};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${F.type.indices};
        ${oi("bIndices",F,F.rank-2,v.rank,"batchIndices")}
        ${F.indicesSet("bIndices",F.rank-2,"u32(row)")}
        ${F.indicesSet("bIndices",F.rank-1,"u32(colIn)")}
        value = ${F.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ca(n,Y)}) {
      let col = colIn * ${n};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${u?`value = value + ${B?"bias[colIn]":`${Ca(n,Y)}(bias[row])`};`:""}
        ${h}
        ${N.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},e=(n,u,h,w,B=!1,v)=>{let y=n[0].dims,F=n[1].dims,N=y.slice(0,-2),Y=F.slice(0,-2),tA=w?w.slice(0,-2):h.slice(0,-2),Q=HA.size(tA),iA=y[y.length-2],oA=y[y.length-1],dA=F[F.length-1],fA=oA%4==0&&dA%4==0,wA=iA<=8?[4,1,1]:[4,4,1],MA=[8,8,1],DA=[Math.ceil(dA/MA[0]/wA[0]),Math.ceil(iA/MA[1]/wA[1]),Math.ceil(Q/MA[2]/wA[2])],LA=fA?4:1,ZA=[...N,iA,oA/LA],JA=ZA.length,ne=[...Y,oA,dA/LA],Le=ne.length,st=[Q,iA,dA/LA],ht=[{type:6,data:iA},{type:6,data:dA},{type:6,data:oA}];Ws(u,ht),ht.push(...Ke(tA,ZA,ne));let pt=["rank","rank"],mt=n.length>2;return mt&&(ht.push(...Ke(n[2].dims)),pt.push("rank")),ht.push(...Ke(st)),{name:"MatMul",shaderCache:{hint:`${wA};${u.activation};${fA};${B}`,inputDependencies:pt},getRunData:()=>({outputs:[{dims:v?v(h):h,dataType:n[0].dataType}],dispatchGroup:{x:DA[0],y:DA[1],z:DA[2]},programUniforms:ht}),getShaderSource:vt=>{let tt=tA.length,gt=Nr("batchDims",n[0].dataType,tt,1),we=jt(n[0].dataType),Ue=ge("a",n[0].dataType,JA,LA),et=ge("b",n[1].dataType,Le,LA),yt=Je("result",n[0].dataType,st.length,LA),gr=[Ue,et];if(mt){let Oa=B?LA:1;gr.push(ge("bias",n[2].dataType,n[2].dims.length,Oa))}let ga=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Vs(u,ga);let Ti=jt(yt.type.tensor),Xn=Cs(u,yt.type.value,Ti),t2=lt(LA,mt,Xn,[gt,Ue,et,yt],B);return`
  ${vt.registerUniforms(ga).registerInternalVariables(gt).declareVariables(...gr,yt)}
  ${t2}
  ${fA?Ln(wA,MA,we,gt):li(wA,MA,we,gt)}
                   `}}}}),Qa=TA(()=>{Dt(),Di(),Rt(),jn(),g1(),pc(),Jo(),t=(n,u,h,w,B=!1,v,y=4,F=4,N=4,Y="f32")=>{let tA=st=>{switch(st){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${st} is not supported.`)}},Q=n?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,iA=n?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,oA=n?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",dA=n?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",fA=n?"row":"col",wA=n?"col":"row",MA=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${n?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${fA} / outWidth;
    let outCol = ${fA} % outWidth;

    let WRow = ${wA} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${wA} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${wA} % inChannels;
    var resData = ${Ca(y,Y)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${oA} && xCol >= 0 && xCol < ${dA}) {
      ${Q}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${(st=>{switch(st){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${Y}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${st} is not supported.`)}})(y)}
    }
    return resData;`,DA=n?u&&w?`
    let col = colIn * ${y};
    ${MA}`:`
    let col = colIn * ${y};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${MA}
    }
    return ${Ca(y,Y)}(0.0);`:w&&h?`
    let col = colIn * ${y};
    ${MA}`:`
    let col = colIn * ${y};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${MA}
    }
    return ${Ca(y,Y)}(0.0);`,LA=n?w&&h?tA(F):`
    let col = colIn * ${F};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${tA(F)}
    }
    return ${Ca(F,Y)}(0.0);`:`
    let col = colIn * ${F};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${tA(F)}
    }
    return ${Ca(F,Y)}(0.0);`,ZA=Ca(N,Y),JA=Ca(n?y:F,Y),ne=Ca(n?F:y,Y),Le=Cs(v,ZA,Y);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${JA} {
      ${n?DA:LA}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${ne} {
      ${n?LA:DA}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${ZA}) {
      let col = colIn * ${N};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${n?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${iA}
      ${On(B)}
      ${Le}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},r=(n,u,h,w,B,v,y,F,N)=>{let Y=u.format==="NHWC",tA=Y?n[0].dims[3]:n[0].dims[1],Q=h[0],iA=Y?h[2]:h[3],oA=Y?h[1]:h[2],dA=Y?h[3]:h[1],fA=Y&&(tA%4==0||tA%3==0)&&dA%4==0,wA=Y?dA:iA*oA,MA=Y?iA*oA:dA,DA=[8,8,1],LA=w<=8?[4,1,1]:[4,4,1],ZA=[Math.ceil(wA/DA[0]/LA[0]),Math.ceil(MA/DA[1]/LA[1]),Math.ceil(Q/DA[2]/LA[2])];zt("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${ZA}`);let JA=fA?Y&&tA%4!=0?3:4:1,ne=DA[1]*LA[1],Le=DA[0]*LA[0],st=Math.max(DA[0]*JA,DA[1]),ht=w%ne==0,pt=B%Le==0,mt=v%st==0,vt=fA?[JA,4,4]:[1,1,1],tt=[{type:6,data:w},{type:6,data:B},{type:6,data:v},{type:6,data:[u.pads[0],u.pads[1]]},{type:6,data:u.strides},{type:6,data:u.dilations}];Ws(u,tt),tt.push(...Ke(n[0].dims,n[1].dims));let gt=["rank","rank"];return y&&(tt.push(...Ke(n[2].dims)),gt.push("rank")),tt.push(...Ke(h)),{name:"Conv2DMatMul",shaderCache:{hint:`${u.cacheKey};${JA};${fA};${ht};${pt};${mt};${ne};${Le};${st}`,inputDependencies:gt},getRunData:()=>({outputs:[{dims:N?N(h):h,dataType:n[0].dataType}],dispatchGroup:{x:ZA[0],y:ZA[1],z:ZA[2]},programUniforms:tt}),getShaderSource:we=>{let Ue=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Vs(u,Ue);let et=fA?4:1,yt=jt(n[0].dataType),gr=`
      fn setOutputAtIndex(flatIndex : i32, value : ${fA?`vec4<${yt}>`:yt}) {
        result[flatIndex] = ${fA?`vec4<${yt}>`:yt}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${fA?`vec4<${yt}>`:yt}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${fA?"/ 4":""}, value);
      }`,ga=[ge("x",n[0].dataType,n[0].dims.length,JA===3?1:JA),ge("w",n[1].dataType,n[1].dims.length,et)],Ti=Je("result",n[0].dataType,h.length,et);if(y){let Xn=ge("bias",n[2].dataType,n[2].dims.length,et);ga.push(Xn),gr+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${fA?`vec4<${yt}>`:yt} {
          return bias[coords.${Y?"w":"y"}${fA?"/ 4":""}];
        }`}return`
        ${v0("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${we.registerUniforms(Ue).declareVariables(...ga,Ti)}
        ${gr}
        ${t(Y,ht,pt,mt,y,u,vt[0],vt[1],vt[2],yt)}
        ${fA?Ln(LA,DA,yt,void 0,!Y,st):li(LA,DA,yt,void 0,!Y,st,!1,void 0,F)}`}}}}),Sa=TA(()=>{Dt(),Di(),St(),Rt(),jn(),g1(),a=n=>{let u=1;for(let h=0;h<n.length;h++)u*=n[h];return u},s=n=>typeof n=="number"?[n,n,n]:n,i=(n,u)=>u<=1?n:n+(n-1)*(u-1),o=(n,u,h,w=1)=>{let B=i(u,w);return Math.floor((n[0]*(h-1)-h+B)/2)},c=(n,u,h,w,B)=>{B==null&&(B=o(n,u[0],w[0]));let v=[0,0,0,h];for(let y=0;y<3;y++)n[y]+2*B>=u[y]&&(v[y]=Math.trunc((n[y]-u[y]+2*B)/w[y]+1));return v},f=(n,u,h,w,B,v,y,F,N,Y)=>{let tA,Q,iA,oA;if(n==="VALID"&&(n=0),typeof n=="number"){tA={top:n,bottom:n,left:n,right:n,front:n,back:n};let dA=c([u,h,w,1],[F,N,Y],1,[B,v,y],n);Q=dA[0],iA=dA[1],oA=dA[2]}else if(Array.isArray(n)){if(!n.every((fA,wA,MA)=>fA===MA[0]))throw Error(`Unsupported padding parameter: ${n}`);tA={top:n[0],bottom:n[1],left:n[2],right:n[3],front:n[4],back:n[5]};let dA=c([u,h,w,1],[F,N,Y],1,[B,v,y],n[0]);Q=dA[0],iA=dA[1],oA=dA[2]}else{if(n!=="SAME_UPPER")throw Error(`Unknown padding parameter: ${n}`);{Q=Math.ceil(u/B),iA=Math.ceil(h/v),oA=Math.ceil(w/y);let dA=(Q-1)*B+F-u,fA=(iA-1)*v+N-h,wA=(oA-1)*y+Y-w,MA=Math.floor(dA/2),DA=dA-MA,LA=Math.floor(fA/2),ZA=fA-LA,JA=Math.floor(wA/2);tA={top:LA,bottom:ZA,left:JA,right:wA-JA,front:MA,back:DA}}}return{padInfo:tA,outDepth:Q,outHeight:iA,outWidth:oA}},m=(n,u,h,w,B,v=!1,y="channelsLast")=>{let F,N,Y,tA,Q;if(y==="channelsLast")[F,N,Y,tA,Q]=n;else{if(y!=="channelsFirst")throw new Error(`Unknown dataFormat ${y}`);[F,Q,N,Y,tA]=n}let[iA,,oA,dA,fA]=u,[wA,MA,DA]=s(h),[LA,ZA,JA]=s(w),ne=i(oA,LA),Le=i(dA,ZA),st=i(fA,JA),{padInfo:ht,outDepth:pt,outHeight:mt,outWidth:vt}=f(B,N,Y,tA,wA,MA,DA,ne,Le,st),tt=v?iA*Q:iA,gt=[0,0,0,0,0];return y==="channelsFirst"?gt=[F,tt,pt,mt,vt]:y==="channelsLast"&&(gt=[F,pt,mt,vt,tt]),{batchSize:F,dataFormat:y,inDepth:N,inHeight:Y,inWidth:tA,inChannels:Q,outDepth:pt,outHeight:mt,outWidth:vt,outChannels:tt,padInfo:ht,strideDepth:wA,strideHeight:MA,strideWidth:DA,filterDepth:oA,filterHeight:dA,filterWidth:fA,effectiveFilterDepth:ne,effectiveFilterHeight:Le,effectiveFilterWidth:st,dilationDepth:LA,dilationHeight:ZA,dilationWidth:JA,inShape:n,outShape:gt,filterShape:u}},p=(n,u,h,w,B,v)=>{let y=v==="channelsLast";y?n[0].dims[3]:n[0].dims[1];let F={x:h.map((iA,oA)=>oA)},N=[Math.ceil(a(F.x.map(iA=>h[iA]))/64),1,1];zt("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${N}`);let Y=[{type:12,data:HA.size(h)},{type:12,data:w},{type:12,data:B},{type:12,data:u.strides},{type:12,data:u.dilations}];Ws(u,Y),Y.push(...Ke(n[0].dims,n[1].dims));let tA=["rank","rank"],Q=n.length===3;return Q&&(Y.push(...Ke(n[2].dims)),tA.push("rank")),Y.push(...Ke(h)),{name:"Conv3DNaive",shaderCache:{hint:`${u.cacheKey};${y};1;${Q}`,inputDependencies:tA},getRunData:()=>({outputs:[{dims:h,dataType:n[0].dataType}],dispatchGroup:{x:N[0],y:N[1],z:N[2]},programUniforms:Y}),getShaderSource:iA=>{let oA=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:w.length},{name:"pads",type:"u32",length:B.length},{name:"strides",type:"u32",length:u.strides.length},{name:"dilations",type:"u32",length:u.dilations.length}];Vs(u,oA);let dA=jt(n[0].dataType),fA=ge("x",n[0].dataType,n[0].dims.length,1),wA=ge("W",n[1].dataType,n[1].dims.length,1),MA=[fA,wA],DA=Je("result",n[0].dataType,h.length,1),LA="";if(Q){let ne=ge("bias",n[2].dataType,n[2].dims.length,1);MA.push(ne),LA+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${dA} {
          return bias[${rt("coords",y?4:1,5)}];
        }`}let ZA=Ca(1,dA),JA=Cs(u,ZA,dA);return`
            ${LA}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${fA.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${wA.getByIndices("aIndices")};
            }
          ${iA.registerUniforms(oA).declareVariables(...MA,DA)}
          ${iA.mainStart()}
          ${iA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${DA.offsetToIndices("global_idx")};
              let batch = ${rt("coords",0,fA.rank)};
              let d2 = ${rt("coords",y?fA.rank-1:1,fA.rank)};
              let xFRCCorner = vec3<u32>(${rt("coords",y?1:2,fA.rank)},
              ${rt("coords",y?2:3,fA.rank)},
              ${rt("coords",y?3:4,fA.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${rt("uniforms.x_shape",y?1:2,fA.rank)};
              let xShapeZ = ${rt("uniforms.x_shape",y?2:3,fA.rank)};
              let xShapeW = ${rt("uniforms.x_shape",y?3:4,fA.rank)};
              let xShapeU = ${rt("uniforms.x_shape",y?4:1,fA.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${y?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${y?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${y?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${y?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${Q?"value = value + getBiasByOutputCoords(coords)":""};
              ${JA}
              result[global_idx] = f32(value);
          }`}}}}),ja=TA(()=>{Dt(),St(),Rt(),jn(),I=(n,u,h,w)=>{let B=n.length>2,v=B?"value += b[output_channel];":"",y=n[0].dims,F=n[1].dims,N=u.format==="NHWC",Y=N?h[3]:h[1],tA=Y/u.group,Q=N&&tA>=4?Jt(Y):1,iA=HA.size(h)/Q,oA=[{type:12,data:iA},{type:12,data:u.dilations},{type:12,data:[u.strides[0],u.strides[1]]},{type:12,data:[u.pads[0],u.pads[1]]},{type:12,data:tA}];Ws(u,oA),oA.push(...Ke(y,[F[0],F[1],F[2],F[3]/Q]));let dA=B?["rank","rank","rank"]:["rank","rank"];return oA.push(...Ke([h[0],h[1],h[2],h[3]/Q])),{name:"GroupedConv",shaderCache:{hint:`${u.cacheKey}_${Q}`,inputDependencies:dA},getRunData:()=>({outputs:[{dims:w?w(h):h,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(iA/64)},programUniforms:oA}),getShaderSource:fA=>{let wA=Je("output",n[0].dataType,h.length,Q),MA=jt(wA.type.tensor),DA=Cs(u,wA.type.value,MA),LA=ge("x",n[0].dataType,y.length),ZA=ge("w",n[1].dataType,F.length,Q),JA=[LA,ZA];B&&JA.push(ge("b",n[2].dataType,n[2].dims,Q));let ne=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:u.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];Vs(u,ne);let Le=N?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${LA.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${ZA.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${LA.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${ZA.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${fA.registerUniforms(ne).declareVariables(...JA,wA)}

  ${fA.mainStart()}
    ${fA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${wA.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${N?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${N?1:2}], outputIndices[${N?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${Q} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${N?2:1}];

    var value: ${wA.type.value} = ${wA.type.value}(0);
    ${Le}
    ${v}
    ${DA}
    ${wA.setByOffset("global_idx","value")}
  }`}}},E=(n,u,h,w)=>{let B=n.length>2,v=Jt(h[3]),y=Jt(h[2]),F=HA.size(h)/v/y,N=[n[0].dims[0],n[0].dims[1],n[0].dims[2],n[0].dims[3]/v],Y=[n[1].dims[0],n[1].dims[1],n[1].dims[2],n[1].dims[3]/v],tA=[h[0],h[1],h[2],h[3]/v],Q=[{type:12,data:F},{type:6,data:[u.strides[0],u.strides[1]]},{type:6,data:[u.pads[0],u.pads[1]]}];Ws(u,Q),Q.push(...Ke(N,Y,tA));let iA=(y-1)*u.strides[1]+Y[1];return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${u.cacheKey};${v};${y};${iA};${Y[0]};${Y[1]}`,inputDependencies:B?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:w?w(h):h,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(F/64)},programUniforms:Q}),getShaderSource:oA=>{let dA=Je("output",n[0].dataType,tA.length,v),fA=jt(dA.type.tensor),wA=Cs(u,dA.type.value,fA),MA=ge("x",n[0].dataType,N.length,v),DA=ge("w",n[1].dataType,Y.length,v),LA=[MA,DA];B&&LA.push(ge("b",n[2].dataType,n[2].dims,v));let ZA=B?"value += b[output_channel];":"",JA=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Vs(u,JA),`
  ${oA.registerUniforms(JA).declareVariables(...LA,dA)}
  ${oA.mainStart()}
    ${oA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${y}u;
    let col = (index1 % width1) * ${y}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${MA.type.value}, ${iA}>;
    var values: array<${dA.type.value}, ${y}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${Y[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${iA}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${MA.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${MA.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${Y[1]}; w_width++) {
          let w_val = ${DA.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${y}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${y}u; i++) {
      var value = values[i];
      ${ZA}
      ${wA}
      ${dA.set("batch","row","col + i","output_channel","value")};
    }
  }`}}}}),Un=TA(()=>{St(),Qa(),Sa(),Jo(),ja(),jn(),Pt(),Ji(),T=(n,u,h,w,B,v)=>{let y=n[0],F=n.slice(v?1:2,v?3:4),N=F.length,Y=u[0],tA=u.slice(2).map((iA,oA)=>iA+(iA-1)*(h[oA]-1)),Q=F.map((iA,oA)=>iA+w[oA]+w[oA+N]).map((iA,oA)=>Math.floor((iA-tA[oA]+B[oA])/B[oA]));return Q.splice(0,0,y),Q.splice(v?3:1,0,Y),Q},O=[2,3,1,0],Z=(n,u)=>{if(!n||n.length!==2&&n.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(n[0].dims.length>5)throw new Error("greater than 5D is not supported");if(n[0].dims.length!==n[1].dims.length)throw new Error("filter does not have same dimension as input");if(n[0].dims[u.format==="NHWC"?n[0].dims.length-1:1]!==n[1].dims[1]*u.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(n.length===3&&(n[2].dims.length!==1||n[1].dims[0]!==n[2].dims[0]))throw new Error("invalid bias");let h=n[0].dims.length-2;if(u.dilations.length!==h)throw new Error(`dilations should be ${h}D`);if(u.strides.length!==h)throw new Error(`strides should be ${h}D`);if(u.pads.length!==2*h)throw new Error(`pads should be ${2*h}D`);if(u.kernelShape.length!==0&&u.kernelShape.length!==n[1].dims.length-2)throw new Error("invalid kernel shape")},AA=(n,u)=>{let h=n.kernelShape.slice();h.length<u[1].dims.length-2&&h.push(...Array(u[1].dims.length-2-h.length).fill(0));for(let v=2;v<u[1].dims.length;++v)h[v-2]===0&&(h[v-2]=u[1].dims[v]);let w=n.pads.slice();Ve.adjustPadsBasedOnAutoPad(u[0].dims,n.strides,n.dilations,h,w,n.format==="NHWC",n.autoPad);let B=Object.assign({},n);return Object.assign(B,{kernelShape:h,pads:w}),B},cA=n=>{let u=Nn(n),h=n.format;return{autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][n.auto_pad],format:h,dilations:n.dilations,group:n.group,kernelShape:n.kernel_shape,pads:n.pads,strides:n.strides,wIsConst:n.w_is_const(),...u,cacheKey:`${n.format};${u.activation};`}},hA=(n,u,h,w)=>{let B=h.format==="NHWC",v=T(u[0].dims,u[1].dims,h.dilations,h.pads,h.strides,B);if(h.group!==1){let JA=[u[0]];if(B){let ne=n.kernelCustomData.wT??n.compute(Ga(u[1],O),{inputs:[1],outputs:[h.wIsConst?-2:-1]})[0];h.wIsConst&&!n.kernelCustomData.wT&&(n.kernelCustomData.wT=ne),JA.push(ne)}else JA.push(u[1]);return u.length===3&&JA.push(u[2]),void(!n.adapterInfo.isArchitecture("ampere")&&B&&u[1].dims[0]===h.group&&u[1].dims[1]===1&&h.dilations[0]===1&&h.dilations[1]===1?n.compute(E(JA,h,v,w),{inputs:JA}):n.compute(I(JA,h,v,w),{inputs:JA}))}let y=u.length===3,F=u[0].dims[B?1:2],N=u[0].dims[B?2:3],Y=u[0].dims[B?3:1],tA=u[1].dims[2],Q=u[1].dims[3],iA=v[B?1:2],oA=v[B?2:3],dA=v[B?3:1],fA=B&&tA===F&&Q===N&&h.pads[0]===0&&h.pads[1]===0;if(fA||tA===1&&Q===1&&h.dilations[0]===1&&h.dilations[1]===1&&h.strides[0]===1&&h.strides[1]===1&&h.pads[0]===0&&h.pads[1]===0){let JA,ne,Le,st=v[0],ht=[];if(B){let vt=n.kernelCustomData.wT??n.compute(Ga(u[1],O),{inputs:[1],outputs:[h.wIsConst?-2:-1]})[0];if(h.wIsConst&&!n.kernelCustomData.wT&&(n.kernelCustomData.wT=vt),fA){let tt=F*N*Y;JA=u[0].reshape([1,st,tt]),ne=vt.reshape([1,tt,dA]),Le=[1,st,dA]}else JA=u[0].reshape([st,F*N,Y]),ne=vt.reshape([1,Y,dA]),Le=[st,iA*oA,dA];ht.push(JA),ht.push(ne)}else JA=u[0].reshape([st,Y,F*N]),ne=u[1].reshape([1,dA,Y]),Le=[st,dA,iA*oA],ht.push(ne),ht.push(JA);y&&ht.push(u[2]);let pt=Le[2],mt=ht[0].dims[ht[0].dims.length-1];return void(pt<8&&mt<8?n.compute(yi(ht,h,v,Le,B,w),{inputs:ht}):n.compute(e(ht,h,v,Le,B,w),{inputs:ht}))}let wA=n.kernelCustomData.wT??n.compute(Ga(u[1],O),{inputs:[1],outputs:[h.wIsConst?-2:-1]})[0];h.wIsConst&&!n.kernelCustomData.wT&&(n.kernelCustomData.wT=wA);let MA=[u[0],wA];y&&MA.push(u[2]);let DA=B?iA*oA:dA,LA=B?dA:iA*oA,ZA=tA*Q*Y;n.compute(r(MA,h,v,DA,LA,ZA,y,!0,w),{inputs:MA})},vA=(n,u)=>{let h=u.format==="NHWC",w=[n.inputs[0].reshape(h?[n.inputs[0].dims[0],1,n.inputs[0].dims[1],n.inputs[0].dims[2]]:[n.inputs[0].dims[0],n.inputs[0].dims[1],1,n.inputs[0].dims[2]]),n.inputs[1].reshape([n.inputs[1].dims[0],n.inputs[1].dims[1],1,n.inputs[1].dims[2]])];n.inputs.length===3&&w.push(n.inputs[2]);let B=[0,u.pads[0],0,u.pads[1]],v=[1].concat(u.strides),y=[1].concat(u.dilations),F=[1].concat(u.kernelShape),N=AA({...u,pads:B,strides:v,dilations:y,kernelShape:F},w);hA(n,w,N,Y=>h?[Y[0],Y[2],Y[3]]:[Y[0],Y[1],Y[3]])},QA=(n,u,h)=>{let w=h.format==="NHWC"?"channelsLast":"channelsFirst",B=AA(h,u),v=h.autoPad==="NOTSET"?h.pads:h.autoPad,y=m(u[0].dims,u[1].dims,h.strides,h.dilations,v,!1,w);n.compute(p(u,B,y.outShape,[y.filterDepth,y.filterHeight,y.filterWidth],[y.padInfo.front,y.padInfo.top,y.padInfo.left],w))},WA=(n,u)=>{if(Z(n.inputs,u),n.inputs[0].dims.length===3)vA(n,u);else if(n.inputs[0].dims.length===5)QA(n,n.inputs,u);else{let h=AA(u,n.inputs);hA(n,n.inputs,h)}}}),hc=TA(()=>{Dt(),Di(),St(),Rt(),KA=(n,u,h)=>{let w=n.length>2,B=u.outputShape,v=u.format==="NHWC",y=u.group,F=n[1].dims,N=F[2]/y,Y=F[3],tA=v?Jt(N):1,Q=v?Jt(Y):1,iA=v?Y===1?tA:Q:1,oA=HA.size(B)/Q,dA=[Math.ceil(oA/64),1,1];zt("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${dA}`);let fA=["rank","rank"],wA=[u.strides[0],u.strides[1]],MA=[u.kernelShape[v?1:2],u.kernelShape[v?2:3]],DA=[u.dilations[0],u.dilations[1]],LA=[MA[0]+(u.dilations[0]<=1?0:(u.kernelShape[v?1:2]-1)*(u.dilations[0]-1)),MA[1]+(u.dilations[1]<=1?0:(u.kernelShape[v?2:3]-1)*(u.dilations[1]-1))],ZA=[LA[0]-1-Math.floor((u.pads[0]+u.pads[2])/2),LA[1]-1-Math.floor((u.pads[1]+u.pads[3])/2)],JA=[{type:12,data:oA},{type:12,data:wA},{type:12,data:MA},{type:12,data:DA},{type:12,data:LA},{type:6,data:ZA},{type:12,data:N},{type:12,data:Y},...Ke(n[0].dims,n[1].dims)];return w&&(JA.push(...Ke(n[2].dims)),fA.push("rank")),JA.push(...Ke(B)),{name:"ConvTranspose2D",shaderCache:{hint:`${u.cacheKey};${tA}${iA}${Q}${Y===1}`,inputDependencies:fA},getRunData:()=>({dispatchGroup:{x:dA[0],y:dA[1],z:dA[2]},outputs:[{dims:h?h(B):B,dataType:n[0].dataType}],programUniforms:JA}),getShaderSource:ne=>{let Le=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:wA.length},{name:"filter_dims",type:"u32",length:MA.length},{name:"dilations",type:"u32",length:MA.length},{name:"effective_filter_dims",type:"u32",length:LA.length},{name:"pads",type:"i32",length:ZA.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],st=jt(n[0].dataType),ht=v?1:2,pt=v?2:3,mt=v?3:1,vt=ge("W",n[1].dataType,n[1].dims.length,iA),tt=ge("Dy",n[0].dataType,n[0].dims.length,tA),gt=[tt,vt];w&&gt.push(ge("bias",n[2].dataType,[B[mt]].length,Q));let we=Je("result",n[0].dataType,B.length,Q),Ue=`
            let outputIndices = ${we.offsetToIndices(`global_idx * ${Q}`)};
            let batch = ${we.indicesGet("outputIndices",0)};
            let d1 = ${we.indicesGet("outputIndices",mt)};
            let r = ${we.indicesGet("outputIndices",ht)};
            let c = ${we.indicesGet("outputIndices",pt)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${we.type.value}(0.0);
            for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${st}(dyRCorner) + ${st}(wR)) / ${st}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${st}(uniforms.Dy_shape[${ht}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              wR = wR + uniforms.strides[0] - 1;
              let idyR: u32 = u32(dyR);

              for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${st}(dyCCorner) + ${st}(wC)) / ${st}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${st}(uniforms.Dy_shape[${pt}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                wC = wC + uniforms.strides.y - 1;
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + ${tA}) {
                  let xValue = ${v?tt.getByOffset(`${tt.indicesToOffset(`${tt.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${tA}`):tt.get("batch","inputChannel","idyR","idyC")};
                  ${(()=>{let et="";if(tA===1)et+=`
        let w_offset = ${vt.indicesToOffset(`${vt.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
        let wValue = ${vt.getByOffset(`w_offset / ${iA}`)};
        dotProd = dotProd + xValue * wValue;`;else if(Y===1)et+=`
          let wValue = ${vt.getByOffset(`${vt.indicesToOffset(`${vt.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)} / ${iA}`)};
          dotProd = dotProd + dot(xValue, wValue);`;else for(let yt=0;yt<tA;yt++)et+=`
            let wValue${yt} = ${vt.getByOffset(`${vt.indicesToOffset(`${vt.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${yt}, wOutChannel)`)} / ${iA}`)};
            dotProd = dotProd + xValue[${yt}] * wValue${yt};`;return et})()}
                  inputChannel = inputChannel + ${tA};
                }
              }
            }
            let value = dotProd${w?` + bias[d1 / ${Q}]`:""};
            ${we.setByOffset("global_idx","value")};
          `;return`
    ${ne.registerUniforms(Le).declareVariables(...gt,we)}
      ${ne.mainStart()}
      ${ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${Ue}}`}}}}),z1=TA(()=>{hc(),jn(),Ji(),re=(n,u,h,w,B,v)=>(n-1)*u+h+(w-1)*B+1-v,le=(n,u,h,w,B)=>{let v=Math.floor(n/2);u==="SAME_UPPER"?(h[w]=v,h[B]=n-v):u==="SAME_LOWER"&&(h[w]=n-v,h[B]=v)},Me=(n,u,h,w,B,v,y,F,N,Y)=>{let tA=n.length-2,Q=Y.length===0;N.length<tA&&N.push(...Array(tA-N.length).fill(0));let iA=n[0],oA=u[F?3:1]*B;for(let dA=0,fA=n.length-tA-(F?1:0);dA<tA;++dA,++fA){let wA=n[fA],MA=Q?wA*y[dA]:Y[dA],DA=re(wA,y[dA],v[dA],u[fA],h[dA],MA);le(DA,w,v,dA,dA+tA),Q&&Y.push(y[dA]*(wA-1)+N[dA]+(u[fA]-1)*h[dA]+1-v[dA]-v[dA+tA])}Y.splice(0,0,iA),Y.splice(F?3:1,0,oA)},ze=(n,u)=>{let h=n.kernelShape.slice();if(n.kernelShape.length===0||n.kernelShape.reduce((Q,iA)=>Q*iA,1)===0){h.length=0;for(let Q=2;Q<u[1].dims.length;++Q)h.push(u[1].dims[Q])}let w=n.format==="NHWC";h.splice(0,0,u[1].dims[0]),h.splice(w?3:1,0,u[1].dims[1]);let B=n.pads.slice(),v=n.outputShape.slice(),y=n.outputPadding.slice(),F=u[0].dims,N=n.dilations.slice();if(N.reduce((Q,iA)=>Q+iA,0)===0){let Q=u[0].dims.length-2;N=new Array(Q).fill(1)}let Y=n.strides.slice();if(Y.reduce((Q,iA)=>Q+iA,0)===0){let Q=u[0].dims.length-2;Y=new Array(Q).fill(1)}Me(F,h,N,n.autoPad,n.group,B,Y,w,y,v);let tA=Object.assign({},n);return Object.assign(tA,{kernelShape:h,pads:B,outputPadding:y,outputShape:v,dilations:N,strides:Y}),tA},At=n=>{let u=Nn(n),h=n.format,w=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof n.autoPad>"u"?0:n.autoPad],B=n.dilations,v=n.group,y=n.kernelShape,F=n.pads,N=n.strides,Y=n.wIsConst();return{autoPad:w,format:h,dilations:B,group:v,kernelShape:y,outputPadding:n.outputPadding,outputShape:n.outputShape,pads:F,strides:N,wIsConst:Y,...u,cacheKey:`${n.format};${u.activation};`}},at=(n,u)=>{if(!n||n.length!==2&&n.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(n[0].dims.length!==4&&n[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(n[0].dims.length!==n[1].dims.length)throw new Error("filter does not have same dimension as input");if(n[0].dims[u.format==="NHWC"?n[0].dims.length-1:1]!==n[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let h=n[1].dims[1]*u.group;if(n.length===3&&(n[2].dims.length!==1||n[2].dims[0]!==h))throw new Error("invalid bias");let w=n[0].dims.length-2;if(u.dilations.reduce((B,v)=>B+v,0)>0&&u.dilations.length!==w)throw new Error(`dilations should be ${w}D`);if(u.strides.reduce((B,v)=>B+v,0)>0&&u.strides.length!==w)throw new Error(`strides should be ${w}D`);if(u.pads.reduce((B,v)=>B+v,0)>0&&u.pads.length!==2*w)throw new Error(`pads should be ${2*w}D`);if(u.outputPadding.length!==w&&u.outputPadding.length!==0)throw new Error(`output_padding should be ${w}D`);if(u.kernelShape.reduce((B,v)=>B+v,0)>0&&u.kernelShape.length!==0&&u.kernelShape.length!==n[1].dims.length-2)throw new Error("invalid kernel shape");if(u.outputShape.length!==0&&u.outputShape.length!==n[0].dims.length-2)throw new Error("invalid output shape")},ft=(n,u,h,w)=>{let B=n.kernelCustomData.wT??n.compute(Ga(u[1],[2,3,0,1]),{inputs:[1],outputs:[h.wIsConst?-2:-1]})[0];h.wIsConst&&!n.kernelCustomData.wT&&(n.kernelCustomData.wT=B);let v=[u[0],B];u.length===3&&v.push(u[2]),n.compute(KA(v,h,w),{inputs:v})},Nt=(n,u)=>{let h=u.format==="NHWC",w=[n.inputs[0].reshape(h?[n.inputs[0].dims[0],1,n.inputs[0].dims[1],n.inputs[0].dims[2]]:[n.inputs[0].dims[0],n.inputs[0].dims[1],1,n.inputs[0].dims[2]]),n.inputs[1].reshape([n.inputs[1].dims[0],n.inputs[1].dims[1],1,n.inputs[1].dims[2]])];n.inputs.length===3&&w.push(n.inputs[2]);let B=u.kernelShape;(B.length===0||B[0]===0)&&(B=[n.inputs[1].dims[2]]);let v=u.dilations;(v.length===0||v[0]===0)&&(v=[1]);let y=u.strides;(y.length===0||y[0]===0)&&(y=[1]);let F=u.pads;F.length===0&&(F=[0,0]),F=[0,F[0],0,F[1]],y=[1].concat(y),v=[1].concat(v),B=[1].concat(B);let N=ze({...u,pads:F,strides:y,dilations:v,kernelShape:B},w);ft(n,w,N,Y=>h?[Y[0],Y[2],Y[3]]:[Y[0],Y[1],Y[3]])},Kt=(n,u)=>{if(at(n.inputs,u),n.inputs[0].dims.length===3)Nt(n,u);else{let h=ze(u,n.inputs);ft(n,n.inputs,h)}}}),F1=TA(()=>{Dt(),St(),qr(),Rt(),er=(n,u,h,w)=>{let B=HA.size(u),v=u.length,y=ge("input",n,v),F=Je("output",n,v),N=h.dataType===6?h.getInt32Array()[0]:Number(h.getBigInt64Array()[0]),Y=HA.normalizeAxis(N,v);return{name:"CumSum",shaderCache:{hint:w.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(B/64)},programUniforms:[{type:12,data:B},{type:12,data:Y},...Ke(u,u)]}),getShaderSource:tA=>{let Q=` i32(${y.indicesGet("inputIndices","uniforms.axis")}) `,iA=rt("uniforms.input_shape","uniforms.axis",v),oA=w.reverse?Q+(w.exclusive?" + 1":""):"0",dA=w.reverse?iA:Q+(w.exclusive?"":" + 1");return`
                ${tA.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(y,F)}
                ${tA.mainStart()}
                  ${tA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${F.offsetToIndices("global_idx")};
                  var sum = ${F.type.value}(0);
                  let first : i32 = ${oA};
                  let last : i32 = ${dA};
                  for (var i : i32 = first; i < last; i++) {
                    ${y.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${y.getByIndices("inputIndices")};
                  }
                  ${F.setByOffset("global_idx","sum")};
                }`}}},pr=(n,u)=>{let h=n.inputs[0].dims,w=n.inputs[0].dataType,B=n.inputs[1];n.compute(er(w,h,B,u),{inputs:[0]})},hr=n=>{let u=n.exclusive===1,h=n.reverse===1;return $A({exclusive:u,reverse:h})}}),K=TA(()=>{Dt(),St(),qr(),Rt(),yr=n=>{if(!n||n.length!==1)throw new Error("DepthToSpace requires 1 input.");if(n[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},Er=(n,u,h,w)=>{let B=[];B.push(`fn perm(i: ${w.type.indices}) -> ${h.type.indices} {
    var a: ${h.type.indices};`);for(let v=0;v<u;++v)B.push(h.indicesSet("a",n[v],`i[${v}]`));return B.push("return a;}"),B.join(`
`)},zr=(n,u)=>{let h,w,B,v,y,F,N=u.format==="NHWC",Y=u.blocksize,tA=u.mode==="DCR";N?([h,w,B,v]=n.dims,y=tA?[h,w,B,Y,Y,v/Y**2]:[h,w,B,v/Y**2,Y,Y],F=tA?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([h,w,B,v]=[n.dims[0],n.dims[2],n.dims[3],n.dims[1]],y=tA?[h,Y,Y,v/Y**2,w,B]:[h,v/Y**2,Y,Y,w,B],F=tA?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let Q=n.reshape(y),iA=Q.dims.length,oA=n.dataType,dA=ge("a",oA,iA),fA=Je("output",oA,iA);return{name:"DepthToSpace",shaderCache:{hint:`${n.dims};${u.blocksize};${u.mode}`,inputDependencies:["rank"]},getRunData:wA=>{let MA=N?[h,w*Y,B*Y,v/Y**2]:[h,v/Y**2,w*Y,B*Y],DA=HA.size(MA),LA=Q.dims,ZA=HA.sortBasedOnPerm(LA,F);return{outputs:[{dims:MA,dataType:wA[0].dataType}],dispatchGroup:{x:Math.ceil(DA/64)},programUniforms:[{type:12,data:DA},...Ke(LA,ZA)]}},getShaderSource:wA=>`
  ${wA.registerUniform("output_size","u32").declareVariables(dA,fA)}

  ${Er(F,iA,dA,fA)}

  ${wA.mainStart()}
    ${wA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${fA.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${fA.setByOffset("global_idx",dA.getByIndices("aIndices"))}
  }`}},Wr=(n,u)=>{yr(n.inputs),n.compute(zr(n.inputs[0],u))},oa=n=>$A({blocksize:n.blocksize,mode:n.mode,format:n.format})}),j=TA(()=>{Dt(),St(),qr(),Rt(),va="^"+(la="("+(Xr="[a-zA-Z]|\\.\\.\\.")+")+")+"$",As="^"+("("+la+",)*"+la)+"$",ns=class{constructor(n=-1){this.symbolToIndices=new Map,this.inputIndex=n}addSymbol(n,u){let h=this.symbolToIndices.get(n);h===void 0?h=[u]:h.push(u),this.symbolToIndices.set(n,h)}},os=class{constructor(n,u){this.equation=u,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[h,w]=u.includes("->")?u.split("->",2):[u,""];if(!h.match(RegExp(As)))throw new Error("Invalid LHS term");if(h.split(",").forEach((B,v)=>{let y=n[v].dims.slice();if(!B.match(RegExp(va)))throw new Error("Invalid LHS term");let F=this.processTerm(B,!0,y,v);this.lhs.push(F)}),w==="")w+=[...this.symbolToInfo.entries()].filter(([B,v])=>v.count===1||B==="...").map(([B])=>B).join("");else if(!w.match(RegExp(la)))throw new Error("Invalid RHS");w.match(RegExp(Xr,"g"))?.forEach(B=>{if(B==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let v=this.symbolToInfo.get(B);if(v===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(v.dimValue)}}),this.rhs=this.processTerm(w,!1,this.outputDims)}addSymbol(n,u,h){let w=this.symbolToInfo.get(n);if(w!==void 0){if(w.dimValue!==u&&w.count!==1)throw new Error("Dimension mismatch");w.count++,w.inputIndices.push(h)}else w={count:1,dimValue:u,inputIndices:[h]};this.symbolToInfo.set(n,w)}processTerm(n,u,h,w=-1){let B=h.length,v=!1,y=[],F=0;if(!n.match(RegExp(va))&&!u&&n!=="")throw new Error("Invalid LHS term");let N=n.match(RegExp(Xr,"g")),Y=new ns(w);return N?.forEach((tA,Q)=>{if(tA==="..."){if(v)throw new Error("Only one ellipsis is allowed per input term");v=!0;let iA=B-N.length+1;if(iA<0)throw new Error("Ellipsis out of bounds");if(y=h.slice(F,F+iA),this.hasEllipsis){if(this.ellipsisDims.length!==y.length||this.ellipsisDims.toString()!==y.toString())throw new Error("Ellipsis dimensions mismatch")}else{if(!u)throw new Error("Ellipsis must be specified in the LHS");this.hasEllipsis=!0,this.ellipsisDims=y}for(let oA=0;oA<y.length;oA++){let dA=String.fromCharCode(48+oA);Y.addSymbol(dA,Q+oA),this.addSymbol(dA,h[F++],w)}}else Y.addSymbol(tA,Q+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(tA,h[F++],w)}),Y}},Us=n=>n+"_max",Ei=(n,u,h,w)=>{let B=n.map(N=>N.length).map((N,Y)=>ge(`input${Y}`,u,N)),v=HA.size(w),y=Je("output",u,w.length),F=[...h.symbolToInfo.keys()].filter(N=>!h.rhs.symbolToIndices.has(N));return{name:"Einsum",shaderCache:{hint:h.equation,inputDependencies:n.map(()=>"rank")},getRunData:()=>{let N=F.filter(tA=>h.symbolToInfo.has(tA)).map(tA=>({type:12,data:h.symbolToInfo.get(tA)?.dimValue||0}));N.push({type:12,data:v});let Y=n.map((tA,Q)=>[...Ke(tA)]).reduce((tA,Q)=>tA.concat(Q),N);return Y.push(...Ke(w)),{outputs:[{dims:w,dataType:u}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:Y}},getShaderSource:N=>{let Y=[],tA=[],Q=[],iA=[],oA=[],dA=h.symbolToInfo.size===h.rhs.symbolToIndices.size;h.symbolToInfo.forEach((wA,MA)=>{if(h.rhs.symbolToIndices.has(MA)){let DA=h.rhs.symbolToIndices.get(MA)?.[0];DA!==void 0&&h.lhs.forEach((LA,ZA)=>{if(wA.inputIndices.includes(ZA)){let JA=LA.symbolToIndices.get(MA);if(JA===void 0)throw new Error("Invalid symbol error");JA.forEach(ne=>{Y.push(`${B[ZA].indicesSet(`input${ZA}Indices`,ne,y.indicesGet("outputIndices",DA))}`)})}})}else h.lhs.forEach((DA,LA)=>{if(wA.inputIndices.includes(LA)){let ZA=DA.symbolToIndices.get(MA);if(ZA===void 0)throw new Error("Invalid symbol error");ZA.forEach(JA=>{tA.push(`${B[LA].indicesSet(`input${LA}Indices`,JA,`${MA}`)}`)}),oA.push(`prod *= ${B[LA].getByIndices(`input${LA}Indices`)};`)}}),Q.push(`for(var ${MA}: u32 = 0; ${MA} < uniforms.${Us(MA)}; ${MA}++) {`),iA.push("}")});let fA=dA?[...Y,`let sum = ${B.map((wA,MA)=>wA.getByIndices(`input${MA}Indices`)).join(" * ")};`]:[...Y,"var sum = 0.0;",...Q,...tA,"var prod = 1.0;",...oA,"sum += prod;",...iA];return`
            ${N.registerUniforms(F.map(wA=>({name:`${Us(wA)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...B,y)}

            ${N.mainStart()}
            ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${y.offsetToIndices("global_idx")};
            ${B.map((wA,MA)=>`var input${MA}Indices: ${B[MA].type.indices};`).join(`
`)}
            ${fA.join(`
`)};
            ${y.setByOffset("global_idx","sum")};
          }`}}},Ms=(n,u)=>{let h=new os(n.inputs,u.equation),w=h.outputDims,B=n.inputs.map((v,y)=>v.dims);n.compute(Ei(B,n.inputs[0].dataType,h,w))},Mi=n=>{let u=n.equation.replace(/\s+/g,"");return $A({equation:u})}}),yA=TA(()=>{Dt(),St(),Rt(),Gi=n=>{if(!n||n.length!==2)throw new Error("Expand requires 2 input.");let u=n[0].dims,h=Array.from(n[1].getBigInt64Array(),Number),w=h.length<u.length?0:h.length-u.length,B=u.length<h.length?0:u.length-h.length;for(;w<h.length&&B<u.length;++w,++B)if(h[w]!==u[B]&&h[w]!==1&&u[B]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Yn=(n,u)=>{let h=n.length-u.length,w=[];for(let B=0;B<h;++B)w.push(n[B]);for(let B=0;B<u.length;++B)w.push(u[B]===1?n[B+h]:u[B]);return w},E0=(n,u)=>n.length>u.length?Yn(n,u):Yn(u,n),M0=n=>{let u=n[0].dims,h=Array.from(n[1].getBigInt64Array(),Number),w=E0(u,h),B=n[0].dataType,v=B===9||HA.size(u)===1,y=B===9||u.length>0&&u[u.length-1]%4==0?4:1,F=v||w.length>0&&w[w.length-1]%4==0?4:1,N=Math.ceil(HA.size(w)/F),Y=[{type:12,data:N},...Ke(u,w)];return{name:"Expand",shaderCache:{hint:`${w.length};${y}${F}`,inputDependencies:["rank"]},getShaderSource:tA=>{let Q,iA=ge("input",B,u.length,y),oA=Je("output",B,w.length,F);if(B===9){let dA=(fA,wA,MA="")=>`
          let outputIndices${wA} = ${oA.offsetToIndices(`outputOffset + ${wA}u`)};
          let offset${wA} = ${iA.broadcastedIndicesToOffset(`outputIndices${wA}`,oA)};
          let index${wA} = offset${wA} / 4u;
          let component${wA} = offset${wA} % 4u;
          ${fA}[${wA}] = ${MA}(${iA.getByOffset(`index${wA}`)}[component${wA}]);
        `;Q=`
        let outputOffset = global_idx * ${F};
        var data = vec4<u32>(0);
        ${dA("data",0,"u32")}
        ${dA("data",1,"u32")}
        ${dA("data",2,"u32")}
        ${dA("data",3,"u32")}
        ${oA.setByOffset("global_idx","data")}
      }`}else Q=`
        let outputIndices = ${oA.offsetToIndices(`global_idx * ${F}`)};
        let inputOffset = ${iA.broadcastedIndicesToOffset("outputIndices",oA)};
        let data = ${oA.type.value}(${iA.getByOffset(`inputOffset / ${y}`)});
        ${oA.setByOffset("global_idx","data")}
      }`;return`
    ${tA.registerUniform("vec_size","u32").declareVariables(iA,oA)}
    ${tA.mainStart()}
    ${tA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${Q}`},getRunData:()=>({outputs:[{dims:w,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:Y})}},Hn=n=>{Gi(n.inputs),n.compute(M0(n.inputs),{inputs:[0]})}}),Ae=TA(()=>{Dt(),St(),Rt(),c1(),f2=n=>{let u=n[0].dataType,h=HA.size(n[0].dims),w=HA.size(n[1].dims),B=w%4==0;return{name:"FastGeluWithBias",shaderCache:{hint:`${B}`,inputDependencies:["type","type"]},getShaderSource:v=>{let y=ge("x",u,[1],4),F=ge("bias",u,[1],4),N=Je("y",u,[1],4),Y=Q=>`
      let bias${Q}_offset: u32 = (global_idx * 4 + ${Q}) % uniforms.bias_size;
      let bias${Q} = ${F.getByOffset(`bias${Q}_offset / 4`)}[bias${Q}_offset % 4];`,tA=B?`
      let bias = ${F.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${Y(0)}${Y(1)}${Y(2)}${Y(3)}
      let bias = ${y.type.value}(bias0, bias1, bias2, bias3);`;return`${v.registerUniforms([{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}]).declareVariables(y,F,N)}

    ${_a(je(u))}

    ${v.mainStart(cr)}
      ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${y.getByOffset("global_idx")};
      ${tA}
      let x_in = x + bias;
      ${N.setByOffset("global_idx",Gn("x_in"))}
    }`},getRunData:v=>({outputs:[{dims:v[0].dims,dataType:v[0].dataType}],programUniforms:[{type:12,data:Math.ceil(h/4)},{type:12,data:w}],dispatchGroup:{x:Math.ceil(h/cr/4)}})}},p2=n=>{n.inputs.length<2||HA.size(n.inputs[1].dims)===0?Ui(n):n.compute(f2(n.inputs))}}),se=TA(()=>{Dt(),St(),qr(),Rt(),uo=n=>{if(!n||n.length!==2)throw new Error("Gather requires 2 inputs.")},h2=(n,u)=>{let h=n[0].dims,w=n[1].dims,B=h.length,v=HA.normalizeAxis(u.axis,B),y=h.slice(0);y.splice(v,1,...w);let F=h[v],N=n[0].dataType===9?4:1,Y=Math.ceil(HA.size(y)/N),tA=[{type:12,data:Y},{type:6,data:F},{type:12,data:v},...Ke(n[0].dims,n[1].dims,y)];return{name:"Gather",shaderCache:{hint:u.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:y,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(Y/64)},programUniforms:tA}),getShaderSource:Q=>{let iA,oA=ge("data",n[0].dataType,n[0].dims.length,N),dA=ge("inputIndices",n[1].dataType,n[1].dims.length),fA=Je("output",n[0].dataType,y.length,N),wA=MA=>{let DA=w.length,LA=`var indicesIndices${MA}  = ${dA.type.indices}(0);`;for(let ZA=0;ZA<DA;ZA++)LA+=`${DA>1?`indicesIndices${MA}[${ZA}]`:`indicesIndices${MA}`} = ${y.length>1?`outputIndices${MA}[uniforms.axis + ${ZA}]`:`outputIndices${MA}`};`;LA+=`
          var idx${MA} = ${dA.getByIndices(`indicesIndices${MA}`)};
          if (idx${MA} < 0) {
            idx${MA} = idx${MA} + uniforms.axisDimLimit;
          }
          var dataIndices${MA} : ${oA.type.indices};
        `;for(let ZA=0,JA=0;ZA<B;ZA++)ZA===v?(LA+=`${B>1?`dataIndices${MA}[${ZA}]`:`dataIndices${MA}`} = u32(idx${MA});`,JA+=DA):(LA+=`${B>1?`dataIndices${MA}[${ZA}]`:`dataIndices${MA}`} = ${y.length>1?`outputIndices${MA}[${JA}]`:`outputIndices${MA}`};`,JA++);return LA};if(n[0].dataType===9){let MA=(DA,LA,ZA="")=>`
          let outputIndices${LA} = ${fA.offsetToIndices(`outputOffset + ${LA}u`)};
          ${wA(LA)};
          let offset${LA} = ${oA.indicesToOffset(`dataIndices${LA}`)};
          let index${LA} = offset${LA} / 4u;
          let component${LA} = offset${LA} % 4u;
          ${DA}[${LA}] = ${ZA}(${oA.getByOffset(`index${LA}`)}[component${LA}]);
        `;iA=`
        let outputOffset = global_idx * ${N};
        var value = vec4<u32>(0);
        ${MA("value",0,"u32")}
        ${MA("value",1,"u32")}
        ${MA("value",2,"u32")}
        ${MA("value",3,"u32")}
        ${fA.setByOffset("global_idx","value")}
      `}else iA=`
      let outputIndices = ${fA.offsetToIndices("global_idx")};
      ${wA("")};
      let value = ${oA.getByIndices("dataIndices")};
      ${fA.setByOffset("global_idx","value")};
      `;return`
      ${Q.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(oA,dA,fA)}
      ${Q.mainStart()}
        ${Q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${iA}
      }`}}},m2=n=>$A({axis:n.axis}),C2=(n,u)=>{let h=n.inputs;uo(h),n.compute(h2(n.inputs,u))}}),ue=TA(()=>{Dt(),St(),Rt(),b2=(n,u,h,w,B,v,y,F,N)=>{let Y=[{type:12,data:v},{type:12,data:w},{type:12,data:B},{type:12,data:h},{type:12,data:y},{type:12,data:F},{type:12,data:N}],tA=[v];return Y.push(...Ke(u.dims,tA)),n.compute({name:"computeSliceOffsets",shaderCache:{hint:`${B.length}_${h.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:tA,dataType:n.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:Y}),getShaderSource:Q=>{let iA=[ge("indices_data",u.dataType,u.dims.length),Je("input_slice_offsets_data",12,1,1)],oA=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:B.length},{name:"sizes_from_slice_dims_data",type:"u32",length:h.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${Q.registerUniforms(oA).declareVariables(...iA)}
  ${Q.mainStart()}
    ${Q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${B.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${h.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`}},{inputs:[u],outputs:[-1]})[0]},fo=(n,u)=>{let h=n.inputs,w=h[0].dims,B=h[0].dataType,v=h[1].dims,y=v[v.length-1],F=HA.sizeToDimension(v,v.length-1),N=HA.sizeFromDimension(w,u.batchDims+y),Y=HA.sizeToDimension(w,u.batchDims),tA=HA.sizeFromDimension(w,u.batchDims),Q=F/Y,iA=new Array(y),oA=N;for(let LA=0;LA<y;++LA)iA[y-1-LA]=oA,oA*=w[u.batchDims+y-1-LA];let dA=b2(n,h[1],iA,u.batchDims,w,F,Q,tA,y),fA=u.batchDims+y;if(fA>w.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let wA=v.slice(0,-1).concat(w.slice(fA)),MA=HA.size(wA),DA=[{type:12,data:MA},{type:12,data:N},...Ke(h[0].dims,dA.dims,wA)];n.compute({name:"GatherND",shaderCache:{hint:u.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:wA,dataType:B}],dispatchGroup:{x:Math.ceil(MA/64)},programUniforms:DA}),getShaderSource:LA=>{let ZA=ge("data",h[0].dataType,h[0].dims.length),JA=ge("slice_offsets",12,dA.dims.length),ne=Je("output",h[0].dataType,wA.length);return`
          ${LA.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(ZA,JA,ne)}
            ${LA.mainStart()}
            ${LA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`}},{inputs:[h[0],dA]})},I2=n=>({batchDims:n.batch_dims,cacheKey:""})}),Fe=TA(()=>{Dt(),St(),qr(),Rt(),w2=(n,u)=>{if(n.length<3||n.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let h=HA.normalizeAxis(u.quantizeAxis,n[0].dims.length),w=u.blockSize,B=n[0],v=n[2],y=n.length===4?n[3]:void 0;if(v.dims.length!==B.dims.length||!B.dims.map((F,N)=>N===h?Math.ceil(F/w)===v.dims[N]:F===v.dims[N]).reduce((F,N)=>F&&N,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(y){if(y.dataType!==B.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(y.dims.length!==v.dims.length||!y.dims.map((F,N)=>F===v.dims[N]).reduce((F,N)=>F&&N,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},po=(n,u)=>{let h=n[0].dims,w=n[1].dims,B=h.length,v=HA.normalizeAxis(u.gatherAxis,B),y=HA.normalizeAxis(u.quantizeAxis,B),F=h.slice(0);F.splice(v,1,...w);let N=HA.size(F),Y=n[2].dataType,tA=n[0].dataType===22,Q=[{type:12,data:N},{type:12,data:y},{type:12,data:v},{type:12,data:u.blockSize},...Ke(...n.map((iA,oA)=>iA.dims),F)];return{name:"GatherBlockQuantized",shaderCache:{hint:`${u.cacheKey};${n.filter((iA,oA)=>oA!==1).map(iA=>iA.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:n.length},(iA,oA)=>"rank")},getRunData:()=>({outputs:[{dims:F,dataType:Y}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:Q}),getShaderSource:iA=>{let oA=ge("data",n[0].dataType,n[0].dims.length),dA=ge("inputIndices",n[1].dataType,n[1].dims.length),fA=ge("scales",n[2].dataType,n[2].dims.length),wA=n.length>3?ge("zeroPoint",n[3].dataType,n[3].dims.length):void 0,MA=Je("output",Y,F.length),DA=[oA,dA,fA];return wA&&DA.push(wA),`
        ${iA.registerUniforms([{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}]).declareVariables(...DA,MA)}
        ${iA.mainStart()}
        let output_indices = ${MA.offsetToIndices("global_idx")};
        var indices_indices = ${dA.type.indices}(0);
        ${w.length>1?`
          for (var i: u32 = 0; i < ${w.length}; i++) {
            let index = ${MA.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${dA.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${MA.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${oA.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${MA.indicesGet("output_indices","i")};
          ${oA.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${dA.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${h[v]};
        }
        ${oA.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${F.length}; i++) {
          let index = ${MA.indicesGet("output_indices",`i + ${w.length} - 1`)};
          ${oA.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${oA.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${oA.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${tA?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${fA.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${fA.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${fA.getByIndices("scale_indices")};
        ${wA?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${wA.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${wA.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${tA?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${je(Y)}(quantized_data - zero_point) * scale;
        ${MA.setByOffset("global_idx","dequantized_data")};
    }`}}},k2=(n,u)=>{let h=n.inputs;w2(h,u),n.compute(po(n.inputs,u))},x2=n=>$A({blockSize:n.blockSize,gatherAxis:n.gatherAxis,quantizeAxis:n.quantizeAxis})}),Ze=TA(()=>{Dt(),St(),qr(),Rt(),ho=n=>{if(!n||n.length!==2)throw new Error("GatherElements requires 2 inputs.");if(n[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(n[0].dims.length!==n[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},B2=(n,u)=>{let h=n[0].dims,w=n[0].dataType,B=h.length,v=n[1].dims,y=n[1].dataType,F=HA.normalizeAxis(u.axis,B),N=h[F],Y=v.slice(0),tA=HA.size(Y),Q=ge("input",w,B),iA=ge("indicesInput",y,v.length),oA=Je("output",w,Y.length),dA=[{type:12,data:tA},{type:6,data:N},{type:12,data:F}];return dA.push(...Ke(h,v,Y)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:Y,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(tA/64)},programUniforms:dA}),getShaderSource:fA=>`
      ${fA.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(Q,iA,oA)}
      ${fA.mainStart()}
      ${fA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${oA.offsetToIndices("global_idx")};

      var idx = ${iA.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${Q.type.indices}(outputIndices);
      ${Q.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${Q.getByIndices("inputIndices")};

      ${oA.setByOffset("global_idx","value")};
  }`}},v2=n=>$A({axis:n.axis}),mo=(n,u)=>{let h=n.inputs;ho(h),n.compute(B2(n.inputs,u))}}),We=TA(()=>{Dt(),St(),Rt(),y2=n=>{if(!n)throw new Error("Input is missing");if(n.length<2||n.length>3)throw new Error("Invaid input number.");if(n.length===3&&n[2].dims.length>2)throw new Error("Invalid input shape of C");if(n[0].dataType!==n[1].dataType||n.length===3&&n[0].dataType!==n[2].dataType)throw new Error("Input types are mismatched")},E2=(n,u)=>{let h=n[0].dims.slice(),w=n[1].dims.slice(),[B,v,y]=Ce.getShapeOfGemmResult(h,u.transA,w,u.transB,n.length===3?n[2].dims:void 0),F=[B,v];if(!F)throw new Error("Can't use gemm on the given tensors");let N=16,Y=Math.ceil(v/N),tA=Math.ceil(B/N),Q=(HA.size(F),[{type:12,data:Y},{type:12,data:B},{type:12,data:v},{type:12,data:y},{type:1,data:u.alpha},{type:1,data:u.beta}]),iA=["type","type"];return n.length===3&&(Q.push(...Ke(n[2].dims)),iA.push("rank")),Q.push(...Ke(F)),{name:"GemmShared",shaderCache:{hint:`${u.cacheKey}`,inputDependencies:iA},getRunData:()=>({outputs:[{dims:F,dataType:n[0].dataType}],dispatchGroup:{x:Y*tA},programUniforms:Q}),getShaderSource:oA=>{let dA=ge("a",n[0].dataType,n[0].dims),fA=ge("b",n[1].dataType,n[1].dims),wA=null,MA=[dA,fA];n.length===3&&(wA=ge("c",n[2].dataType,n[2].dims.length),MA.push(wA));let DA=Je("output",n[0].dataType,F.length);MA.push(DA);let LA="",ZA="";u.transA&&u.transB?(ZA=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${dA.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${fA.type.value}(0);
      }
      `,LA="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):u.transA&&!u.transB?(ZA=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${dA.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${fA.type.value}(0);
      }
      `,LA="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!u.transA&&u.transB?(ZA=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${dA.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${fA.type.value}(0);
      }
      `,LA="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!u.transA&&!u.transB&&(ZA=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${dA.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${fA.type.value}(0);
      }
      `,LA="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let JA=u.alpha===1?"":"value *= uniforms.alpha;";return`
  ${oA.registerUniforms([{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}]).declareVariables(...MA)}
  var<workgroup> tile_a: array<array<${dA.type.storage}, 16>, 16>;
  var<workgroup> tile_b: array<array<${fA.type.storage}, 16>, 16>;
  ${oA.mainStart([N,N,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * 16;
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * 16;
    let num_tiles = (uniforms.K - 1) / 16 + 1;
    var k_start = 0u;
    var value = ${DA.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${ZA}
      k_start = k_start + 16;
      workgroupBarrier();

      for (var k: u32 = 0u; k < 16; k++) {
        ${LA}
      }
      workgroupBarrier();
    }

    ${JA}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${wA!=null?`let cOffset = ${wA.broadcastedIndicesToOffset("vec2(m, n)",DA)}; value += ${DA.type.value}(uniforms.beta) * ${wA.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`}}},M2=n=>({transA:n.transA,transB:n.transB,alpha:n.alpha,beta:n.beta,cacheKey:`${n.transA};${n.transB};${n.alpha===1}`}),G2=(n,u)=>{y2(n.inputs),n.compute(E2(n.inputs,u))}}),_e=TA(()=>{Dt(),St(),qr(),Rt(),[Gs,ci,Xi,qi]=[0,1,2,3],D2=n=>{if(n[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(n[0].dims.length!==n[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(n[0].dims.length-2!==n[1].dims[n[1].dims.length-1])throw new Error("last dimension of grid must be equal to "+(n[0].dims.length-2));if(n[0].dims[0]!==n[1].dims[0])throw new Error("grid batch size must match input batch size")},Q2=n=>`
  fn gs_bicubic_interpolate(p: mat4x4<${n}>, x: f32, y: f32) -> ${n} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${n}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,T2=n=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${n.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,Co=n=>`
  ${n.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,P2=(n,u,h)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${u} {
     var pixel = ${u}(0);
     var indices = vec4<u32>(0);
     indices[${Gs}] = batch;
     indices[${ci}] = channel;`+(()=>{switch(h.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${Xi}] = u32(r);
            indices[${qi}] = u32(c);
          }
        `;case"border":return`
          indices[${Xi}] = u32(clamp(r, 0, H - 1));
          indices[${qi}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${Xi}] = gs_reflect(r, border[1], border[3]);
          indices[${qi}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${h.paddingMode} is not supported`)}})()+`
    return ${n.getByIndices("indices")};
  }
`,z2=(n,u,h)=>(()=>{switch(h.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${Gs}], indices[${ci}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${Gs}], indices[${ci}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${Gs}], indices[${ci}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${Gs}], indices[${ci}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${Gs}], indices[${ci}], border);

          let dx2 = ${u}(f32(x2) - x);
          let dx1 = ${u}(x - f32(x1));
          let dy2 = ${u}(f32(y2) - y);
          let dy1 = ${u}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${u}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${Gs}], indices[${ci}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${h.mode} is not supported`)}})()+`${n.setByOffset("global_idx","result")}`,bo=(n,u)=>{let h=ge("x",n[0].dataType,n[0].dims.length),w=[n[1].dims[0],n[1].dims[1],n[1].dims[2]],B=ge("grid",n[1].dataType,w.length,2),v=[n[0].dims[0],n[0].dims[1],n[1].dims[1],n[1].dims[2]];u.format==="NHWC"&&(v=[n[0].dims[0],n[1].dims[1],n[1].dims[2],n[0].dims[3]],[Gs,ci,Xi,qi]=[0,3,1,2]);let y=Je("output",n[0].dataType,v.length),F=h.type.value,N=[{type:12,data:HA.size(v)},...Ke(n[0].dims,w,v)];return{name:"GridSample",shaderCache:{hint:`${u.cacheKey}`,inputDependencies:["type","type"]},getRunData:Y=>{let tA=HA.size(v);return{outputs:[{dims:v,dataType:Y[0].dataType}],dispatchGroup:{x:Math.ceil(tA/64)},programUniforms:N}},getShaderSource:Y=>`
  ${Y.registerUniform("output_size","u32").declareVariables(h,B,y)}
  
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }

  ${Q2(F)}
  ${T2(u)}
  ${Co(u)}
  ${P2(h,F,u)}

  ${Y.mainStart()}
    ${Y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${Xi}]);
      let W_in = i32(uniforms.x_shape[${qi}]);

      ${u.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${y.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${Gs}], indices[${Xi}], indices[${qi}]);
      let nxy = ${B.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${z2(y,F,u)}
  }`}},F2=(n,u)=>{D2(n.inputs),n.compute(bo(n.inputs,u))},S2=n=>$A({alignCorners:n.align_corners,mode:n.mode,paddingMode:n.padding_mode,format:n.format})}),ut=TA(()=>{Dt(),St(),qr(),n1(),l1(),Rt(),Ji(),ca=(n,u)=>n.length>u&&n[u].dims.length>0?n[u]:void 0,N2=(n,u)=>{let h=n[0],w=ca(n,1),B=ca(n,2),v=ca(n,3),y=ca(n,4),F=ca(n,5),N=ca(n,6),Y=ca(n,7);if(h.dims.length!==3&&h.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let tA,Q=h.dims[0],iA=h.dims[1],oA=h.dims.length===3?h.dims[2]:u.numHeads*h.dims[4],dA=iA,fA=0,wA=0,MA=Math.floor(oA/u.numHeads);if(N&&Y&&HA.size(N.dims)&&HA.size(Y.dims)){if(N.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(N.dims[0]!==Q||N.dims[1]!==u.numHeads||N.dims[3]!==MA)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(Y.dims[0]!==Q||Y.dims[1]!==u.numHeads||Y.dims[3]!==MA)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(N.dims[2]!==Y.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(Y.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');fA=N.dims[2],wA=N.dims[2]}else if(N&&HA.size(N.dims)||Y&&HA.size(Y.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');if(w&&HA.size(w.dims)>0){if(h.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(w.dims.length<3||w.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(h.dims[0]!==w.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(w.dims.length===3){if(w.dims[2]!==h.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');tA=2,dA=w.dims[1]}else if(w.dims.length===5){if(w.dims[2]!==u.numHeads||w.dims[3]!==2||w.dims[4]!==MA)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(B)throw new Error('Expect "value" be none when "key" has packed kv format.');tA=5,dA=w.dims[1]}else{if(w.dims[1]!==u.numHeads||w.dims[3]!==MA)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');tA=0,dA=w.dims[2]}}else{if(h.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(h.dims[2]!==u.numHeads||h.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');tA=3}if(v&&HA.size(v.dims)>0){if(v.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(w&&w.dims.length===5&&w.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let DA=fA+dA,LA=0;if(y&&HA.size(y.dims)>0){LA=8;let ne=y.dims;throw ne.length===1?ne[0]===Q?LA=1:ne[0]===3*Q+2&&(LA=3):ne.length===2&&ne[0]===Q&&ne[1]===DA&&(LA=5),LA===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let ZA=!1,JA=oA;if(B&&HA.size(B.dims)>0){if(B.dims.length!==3&&B.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(h.dims[0]!==B.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(B.dims.length===3){if(dA!==B.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');JA=B.dims[2]}else{if(dA!==B.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');JA=B.dims[1]*B.dims[3],ZA=!0}}if(y&&HA.size(y.dims)>0)throw new Error("Key padding mask is not supported");if(F&&HA.size(F.dims)>0){if(F.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(F.dims[0]!==Q||F.dims[1]!==u.numHeads||F.dims[2]!==iA||F.dims[3]!==DA)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:Q,sequenceLength:iA,pastSequenceLength:fA,kvSequenceLength:dA,totalSequenceLength:DA,maxSequenceLength:wA,inputHiddenSize:0,hiddenSize:oA,vHiddenSize:JA,headSize:MA,vHeadSize:Math.floor(JA/u.numHeads),numHeads:u.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:u.maskFilterValue,maskType:LA,scale:u.scale,broadcastResPosBias:!1,passPastInKv:ZA,qkvFormat:tA}},O2=n=>$A({...n}),Io=$A({perm:[0,2,1,3]}),L2=(n,u,h,w,B,v,y)=>{let F=[w,B,v],N=HA.size(F),Y=[{type:12,data:N},{type:12,data:y},{type:12,data:v}];return n.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:F,dataType:u.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:Y}),getShaderSource:tA=>{let Q=Je("qkv_with_bias",u.dataType,F),iA=ge("qkv",u.dataType,F),oA=ge("bias",h.dataType,F);return`
  ${tA.registerUniforms([{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}]).declareVariables(iA,oA,Q)}
  ${tA.mainStart()}
    ${tA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`}},{inputs:[u,h],outputs:[-1]})[0]},Rn=(n,u,h,w,B,v,y,F)=>{let N=v;if(y&&HA.size(y.dims)>0){if(w===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return N=L2(n,v,y,u,w,h*B,F),N=N.reshape([u,w,h,B]),h===1||w===1?N:n.compute(Ga(N,Io.perm),{inputs:[N],outputs:[-1]})[0]}return v.dims.length===3&&(N=v.reshape([u,w,h,B])),h===1||w===1?N:n.compute(Ga(N,Io.perm),{inputs:[N],outputs:[-1]})[0]},Y2=(n,u)=>{let h=N2(n.inputs,u),w=n.inputs[0],B=ca(n.inputs,1),v=ca(n.inputs,2),y=ca(n.inputs,3),F=ca(n.inputs,4),N=ca(n.inputs,5),Y=ca(n.inputs,6),tA=ca(n.inputs,7);if(w.dims.length===5)throw new Error("Packed QKV is not implemented");if(B?.dims.length===5)throw new Error("Packed KV is not implemented");let Q=B&&v&&B.dims.length===4&&v.dims.length===4,iA=Rn(n,h.batchSize,h.numHeads,h.sequenceLength,h.headSize,w,y,0);if(Q)return ds(n,iA,B,v,F,void 0,Y,tA,N,h);if(!B||!v)throw new Error("key and value must be provided");let oA=Rn(n,h.batchSize,h.numHeads,h.kvSequenceLength,h.headSize,B,y,h.hiddenSize),dA=Rn(n,h.batchSize,h.numHeads,h.kvSequenceLength,h.vHeadSize,v,y,2*h.hiddenSize);ds(n,iA,oA,dA,F,void 0,Y,tA,N,h)}}),ct=TA(()=>{Dt(),St(),qr(),Rt(),H2=n=>{if(!n||n.length<1)throw new Error("too few inputs")},R2=(n,u)=>{let h=[],w=u.numOutputs;return n[1].dims[0]>0&&(n[1].getBigInt64Array().forEach(B=>h.push(Number(B))),w=h.length),$A({numOutputs:w,axis:u.axis,splitSizes:h})},W2=n=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${n}u; i += 1u ) {
    if (index < ${rt("uniforms.size_in_split_axis","i",n)}) {
        return i;
    }
    }
    return ${n}u;
}`,W0=n=>{let u=n.length,h=[];for(let w=0;w<u;++w){let B=n[w].setByIndices("indices","input[global_idx]");u===1?h.push(B):w===0?h.push(`if (output_number == ${w}u) { ${B} }`):w===u-1?h.push(`else { ${B} }`):h.push(`else if (output_number == ${w}) { ${B} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${n[0].type.indices}, global_idx: u32) {
        ${h.join(`
`)}
      }`},wo=(n,u)=>{let h=n[0].dims,w=HA.size(h),B=n[0].dataType,v=HA.normalizeAxis(u.axis,h.length),y=new Array(u.numOutputs),F=ge("input",B,h.length),N=new Array(u.numOutputs),Y=[],tA=[],Q=0,iA=[{type:12,data:w}];for(let oA=0;oA<u.numOutputs;oA++){Q+=u.splitSizes[oA],N[oA]=Q;let dA=h.slice();dA[v]=u.splitSizes[oA],tA.push(dA),y[oA]=Je(`output${oA}`,B,dA.length),Y.push({dims:tA[oA],dataType:n[0].dataType})}return iA.push({type:12,data:N},...Ke(h,...tA)),{name:"Split",shaderCache:{hint:u.cacheKey,inputDependencies:["rank"]},getShaderSource:oA=>`
  ${oA.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",N.length).declareVariables(F,...y)}
  ${W2(N.length)}
  ${W0(y)}

  ${oA.mainStart()}
    ${oA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${F.offsetToIndices("global_idx")};
    var index = ${F.indicesGet("indices",v)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${rt("uniforms.size_in_split_axis","output_number - 1u",N.length)};
      ${F.indicesSet("indices",v,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`,getRunData:()=>({outputs:Y,dispatchGroup:{x:Math.ceil(w/64)},programUniforms:iA})}},V2=(n,u)=>{H2(n.inputs);let h=n.inputs.length===1?u:R2(n.inputs,u);n.compute(wo(n.inputs,h),{inputs:[0]})},j2=n=>{let u=n.axis,h=n.splitSizes,w=n.numOutputs<0?h.length:n.numOutputs;if(w!==h.length)throw new Error("numOutputs and splitSizes lengh must be equal");return $A({axis:u,numOutputs:w,splitSizes:h})}}),Ft=TA(()=>{qr(),l1(),ut(),ct(),Ji(),G0=(n,u)=>{if(u.doRotary)throw new Error("GroupQuerryAttention do_rotary attribute is not supported");if(u.doRotary&&n.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let h=n[0],w=n[1],B=n[2],v=n[3],y=n[4];if(u.localWindowSize!==-1)throw new Error("Local attention is not supported");if(u.softcap!==0)throw new Error("Softcap is not supported");if(u.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(u.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(h.dims.length!==3&&h.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let F=h.dims[0],N=h.dims[1],Y=h.dims.length===3?h.dims[2]:u.numHeads*h.dims[4],tA=N,Q=0,iA=!w||w.dims.length===0,oA=Math.floor(iA?Y/(u.numHeads+2*u.kvNumHeads):Y/u.numHeads);iA&&(Y=oA*u.numHeads);let dA=v&&v.dims.length!==0,fA=y&&y.dims.length!==0;if(dA&&v.dims.length===4&&v.dims[0]===F&&v.dims[1]!==u.kvNumHeads&&v.dims[2]===u.kvNumHeads&&v.dims[3]===oA)throw new Error("BSNH pastKey/pastValue is not supported");if(dA&&fA){if(v.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(y.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');Q=v.dims[2]}else if(dA||fA)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let wA=1;if(w&&w.dims.length>0){if(h.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(w.dims.length<3||w.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(h.dims[0]!==w.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(w.dims.length===3){if(h.dims[2]%w.dims[2]!=0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');tA=w.dims[1]}else if(w.dims.length===5){if(w.dims[2]!==u.numHeads||w.dims[3]!==2||w.dims[4]!==oA)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(B)throw new Error('Expect "value" be none when "key" has packed kv format.');tA=w.dims[1]}else{if(w.dims[1]!==u.numHeads||w.dims[3]!==oA)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');tA=w.dims[2]}}else{if(h.dims.length!==3&&h.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(h.dims.length===5&&(h.dims[2]!==u.numHeads||h.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');wA=3}let MA=!1,DA=u.kvNumHeads?oA*u.kvNumHeads:Y;if(B&&B.dims.length>0){if(B.dims.length!==3&&B.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(h.dims[0]!==B.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(B.dims.length===3){if(tA!==B.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');DA=B.dims[2]}else{if(tA!==B.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');DA=B.dims[1]*B.dims[3],MA=!0}}let LA=n.length>4?n[5]:void 0;if(LA&&LA.dims.length!==1&&LA.dims[0]!==F)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:F,sequenceLength:N,pastSequenceLength:Q,kvSequenceLength:tA,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:Y,vHiddenSize:DA,headSize:oA,vHeadSize:Math.floor(DA/u.kvNumHeads),numHeads:u.numHeads,kvNumHeads:u.kvNumHeads,nReps:u.numHeads/u.kvNumHeads,pastPresentShareBuffer:!1,maskType:0,scale:u.scale,broadcastResPosBias:!1,passPastInKv:MA,qkvFormat:wA}},U2=$A({perm:[0,2,1,3]}),ko=(n,u,h)=>{let w=u,B=h.kvNumHeads;return u.dims.length===3&&h.kvSequenceLength!==0&&(w=u.reshape([h.batchSize,h.kvSequenceLength,B,h.headSize]),w=n.compute(Ga(w,U2.perm),{inputs:[w],outputs:[-1]})[0]),w},K2=(n,u)=>{let h=G0(n.inputs,u);if(n.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(n.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let w=n.inputs[0],B=n.inputs[1]&&n.inputs[1].dims.length>0?n.inputs[1]:void 0,v=n.inputs[2]&&n.inputs[2].dims.length>0?n.inputs[2]:void 0,y=n.inputs[3]&&n.inputs[3].dims.length!==0?n.inputs[3]:void 0,F=n.inputs[4]&&n.inputs[4].dims.length!==0?n.inputs[4]:void 0,N=n.inputs.length>4?n.inputs[5]:void 0,Y=n.inputs.length>5?n.inputs[6]:void 0,tA=h.kvNumHeads?h.kvNumHeads:h.numHeads,Q=$A({axis:2,numOutputs:3,splitSizes:[h.numHeads*h.headSize,tA*h.headSize,tA*h.headSize]}),[iA,oA,dA]=B||v?[w,B,v]:n.compute(wo([w],Q),{inputs:[w],outputs:[-1,-1,-1]}),fA=Rn(n,h.batchSize,h.numHeads,h.sequenceLength,h.headSize,iA,void 0,0);ds(n,fA,ko(n,oA,h),ko(n,dA,h),void 0,void 0,y,F,void 0,h,N,Y)}}),Qt=TA(()=>{Dt(),St(),Ji(),Rt(),xo=(n,u,h,w,B,v,y,F)=>{let N=Jt(v),Y=N===1?"f32":`vec${N}f`,tA=N===1?"vec2f":`mat2x${N}f`,Q=B*y,iA=64;Q===1&&(iA=256);let oA=[B,y,v/N],dA=[B,y,2],fA=[];return fA.push(...Ke(oA,dA)),n.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${N};${F};${iA}`,inputDependencies:["rank","type","type"]},getRunData:()=>({outputs:[{dims:dA,dataType:1}],dispatchGroup:{x:Q},programUniforms:fA}),getShaderSource:wA=>{let MA=ge("x",u.dataType,3,N),DA=[MA,ge("scale",h.dataType,h.dims),ge("bias",w.dataType,w.dims),Je("output",1,3,2)];return`
  var<workgroup> workgroup_shared : array<${tA}, ${iA}>;
  const workgroup_size = ${iA}u;
  ${wA.declareVariables(...DA)}
  ${wA.mainStart(iA)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${Y}(0);
    var squared_sum = ${Y}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${Y}(${MA.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${tA}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${ir("workgroup_shared[0][0]",N)} / f32(hight * ${N});
      let squared_sum_final = ${ir("workgroup_shared[0][1]",N)} / f32(hight * ${N});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${F}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`}},{inputs:[u,h,w],outputs:[-1]})[0]},V0=(n,u,h)=>{let w=u[0].dims,B=w,v=w[0],y=w[1],F=HA.sizeFromDimension(w,2),N=Jt(F),Y=HA.size(B)/N,tA=xo(n,u[0],u[1],u[2],v,F,y,h.epsilon),Q=[v,y,F/N],iA=[v,y];n.compute({name:"InstanceNormalization",shaderCache:{hint:`${N}`,inputDependencies:["type","none"]},getRunData:()=>({outputs:[{dims:B,dataType:u[0].dataType}],dispatchGroup:{x:Math.ceil(Y/64)},programUniforms:[{type:12,data:Y},...Ke(Q,iA,Q)]}),getShaderSource:oA=>{let dA=ge("x",u[0].dataType,Q.length,N),fA=ge("scale_shift",1,iA.length,2),wA=Je("output",u[0].dataType,Q.length,N),MA=[dA,fA,wA];return`
  ${oA.registerUniform("output_size","u32").declareVariables(...MA)}
  ${oA.mainStart()}
  ${oA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${wA.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${fA.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${dA.getByOffset("global_idx")} * ${wA.type.value}(scale_shift.x) + ${wA.type.value}(scale_shift.y);
      ${wA.setByOffset("global_idx","value")};
  }`}},{inputs:[u[0],tA]})},Z2=(n,u,h)=>{let w=u[0].dims,B=w,v=w[0],y=w[w.length-1],F=HA.sizeFromDimension(w,1)/y,N=Jt(y),Y=HA.size(B)/N,tA=[{type:12,data:F},{type:12,data:Math.floor(y/N)}],Q=!1,iA=[0,w.length-1];for(let fA=0;fA<w.length-2;fA++)Q=Q||w[fA+1]!==1,iA.push(fA+1);Q=Q&&w[w.length-1]!==1;let oA=Q?n.compute(Ga(n.inputs[0],iA),{inputs:[n.inputs[0]],outputs:[-1]})[0]:n.inputs[0].reshape(Array.from({length:w.length},(fA,wA)=>w[iA[wA]])),dA=xo(n,oA,u[1],u[2],v,F,y,h.epsilon);n.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${N}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:B,dataType:u[0].dataType}],dispatchGroup:{x:Math.ceil(Y/64)},programUniforms:tA}),getShaderSource:fA=>{let wA=jt(u[0].dataType),MA=N===1?"vec2f":`mat${N}x2f`,DA=JA=>{let ne=JA===0?"x":"y",Le=N===1?"f32":`vec${N}f`;switch(N){case 1:return`${wA}(${Le}(scale.${ne}))`;case 2:return`vec2<${wA}>(${Le}(scale[0].${ne}, scale[1].${ne}))`;case 4:return`vec4<${wA}>(${Le}(scale[0].${ne}, scale[1].${ne}, scale[2].${ne}, scale[3].${ne}))`;default:throw new Error(`Not supported compoents ${N}`)}},LA=ge("input",u[0].dataType,u[0].dims,N),ZA=Je("output",u[0].dataType,B,N);return`
  @group(0) @binding(0) var<storage, read> input : array<${LA.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${MA}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${ZA.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${fA.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${DA(0)}, ${DA(1)});
  }`}},{inputs:[u[0],dA]})},X2=(n,u)=>{u.format==="NHWC"?Z2(n,n.inputs,u):V0(n,n.inputs,u)}}),or=TA(()=>{Dt(),St(),Rt(),q2=n=>{if(!n||n.length<2)throw new Error("layerNorm requires at least 2 inputs.")},I1=(n,u,h)=>{let w=u.simplified,B=n[0].dims,v=n[1],y=!w&&n[2],F=B,N=HA.normalizeAxis(u.axis,B.length),Y=HA.sizeToDimension(B,N),tA=HA.sizeFromDimension(B,N),Q=HA.size(v.dims),iA=y?HA.size(y.dims):0;if(Q!==tA||y&&iA!==tA)throw new Error(`Size of X.shape()[axis:] == ${tA}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${Q} and bias size of ${iA}`);let oA=[];for(let ZA=0;ZA<B.length;++ZA)ZA<N?oA.push(B[ZA]):oA.push(1);let dA=Jt(tA),fA=["type","type"],wA=[{type:12,data:Y},{type:1,data:tA},{type:12,data:Math.floor(tA/dA)},{type:1,data:u.epsilon}];y&&fA.push("type");let MA=h>1,DA=h>2,LA=[{dims:F,dataType:n[0].dataType}];return MA&&LA.push({dims:oA,dataType:1}),DA&&LA.push({dims:oA,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${dA};${h};${w}`,inputDependencies:fA},getRunData:()=>({outputs:LA,dispatchGroup:{x:Math.ceil(Y/64)},programUniforms:wA}),getShaderSource:ZA=>{let JA=jt(n[0].dataType),ne=[ge("x",n[0].dataType,n[0].dims,dA),ge("scale",v.dataType,v.dims,dA)];return y&&ne.push(ge("bias",y.dataType,y.dims,dA)),ne.push(Je("output",n[0].dataType,F,dA)),MA&&ne.push(Je("mean_data_output",1,oA)),DA&&ne.push(Je("inv_std_output",1,oA)),`
  ${ZA.registerUniforms([{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...ne)}
  ${ZA.mainStart()}
    ${ZA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Ya("f32",dA)};
    var mean_square_vector = ${Ya("f32",dA)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${pa(JA,dA,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${ir("mean_vector",dA)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${ir("mean_square_vector",dA)} / uniforms.norm_size ${w?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${pa(JA,dA,"x[j + offset]")};
      let f32scale = ${pa(JA,dA,"scale[j]")};
      output[j + offset] = ${ne[0].type.value}((f32input ${w?"":"- mean"}) * inv_std_dev * f32scale
        ${y?`+ ${pa(JA,dA,"bias[j]")}`:""}
      );
    }

    ${MA?"mean_data_output[global_idx] = mean":""};
    ${DA?"inv_std_output[global_idx] = inv_std_dev":""};
  }`}}},J2=(n,u)=>{q2(n.inputs),n.compute(I1(n.inputs,u,n.outputCount))}}),Bt=TA(()=>{St(),Pt(),Jo(),_2=n=>{if(!n||n.length!==2)throw new Error("MatMul requires 2 inputs.");if(n[0].dims[n[0].dims.length-1]!==n[1].dims[n[1].dims.length-2])throw new Error("shared dimension does not match.")},$2=n=>{_2(n.inputs);let u=Se.calcShape(n.inputs[0].dims,n.inputs[1].dims,!0);if(!u)throw new Error("Can't use matmul on the given tensors");let h=u[u.length-1],w=n.inputs[0].dims[n.inputs[0].dims.length-1];if(h<8&&w<8)n.compute(yi(n.inputs,{activation:""},u));else{let B=u[u.length-2],v=HA.size(n.inputs[0].dims.slice(0,-2)),y=HA.size(n.inputs[1].dims.slice(0,-2));if(v!==1&&B===1&&y===1){let F=[1,v,h],N=[n.inputs[0].reshape([1,v,w]),n.inputs[1].reshape([1,w,h])];n.compute(e(N,{activation:""},u,F),{inputs:N})}else n.compute(e(n.inputs,{activation:""},u))}}}),Ot=TA(()=>{Dt(),St(),qr(),Rt(),Wn=(n,u)=>{if(n.length<3||n.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let h=n[0],w=h.dims.length;if(h.dims[w-1]!==u.k)throw new Error("The last dim of input shape does not match the k value");let B=Math.floor((u.k+u.blockSize-1)/u.blockSize),v=u.blockSize/8*u.bits,y=n[1];if(!HA.areEqual(y.dims,[u.n,B,v]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let F=n[2].dims;if(HA.size(F)!==u.n*B)throw new Error("scales input size error.");if(n.length===4){let N=n[3].dims,Y=u.bits>4?u.n*B:u.n*Math.floor((B+1)/2);if(HA.size(N)!==Y)throw new Error("zeroPoints input size error.")}},Al=(n,u)=>{let h=n[0].dims,w=h.length,B=h[w-2],v=u.k,y=u.n,F=h.slice(0,w-2),N=HA.size(F),Y=n[1].dims[2]/4,tA=n[0].dataType,Q=Jt(u.k),iA=Jt(Y),oA=Jt(y),dA=F.concat([B,y]),fA=B>1&&y/oA%2==0?2:1,wA=HA.size(dA)/oA/fA,MA=64,DA=[],LA=[N,B,v/Q],ZA=HA.convertShape(n[1].dims).slice();ZA.splice(-1,1,Y/iA),DA.push(...Ke(LA)),DA.push(...Ke(ZA)),DA.push(...Ke(n[2].dims)),n.length===4&&DA.push(...Ke(HA.convertShape(n[3].dims)));let JA=[N,B,y/oA];return DA.push(...Ke(JA)),{name:"MatMulNBits",shaderCache:{hint:`${u.blockSize};${u.bits};${Q};${iA};${oA};${fA};64`,inputDependencies:Array(n.length).fill("rank")},getRunData:()=>({outputs:[{dims:dA,dataType:tA}],dispatchGroup:{x:wA},programUniforms:DA}),getShaderSource:ne=>{let Le=LA.length,st=ge("a",n[0].dataType,Le,Q),ht=ge("b",12,ZA.length,iA),pt=ge("scales",n[2].dataType,n[2].dims.length),mt=[st,ht,pt],vt=n.length===4?ge("zero_points",12,n[3].dims.length):void 0;vt&&mt.push(vt);let tt=JA.length,gt=Je("output",n[0].dataType,tt,oA),we=jt(n[0].dataType),Ue=(()=>{switch(Q){case 1:return`array<${we}, 8>`;case 2:return`mat4x2<${we}>`;case 4:return`mat2x4<${we}>`;default:throw new Error(`${Q}-component is not supported.`)}})();return`
        var<workgroup> workgroup_shared: array<${gt.type.value}, ${fA*MA}>;
        ${ne.declareVariables(...mt,gt)}
        ${ne.mainStart([MA,1,1])}
          let output_indices = ${gt.offsetToIndices(`(global_idx / 64) * ${fA}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += 64) {
            //process one block
            var word_offset: u32 = block * ${u.blockSize/Q};
            ${(()=>{let et=`
            var col_index = col * ${oA};
            ${vt?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${we}(8);`}
            `;for(let yt=0;yt<oA*fA;yt++)et+=`
            let scale${yt} = ${pt.getByOffset("col_index * nBlocksPerCol + block")};
            ${vt?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${vt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${yt} = ${we}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return et})()}
            for (var word: u32 = 0; word < ${Y}; word += ${iA}) {
              ${(()=>{let et=`col_index = col * ${oA};`;for(let yt=0;yt<oA*fA;yt++)et+=`
            let b${yt}_data = ${ht.getByIndices(`${ht.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return et+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${Ue};
            var b_dequantized_values: ${Ue};`,et})()}
              for (var i: u32 = 0; i < ${iA}; i++) {
                ${(()=>{let et=`
          // reuse a data
            var input_offset = ${st.indicesToOffset(`${st.type.indices}(batch, row, word_offset)`)};
            var a_data: ${Ue};
            for (var j: u32 = 0; j < ${8/Q}; j++) {
              a_data[j] = ${st.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let yt=0;yt<oA*fA;yt++)et+=`
            b_value = ${iA===1?`b${yt}_data`:`b${yt}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${Ue}(${Array.from({length:4},(gr,ga)=>`${we}(b_value_lower[${ga}]), ${we}(b_value_upper[${ga}])`).join(", ")});
            b_dequantized_values = ${Q===1?`${Ue}(${Array.from({length:8},(gr,ga)=>`(b_quantized_values[${ga}] - ${vt?`zero_point${yt}`:"zero_point"}) * scale${yt}`).join(", ")});`:`(b_quantized_values - ${Ue}(${Array(8).fill(vt?`zero_point${yt}`:"zero_point").join(",")})) * scale${yt};`};
            workgroup_shared[local_id.x * ${fA} + ${Math.floor(yt/oA)}]${oA>1?`[${yt%oA}]`:""} += ${Array.from({length:8/Q},(gr,ga)=>Q===1?`a_data[${ga}] * b_dequantized_values[${ga}]`:`dot(a_data[${ga}], b_dequantized_values[${ga}])`).join(" + ")};
          `;return et})()}
                word_offset += ${8/Q};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${fA}) {
            var output_value: ${gt.type.value} = ${gt.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < 64u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${fA};
            }
            ${gt.setByIndices(`${gt.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`}}},el=(n,u)=>{let h=n[0].dims,w=h.length,B=h[w-2],v=u.k,y=u.n,F=h.slice(0,w-2),N=HA.size(F),Y=n[1].dims[2]/4,tA=n[0].dataType,Q=Jt(u.k),iA=Jt(Y),oA=F.concat([B,y]),dA=y%8==0?8:y%4==0?4:1,fA=128/dA,wA=fA*iA*8,MA=wA/Q,DA=wA/u.blockSize,LA=HA.size(oA)/dA,ZA=[],JA=[N,B,v/Q],ne=HA.convertShape(n[1].dims).slice();ne.splice(-1,1,Y/iA),ZA.push(...Ke(JA)),ZA.push(...Ke(ne)),ZA.push(...Ke(n[2].dims)),n.length===4&&ZA.push(...Ke(HA.convertShape(n[3].dims)));let Le=[N,B,y];return ZA.push(...Ke(Le)),{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${u.blockSize};${Q};${iA};${fA};${dA}`,inputDependencies:Array(n.length).fill("rank")},getRunData:()=>({outputs:[{dims:oA,dataType:tA}],dispatchGroup:{x:LA},programUniforms:ZA}),getShaderSource:st=>{let ht=JA.length,pt=ge("a",n[0].dataType,ht,Q),mt=ge("b",12,ne.length,iA),vt=ge("scales",n[2].dataType,n[2].dims.length),tt=[pt,mt,vt],gt=n.length===4?ge("zero_points",12,n[3].dims.length):void 0;gt&&tt.push(gt);let we=Le.length,Ue=Je("output",n[0].dataType,we),et=jt(n[0].dataType);return`
        var<workgroup> sub_a: array<${pt.type.value}, ${MA}>;
        var<workgroup> inter_results: array<array<${Ue.type.value}, ${fA}>, ${dA}>;
        ${st.declareVariables(...tt,Ue)}
        ${st.mainStart([fA,dA,1])}
          let output_indices = ${Ue.offsetToIndices(`workgroup_index * ${dA}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${DA} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${MA};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${MA}; a_offset += 128)
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${pt.getByIndices(`${pt.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${pt.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${DA} + local_id.x;
            ${gt?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${gt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${et}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${et}(8);`}
            let scale = ${vt.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${mt.getByIndices(`${mt.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${u.blockSize/Q};
            for (var i: u32 = 0; i < ${iA}; i++) {
              ${(()=>{switch(Q){case 1:return`
          let a_data0 = vec4<${et}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${et}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${et}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${et}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${Q}-component is not supported.`)}})()}
              let b_value = ${iA===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${et}>(${Array.from({length:4},(yt,gr)=>`${et}(b_value_lower[${gr}]), ${et}(b_value_upper[${gr}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${et}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(yt,gr)=>`dot(a_data${gr}, b_dequantized_values[${gr}])`).join(" + ")};
              word_offset += ${8/Q};
            }
            workgroupBarrier();
          }

          if (local_idx < ${dA}) {
            var output_value: ${Ue.type.value} = ${Ue.type.value}(0);
            for (var b = 0u; b < ${fA}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${Ue.setByIndices(`${Ue.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`}}},tl=(n,u)=>{Wn(n.inputs,u),u.blockSize===32&&n.adapterInfo.isVendor("intel")&&n.adapterInfo.isArchitecture("gen-12lp")?n.compute(el(n.inputs,u)):n.compute(Al(n.inputs,u))},rl=n=>$A(n)}),Ir=TA(()=>{Dt(),St(),Rt(),al=n=>{if(!n||n.length<1)throw new Error("Too few inputs");if(n[0].dataType!==1&&n[0].dataType!==10)throw new Error("Input type must be float or float16.");if(n.length>=2){let u=2*n[0].dims.length===n[1].dims[0];if(n.length===4&&(u=2*n[3].dims[0]===n[1].dims[0]),!u)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},sl=(n,u,h)=>{let w="";for(let B=u-1;B>=0;--B)w+=`
            k = i32(${n.indicesGet("indices",B)}) - ${rt("uniforms.pads",B,h)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${rt("uniforms.x_shape",B,u)})) {
              break;
            }
            offset += k * i32(${rt("uniforms.x_strides",B,u)});
        `;return`
          value = ${n.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${w}
            value = x[offset];
          }
      `},il=(n,u,h)=>{let w="";for(let B=u-1;B>=0;--B)w+=`
                k = i32(${n.indicesGet("indices",B)}) - ${rt("uniforms.pads",B,h)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${rt("uniforms.x_shape",B,u)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${rt("uniforms.x_shape",B,u)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${rt("uniforms.x_strides",B,u)});
            `;return`
              var offset = 0;
              var k = 0;
              ${w}
              value = x[offset];
          `},j0=(n,u,h)=>{let w="";for(let B=u-1;B>=0;--B)w+=`
                k = i32(${n.indicesGet("indices",B)}) - ${rt("uniforms.pads",B,h)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${rt("uniforms.x_shape",B,u)})) {
                  k = i32(${rt("uniforms.x_shape",B,u)}) - 1;
                }
                offset += k * i32(${rt("uniforms.x_strides",B,u)});
            `;return`
              var offset = 0;
              var k = 0;
              ${w}
              value = x[offset];
          `},w1=(n,u,h)=>{let w="";for(let B=u-1;B>=0;--B)w+=`
                k = i32(${n.indicesGet("indices",B)}) - ${rt("uniforms.pads",B,h)};
                if (k < 0)  {
                  k += i32(${rt("uniforms.x_shape",B,u)}]);
                }
                if (k >= i32(${rt("uniforms.x_shape",B,u)})) {
                  k -= i32(${rt("uniforms.x_shape",B,u)});
                }
                offset += k * i32(${rt("uniforms.x_strides",B,u)});
            `;return`
              var offset = 0;
              var k = 0;
              ${w}
              value = x[offset];
          `},nl=(n,u,h)=>{switch(h.mode){case 0:return sl(n,u,h.pads.length);case 1:return il(n,u,h.pads.length);case 2:return j0(n,u,h.pads.length);case 3:return w1(n,u,h.pads.length);default:throw new Error("Invalid mode")}},ol=(n,u)=>{let h=HA.padShape(n[0].dims.slice(),u.pads),w=n[0].dims,B=[{type:12,data:HA.size(h)},{type:6,data:u.pads}],v=n.length>=3&&n[2].data;return u.mode===0&&B.push({type:v?n[2].dataType:1,data:u.value}),B.push(...Ke(n[0].dims,h)),{name:"Pad",shaderCache:{hint:`${u.mode}${v}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:h,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(HA.size(h)/64)},programUniforms:B}),getShaderSource:y=>{let F=Je("output",n[0].dataType,h.length),N=ge("x",n[0].dataType,w.length),Y=N.type.value,tA=nl(F,w.length,u),Q=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:u.pads.length}];return u.mode===0&&Q.push({name:"constant_value",type:v?Y:"f32"}),`
            ${y.registerUniforms(Q).declareVariables(N,F)}
            ${y.mainStart()}
            ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${F.offsetToIndices("global_idx")};

            var value = ${Y}(0);
            ${tA}
            output[global_idx] = value;
        }`}}},ll=(n,u)=>{if(n.length>1){let h=n[1].getBigInt64Array(),w=n.length>=3&&n[2].data?n[2].dataType===10?n[2].getUint16Array()[0]:n[2].getFloat32Array()[0]:0,B=n[0].dims.length,v=new Int32Array(2*B).fill(0);if(n.length>=4){let F=n[3].getBigInt64Array();for(let N=0;N<F.length;N++)v[Number(F[N])]=Number(h[N]),v[Number(F[N])+B]=Number(h[N+F.length])}else h.forEach((F,N)=>v[Number(N)]=Number(F));let y=[];return v.forEach(F=>y.push(F)),{mode:u.mode,value:w,pads:y}}return u},cl=(n,u)=>{al(n.inputs);let h=ll(n.inputs,u);n.compute(ol(n.inputs,h),{inputs:[0]})}}),Mr=TA(()=>{he(),Dt(),St(),Rt(),D0=n=>{if(X.webgpu.validateInputContent&&(!n||n.length!==1))throw new Error("Pool ops requires 1 input.")},U0=(n,u,h)=>{let w=u.format==="NHWC",B=n.dims.slice();w&&B.splice(1,0,B.pop());let v=Object.hasOwnProperty.call(u,"dilations"),y=u.kernelShape.slice(),F=u.strides.slice(),N=v?u.dilations.slice():[],Y=u.pads.slice();Ve.adjustPoolAttributes(h,B,y,F,N,Y);let tA=Ve.computePoolOutputShape(h,B,F,N,y,Y,u.autoPad),Q=Object.assign({},u);v?Object.assign(Q,{kernelShape:y,strides:F,pads:Y,dilations:N,cacheKey:u.cacheKey}):Object.assign(Q,{kernelShape:y,strides:F,pads:Y,cacheKey:u.cacheKey});let iA=tA.slice();return iA.push(iA.splice(1,1)[0]),[Q,w?iA:tA]},Bo=(n,u)=>{let h=u.format==="NHWC",w=[{type:12,data:HA.size(n)},{type:12,data:HA.size(u.kernelShape)}],B=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(u.kernelShape.length<=2){let v=u.kernelShape[u.kernelShape.length-1],y=u.strides[u.strides.length-1],F=u.pads[u.pads.length/2-1],N=u.pads[u.pads.length-1],Y=!!(F+N);w.push({type:12,data:v},{type:12,data:y},{type:12,data:F},{type:12,data:N}),B.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let tA=!1;if(u.kernelShape.length===2){let Q=u.kernelShape[u.kernelShape.length-2],iA=u.strides[u.strides.length-2],oA=u.pads[u.pads.length/2-2],dA=u.pads[u.pads.length-2];tA=!!(oA+dA),w.push({type:12,data:Q},{type:12,data:iA},{type:12,data:oA},{type:12,data:dA}),B.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[w,B,!0,Y,tA]}{if(h)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let v=HA.computeStrides(u.kernelShape);w.push({type:12,data:v},{type:12,data:u.pads},{type:12,data:u.strides}),B.push({name:"kernelStrides",type:"u32",length:v.length},{name:"pads",type:"u32",length:u.pads.length},{name:"strides",type:"u32",length:u.strides.length});let y=u.pads.reduce((F,N)=>F+N);return[w,B,!!y,!1,!1]}},vo=(n,u,h,w,B,v,y,F,N,Y,tA,Q)=>{let iA=B.format==="NHWC",oA=u.type.value,dA=Je("output",u.type.tensor,w);if(B.kernelShape.length<=2){let fA="",wA="",MA="",DA=h-(iA?2:1);if(fA=tA?`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${DA}] = indices[${DA}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${DA}] < 0 || xIndices[${DA}]
                      >= uniforms.x_shape[${DA}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${u.indicesToOffset("xIndices")}];
                  ${v}
                }`:`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${DA}] = indices[${DA}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${u.indicesToOffset("xIndices")}];
                  ${v}
                }`,B.kernelShape.length===2){let LA=h-(iA?3:2);wA=Q?`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${LA}] = indices[${LA}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${LA}] < 0 || xIndices[${LA}] >= uniforms.x_shape[${LA}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${LA}] = indices[${LA}] * uniforms.sh - uniforms.phStart + j;
                `,MA=`
              }
            `}return`
            ${n.registerUniforms(N).declareVariables(u,dA)}

            ${n.mainStart()}
              ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${dA.offsetToIndices("global_idx")};
              var xIndices = ${dA.offsetToIndices("global_idx")};

              var value = ${oA}(${F});
              var pad = 0;
              ${wA}
              ${fA}
              ${MA}
              ${y}

              output[global_idx] = value;
            }`}{if(iA)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let fA=B.kernelShape.length,wA=B.pads.length,MA="";return MA=Y?`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${u.indicesToOffset("xIndices")}];
                ${v}
              }`:`
              }
              let x_val = x[${u.indicesToOffset("xIndices")}];
              ${v}
            `,`
            ${n.registerUniforms(N).declareVariables(u,dA)}

            ${n.mainStart()}
              ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${dA.offsetToIndices("global_idx")};
              var xIndices = ${dA.offsetToIndices("global_idx")};

              var offsets: array<u32, ${fA}>;

              var value = ${oA}(${F});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${fA-1}u; j++) {
                  offsets[j] = offset / ${rt("uniforms.kernelStrides","j",fA)};
                  offset -= offsets[j] * ${rt("uniforms.kernelStrides","j",fA)};
                }
                offsets[${fA-1}] = offset;

                isPad = false;
                for (var j = ${h-fA}u; j < ${h}u; j++) {
                  xIndices[j] = indices[j] * ${rt("uniforms.strides",`j - ${h-fA}u`,fA)}
                    + offsets[j - ${h-fA}u] - ${rt("uniforms.pads","j - 2u",wA)};
                  ${MA}
              }
              ${y}

              output[global_idx] = value;
            }`}},K0=n=>`${n.format};${n.ceilMode};${n.autoPad};${n.kernelShape.length}`,gl=n=>`${K0(n)};${n.countIncludePad}`,ul=n=>`${K0(n)};${n.storageOrder};${n.dilations}`,Z0=n=>({format:n.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][n.auto_pad],ceilMode:n.ceil_mode,kernelShape:n.kernel_shape,strides:n.strides,pads:n.pads}),yo=(n,u,h,w)=>{let[B,v]=U0(u,w,h),y=ge("x",u.dataType,u.dims.length),F=y.type.value,N="";B.countIncludePad?N+=`value /= ${F}(uniforms.kernelSize);`:N+=`value /= ${F}(i32(uniforms.kernelSize) - pad);`;let[Y,tA,Q,iA,oA]=Bo(v,B);return Y.push(...Ke(u.dims,v)),{name:n,shaderCache:{hint:`${w.cacheKey};${Q};${iA};${oA}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:v,dataType:u.dataType}],dispatchGroup:{x:Math.ceil(HA.size(v)/64)},programUniforms:Y}),getShaderSource:dA=>vo(dA,y,u.dims.length,v.length,B,"value += x_val;",N,0,tA,Q,iA,oA)}},dl=n=>{let u=n.count_include_pad!==0,h=Z0(n);if(h.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let w={countIncludePad:u,...h,cacheKey:""};return{...w,cacheKey:gl(w)}},X0=(n,u)=>{D0(n.inputs),n.compute(yo("AveragePool",n.inputs[0],!1,u))},Eo={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},fl=n=>{let u=n.format;return{format:u,...Eo,cacheKey:u}},pl=(n,u)=>{D0(n.inputs),n.compute(yo("GlobalAveragePool",n.inputs[0],!0,u))},Mo=(n,u,h,w)=>{let[B,v]=U0(u,w,h),y=ge("x",u.dataType,u.dims.length),[F,N,Y,tA,Q]=Bo(v,B);return F.push(...Ke(u.dims,v)),{name:n,shaderCache:{hint:`${w.cacheKey};${Y};${tA};${Q}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:v,dataType:u.dataType}],dispatchGroup:{x:Math.ceil(HA.size(v)/64)},programUniforms:F}),getShaderSource:iA=>vo(iA,y,u.dims.length,v.length,B,`
      value = max(x_val, value);
    `,"",u.dataType===10?-65504:-1e5,N,Y,tA,Q)}},Go=(n,u)=>{D0(n.inputs),n.compute(Mo("MaxPool",n.inputs[0],!1,u))},q0=n=>{let u=n.storage_order,h=n.dilations,w=Z0(n);if(u!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(w.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let B={storageOrder:u,dilations:h,...w,cacheKey:""};return{...B,cacheKey:ul(B)}},k1=n=>{let u=n.format;return{format:u,...Eo,cacheKey:u}},hl=(n,u)=>{D0(n.inputs),n.compute(Mo("GlobalMaxPool",n.inputs[0],!0,u))}}),Vr=TA(()=>{Dt(),St(),qr(),Rt(),ml=(n,u)=>{if(n.length<2||n.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(n.length===3&&n[1].dims===n[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(n.length===3&&n[0].dataType!==n[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(n[0].dataType===6&&n.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(n[1].dims.length!==0&&n[1].dims.length!==1&&n[1].dims.length!==n[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(n.length>2){if(n[0].dataType!==n[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(n[1].dims.length!==n[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!n[1].dims.map((h,w)=>h===n[2].dims[w]).reduce((h,w)=>h&&w,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(u.blockSize>0){if(n[1].dims.length===0||n[1].dims.length===1&&n[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!n[1].dims.map((B,v)=>v===u.axis||B===n[0].dims[v]).reduce((B,v)=>B&&v,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(n[1].dims.length!==n[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let h=n[0].dims[u.axis],w=n[1].dims[u.axis];if(u.blockSize<Math.ceil(h/w)||u.blockSize>Math.ceil(h/(w-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},Do=(n,u)=>{let h=HA.normalizeAxis(u.axis,n[0].dims.length),w=n[0].dataType,B=w===3,v=n[0].dims,y=n[1].dataType,F=HA.size(v),N=w===3||w===2,Y=N?[Math.ceil(HA.size(n[0].dims)/4)]:n[0].dims,tA=n[1].dims,Q=n.length>2?n[2]:void 0,iA=Q?N?[Math.ceil(HA.size(Q.dims)/4)]:Q.dims:void 0,oA=tA.length===0||tA.length===1&&tA[0]===1,dA=oA===!1&&tA.length===1,fA=Jt(F),wA=oA&&(!N||fA===4),MA=wA?fA:1,DA=wA&&!N?fA:1,LA=ge("input",N?12:w,Y.length,DA),ZA=ge("scale",y,tA.length),JA=Q?ge("zero_point",N?12:w,iA.length):void 0,ne=Je("output",y,v.length,MA),Le=[LA,ZA];JA&&Le.push(JA);let st=[Y,tA];Q&&st.push(iA);let ht=[{type:12,data:F/MA},{type:12,data:h},{type:12,data:u.blockSize},...Ke(...st,v)];return{name:"DequantizeLinear",shaderCache:{hint:u.cacheKey,inputDependencies:JA?["rank","rank","rank"]:["rank","rank"]},getShaderSource:pt=>`
      ${pt.registerUniforms([{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}]).declareVariables(...Le,ne)}
      ${pt.mainStart()}
          ${pt.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${ne.offsetToIndices("global_idx")};

          // Set input x
          ${N?`
            let input = ${LA.getByOffset("global_idx / 4")};
            let x_vec = ${B?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${MA===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${LA.getByOffset("global_idx")};`};

          // Set scale input
          ${oA?`let scale_value= ${ZA.getByOffset("0")}`:dA?`
            let scale_index = ${ne.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${ZA.getByOffset("scale_index")};`:`
            var scale_indices: ${ZA.type.indices} = output_indices;
            let index = ${ZA.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${ZA.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${ZA.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${JA?oA?N?`
                let zero_point_input = ${JA.getByOffset("0")};
                let zero_point_vec =  ${B?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${JA.getByOffset("0")}`:dA?N?`
                let zero_point_index = ${ne.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${JA.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${B?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${ne.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${JA.getByOffset("zero_point_index")};`:N?`
                let zero_point_offset = ${ZA.indicesToOffset("scale_indices")};
                let zero_point_input = ${JA.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${B?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${JA.getByIndices("scale_indices")};`:`let zero_point_value = ${N?B?"i32":"u32":LA.type.value}(0);`};
      // Compute and write output
      ${ne.setByOffset("global_idx",`${ne.type.value}(x_value - zero_point_value) * scale_value`)};
      }`,getRunData:()=>({outputs:[{dims:v,dataType:y}],dispatchGroup:{x:Math.ceil(F/MA/64),y:1,z:1},programUniforms:ht})}},Cl=(n,u)=>{ml(n.inputs,u),n.compute(Do(n.inputs,u))},bl=n=>$A({axis:n.axis,blockSize:n.blockSize})}),Jr=TA(()=>{he(),Dt(),Rt(),Qo=(n,u,h)=>{if(n===u||n<u&&h<0||n>u&&h>0)throw new Error("Range these inputs' contents are invalid.")},Il=(n,u,h,w)=>{let B=Math.abs(Math.ceil((u-n)/h)),v=[B],y=B,F=[{type:12,data:y},{type:w,data:n},{type:w,data:h},...Ke(v)];return{name:"Range",shaderCache:{hint:`${w}`},getShaderSource:N=>{let Y=Je("output",w,v.length),tA=Y.type.value,Q=[{name:"outputSize",type:"u32"},{name:"start",type:tA},{name:"delta",type:tA}];return`
        ${N.registerUniforms(Q).declareVariables(Y)}
        ${N.mainStart()}
        ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${tA}(global_idx) * uniforms.delta;
      }`},getRunData:()=>({outputs:[{dims:v,dataType:w}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:F})}},wl=n=>{let u=0,h=0,w=0;n.inputs[0].dataType===6?(u=n.inputs[0].getInt32Array()[0],h=n.inputs[1].getInt32Array()[0],w=n.inputs[2].getInt32Array()[0]):n.inputs[0].dataType===1&&(u=n.inputs[0].getFloat32Array()[0],h=n.inputs[1].getFloat32Array()[0],w=n.inputs[2].getFloat32Array()[0]),X.webgpu.validateInputContent&&Qo(u,h,w),n.compute(Il(u,h,w,n.inputs[0].dataType),{inputs:[]})}}),Na=TA(()=>{Dt(),St(),qr(),Rt(),To=(n,u,h,w)=>{if(n!=="none"&&w!=="i32"&&w!=="u32"&&w!=="f32")throw new Error(`Input ${w} is not supported with reduction ${n}.`);let B=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,v=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${u}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(n){case"none":return`${u}=${h};`;case"add":return w==="i32"||w==="u32"?`atomicAdd(&${u}, bitcast<${w}>(${h}));`:`
              ${B}bitcast<${w}>(oldValue) + (${h})${v}`;case"max":return w==="i32"||w==="u32"?`atomicMax(&${u}, bitcast<${w}>(${h}));`:`
                ${B}max(bitcast<f32>(oldValue), (${h}))${v}`;case"min":return w==="i32"||w==="u32"?`atomicMin(&${u}, bitcast<${w}>(${h}));`:`${B}min(bitcast<${w}>(oldValue), (${h}))${v}`;case"mul":return`${B}(bitcast<${w}>(oldValue) * (${h}))${v}`;default:throw new Error(`Reduction ${n} is not supported.`)}},x1=(n,u)=>{let h=n[0].dims,w=n[1].dims,B=h,v=Math.ceil(HA.size(w)/1),y=w[w.length-1],F=HA.sizeFromDimension(h,y),N=[{type:12,data:v},{type:12,data:y},{type:12,data:F},...Ke(n[1].dims,n[2].dims,B)];return{name:"ScatterND",shaderCache:{hint:`${u.cacheKey}_${u.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:B,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:N}),getShaderSource:Y=>{let tA=ge("indices",n[1].dataType,n[1].dims.length),Q=ge("updates",n[2].dataType,n[2].dims.length,1),iA=u.reduction!=="none"&&u.reduction!==""?ha("output",n[0].dataType,B.length):Je("output",n[0].dataType,B.length,1);return`
      ${Y.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(tA,Q,iA)}
      ${Y.mainStart()}
        ${Y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var data_offset = 0u;
  let indices_start = uniforms.last_index_dimension * global_idx;
  let indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${n[0].dims.length===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[i - indices_start];
    let dim_value = uniforms.output_shape[i - indices_start + uniforms.last_index_dimension];`}
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));
  }

  for (var i = 0u; i < uniforms.num_updates_elements; i++) {
    let value = updates[uniforms.num_updates_elements * global_idx + i];
    ${To(u.reduction,"output[data_offset + i]","value",iA.type.value)}
  }

      }`}}},B1=n=>$A({reduction:n.reduction}),Po=(n,u)=>{n.compute(x1(n.inputs,u),{inputs:[n.inputs[1],n.inputs[2]],outputs:[]})}}),_r=TA(()=>{Dt(),St(),qr(),Rt(),zo=(n,u)=>{if(n.every(h=>h>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),n.length>0){if(u.mode==="linear"){if(!(n.length===2||n.length===3||n.length===4&&n[0]===1&&n[1]===1||n.length===4&&n[0]===1&&n[3]===1||n.length===5&&n[0]===1&&n[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(u.mode==="cubic"&&!(n.length===2||n.length===4&&n[0]===1&&n[1]===1||n.length===4&&n[0]===1&&n[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},kl=(n,u,h)=>{u.every(B=>B>=0&&B<h||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let w=new Array(h).fill(1);return u.forEach((B,v)=>w[B]=n[v]),w},xl=(n,u,h,w,B,v)=>{let[y,F,N]=h>10?[1,2,3]:[-1,n.length>1?1:-1,-1],Y=n[0].dims.length;if(y>0&&n.length>y&&n[y].dims.length>0)n[y].getFloat32Array().forEach(tA=>v.push(tA));else if(u.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(F>0&&n.length>F&&n[F].dims.length===1&&n[F].dims[0]>0){if(n[F].getFloat32Array().forEach(tA=>w.push(tA)),w.length!==0&&w.length!==Y&&h>=18&&w.length!==u.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");zo(w,u),u.axes.length>0&&kl(w,u.axes,Y).forEach((tA,Q)=>w[Q]=tA)}if(N>0&&n.length>N&&n[N].dims.length===1&&n[N].dims[0]>0&&(n[N].getBigInt64Array().forEach(tA=>B.push(Number(tA))),B.length!==0&&B.length!==Y&&h>=18&&B.length!==u.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(u.axes.length>0){if(w.length!==0&&w.length!==u.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(B.length!==0&&B.length!==u.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof w<"u"&&typeof B<"u"&&w.length>0&&B.length>Y)throw new Error("Resize requires only of scales or sizes to be specified")},Fo=(n,u)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${u} { `+(()=>{switch(n){case"asymmetric":return`return ${u}(xResized) / ${u}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${u}(xResized) + 0.5) / ${u}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${u}(xResized) + 0.5) / ${u}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${u}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${u}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${u}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${u}(roiStart) * ${u}(lengthOriginal - 1) +
                        (${u}(xResized) * ${u}(roiEnd - roiStart) * ${u}(lengthOriginal - 1)) /
                        ${u}(lengthResized - 1);
                  } else {
                    return 0.5 * ${u}(roiStart + roiEnd) * ${u}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${u}xScale * ${u}(lengthResized);
                  const adjustment = ${u}(lengthResized) / outputWidth;
                  const center = ${u}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${u}(xResized) + 0.5) / ${u}(xScale)) - 0.5;`;case"half_pixel":return`return ((${u}(xResized) + 0.5) / ${u}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${n} is not supported`)}})()+"}",Bl=(n,u,h)=>`fn getNearestPixelFromOriginal(xOriginal: ${h}, isDownSample: bool) -> ${h} {`+(()=>{switch(n){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";default:if(u<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${n} is not supported`)}})()+"}",vl=(n,u,h)=>{let w=new Array(h).fill(0).concat(new Array(h).fill(1)),B=n.length===0?w:n.slice();return u.length>0?(u.forEach((v,y)=>{w[v]=B[y],w[y+h]=B[u.length+y]}),w):B},So=(n,u,h,w)=>{let B=[];if(h.length>0)if(w.length>0){if(n.forEach(v=>B.push(v)),Math.max(...w)>n.length)throw new Error("axes is out of bound");w.forEach((v,y)=>B[v]=h[y])}else h.forEach(v=>B.push(v));else{if(u.length===0)throw new Error("Resize requires either scales or sizes.");B=n.map((v,y)=>Math.round(v*u[y]))}return B},yl=(n,u,h)=>{let w=(()=>{switch(h.keepAspectRatioPolicy){case"not_larger":return h.axes.length>0?Math.min(...h.axes.map(v=>u[v]),Number.MAX_VALUE):Math.min(...u,Number.MAX_VALUE);case"not_smaller":return h.axes.length>0?Math.max(...h.axes.map(v=>u[v]),Number.MIN_VALUE):Math.max(...u,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${h.keepAspectRatioPolicy} is not supported`)}})();u.fill(1,0,u.length);let B=n.slice();return h.axes.length>0?(h.axes.forEach(v=>u[v]=w),h.axes.forEach(v=>B[v]=Math.round(n[v]*u[v]))):(u.fill(w,0,u.length),B.forEach((v,y)=>B[y]=Math.round(v*u[y]))),B},El=(n,u,h,w,B)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${n.type.indices}) -> array<${n.type.value}, ${h.length}> {
      var original_indices: array<${n.type.value}, ${h.length}>;
      for (var i:u32 = 0; i < ${h.length}; i++) {
        var output_index = ${n.indicesGet("output_indices","i")};
        var scale = ${rt("uniforms.scales","i",w)};
        var roi_low = ${rt("uniforms.roi","i",B)};
        var roi_hi = ${rt("uniforms.roi",`i + ${u.length}`,B)};
        if (scale == 1.0) {
          original_indices[i] = ${n.type.value}(output_index);
        } else {
          var input_shape_i = ${rt("uniforms.input_shape","i",u.length)};
          var output_shape_i = ${rt("uniforms.output_shape","i",h.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,No=(n,u,h,w,B,v,y)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${u.type.indices}) -> ${n.type.indices} {
      var input_indices: ${n.type.indices};
      for (var i:u32 = 0; i < ${w.length}; i++) {
        var output_index = ${u.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${rt("uniforms.scales","i",B)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${rt("uniforms.roi","i",v)};
          var roi_hi = ${rt("uniforms.roi",`i + ${h.length}`,v)};
          var input_shape_i = ${rt("uniforms.input_shape","i",h.length)};
          var output_shape_i = ${rt("uniforms.output_shape","i",w.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${y} || (original_idx >= 0 && original_idx < ${u.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${u.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${n.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,Ml=(n,u)=>`
    fn checkInputIndices(input_indices: ${n.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${u.length}; i++) {
        var input_index = ${n.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${rt("uniforms.input_shape","i",u.length)}) {
          return false;
        }
      }
      return true;
    }`,Oo=(n,u,h,w)=>n.rank>w?`
    ${n.indicesSet("input_indices",u,"channel")};
    ${n.indicesSet("input_indices",h,"batch")};
`:"",Gl=(n,u,h,w,B)=>{let[v,y,F,N]=h.length===2?[-1,0,1,-1]:[0,2,3,1],Y=n.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${Y} {
      var input_indices: ${n.type.indices};
      ${n.indicesSet("input_indices",y,`max(0, min(row, ${h[y]} - 1))`)};
      ${n.indicesSet("input_indices",F,`max(0, min(col, ${h[F]} - 1))`)};
      ${Oo(n,N,v,2)}
      return ${n.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${u.type.indices}) -> ${Y} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${Y} = originalIndices[${y}];
      var col:${Y} = originalIndices[${F}];
      ${w?`if (row < 0 || row > (${h[y]} - 1) || col < 0 || col > (${h[F]} - 1)) {
        return ${B};
      }`:""};
      row = max(0, min(row, ${h[y]} - 1));
      col = max(0, min(col, ${h[F]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${h.length>2?`u32(originalIndices[${N}])`:"0"};
      var batch: u32 =  ${h.length>2?`u32(originalIndices[${v}])`:"0"};
      var x11: ${Y} = getInputValue(batch, channel, row1, col1);
      var x12: ${Y} = getInputValue(batch, channel, row1, col2);
      var x21: ${Y} = getInputValue(batch, channel, row2, col1);
      var x22: ${Y} = getInputValue(batch, channel, row2, col2);
      var dx1: ${Y} = abs(row - ${Y}(row1));
      var dx2: ${Y} = abs(${Y}(row2) - row);
      var dy1: ${Y} = abs(col - ${Y}(col1));
      var dy2: ${Y} = abs(${Y}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Dl=(n,u,h,w,B,v,y,F,N,Y)=>{let tA=h.length===2,[Q,iA]=tA?[0,1]:[2,3],oA=n.type.value,dA=fA=>{let wA=fA===Q?"row":"col";return`
      fn ${wA}CubicInterpolation(input_indices: ${n.type.indices}, output_indices: ${u.type.indices}) -> ${oA} {
        var output_index = ${u.indicesGet("output_indices",fA)};
        var originalIdx: ${oA} = getOriginalCoordinateFromResizedCoordinate(output_index, ${B[fA]},
        ${w[fA]}, ${h[fA]}, ${v[fA]}, ${v[fA]} + ${h.length});
        var fractOriginalIdx: ${oA} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${F} && (originalIdx < 0 || originalIdx > (${h[fA]} - 1))) {
          return ${N};
        }
        var data: array<${oA}, 4> = array<${oA}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${wA}: ${oA} = originalIdx + ${oA}(i);
          if (${wA} < 0 || ${wA} >= ${h[fA]}) {
            ${Y?`coefs[i + 1] = 0.0;
                        continue;`:F?`return ${N};`:`${wA} = max(0, min(${wA}, ${h[fA]} - 1));`};
          }
        var input_indices_copy: ${n.type.indices} = input_indices;
          ${n.indicesSet("input_indices_copy",fA,`u32(${wA})`)};
          data[i + 1] = ${fA===Q?n.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${dA(Q)};
    ${dA(iA)};
  fn getCubicInterpolationCoefs(s: ${oA}) -> array<${oA}, 4> {
    var absS = abs(s);
    var coeffs: array<${oA}, 4> = array<${oA}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${oA} = 1.0 - absS;
    var twoMinusAbsS: ${oA} = 2.0 - absS;
    var onePlusAbsS: ${oA} = 1.0 + absS;
    coeffs[0] = ((${y} * onePlusAbsS - 5 * ${y}) * onePlusAbsS + 8 * ${y}) * onePlusAbsS - 4 * ${y};
    coeffs[1] = ((${y} + 2) * absS - (${y} + 3)) * absS * absS + 1;
    coeffs[2] = ((${y} + 2) * oneMinusAbsS - (${y} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${y} * twoMinusAbsS - 5 * ${y}) * twoMinusAbsS + 8 * ${y}) * twoMinusAbsS - 4 * ${y};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${oA}, 4>, coefs: array<${oA}, 4>) -> ${oA} {
    var coefsSum: ${oA} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${u.type.indices}) -> ${oA} {
    var input_indices: ${n.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},Ql=(n,u,h,w,B)=>{let[v,y,F,N,Y]=h.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],tA=n.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${tA} {
      var input_indices: ${n.type.indices};
      ${n.indicesSet("input_indices",y,`max(0, min(depth, ${h[y]} - 1))`)};
      ${n.indicesSet("input_indices",F,`max(0, min(height, ${h[F]} - 1))`)};
      ${n.indicesSet("input_indices",N,`max(0, min(width, ${h[N]} - 1))`)};
      ${Oo(n,Y,v,3)}
      return ${n.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${u.type.indices}) -> ${tA} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${tA} = originalIndices[${y}];
      var height:${tA} = originalIndices[${F}];
      var width:${tA} = originalIndices[${N}];
      ${w?`if (depth < 0 || depth > (${h[y]} - 1) || height < 0 || height > (${h[F]} - 1) || width < 0 || (width > ${h[N]} - 1)) {
      return ${B};
        }`:""};

    depth = max(0, min(depth, ${h[y]} - 1));
      height = max(0, min(height, ${h[F]} - 1));
      width = max(0, min(width, ${h[N]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${h.length>3?`u32(originalIndices[${Y}])`:"0"};
      var batch: u32 =  ${h.length>3?`u32(originalIndices[${v}])`:"0"};

      var x111: ${tA} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${tA} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${tA} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${tA} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${tA} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${tA} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${tA} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${tA} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${tA} = abs(depth - ${tA}(depth1));
      var dx2: ${tA} = abs(${tA}(depth2) - depth);
      var dy1: ${tA} = abs(height - ${tA}(height1));
      var dy2: ${tA} = abs(${tA}(height2) - height);
      var dz1: ${tA} = abs(width - ${tA}(width1));
      var dz2: ${tA} = abs(${tA}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Tl=(n,u,h,w,B,v)=>{let y=n.dims,F=vl(v,u.axes,y.length),N=So(y,w,B,u.axes),Y=w.slice();w.length===0&&(Y=y.map((MA,DA)=>MA===0?1:N[DA]/MA),u.keepAspectRatioPolicy!=="stretch"&&(N=yl(y,Y,u)));let tA=Je("output",n.dataType,N.length),Q=ge("input",n.dataType,y.length),iA=HA.size(N),oA=y.length===N.length&&y.every((MA,DA)=>MA===N[DA]),dA=u.coordinateTransformMode==="tf_crop_and_resize",fA=u.extrapolationValue,wA=Q.type.value;return{name:"Resize",shaderCache:{hint:`${u.cacheKey}|${h}|${Y.length>0?Y:""}|${B.length>0?B:""}|${F.length>0?F:""}|${oA}|${y}`,inputDependencies:["rank"]},getShaderSource:MA=>`
      ${oA?"":`
      ${Fo(u.coordinateTransformMode,wA)};
      ${(()=>{switch(u.mode){case"nearest":return`
              ${Ml(Q,y)};
              ${Bl(u.nearestMode,h,wA)};
              ${No(Q,tA,y,N,Y.length,F.length,dA)};
              `;case"linear":return`
              ${El(tA,y,N,Y.length,F.length)};
              ${(()=>{if(y.length===2||y.length===4)return`${Gl(Q,tA,y,dA,fA)}`;if(y.length===3||y.length===5)return`${Ql(Q,tA,y,dA,fA)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(y.length===2||y.length===4)return`${Dl(Q,tA,y,N,Y,F,u.cubicCoeffA,dA,u.extrapolationValue,u.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${MA.registerUniform("output_size","u32").registerUniform("scales","f32",Y.length).registerUniform("roi","f32",F.length).declareVariables(Q,tA)}
      ${MA.mainStart()}
        ${MA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${oA?"output[global_idx] = input[global_idx];":`
        let output_indices = ${tA.offsetToIndices("global_idx")};
        var input_indices: ${Q.type.indices};
        ${(()=>{switch(u.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${Q.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${u.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${y.length===2||y.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${u.mode}`)}})()};
`}
      }`,getRunData:()=>({outputs:[{dims:N,dataType:n.dataType}],dispatchGroup:{x:Math.ceil(iA/64)},programUniforms:[{type:12,data:iA},{type:1,data:Y},{type:1,data:F},...Ke(y,N)]})}},Pl=n=>{let u=n.customDataBuffer;return new Uint32Array(u,u.byteOffset,1)[0]},zl=(n,u)=>{let h=[],w=[],B=[],v=Pl(n);if(u.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");xl(n.inputs,u,v,h,w,B),n.compute(Tl(n.inputs[0],u,v,h,w,B),{inputs:[0]})},Fl=n=>{let u=n.antialias,h=n.axes,w=n.coordinateTransformMode,B=n.cubicCoeffA,v=n.excludeOutside!==0,y=n.extrapolationValue,F=n.keepAspectRatioPolicy,N=n.mode,Y=n.nearestMode===""?"simple":n.nearestMode;return $A({antialias:u,axes:h,coordinateTransformMode:w,cubicCoeffA:B,excludeOutside:v,extrapolationValue:y,keepAspectRatioPolicy:F,mode:N,nearestMode:Y})}}),Yr=TA(()=>{Dt(),St(),qr(),Rt(),Lo=(n,u)=>{let[h,w,B,v]=n,{numHeads:y,rotaryEmbeddingDim:F}=u;if(h.dims.length!==3&&h.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${h.dims.length}`);if(!HA.areEqual(w.dims,[])&&!HA.areEqual(w.dims,[1])&&w.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${w.dims.length}`);if(B.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${B.dims.length}`);if(v.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${v.dims.length}`);if(!HA.areEqual(B.dims,v.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(F>0&&y===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let N=h.dims[0],Y=h.dims[h.dims.length-2],tA=B.dims[0],Q=HA.sizeFromDimension(h.dims,1)/Y,iA=F===0?2*B.dims[1]:Q/y;if(F>iA)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(w.dims.length===2){if(N!==w.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${w.dims[0]}`);if(Y!==w.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${w.dims[1]}`)}if(iA/2!==B.dims[1]&&F/2!==B.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${B.dims[1]}`);if(Y>tA)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Sl=(n,u)=>{let{interleaved:h,numHeads:w,rotaryEmbeddingDim:B,scale:v}=u,y=n[0].dims[0],F=HA.sizeFromDimension(n[0].dims,1),N=n[0].dims[n[0].dims.length-2],Y=F/N,tA=n[2].dims[1],Q=B===0?2*tA:Y/w,iA=new Array(y,N,Y/Q,Q-tA),oA=HA.computeStrides(iA),dA=[{type:1,data:v},{type:12,data:iA},{type:12,data:oA},...n[0].dims.length===3?new Array({type:12,data:[F,Y,Q,1]}):[],...n[0].dims.length===4?new Array({type:12,data:[F,Q,N*Q,1]}):[],...Ke(n[0].dims,n[1].dims,n[2].dims,n[3].dims,n[0].dims)];return{name:"RotaryEmbedding",shaderCache:{hint:$A({interleaved:h}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:fA=>{let wA=ge("input",n[0].dataType,n[0].dims.length),MA=ge("position_ids",n[1].dataType,n[1].dims.length),DA=ge("cos_cache",n[2].dataType,n[2].dims.length),LA=ge("sin_cache",n[3].dataType,n[3].dims.length),ZA=Je("output",n[0].dataType,n[0].dims.length);return fA.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:iA.length},{name:"global_strides",type:"u32",length:oA.length},{name:"input_output_strides",type:"u32",length:oA.length}]),`
        ${fA.declareVariables(wA,MA,DA,LA,ZA)}

        ${fA.mainStart(cr)}
          let half_rotary_emb_dim = uniforms.${DA.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${fA.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${MA.broadcastedIndicesToOffset("bsnh.xy",Je("",MA.type.tensor,2))};
            let position_id =
                u32(${MA.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${h});
            let j = i + select(half_rotary_emb_dim, 1, ${h});
            let re = ${wA.getByOffset("i")} * ${DA.get("position_id","bsnh[3]")} -
                ${wA.getByOffset("j")} * ${LA.get("position_id","bsnh[3]")};
            ${ZA.setByOffset("i","re")}
            let im = ${wA.getByOffset("i")} * ${LA.get("position_id","bsnh[3]")} +
                ${wA.getByOffset("j")} * ${DA.get("position_id","bsnh[3]")};
            ${ZA.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${ZA.setByOffset("k",wA.getByOffset("k"))}
          }
        }`},getRunData:()=>({outputs:[{dims:n[0].dims,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(HA.size(iA)/cr)},programUniforms:dA})}},Nl=(n,u)=>{Lo(n.inputs,u),n.compute(Sl(n.inputs,u))}}),ba=TA(()=>{Dt(),St(),Rt(),Yo=n=>{if(!n||n.length<3)throw new Error("layerNorm requires at least 3 inputs.");let u=n[0],h=n[1],w=n[2];if(u.dataType!==h.dataType||u.dataType!==w.dataType)throw new Error("All inputs must have the same data type");if(u.dims.length!==3&&u.dims.length!==2)throw new Error("Input must be 2D or 3D");if(h.dims.length!==3&&h.dims.length!==2)throw new Error("Skip must be 2D or 3D");let B=u.dims[u.dims.length-1],v=u.dims[u.dims.length-2];if(h.dims[h.dims.length-1]!==B)throw new Error("Skip must have the same hidden size as input");if(h.dims[h.dims.length-2]!==v)throw new Error("Skip must have the same sequence length as input");if(w.dims.length!==1)throw new Error("Gamma must be 1D");if(w.dims[w.dims.length-1]!==B)throw new Error("Gamma must have the same hidden size as input");if(n.length>3){let y=n[3];if(y.dims.length!==1)throw new Error("Beta must be 1D");if(y.dims[y.dims.length-1]!==B)throw new Error("Beta must have the same hidden size as input")}if(n.length>4){let y=n[4];if(y.dims.length!==1)throw new Error("Bias must be 1D");if(y.dims[y.dims.length-1]!==B)throw new Error("Bias must have the same hidden size as input")}},Ol=(n,u,h,w)=>{let B=u.simplified,v=n[0].dims,y=HA.size(v),F=v,N=y,Y=v.slice(-1)[0],tA=w?v.slice(0,-1).concat(1):[],Q=!B&&n.length>3,iA=n.length>4,oA=w&&h>1,dA=w&&h>2,fA=h>3,wA=64,MA=Jt(Y),DA=[{type:12,data:N},{type:12,data:MA},{type:12,data:Y},{type:1,data:u.epsilon}],LA=[{dims:F,dataType:n[0].dataType}];return h>1&&LA.push({dims:tA,dataType:1}),h>2&&LA.push({dims:tA,dataType:1}),h>3&&LA.push({dims:v,dataType:n[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${MA};${oA};${dA};${fA}`,inputDependencies:n.map((ZA,JA)=>"type")},getShaderSource:ZA=>{let JA=[ge("x",n[0].dataType,n[0].dims,MA),ge("skip",n[1].dataType,n[1].dims,MA),ge("gamma",n[2].dataType,n[2].dims,MA)];Q&&JA.push(ge("beta",n[3].dataType,n[3].dims,MA)),iA&&JA.push(ge("bias",n[4].dataType,n[4].dims,MA)),JA.push(Je("output",n[0].dataType,F,MA)),oA&&JA.push(Je("mean_output",1,tA)),dA&&JA.push(Je("inv_std_output",1,tA)),fA&&JA.push(Je("input_skip_bias_sum",n[0].dataType,F,MA));let ne=jt(n[0].dataType),Le=jt(1,MA);return`

      ${ZA.registerUniforms([{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...JA)}
      var<workgroup> sum_shared : array<${Le}, 64>;
      var<workgroup> sum_squared_shared : array<${Le}, 64>;

      ${ZA.mainStart([wA,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / 64;

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / 64;
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == 63) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${iA?"bias[offset1d + i]":ne+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${fA?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${pa(ne,MA,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = 64;
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${ir("sum",MA)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${ir("square_sum",MA)} / f32(uniforms.hidden_size) ${B?"":"- mean * mean"} + uniforms.epsilon);
        ${oA?"mean_output[global_idx] = mean;":""}
        ${dA?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${B?"":`- ${ne}(mean)`}) *
            ${ne}(inv_std_dev) * gamma[offset1d + i]
            ${Q?"+ beta[offset1d + i]":""};
        }
      }`},getRunData:()=>({outputs:LA,dispatchGroup:{x:Math.ceil(N/Y)},programUniforms:DA})}},Ll=(n,u)=>{Yo(n.inputs);let h=[0];n.outputCount>1&&h.push(-3),n.outputCount>2&&h.push(-3),n.outputCount>3&&h.push(3),n.compute(Ol(n.inputs,u,n.outputCount,!1),{outputs:h})}}),_t=TA(()=>{Dt(),St(),qr(),Rt(),br=(n,u)=>{if(!n||n.length<1)throw new Error("too few inputs");if(u.axes.length!==0){if(u.axes.length!==u.starts.length||u.axes.length!==u.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(u.starts.length!==u.ends.length)throw new Error("starts and ends must have the same length");n.slice(1).forEach((h,w)=>{if(n[w+1].dataType!==6&&n[w+1].dataType!==7)throw new Error(`Input ${w} must be an array of int32 or int64`)})},J0=(n,u)=>{let h=[];if(n.length>u)if(n[u].dataType===7)n[u].getBigInt64Array().forEach(w=>h.push(Number(w)));else{if(n[u].dataType!==6)throw new Error(`Input ${u} must be an array of int32 or int64`);n[u].getInt32Array().forEach(w=>h.push(Number(w)))}return h},v1=(n,u)=>{if(n.length>1){let h=J0(n,1),w=J0(n,2),B=J0(n,3);return B.length===0&&(B=[...Array(n[0].dims.length).keys()]),$A({starts:h,ends:w,axes:B})}return u},Yl=(n,u,h,w,B)=>{let v=n;return n<0&&(v+=h[w[u]]),B[u]<0?Math.max(0,Math.min(v,h[w[u]]-1)):Math.max(0,Math.min(v,h[w[u]]))},Ho=(n,u,h)=>`fn calculateInputIndices(output_indices: ${u.type.indices}) -> ${n.type.indices} {
          var input_indices: ${n.type.indices};
          var carry = 0u;
          for (var i = ${h.length}; i >= 0; i--) {
            let input_shape_i = ${rt("uniforms.input_shape","i",h.length)};
            let steps_i = ${rt("uniforms.steps","i",h.length)};
            let signs_i = ${rt("uniforms.signs","i",h.length)};
            let starts_i = ${rt("uniforms.starts","i",h.length)};
            var output_index = ${u.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${n.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Hl=(n,u)=>{let h=n[0].dims,w=HA.size(h),B=u.axes.length>0?HA.normalizeAxes(u.axes,h.length):[...Array(h.length).keys()],v=J0(n,4);v.forEach(wA=>wA!==0||(()=>{throw new Error("step cannot be 0")})),v.length===0&&(v=Array(B.length).fill(1));let y=u.starts.map((wA,MA)=>Yl(wA,MA,h,B,v)),F=u.ends.map((wA,MA)=>Yl(wA,MA,h,B,v));if(B.length!==y.length||B.length!==F.length)throw new Error("start, ends and axes should have the same number of elements");if(B.length!==h.length)for(let wA=0;wA<h.length;++wA)B.includes(wA)||(y.splice(wA,0,0),F.splice(wA,0,h[wA]),v.splice(wA,0,1));let N=v.map(wA=>Math.sign(wA));v.forEach((wA,MA,DA)=>{if(wA<0){let LA=(F[MA]-y[MA])/wA,ZA=y[MA],JA=ZA+LA*v[MA];y[MA]=JA,F[MA]=ZA,DA[MA]=-wA}});let Y=h.slice(0);B.forEach((wA,MA)=>{Y[wA]=Math.ceil((F[wA]-y[wA])/v[wA])});let tA={dims:Y,dataType:n[0].dataType},Q=Je("output",n[0].dataType,Y.length),iA=ge("input",n[0].dataType,n[0].dims.length),oA=HA.size(Y),dA=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:y.length},{name:"signs",type:"i32",length:N.length},{name:"steps",type:"u32",length:v.length}],fA=[{type:12,data:oA},{type:12,data:y},{type:6,data:N},{type:12,data:v},...Ke(n[0].dims,Y)];return{name:"Slice",shaderCache:{hint:`${N.length}_${y.length}_${v.length}`,inputDependencies:["rank"]},getShaderSource:wA=>`
      ${wA.registerUniforms(dA).declareVariables(iA,Q)}
        ${Ho(iA,Q,h)}
        ${wA.mainStart()}
          ${wA.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${Q.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${Q.setByOffset("global_idx",iA.getByIndices("input_indices"))}
      }`,getRunData:()=>({outputs:[tA],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:fA})}},Rl=(n,u)=>{br(n.inputs,u);let h=v1(n.inputs,u);n.compute(Hl(n.inputs,h),{inputs:[0]})},Wl=n=>{let u=n.starts,h=n.ends,w=n.axes;return $A({starts:u,ends:h,axes:w})}}),Ua=TA(()=>{Dt(),St(),qr(),Ji(),Rt(),Vl=n=>{if(!n||n.length!==1)throw new Error("Softmax op requires 1 input.")},Ro=(n,u)=>{let h,w=n.inputs[0],B=w.dims,v=HA.size(B),y=B.length,F=HA.normalizeAxis(u.axis,y),N=F<B.length-1,Y=[];N?(Y=Array.from({length:y},(JA,ne)=>ne),Y[F]=y-1,Y[y-1]=F,h=n.compute(Ga(w,Y),{inputs:[w],outputs:[-1]})[0]):h=w;let tA=h.dims,Q=tA[y-1],iA=v/Q,oA=Jt(Q),dA=Q/oA,fA=64;iA===1&&(fA=256);let wA=ge("x",h.dataType,h.dims,oA),MA=Je("result",h.dataType,h.dims,oA),DA=wA.type.value,LA=jt(h.dataType)==="f32"?`var threadMax = ${DA}(-3.402823e+38f);`:`var threadMax = ${DA}(-65504.0h);`,ZA=n.compute({name:"Softmax",shaderCache:{hint:`${oA};${fA}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:tA,dataType:h.dataType}],dispatchGroup:{x:iA},programUniforms:[{type:6,data:dA}]}),getShaderSource:JA=>`
      var<workgroup> rowMaxShared : ${DA};
      var<workgroup> rowSumShared : ${DA};
      var<workgroup> threadShared : array<${DA}, ${fA}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${DA} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${DA}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${JA.registerUniform("packedCols","i32").declareVariables(wA,MA)}
      ${JA.mainStart(fA)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${fA};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${LA}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${DA}(${((ne,Le)=>Le===4?`max(max(${ne}.x, ${ne}.y), max(${ne}.z, ${ne}.w))`:Le===2?`max(${ne}.x, ${ne}.y)`:Le===3?`max(max(${ne}.x, ${ne}.y), ${ne}.z)`:ne)("threadShared[0]",oA)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${DA}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${DA}(${ir("threadShared[0]",oA)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`},{inputs:[h],outputs:[N?-1:0]})[0];N&&n.compute(Ga(ZA,Y),{inputs:[ZA]})},Wo=(n,u)=>{Vl(n.inputs),Ro(n,u)},y1=n=>$A({axis:n.axis})}),_i=TA(()=>{Dt(),St(),Rt(),Vo=n=>Array.from(n.getBigInt64Array(),Number),jl=n=>{if(!n||n.length!==2)throw new Error("Tile requires 2 inputs.");if(n[0].dataType!==1&&n[0].dataType!==10&&n[0].dataType!==6&&n[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(n[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(n[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Vo(n[1]).length!==n[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},jo=(n,u)=>{let h=[];for(let w=0;w<n.length;++w)h.push(n[w]*u[w]);return h},E1=(n,u)=>{let h=n[0].dims,w=u??Vo(n[1]),B=jo(h,w),v=HA.size(B),y=n[0].dataType,F=ge("input",y,h.length),N=Je("output",y,B.length);return{name:"Tile",shaderCache:{hint:`${w}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:B,dataType:n[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:12,data:v},...Ke(n[0].dims,B)]}),getShaderSource:Y=>`
      const inputShape = ${F.indices(...h)};
      ${Y.registerUniform("output_size","u32").declareVariables(F,N)}
      ${Y.mainStart()}
      ${Y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${N.offsetToIndices("global_idx")};
      var input_indices: ${F.type.indices};
      for (var i = 0; i < ${h.length}; i++) {
        let input_dim_i = ${F.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${N.indicesGet("output_indices","i")}  % input_dim_i;

        ${F.indicesSet("input_indices","i","input_dim_value")}
      }
      ${N.setByOffset("global_idx",F.getByIndices("input_indices"))}
    }`}},M1=n=>{jl(n.inputs),n.compute(E1(n.inputs),{inputs:[0]})}}),_0=TA(()=>{Dt(),St(),Rt(),Ul=(n,u,h,w,B)=>{let v,y=Je("output_data",B,h.length,4),F=ge("a_data",u[1].dataType,u[1].dims.length,4),N=ge("b_data",u[2].dataType,u[2].dims.length,4),Y=ge("c_data",u[0].dataType,u[0].dims.length,4),tA=(Q,iA,oA)=>`select(${iA}, ${Q}, ${oA})`;if(w){let Q=(iA,oA,dA="")=>{let fA=`a_data[index_a${oA}][component_a${oA}]`,wA=`b_data[index_b${oA}][component_b${oA}]`,MA=`bool(c_data[index_c${oA}] & (0xffu << (component_c${oA} * 8)))`;return`
            let output_indices${oA} = ${y.offsetToIndices(`global_idx * 4u + ${oA}u`)};
            let offset_a${oA} = ${F.broadcastedIndicesToOffset(`output_indices${oA}`,y)};
            let offset_b${oA} = ${N.broadcastedIndicesToOffset(`output_indices${oA}`,y)};
            let offset_c${oA} = ${Y.broadcastedIndicesToOffset(`output_indices${oA}`,y)};
            let index_a${oA} = offset_a${oA} / 4u;
            let index_b${oA} = offset_b${oA} / 4u;
            let index_c${oA} = offset_c${oA} / 4u;
            let component_a${oA} = offset_a${oA} % 4u;
            let component_b${oA} = offset_b${oA} % 4u;
            let component_c${oA} = offset_c${oA} % 4u;
            ${iA}[${oA}] = ${dA}(${tA(fA,wA,MA)});
          `};v=B===9?`
            var data = vec4<u32>(0);
            ${Q("data",0,"u32")}
            ${Q("data",1,"u32")}
            ${Q("data",2,"u32")}
            ${Q("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`
            ${Q("output_data[global_idx]",0)}
            ${Q("output_data[global_idx]",1)}
            ${Q("output_data[global_idx]",2)}
            ${Q("output_data[global_idx]",3)}
          `}else v=y.setByOffset("global_idx",tA(F.getByOffset("global_idx"),N.getByOffset("global_idx"),Y.getByOffset("global_idx")));return`
        ${n.registerUniform("vec_size","u32").declareVariables(Y,F,N,y)}
        ${n.mainStart()}
        ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${v}
      }`},Kl=n=>{let u=n[1].dims,h=n[2].dims,w=n[0].dims,B=n[1].dataType,v=!(HA.areEqual(u,h)&&HA.areEqual(h,w)),y=u,F=HA.size(u);if(v){let Y=Se.calcShape(Se.calcShape(u,h,!1),w,!1);if(!Y)throw new Error("Can't perform where op on the given tensors");y=Y,F=HA.size(y)}let N=Math.ceil(F/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:Y=>Ul(Y,n,y,v,B),getRunData:()=>({outputs:[{dims:y,dataType:B}],dispatchGroup:{x:Math.ceil(F/64/4)},programUniforms:[{type:12,data:N},...Ke(w,u,h,y)]})}},Zl=n=>{n.compute(Kl(n.inputs))}}),Kn=TA(()=>{lc(),l1(),cc(),gc(),uc(),dc(),fc(),Un(),z1(),F1(),K(),j(),yA(),Ae(),se(),ue(),Fe(),Ze(),We(),_e(),Ft(),Qt(),or(),Bt(),Ot(),ut(),Ir(),Mr(),Vr(),Jr(),Na(),o1(),_r(),Yr(),ba(),_t(),Ua(),ct(),_i(),Ji(),c1(),_0(),Xl=new Map([["Abs",[bn]],["Acos",[ss]],["Acosh",[m0]],["Add",[fr]],["ArgMax",[c0,Oi]],["ArgMin",[ri,Oi]],["Asin",[ra]],["Asinh",[fs]],["Atan",[aa]],["Atanh",[ps]],["Attention",[g0]],["AveragePool",[X0,dl]],["BatchNormalization",[f0]],["BiasAdd",[h0]],["BiasSplitGelu",[ia]],["Cast",[In,Yi]],["Ceil",[vr]],["Clip",[Hi]],["Concat",[vi,B0]],["Conv",[WA,cA]],["ConvTranspose",[Kt,At]],["Cos",[Ii]],["Cosh",[wn]],["CumSum",[pr,hr]],["DepthToSpace",[Wr,oa]],["DequantizeLinear",[Cl,bl]],["Div",[Pn]],["Einsum",[Ms,Mi]],["Elu",[si,sa]],["Equal",[ys]],["Erf",[kn]],["Exp",[xn]],["Expand",[Hn]],["FastGelu",[p2]],["Floor",[Bn]],["FusedConv",[WA,cA]],["Gather",[C2,m2]],["GatherElements",[mo,v2]],["GatherBlockQuantized",[k2,x2]],["GatherND",[fo,I2]],["Gelu",[Ri]],["Gemm",[G2,M2]],["GlobalAveragePool",[pl,fl]],["GlobalMaxPool",[hl,k1]],["Greater",[Fn]],["GreaterOrEqual",[Es]],["GridSample",[F2,S2]],["GroupQueryAttention",[K2]],["HardSigmoid",[Lr,Vi]],["InstanceNormalization",[X2]],["LayerNormalization",[J2]],["LeakyRelu",[is,sa]],["Less",[x0]],["LessOrEqual",[$a]],["Log",[ii]],["MatMul",[$2]],["MatMulNBits",[tl,rl]],["MaxPool",[Go,q0]],["Mul",[ni]],["MultiHeadAttention",[Y2,O2]],["Neg",[b0]],["Not",[Wi]],["Pad",[cl]],["Pow",[k0]],["QuickGelu",[Qn,sa]],["Range",[wl]],["Reciprocal",[vn]],["ReduceMin",[Ci]],["ReduceMean",[pn]],["ReduceMax",[ti]],["ReduceSum",[Pr]],["ReduceProd",[hn]],["ReduceL1",[Ni]],["ReduceL2",[Ba]],["ReduceLogSum",[l0]],["ReduceLogSumExp",[za]],["ReduceSumSquare",[o0]],["Relu",[yn]],["Resize",[zl,Fl]],["RotaryEmbedding",[Nl]],["ScatterND",[Po,B1]],["Sigmoid",[ms]],["Sin",[En]],["Sinh",[ji]],["Slice",[Rl,Wl]],["SkipLayerNormalization",[Ll]],["Split",[V2,j2]],["Sqrt",[wi]],["Softmax",[Wo,y1]],["Sub",[zn]],["Tan",[Fa]],["Tanh",[Mn]],["ThresholdedRelu",[Dn,sa]],["Tile",[M1]],["Transpose",[zi,Gt]],["Where",[Zl]]])}),_o=TA(()=>{he(),Di(),Rt(),ql=class{constructor(n){this.backend=n,this.repo=new Map,this.attributesBound=!1}getArtifact(n){return this.repo.get(n)}setArtifact(n,u){this.repo.set(n,u)}run(n,u,h,w,B){YA(n.programInfo.name);let v=this.backend.device,y=this.backend.getComputePassEncoder();this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber);let F=[];for(let Y of u)F.push({binding:F.length,resource:{buffer:Y.buffer}});for(let Y of h)F.push({binding:F.length,resource:{buffer:Y.buffer}});B&&F.push({binding:F.length,resource:B});let N=v.createBindGroup({layout:n.computePipeline.getBindGroupLayout(0),entries:F,label:n.programInfo.name});if(this.backend.sessionStatus==="capturing"){let Y={kernelId:this.backend.currentKernelId,computePipeline:n.computePipeline,bindGroup:N,dispatchGroup:w};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(Y)}y.setPipeline(n.computePipeline),y.setBindGroup(0,N),y.dispatchWorkgroups(...w),this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),qA(n.programInfo.name)}dispose(){}build(n,u){YA(n.name);let h=this.backend.device,w=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"},{feature:"subgroups-f16",extension:"subgroups_f16"}].forEach(Y=>{h.features.has(Y.feature)&&w.push(`enable ${Y.extension};`)});let B=Qr(u,this.backend.device.limits),v=n.getShaderSource(B),y=`${w.join(`
`)}
${B.additionalImplementations}
${v}`,F=h.createShaderModule({code:y,label:n.name});zt("verbose",()=>`[WebGPU] ${n.name} shader code: ${y}`);let N=h.createComputePipeline({compute:{module:F,entryPoint:"main"},layout:"auto",label:n.name});return qA(n.name),{programInfo:n,computePipeline:N,uniformVariablesInfo:B.variablesInfo}}normalizeDispatchGroupSize(n){let u=typeof n=="number"?n:n.x,h=typeof n=="number"?1:n.y||1,w=typeof n=="number"?1:n.z||1,B=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(u<=B&&h<=B&&w<=B)return[u,h,w];let v=u*h*w,y=Math.ceil(Math.sqrt(v));if(y>B){if(y=Math.ceil(Math.cbrt(v)),y>B)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[y,y,y]}return[y,y,1]}}}),S1=TA(()=>{he(),Dt(),Di(),P1(),nc(),Kn(),_o(),Jl=(n,u)=>{if(u.length!==n.length)throw new Error(`inputDependencies length ${u.length} is not equal to inputTensors length ${n.length}.`);let h=[];for(let w=0;w<n.length;++w){let B=n[w].dataType;switch(u[w]){case"none":h.push("");break;case"type":h.push(`${B}`);break;case"rank":{let v=n[w].dims.length;h.push(`${B};${v}`);break}case"dims":{let v=n[w].dims.join(",");h.push(`${B};${v}`);break}default:throw new Error(`unsupported input dependency: ${u[w]}`)}}return h.join("|")},_l=(n,u,h)=>{let w=n.name;return n.shaderCache?.hint&&(w+="["+n.shaderCache.hint+"]"),w+=":"+h+`:${Jl(u,n.shaderCache?.inputDependencies??new Array(u.length).fill("dims"))}`,w},$l=class{constructor(n){n&&(this.architecture=n.architecture,this.vendor=n.vendor)}isArchitecture(n){return this.architecture===n}isVendor(n){return this.vendor===n}},A1=class{constructor(n){this.subgroupsSupported=n.features.has("subgroups"),this.subgroupsF16Supported=n.features.has("subgroups");let u=n.limits;this.subgroupsSupported&&u.minSubgroupSize&&u.maxSubgroupSize?this.subgroupSizeRange=[u.minSubgroupSize,u.maxSubgroupSize]:this.subgroupSizeRange=void 0}},e1=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let n=this.kernelCustomData.get(this.currentKernelId);return n||(n={},this.kernelCustomData.set(this.currentKernelId,n)),n}async initialize(n,u){this.env=n;let h=[],w={requiredLimits:{maxComputeWorkgroupStorageSize:u.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:u.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:u.limits.maxStorageBufferBindingSize,maxBufferSize:u.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:u.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:u.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:u.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:u.limits.maxComputeWorkgroupSizeZ},requiredFeatures:h},B=v=>u.features.has(v)&&h.push(v)&&!0;B("chromium-experimental-timestamp-query-inside-passes")||B("timestamp-query"),B("shader-f16"),B("subgroups")&&B("subgroups-f16"),this.device=await u.requestDevice(w),this.deviceInfo=new A1(this.device),this.adapterInfo=new $l(u.info||await u.requestAdapterInfo()),this.gpuDataManager=NA(this),this.programManager=new ql(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,xs(n.logLevel,!!n.debug),this.device.onuncapturederror=v=>{v.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${v.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:u,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let n=this.getCommandEncoder(),u={};this.queryType==="at-passes"&&(u.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:2*this.pendingDispatchNumber,endOfPassWriteIndex:2*this.pendingDispatchNumber+1}),this.computePassEncoder=n.beginComputePass(u)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;let n;YA(),this.endComputePass(),this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,2*this.pendingDispatchNumber,this.queryResolveBuffer,0),n=this.device.createBuffer({size:2*this.pendingDispatchNumber*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(n,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,n,0,2*this.pendingDispatchNumber*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&n.mapAsync(GPUMapMode.READ).then(()=>{let u=new BigUint64Array(n.getMappedRange()),h=this.pendingQueries.get(n);for(let w=0;w<u.length/2;w++){let B=h[w],v=B.kernelId,y=this.kernels.get(v),F=y.kernelType,N=y.kernelName,Y=B.programName,tA=B.inputTensorViews,Q=B.outputTensorViews,iA=u[2*w],oA=u[2*w+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=iA);let dA=Number(iA-this.queryTimeBase),fA=Number(oA-this.queryTimeBase);if(!Number.isSafeInteger(dA)||!Number.isSafeInteger(fA))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:tA.map(wA=>({dims:wA.dims,dataType:ts(wA.dataType)})),outputsMetadata:Q.map(wA=>({dims:wA.dims,dataType:ts(wA.dataType)})),kernelId:v,kernelType:F,kernelName:N,programName:Y,startTime:dA,endTime:fA});else{let wA="";tA.forEach((DA,LA)=>{wA+=`input[${LA}]: [${DA.dims}] | ${ts(DA.dataType)}, `});let MA="";Q.forEach((DA,LA)=>{MA+=`output[${LA}]: [${DA.dims}] | ${ts(DA.dataType)}, `}),console.log(`[profiling] kernel "${v}|${F}|${N}|${Y}" ${wA}${MA}execution time: ${fA-dA} ns`)}RA("GPU",`${Y}::${iA}::${oA}`)}n.unmap(),this.pendingQueries.delete(n)}),qA()}run(n,u,h,w,B,v){YA(n.name);let y=[];for(let DA=0;DA<u.length;++DA){let LA=u[DA].data;if(LA===0)continue;let ZA=this.gpuDataManager.get(LA);if(!ZA)throw new Error(`no GPU data for input: ${LA}`);y.push(ZA)}let{outputs:F,dispatchGroup:N,programUniforms:Y}=n.getRunData(u),tA=h.length===0?F.map((DA,LA)=>LA):h;if(tA.length!==F.length)throw new Error(`Output size ${tA.length} must be equal to ${F.length}.`);let Q,iA=[],oA=[];for(let DA=0;DA<F.length;++DA){if(!Number.isInteger(tA[DA])||tA[DA]<-3||tA[DA]>=v)throw new Error(`Invalid output index: ${tA[DA]}`);if(tA[DA]===-3)continue;let LA=tA[DA]===-1,ZA=tA[DA]===-2,JA=LA||ZA?B(F[DA].dataType,F[DA].dims):w(tA[DA],F[DA].dataType,F[DA].dims);if(iA.push(JA),JA.data===0)continue;let ne=this.gpuDataManager.get(JA.data);if(!ne)throw new Error(`no GPU data for output: ${JA.data}`);if(LA&&this.temporaryData.push(ne),ZA){let Le=this.kernelPersistentData.get(this.currentKernelId);Le||(Le=[],this.kernelPersistentData.set(this.currentKernelId,Le)),Le.push(ne)}oA.push(ne)}if(y.length!==u.length||oA.length!==iA.length){if(oA.length===0)return qA(n.name),iA;throw new Error(`Program ${n.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}if(Y){let DA=0,LA=[];Y.forEach(Le=>{let st=typeof Le.data=="number"?[Le.data]:Le.data;if(st.length===0)return;let ht,pt,mt=Le.type===10?2:4;Le.type===10?(pt=st.length>4?16:st.length>2?8:st.length*mt,ht=st.length>4?16:mt*st.length):(pt=st.length<=2?st.length*mt:16,ht=16),DA=Math.ceil(DA/pt)*pt,LA.push(DA);let vt=Le.type===10?8:4;DA+=st.length>4?Math.ceil(st.length/vt)*ht:st.length*mt});let ZA=16;DA=Math.ceil(DA/ZA)*ZA;let JA=new ArrayBuffer(DA);Y.forEach((Le,st)=>{let ht=LA[st],pt=typeof Le.data=="number"?[Le.data]:Le.data;if(Le.type===6)new Int32Array(JA,ht,pt.length).set(pt);else if(Le.type===12)new Uint32Array(JA,ht,pt.length).set(pt);else if(Le.type===10)new Uint16Array(JA,ht,pt.length).set(pt);else{if(Le.type!==1)throw new Error(`Unsupported uniform type: ${ts(Le.type)}`);new Float32Array(JA,ht,pt.length).set(pt)}});let ne=this.gpuDataManager.create(DA,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(ne.buffer,0,JA,0,DA),this.gpuDataManager.release(ne.id),Q={offset:0,size:DA,buffer:ne.buffer}}let dA=this.programManager.normalizeDispatchGroupSize(N),fA=dA[1]===1&&dA[2]===1,wA=_l(n,u,fA),MA=this.programManager.getArtifact(wA);if(MA||(MA=this.programManager.build(n,dA),this.programManager.setArtifact(wA,MA),zt("info",()=>`[artifact] key: ${wA}, programName: ${n.name}`)),Y&&MA.uniformVariablesInfo){if(Y.length!==MA.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${MA.uniformVariablesInfo.length}, got ${Y.length} in program "${MA.programInfo.name}".`);for(let DA=0;DA<Y.length;DA++){let LA=Y[DA],ZA=LA.type,JA=typeof LA.data=="number"?1:LA.data.length,[ne,Le]=MA.uniformVariablesInfo[DA];if(ZA!==ne||JA!==Le)throw new Error(`Uniform variable ${DA} mismatch: expect type ${ne} with size ${Le}, got type ${ZA} with size ${JA} in program "${MA.programInfo.name}".`)}}if(zt("info",()=>`[ProgramManager] run "${n.name}" (key=${wA}) with ${dA[0]}x${dA[1]}x${dA[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let DA={kernelId:this.currentKernelId,programName:MA.programInfo.name,inputTensorViews:u,outputTensorViews:iA};this.pendingKernels.push(DA),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(DA)}return this.programManager.run(MA,y,oA,dA,Q),qA(n.name),iA}upload(n,u){this.gpuDataManager.upload(n,u)}memcpy(n,u){this.gpuDataManager.memcpy(n,u)}async download(n,u){await this.gpuDataManager.download(n,u)}alloc(n){return this.gpuDataManager.create(n).id}free(n){return this.gpuDataManager.release(n)}createKernel(n,u,h,w){let B=Xl.get(n);if(!B)throw new Error(`kernel not implemented: ${n}`);let v={kernelType:n,kernelName:w,kernelEntry:B[0],attributes:[B[1],h]};this.kernels.set(u,v)}releaseKernel(n){let u=this.kernelPersistentData.get(n);if(u){for(let h of u)this.gpuDataManager.release(h.id);this.kernelPersistentData.delete(n)}this.kernelCustomData.delete(n),this.kernels.delete(n)}computeKernel(n,u,h){let w=this.kernels.get(n);if(!w)throw new Error(`kernel not created: ${n}`);let B=w.kernelType,v=w.kernelName,y=w.kernelEntry,F=w.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${B}] ${v}" is not allowed to be called recursively`);this.currentKernelId=n,F[0]&&(F[1]=F[0](F[1]),F[0]=void 0),zt("info",()=>`[WebGPU] Start to run kernel "[${B}] ${v}"...`);let N=this.env.debug;this.temporaryData=[];try{return N&&this.device.pushErrorScope("validation"),y(u,F[1]),0}catch(Y){return h.push(Promise.resolve(`[WebGPU] Kernel "[${B}] ${v}" failed. ${Y}`)),1}finally{N&&h.push(this.device.popErrorScope().then(Y=>Y?`GPU validation error for kernel "[${B}] ${v}": ${Y.message}`:null));for(let Y of this.temporaryData)this.gpuDataManager.release(Y.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(n,u,h,w){let B=this.sessionExternalDataMapping.get(n);B||(B=new Map,this.sessionExternalDataMapping.set(n,B));let v=B.get(u),y=this.gpuDataManager.registerExternalBuffer(h,w,v);return B.set(u,[y,h]),y}unregisterBuffers(n){let u=this.sessionExternalDataMapping.get(n);u&&(u.forEach(h=>this.gpuDataManager.unregisterExternalBuffer(h[0])),this.sessionExternalDataMapping.delete(n))}getBuffer(n){let u=this.gpuDataManager.get(n);if(!u)throw new Error(`no GPU data for buffer: ${n}`);return u.buffer}createDownloader(n,u,h){return async()=>{let w=await _(this,n,u);return ka(w.buffer,h)}}writeTimestamp(n){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,n)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2*this.maxDispatchNumber}),this.queryResolveBuffer=this.device.createBuffer({size:2*this.maxDispatchNumber*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){zt("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){zt("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){zt("info","replay"),this.sessionStatus="replaying";let n=this.capturedCommandList.get(this.currentSessionId),u=this.capturedPendingKernels.get(this.currentSessionId),h=n.length;this.pendingKernels=[];for(let w=0;w<h;w++){let B=this.getComputePassEncoder(),v=n[w];this.writeTimestamp(2*this.pendingDispatchNumber),B.setPipeline(v.computePipeline),B.setBindGroup(0,v.bindGroup),B.dispatchWorkgroups(...v.dispatchGroup),this.writeTimestamp(2*this.pendingDispatchNumber+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(u[w]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(n){this.unregisterBuffers(n),this.capturedCommandList.has(n)&&this.capturedCommandList.delete(n),this.capturedPendingKernels.has(n)&&this.capturedPendingKernels.delete(n),this.gpuDataManager.onReleaseSession(n)}onRunStart(n){this.currentSessionId=n,this.setQueryType()}}}),N1=TA(()=>{Di(),t1=1,Uo=()=>t1++,G1=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),Ko=(n,u)=>{let h=G1.get(n);if(!h)throw new Error("Unsupported data type.");return u.length>0?Math.ceil(u.reduce((w,B)=>w*B)*h/8):0},Zo=class{constructor(n){this.sessionId=n.sessionId,this.mlContext=n.context,this.mlTensor=n.tensor,this.dataType=n.dataType,this.tensorShape=n.shape}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return Ko(this.dataType,this.tensorShape)}destroy(){zt("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(n){this.mlContext.writeTensor(this.mlTensor,n)}async read(n){return n?this.mlContext.readTensor(this.mlTensor,n):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(n,u,h){return this.mlContext===n&&this.dataType===u&&this.tensorShape.length===h.length&&this.tensorShape.every((w,B)=>w===h[B])}},Xo=class{constructor(n,u){this.tensorManager=n,this.wrapper=u}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(n,u,h,w){if(this.wrapper){if(this.wrapper.canReuseTensor(n,u,h))return this.wrapper.tensor;if(w){if(this.wrapper.byteLength!==Ko(u,h))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let B=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(u,h,B,!0,!0),w&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(n){if(this.wrapper){if(n.byteLength===this.wrapper.byteLength)return void this.wrapper.write(n);zt("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor()}this.activeUpload?this.activeUpload.set(n):this.activeUpload=new Uint8Array(n)}async download(n){if(this.activeUpload)return n?void(n instanceof ArrayBuffer?new Uint8Array(n).set(this.activeUpload):new Uint8Array(n.buffer,n.byteOffset,n.byteLength).set(this.activeUpload)):this.activeUpload.buffer;if(!this.wrapper)throw new Error("Tensor has not been created.");return n?this.wrapper.read(n):this.wrapper.read()}},r1=class{constructor(n){this.backend=n,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}reserveTensorId(){let n=Uo();return this.tensorTrackersById.set(n,new Xo(this)),n}releaseTensorId(n){let u=this.tensorTrackersById.get(n);u&&(this.tensorTrackersById.delete(n),u.tensorWrapper&&this.releaseTensor(u.tensorWrapper))}async ensureTensor(n,u,h,w){zt("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${n}, dataType: ${u}, shape: ${h}, copyOld: ${w}}`);let B=this.tensorTrackersById.get(n);if(!B)throw new Error("Tensor not found.");return B.ensureTensor(this.backend.currentContext,u,h,w)}upload(n,u){let h=this.tensorTrackersById.get(n);if(!h)throw new Error("Tensor not found.");h.upload(u)}async download(n,u){zt("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${n}, dstBuffer: ${u?.byteLength}}`);let h=this.tensorTrackersById.get(n);if(!h)throw new Error("Tensor not found.");return h.download(u)}releaseTensorsForSession(n){for(let u of this.freeTensors)u.sessionId===n&&u.destroy();this.freeTensors=this.freeTensors.filter(u=>u.sessionId!==n)}registerTensor(n,u,h,w){let B=Uo(),v=new Zo({sessionId:this.backend.currentSessionId,context:n,tensor:u,dataType:h,shape:w});return this.tensorTrackersById.set(B,new Xo(this,v)),this.externalTensors.add(v),B}async getCachedTensor(n,u,h,w,B){let v=this.backend.currentSessionId,y=this.backend.currentContext;for(let[N,Y]of this.freeTensors.entries())if(Y.canReuseTensor(y,n,u)){zt("verbose",()=>`[WebNN] Reusing tensor {dataType: ${n}, shape: ${u}}`);let tA=this.freeTensors.splice(N,1)[0];return tA.sessionId=v,tA}zt("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${n}, shape: ${u}}`);let F=await y.createTensor({dataType:n,shape:u,dimensions:u,usage:h,writable:w,readable:B});return new Zo({sessionId:v,context:y,tensor:F,dataType:n,shape:u})}releaseTensor(n){this.externalTensors.has(n)&&this.externalTensors.delete(n),this.freeTensors.push(n)}},a1=(...n)=>new r1(...n)}),mc=TA(()=>{Dt(),Vn(),P1(),N1(),Di(),qo=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),D1=(n,u)=>{if(n===u)return!0;if(n===void 0||u===void 0)return!1;let h=Object.keys(n).sort(),w=Object.keys(u).sort();return h.length===w.length&&h.every((B,v)=>B===w[v]&&n[B]===u[B])},Q1=class{constructor(n){this.tensorManager=a1(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],xs(n.logLevel,!!n.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(n){this.activeSessionId=n}async createMLContext(n){if(n instanceof GPUDevice){let h=this.mlContextCache.findIndex(w=>w.gpuDevice===n);if(h!==-1)return this.mlContextCache[h].mlContext;{let w=await navigator.ml.createContext(n);return this.mlContextCache.push({gpuDevice:n,mlContext:w}),w}}if(n===void 0){let h=this.mlContextCache.findIndex(w=>w.options===void 0&&w.gpuDevice===void 0);if(h!==-1)return this.mlContextCache[h].mlContext;{let w=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:w}),w}}let u=this.mlContextCache.findIndex(h=>D1(h.options,n));if(u!==-1)return this.mlContextCache[u].mlContext;{let h=await navigator.ml.createContext(n);return this.mlContextCache.push({options:n,mlContext:h}),h}}get currentContext(){let n=this.getMLContext(this.currentSessionId);if(!n)throw new Error(`No MLContext found for session ${this.currentSessionId}`);return n}registerMLContext(n,u){this.mlContextBySessionId.set(n,u);let h=this.sessionIdsByMLContext.get(u);h||(h=new Set,this.sessionIdsByMLContext.set(u,h)),h.add(n)}onReleaseSession(n){let u=this.mlContextBySessionId.get(n);if(!u)return;this.tensorManager.releaseTensorsForSession(n),this.mlContextBySessionId.delete(n);let h=this.sessionIdsByMLContext.get(u);if(h.delete(n),h.size===0){this.sessionIdsByMLContext.delete(u);let w=this.mlContextCache.findIndex(B=>B.mlContext===u);w!==-1&&this.mlContextCache.splice(w,1)}}getMLContext(n){return this.mlContextBySessionId.get(n)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(n){zt("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${n}}`),this.tensorManager.releaseTensorId(n)}async ensureTensor(n,u,h,w){let B=qo.get(u);if(!B)throw new Error(`Unsupported ONNX data type: ${u}`);return this.tensorManager.ensureTensor(n,B,h,w)}uploadTensor(n,u){if(!Dr().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");zt("verbose",()=>`[WebNN] uploadTensor {tensorId: ${n}, data: ${u.byteLength}}`),this.tensorManager.upload(n,u)}async downloadTensor(n,u){return this.tensorManager.download(n,u)}createMLTensorDownloader(n,u){return async()=>{let h=await this.tensorManager.download(n);return ka(h,u)}}registerMLTensor(n,u,h){let w=qo.get(u);if(!w)throw new Error(`Unsupported ONNX data type: ${u}`);let B=this.tensorManager.registerTensor(this.currentContext,n,w,h);return zt("verbose",()=>`[WebNN] registerMLTensor {tensor: ${n}, dataType: ${w}, dimensions: ${h}} -> {tensorId: ${B}}`),B}registerMLConstant(n,u,h,w,B,v){if(!v)throw new Error("External mounted files are not available.");let y=n;n.startsWith("./")&&(y=n.substring(2));let F=v.get(y);if(!F)throw new Error(`File with name ${y} not found in preloaded files.`);if(u+h>F.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let N,Y=F.slice(u,u+h).buffer;switch(B.dataType){case"float32":N=new Float32Array(Y);break;case"float16":N=new Uint16Array(Y);break;case"int32":N=new Int32Array(Y);break;case"uint32":N=new Uint32Array(Y);break;case"int64":N=new BigInt64Array(Y);break;case"uint64":N=new BigUint64Array(Y);break;case"int8":N=new Int8Array(Y);break;case"int4":case"uint4":case"uint8":N=new Uint8Array(Y);break;default:throw new Error(`Unsupported data type: ${B.dataType} in creating WebNN Constant from external data.`)}return zt("verbose",()=>`[WebNN] registerMLConstant {dataType: ${B.dataType}, shape: ${B.shape}}}`),w.constant(B,N)}flush(){}}}),Tr={};ke(Tr,{init:()=>$i});var $r,Qi,$i,Zn,Q0,$0,gi,$o,A2,Ao,T0,eo,e2,to,P0,An,Ks,z0,Zs,es,O1,Cc,L1,ro,ao,ag,sg,ig,ng,og,lg,cg,gg,bc,ug,dg,lf=TA(()=>{Dt(),S1(),Di(),St(),mc(),$r=class Zu{constructor(u,h,w,B){this.module=u,this.dataType=h,this.data=w,this.dims=B}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let u=HA.size(this.dims);return u===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,u)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let u=HA.size(this.dims);return u===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,u)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let u=HA.size(this.dims);return u===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,u)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let u=HA.size(this.dims);return u===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,u)}reshape(u){if(HA.size(u)!==HA.size(this.dims))throw new Error("Invalid new shape");return new Zu(this.module,this.dataType,this.data,u)}},Qi=class{constructor(n,u,h){this.module=n,this.backend=u,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=u.adapterInfo,this.deviceInfo=u.deviceInfo;let w=n.PTR_SIZE,B=h/n.PTR_SIZE,v=w===4?"i32":"i64";this.opKernelContext=Number(n.getValue(w*B++,v));let y=Number(n.getValue(w*B++,v));this.outputCount=Number(n.getValue(w*B++,v)),this.customDataOffset=Number(n.getValue(w*B++,"*")),this.customDataSize=Number(n.getValue(w*B++,v));let F=[];for(let N=0;N<y;N++){let Y=Number(n.getValue(w*B++,v)),tA=Number(n.getValue(w*B++,"*")),Q=Number(n.getValue(w*B++,v)),iA=[];for(let oA=0;oA<Q;oA++)iA.push(Number(n.getValue(w*B++,v)));F.push(new $r(n,Y,tA,iA))}this.inputs=F}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(n,u){let h=u?.inputs?.map(B=>typeof B=="number"?this.inputs[B]:B)??this.inputs,w=u?.outputs??[];return this.backend.run(n,h,w,(B,v,y)=>new $r(this.module,v,this.output(B,y),y),(B,v)=>{let y=us(B,v);if(!y)throw new Error(`Unsupported data type: ${B}`);let F=y>0?this.backend.gpuDataManager.create(y).id:0;return new $r(this.module,B,F,v)},this.outputCount)}output(n,u){let h=this.module.stackSave();try{let w=this.module.PTR_SIZE,B=w===4?"i32":"i64",v=this.module.stackAlloc((1+u.length)*w);this.module.setValue(v,u.length,B);for(let y=0;y<u.length;y++)this.module.setValue(v+w*(y+1),u[y],B);return this.module._JsepOutput(this.opKernelContext,n,v)}catch(w){throw new Error(`Failed to generate kernel's output[${n}] with dims [${u}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${w}`)}finally{this.module.stackRestore(h)}}},$i=async(n,u,h,w)=>{let B=u.jsepInit;if(!B)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(n==="webgpu"){let v=new e1;await v.initialize(h,w),B("webgpu",[v,y=>v.alloc(Number(y)),y=>v.free(y),(y,F,N,Y=!1)=>{if(Y)zt("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(y)}, dst=${Number(F)}, size=${Number(N)}`),v.memcpy(Number(y),Number(F));else{zt("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(y)}, gpuDataId=${Number(F)}, size=${Number(N)}`);let tA=u.HEAPU8.subarray(Number(y>>>0),Number(y>>>0)+Number(N));v.upload(Number(F),tA)}},async(y,F,N)=>{zt("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${y}, dataOffset=${F}, size=${N}`),await v.download(Number(y),()=>u.HEAPU8.subarray(Number(F)>>>0,Number(F+N)>>>0))},(y,F,N)=>v.createKernel(y,Number(F),N,u.UTF8ToString(u._JsepGetNodeName(Number(F)))),y=>v.releaseKernel(y),(y,F,N,Y)=>{zt("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${N}, kernel=${y}, contextDataOffset=${F}`);let tA=new Qi(u,v,Number(F));return v.computeKernel(Number(y),tA,Y)},()=>v.captureBegin(),()=>v.captureEnd(),()=>v.replay()])}else{let v=new Q1(h);B("webnn",[v,()=>v.reserveTensorId(),y=>v.releaseTensorId(y),async(y,F,N,Y)=>v.ensureTensor(y,F,N,Y),(y,F)=>{v.uploadTensor(y,F)},async(y,F)=>v.downloadTensor(y,F)])}}}),fg=TA(()=>{sc(),ic(),Dt(),Vn(),i1(),T1(),Zn=(n,u)=>{Dr()._OrtInit(n,u)!==0&&Xt("Can't initialize onnxruntime.")},Q0=async n=>{Zn(n.wasm.numThreads,qa(n.logLevel))},$0=async(n,u)=>{{let h=(lf(),ae(Tr)).init;if(u==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let w=n.webgpu.adapter;if(w){if(typeof w.limits!="object"||typeof w.features!="object"||typeof w.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let B=n.webgpu.powerPreference;if(B!==void 0&&B!=="low-power"&&B!=="high-performance")throw new Error(`Invalid powerPreference setting: "${B}"`);let v=n.webgpu.forceFallbackAdapter;if(v!==void 0&&typeof v!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${v}"`);if(w=await navigator.gpu.requestAdapter({powerPreference:B,forceFallbackAdapter:v}),!w)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await h("webgpu",Dr(),n,w)}if(u==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await h("webnn",Dr(),n)}}},gi=new Map,$o=n=>{let u=Dr(),h=u.stackSave();try{let w=u.PTR_SIZE,B=u.stackAlloc(2*w);u._OrtGetInputOutputCount(n,B,B+w)!==0&&Xt("Can't get session input/output count.");let v=w===4?"i32":"i64";return[Number(u.getValue(B,v)),Number(u.getValue(B+w,v))]}finally{u.stackRestore(h)}},A2=n=>{let u=Dr(),h=u._malloc(n.byteLength);if(h===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${n.byteLength}.`);return u.HEAPU8.set(n,h),[h,n.byteLength]},Ao=async(n,u)=>{let h,w,B=Dr();Array.isArray(n)?[h,w]=n:n.buffer===B.HEAPU8.buffer?[h,w]=[n.byteOffset,n.byteLength]:[h,w]=A2(n);let v=0,y=0,F=0,N=[],Y=[],tA=[];try{if([y,N]=fi(u),u?.externalData&&B.mountExternalData){let DA=[];for(let LA of u.externalData){let ZA=typeof LA=="string"?LA:LA.path;DA.push(zs(typeof LA=="string"?LA:LA.data).then(JA=>{B.mountExternalData(ZA,JA)}))}await Promise.all(DA)}for(let DA of u?.executionProviders??[])if((typeof DA=="string"?DA:DA.name)==="webnn"){if(B.shouldTransferToMLTensor=!1,typeof DA!="string"){let LA=DA,ZA=LA?.context,JA=LA?.gpuDevice,ne=LA?.deviceType,Le=LA?.powerPreference;B.currentContext=ZA||(JA?await B.jsepCreateMLContext(JA):await B.jsepCreateMLContext({deviceType:ne,powerPreference:Le}))}else B.currentContext=await B.jsepCreateMLContext();break}v=await B._OrtCreateSession(h,w,y),v===0&&Xt("Can't create a session."),B.jsepOnCreateSession?.(),B.currentContext&&(B.jsepRegisterMLContext(v,B.currentContext),B.currentContext=void 0,B.shouldTransferToMLTensor=!0);let[Q,iA]=$o(v),oA=!!u?.enableGraphCapture,dA=[],fA=[],wA=[];for(let DA=0;DA<Q;DA++){let LA=B._OrtGetInputName(v,DA);LA===0&&Xt("Can't get an input name."),Y.push(LA),dA.push(B.UTF8ToString(LA))}for(let DA=0;DA<iA;DA++){let LA=B._OrtGetOutputName(v,DA);LA===0&&Xt("Can't get an output name."),tA.push(LA);let ZA=B.UTF8ToString(LA);fA.push(ZA);{if(oA&&u?.preferredOutputLocation===void 0){wA.push("gpu-buffer");continue}let JA=typeof u?.preferredOutputLocation=="string"?u.preferredOutputLocation:u?.preferredOutputLocation?.[ZA]??"cpu";if(JA!=="cpu"&&JA!=="cpu-pinned"&&JA!=="gpu-buffer"&&JA!=="ml-tensor")throw new Error(`Not supported preferred output location: ${JA}.`);if(oA&&JA!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${JA}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);wA.push(JA)}}let MA=null;return wA.some(DA=>DA==="gpu-buffer"||DA==="ml-tensor")&&(F=B._OrtCreateBinding(v),F===0&&Xt("Can't create IO binding."),MA={handle:F,outputPreferredLocations:wA,outputPreferredLocationsEncoded:wA.map(DA=>Ps(DA))}),gi.set(v,[v,Y,tA,MA,oA,!1]),[v,dA,fA]}catch(Q){throw Y.forEach(iA=>B._OrtFree(iA)),tA.forEach(iA=>B._OrtFree(iA)),F!==0&&B._OrtReleaseBinding(F)!==0&&Xt("Can't release IO binding."),v!==0&&B._OrtReleaseSession(v)!==0&&Xt("Can't release session."),Q}finally{B._free(h),y!==0&&B._OrtReleaseSessionOptions(y)!==0&&Xt("Can't release session options."),N.forEach(Q=>B._free(Q)),B.unmountExternalData?.()}},T0=n=>{let u=Dr(),h=gi.get(n);if(!h)throw new Error(`cannot release session. invalid session id: ${n}`);let[w,B,v,y,F]=h;y&&(F&&u._OrtClearBoundOutputs(y.handle)!==0&&Xt("Can't clear bound outputs."),u._OrtReleaseBinding(y.handle)!==0&&Xt("Can't release IO binding.")),u.jsepOnReleaseSession?.(n),B.forEach(N=>u._OrtFree(N)),v.forEach(N=>u._OrtFree(N)),u._OrtReleaseSession(w)!==0&&Xt("Can't release session."),gi.delete(n)},eo=(n,u,h,w,B,v=!1)=>{if(!n)return void u.push(0);let y,F,N=Dr(),Y=N.PTR_SIZE,tA=n[0],Q=n[1],iA=n[3];if(tA==="string"&&(iA==="gpu-buffer"||iA==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(v&&iA!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${B} when enableGraphCapture is true.`);if(iA==="gpu-buffer"){let fA=n[2].gpuBuffer;F=us(Ur(tA),Q);let wA=N.jsepRegisterBuffer;if(!wA)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');y=wA(w,B,fA,F)}else if(iA==="ml-tensor"){let fA=n[2].mlTensor;F=us(Ur(tA),Q);let wA=N.jsepRegisterMLTensor;if(!wA)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');y=wA(fA,Ur(tA),Q)}else{let fA=n[2];if(Array.isArray(fA)){F=Y*fA.length,y=N._malloc(F),h.push(y);for(let wA=0;wA<fA.length;wA++){if(typeof fA[wA]!="string")throw new TypeError(`tensor data at index ${wA} is not a string`);N.setValue(y+wA*Y,Hr(fA[wA],h),"*")}}else F=fA.byteLength,y=N._malloc(F),h.push(y),N.HEAPU8.set(new Uint8Array(fA.buffer,fA.byteOffset,F),y)}let oA=N.stackSave(),dA=N.stackAlloc(4*Q.length);try{Q.forEach((wA,MA)=>N.setValue(dA+MA*Y,wA,Y===4?"i32":"i64"));let fA=N._OrtCreateTensor(Ur(tA),y,F,dA,Q.length,Ps(iA));fA===0&&Xt(`Can't create tensor for input/output. session=${w}, index=${B}.`),u.push(fA)}finally{N.stackRestore(oA)}},e2=async(n,u,h,w,B,v)=>{let y=Dr(),F=y.PTR_SIZE,N=gi.get(n);if(!N)throw new Error(`cannot run inference. invalid session id: ${n}`);let Y=N[0],tA=N[1],Q=N[2],iA=N[3],oA=N[4],dA=N[5],fA=u.length,wA=w.length,MA=0,DA=[],LA=[],ZA=[],JA=[],ne=y.stackSave(),Le=y.stackAlloc(fA*F),st=y.stackAlloc(fA*F),ht=y.stackAlloc(wA*F),pt=y.stackAlloc(wA*F);try{y.jsepOnRunStart?.(Y),[MA,DA]=Xa(v);for(let tt=0;tt<fA;tt++)eo(h[tt],LA,JA,n,u[tt],oA);for(let tt=0;tt<wA;tt++)eo(B[tt],ZA,JA,n,fA+w[tt],oA);for(let tt=0;tt<fA;tt++)y.setValue(Le+tt*F,LA[tt],"*"),y.setValue(st+tt*F,tA[u[tt]],"*");for(let tt=0;tt<wA;tt++)y.setValue(ht+tt*F,ZA[tt],"*"),y.setValue(pt+tt*F,Q[w[tt]],"*");if(iA&&!dA){let{handle:tt,outputPreferredLocations:gt,outputPreferredLocationsEncoded:we}=iA;if(tA.length!==fA)throw new Error(`input count from feeds (${fA}) is expected to be always equal to model's input count (${tA.length}).`);for(let Ue=0;Ue<fA;Ue++){let et=u[Ue];await y._OrtBindInput(tt,tA[et],LA[Ue])!==0&&Xt(`Can't bind input[${Ue}] for session=${n}.`)}for(let Ue=0;Ue<wA;Ue++){let et=w[Ue];B[Ue]?.[3]?y._OrtBindOutput(tt,Q[et],ZA[Ue],0)!==0&&Xt(`Can't bind pre-allocated output[${Ue}] for session=${n}.`):y._OrtBindOutput(tt,Q[et],0,we[et])!==0&&Xt(`Can't bind output[${Ue}] to ${gt[Ue]} for session=${n}.`)}gi.set(n,[Y,tA,Q,iA,oA,!0])}let mt;mt=iA?await y._OrtRunWithBinding(Y,iA.handle,wA,ht,MA):await y._OrtRun(Y,st,Le,fA,pt,wA,ht,MA),mt!==0&&Xt("failed to call OrtRun().");let vt=[];for(let tt=0;tt<wA;tt++){let gt=Number(y.getValue(ht+tt*F,"*"));if(gt===ZA[tt]){vt.push(B[tt]);continue}let we,Ue=y.stackSave(),et=y.stackAlloc(4*F),yt=!1,gr=0;try{y._OrtGetTensorData(gt,et,et+F,et+2*F,et+3*F)!==0&&Xt(`Can't access output tensor data on index ${tt}.`);let ga=F===4?"i32":"i64",Ti=Number(y.getValue(et,ga));gr=y.getValue(et+F,"*");let Xn=y.getValue(et+2*F,"*"),t2=Number(y.getValue(et+3*F,ga)),Oa=[];for(let Fr=0;Fr<t2;Fr++)Oa.push(Number(y.getValue(Xn+Fr*F,ga)));y._OrtFree(Xn)!==0&&Xt("Can't free memory for tensor dims.");let en=Oa.reduce((Fr,ua)=>Fr*ua,1);we=ts(Ti);let so=iA?.outputPreferredLocations[w[tt]];if(we==="string"){if(so==="gpu-buffer"||so==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let Fr=[];for(let ua=0;ua<en;ua++){let F0=y.getValue(gr+ua*F,"*"),u1=y.getValue(gr+(ua+1)*F,"*"),kc=ua===en-1?void 0:u1-F0;Fr.push(y.UTF8ToString(F0,kc))}vt.push([we,Oa,Fr,"cpu"])}else if(so==="gpu-buffer"&&en>0){let Fr=y.jsepGetBuffer;if(!Fr)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let ua=Fr(gr),F0=us(Ti,en);if(F0===void 0||!ws(we))throw new Error(`Unsupported data type: ${we}`);yt=!0,vt.push([we,Oa,{gpuBuffer:ua,download:y.jsepCreateDownloader(ua,F0,we),dispose:()=>{y._OrtReleaseTensor(gt)!==0&&Xt("Can't release tensor.")}},"gpu-buffer"])}else if(so==="ml-tensor"&&en>0){let Fr=y.jsepEnsureTensor;if(!Fr)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(us(Ti,en)===void 0||!kr(we))throw new Error(`Unsupported data type: ${we}`);let ua=await Fr(gr,Ti,Oa,!1);yt=!0,vt.push([we,Oa,{mlTensor:ua,download:y.jsepCreateMLTensorDownloader(gr,we),dispose:()=>{y.jsepReleaseTensorId(gr),y._OrtReleaseTensor(gt)}},"ml-tensor"])}else{let Fr=new(_s(we))(en);new Uint8Array(Fr.buffer,Fr.byteOffset,Fr.byteLength).set(y.HEAPU8.subarray(gr,gr+Fr.byteLength)),vt.push([we,Oa,Fr,"cpu"])}}finally{y.stackRestore(Ue),we==="string"&&gr&&y._free(gr),yt||y._OrtReleaseTensor(gt)}}return iA&&!oA&&(y._OrtClearBoundOutputs(iA.handle)!==0&&Xt("Can't clear bound outputs."),gi.set(n,[Y,tA,Q,iA,oA,!1])),vt}finally{y.stackRestore(ne),LA.forEach(mt=>y._OrtReleaseTensor(mt)),ZA.forEach(mt=>y._OrtReleaseTensor(mt)),JA.forEach(mt=>y._free(mt)),MA!==0&&y._OrtReleaseRunOptions(MA),DA.forEach(mt=>y._free(mt))}},to=n=>{let u=Dr(),h=gi.get(n);if(!h)throw new Error("invalid session id");let w=h[0],B=u._OrtEndProfiling(w);B===0&&Xt("Can't get an profile file name."),u._OrtFree(B)},P0=n=>{let u=[];for(let h of n){let w=h[2];!Array.isArray(w)&&"buffer"in w&&u.push(w.buffer)}return u}}),pg=TA(()=>{he(),fg(),Vn(),s1(),An=()=>!!X.wasm.proxy&&typeof document<"u",z0=!1,Zs=!1,es=!1,L1=new Map,ro=(n,u)=>{let h=L1.get(n);h?h.push(u):L1.set(n,[u])},ao=()=>{if(z0||!Zs||es||!Ks)throw new Error("worker not ready")},ag=n=>{switch(n.data.type){case"init-wasm":z0=!1,n.data.err?(es=!0,Cc[1](n.data.err)):(Zs=!0,Cc[0]()),O1&&(URL.revokeObjectURL(O1),O1=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let u=L1.get(n.data.type);n.data.err?u.shift()[1](n.data.err):u.shift()[0](n.data.out);break}}},sg=async()=>{if(!Zs){if(z0)throw new Error("multiple calls to 'initWasm()' detected.");if(es)throw new Error("previous call to 'initWasm()' failed.");if(z0=!0,An())return new Promise((n,u)=>{Ks?.terminate(),Zt().then(([h,w])=>{try{(Ks=w).onerror=v=>u(v),Ks.onmessage=ag,Cc=[n,u];let B={type:"init-wasm",in:X};!B.in.wasm.wasmPaths&&(h||import.meta.url?.startsWith("file:"))&&(B.in.wasm.wasmPaths={wasm:new URL(d("./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm"),d.b).href}),Ks.postMessage(B),O1=h}catch(B){u(B)}},u)});try{await Ma(X.wasm),await Q0(X),Zs=!0}catch(n){throw es=!0,n}finally{z0=!1}}},ig=async n=>{if(An())return ao(),new Promise((u,h)=>{ro("init-ep",[u,h]);let w={type:"init-ep",in:{epName:n,env:X}};Ks.postMessage(w)});await $0(X,n)},ng=async n=>An()?(ao(),new Promise((u,h)=>{ro("copy-from",[u,h]);let w={type:"copy-from",in:{buffer:n}};Ks.postMessage(w,[n.buffer])})):A2(n),og=async(n,u)=>{if(An()){if(u?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return ao(),new Promise((h,w)=>{ro("create",[h,w]);let B={type:"create",in:{model:n,options:{...u}}},v=[];n instanceof Uint8Array&&v.push(n.buffer),Ks.postMessage(B,v)})}return Ao(n,u)},lg=async n=>{if(An())return ao(),new Promise((u,h)=>{ro("release",[u,h]);let w={type:"release",in:n};Ks.postMessage(w)});T0(n)},cg=async(n,u,h,w,B,v)=>{if(An()){if(h.some(y=>y[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(B.some(y=>y))throw new Error("pre-allocated output tensor is not supported for proxy.");return ao(),new Promise((y,F)=>{ro("run",[y,F]);let N=h,Y={type:"run",in:{sessionId:n,inputIndices:u,inputs:N,outputIndices:w,options:v}};Ks.postMessage(Y,P0(N))})}return e2(n,u,h,w,B,v)},gg=async n=>{if(An())return ao(),new Promise((u,h)=>{ro("end-profiling",[u,h]);let w={type:"end-profiling",in:n};Ks.postMessage(w)});to(n)}}),cf=TA(()=>{he(),pg(),Dt(),ce(),T1(),bc=(n,u)=>{switch(n.location){case"cpu":return[n.type,n.dims,n.data,"cpu"];case"gpu-buffer":return[n.type,n.dims,{gpuBuffer:n.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[n.type,n.dims,{mlTensor:n.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${n.location} for ${u()}`)}},ug=n=>{switch(n[3]){case"cpu":return new P(n[0],n[2],n[1]);case"gpu-buffer":{let u=n[0];if(!ws(u))throw new Error(`not supported data type: ${u} for deserializing GPU tensor`);let{gpuBuffer:h,download:w,dispose:B}=n[2];return P.fromGpuBuffer(h,{dataType:u,dims:n[1],download:w,dispose:B})}case"ml-tensor":{let u=n[0];if(!kr(u))throw new Error(`not supported data type: ${u} for deserializing MLTensor tensor`);let{mlTensor:h,download:w,dispose:B}=n[2];return P.fromMLTensor(h,{dataType:u,dims:n[1],download:w,dispose:B})}default:throw new Error(`invalid data location: ${n[3]}`)}},dg=class{async fetchModelAndCopyToWasmMemory(n){return ng(await zs(n))}async loadModel(n,u){let h;YA(),h=typeof n=="string"?await this.fetchModelAndCopyToWasmMemory(n):n,[this.sessionId,this.inputNames,this.outputNames]=await og(h,u),qA()}async dispose(){return lg(this.sessionId)}async run(n,u,h){YA();let w=[],B=[];Object.entries(n).forEach(Q=>{let iA=Q[0],oA=Q[1],dA=this.inputNames.indexOf(iA);if(dA===-1)throw new Error(`invalid input '${iA}'`);w.push(oA),B.push(dA)});let v=[],y=[];Object.entries(u).forEach(Q=>{let iA=Q[0],oA=Q[1],dA=this.outputNames.indexOf(iA);if(dA===-1)throw new Error(`invalid output '${iA}'`);v.push(oA),y.push(dA)});let F=w.map((Q,iA)=>bc(Q,()=>`input "${this.inputNames[B[iA]]}"`)),N=v.map((Q,iA)=>Q?bc(Q,()=>`output "${this.outputNames[y[iA]]}"`):null),Y=await cg(this.sessionId,B,F,y,N,h),tA={};for(let Q=0;Q<Y.length;Q++)tA[this.outputNames[y[Q]]]=v[Q]??ug(Y[Q]);return qA(),tA}startProfiling(){}endProfiling(){gg(this.sessionId)}}}),hg={};ke(hg,{OnnxruntimeWebAssemblyBackend:()=>wc,initializeFlags:()=>Ic,wasmBackend:()=>mg});var Ic,wc,mg,gf=TA(()=>{he(),pg(),cf(),Ic=()=>{if((typeof X.wasm.initTimeout!="number"||X.wasm.initTimeout<0)&&(X.wasm.initTimeout=0),X.wasm.simd===!1&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),typeof X.wasm.proxy!="boolean"&&(X.wasm.proxy=!1),typeof X.wasm.trace!="boolean"&&(X.wasm.trace=!1),typeof X.wasm.numThreads!="number"||!Number.isInteger(X.wasm.numThreads)||X.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)X.wasm.numThreads=1;else{let n=typeof navigator>"u"?UA("node:os").cpus().length:navigator.hardwareConcurrency;X.wasm.numThreads=Math.min(4,Math.ceil((n||1)/2))}},wc=class{async init(n){Ic(),await sg(),await ig(n)}async createInferenceSessionHandler(n,u){let h=new dg;return await h.loadModel(n,u),Promise.resolve(h)}},mg=new wc});he(),he(),he();var uf=_A;{let n=(gf(),ae(hg)).wasmBackend;V("webgpu",n,5),V("webnn",n,5),V("cpu",n,10),V("wasm",n,10)}Object.defineProperty(X.versions,"web",{value:"1.21.0-dev.20250114-228dd16893",enumerable:!0})},"./src/backends/onnx.js":(x,C,d)=>{var k;d.r(C),d.d(C,{Tensor:()=>U.Tensor,createInferenceSession:()=>EA,deviceToExecutionProviders:()=>CA,isONNXProxy:()=>xA,isONNXTensor:()=>sA});var z=d("./src/env.js"),V=d("?2ce3"),L=d("./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs?3a96"),U=d("./node_modules/onnxruntime-common/dist/esm/index.js");const q=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),W=[];let S,X;const R=Symbol.for("onnxruntime");if(R in globalThis)X=globalThis[R];else if(z.apis.IS_NODE_ENV){switch(X=V??(k||(k=d.t(V,2))),process.platform){case"win32":W.push("dml");break;case"linux":process.arch==="x64"&&W.push("cuda")}W.push("cpu"),S=["cpu"]}else X=L,z.apis.IS_WEBNN_AVAILABLE&&W.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),z.apis.IS_WEBGPU_AVAILABLE&&W.push("webgpu"),W.push("wasm"),S=["wasm"];const aA=X.InferenceSession;function CA(g=null){if(!g)return S;switch(g){case"auto":return W;case"gpu":return W.filter(b=>["webgpu","cuda","dml","webnn-gpu"].includes(b))}if(W.includes(g))return[q[g]??g];throw new Error(`Unsupported device: "${g}". Should be one of: ${W.join(", ")}.`)}let kA=null;async function EA(g,b,A){kA&&await kA;const l=aA.create(g,b);kA??=l;const M=await l;return M.config=A,M}function sA(g){return g instanceof X.Tensor}const nA=X?.env;function xA(){return nA?.wasm?.proxy}nA?.wasm&&(nA.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${z.env.version}/dist/`,nA.wasm.proxy=!1,typeof crossOriginIsolated<"u"&&crossOriginIsolated||(nA.wasm.numThreads=1)),nA?.webgpu&&(nA.webgpu.powerPreference="high-performance"),z.env.backends.onnx=nA},"./src/base/feature_extraction_utils.js":(x,C,d)=>{d.r(C),d.d(C,{FeatureExtractor:()=>L,validate_audio_inputs:()=>U});var k=d("./src/utils/constants.js"),z=d("./src/utils/generic.js"),V=d("./src/utils/hub.js");class L extends z.Callable{constructor(W){super(),this.config=W}static async from_pretrained(W,S){return new this(await(0,V.getModelJSON)(W,k.FEATURE_EXTRACTOR_NAME,!0,S))}}function U(q,W){if(!(q instanceof Float32Array||q instanceof Float64Array))throw new Error(`${W} expects input to be a Float32Array or a Float64Array, but got ${q?.constructor?.name??typeof q} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}},"./src/base/image_processors_utils.js":(x,C,d)=>{d.r(C),d.d(C,{ImageProcessor:()=>xA,center_to_corners_format:()=>X,post_process_instance_segmentation:()=>nA,post_process_object_detection:()=>R,post_process_panoptic_segmentation:()=>sA,post_process_semantic_segmentation:()=>aA});var k=d("./src/utils/generic.js"),z=d("./src/utils/tensor.js"),V=d("./src/utils/maths.js");d("./src/utils/image.js");var L=d("./src/utils/core.js"),U=d("./src/utils/hub.js"),q=d("./src/utils/constants.js");function W(g,b,A=0,l=null){const M=g/b;let uA=(0,V.bankers_round)(M)*b;return l!==null&&uA>l&&(uA=Math.floor(M)*b),uA<A&&(uA=Math.ceil(M)*b),uA}function S([g,b],A){return[Math.max(Math.floor(g/A),1)*A,Math.max(Math.floor(b/A),1)*A]}function X([g,b,A,l]){return[g-A/2,b-l/2,g+A/2,b+l/2]}function R(g,b=.5,A=null,l=!1){const M=g.logits,uA=g.pred_boxes,[D,P,RA]=M.dims;if(A!==null&&A.length!==D)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let SA=[];for(let YA=0;YA<D;++YA){let qA=A!==null?A[YA]:null,ee={boxes:[],classes:[],scores:[]},xe=M[YA],Ge=uA[YA];for(let GA=0;GA<P;++GA){let bA,PA=xe[GA],UA=[];if(l){bA=PA.sigmoid().data;for(let TA=0;TA<bA.length;++TA)bA[TA]>b&&UA.push(TA)}else{let TA=(0,V.max)(PA.data)[1];if(TA===RA-1||(bA=(0,V.softmax)(PA.data),bA[TA]<b))continue;UA.push(TA)}for(const TA of UA){let ke=Ge[GA].data;ke=X(ke),qA!==null&&(ke=ke.map((ae,oe)=>ae*qA[(oe+1)%2])),ee.boxes.push(ke),ee.classes.push(TA),ee.scores.push(bA[TA])}}SA.push(ee)}return SA}function aA(g,b=null){const A=g.logits,l=A.dims[0];if(b!==null&&b.length!==l)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const M=[];for(let uA=0;uA<l;++uA){const D=b!==null?b[uA]:null;let P=A[uA];D!==null&&(P=(0,z.interpolate)(P,D,"bilinear",!1));const[RA,SA]=D??P.dims.slice(-2),YA=new z.Tensor("int32",new Int32Array(RA*SA),[RA,SA]),qA=P[0].data,ee=YA.data;for(let GA=1;GA<P.dims[0];++GA){const bA=P[GA].data;for(let PA=0;PA<bA.length;++PA)bA[PA]>qA[PA]&&(qA[PA]=bA[PA],ee[PA]=GA)}const xe=new Array(P.dims[0]);for(let GA=0;GA<ee.length;++GA){const bA=ee[GA];xe[bA]=bA}const Ge=xe.filter(GA=>GA!==void 0);M.push({segmentation:YA,labels:Ge})}return M}function CA(g,b,A,l){const M=[],uA=[],D=[];for(let P=0;P<g.dims[0];++P){const RA=g[P],SA=b[P],YA=(0,V.max)(RA.data)[1];if(YA===l)continue;const qA=(0,V.softmax)(RA.data)[YA];qA>A&&(M.push(SA),uA.push(qA),D.push(YA))}return[M,uA,D]}function kA(g,b,A,l=.5,M=.8){const uA=[];let D=0,P=0;const RA=b[A].data;for(let YA=0;YA<g.length;++YA)g[YA]===A&&(uA.push(YA),++D),RA[YA]>=l&&++P;let SA=D>0&&P>0;return SA&&(SA=D/P>M),[SA,uA]}function EA(g,b,A,l,M,uA=null,D=null){const[P,RA]=D??g[0].dims,SA=new z.Tensor("int32",new Int32Array(P*RA),[P,RA]),YA=[];if(D!==null)for(let GA=0;GA<g.length;++GA)g[GA]=(0,z.interpolate)(g[GA],D,"bilinear",!1);const qA=new Int32Array(g[0].data.length),ee=new Float32Array(g[0].data.length);for(let GA=0;GA<g.length;++GA){let bA=b[GA];const PA=g[GA].data;for(let UA=0;UA<PA.length;++UA)PA[UA]*=bA,PA[UA]>ee[UA]&&(qA[UA]=GA,ee[UA]=PA[UA])}let xe=0;const Ge=SA.data;for(let GA=0;GA<A.length;++GA){const bA=A[GA],[PA,UA]=kA(qA,g,GA,l,M);if(PA){++xe;for(const TA of UA)Ge[TA]=xe;YA.push({id:xe,label_id:bA,score:b[GA]})}}return[SA,YA]}function sA(g,b=.5,A=.5,l=.8,M=null,uA=null){M===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),M=new Set);const D=g.class_queries_logits??g.logits,P=(g.masks_queries_logits??g.pred_masks).sigmoid();let[RA,SA,YA]=D.dims;if(YA-=1,uA!==null&&uA.length!==RA)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let qA=[];for(let ee=0;ee<RA;++ee){let xe=uA!==null?uA[ee]:null,Ge=D[ee],GA=P[ee],[bA,PA,UA]=CA(Ge,GA,b,YA);if(UA.length===0){let[ae,oe]=xe??GA.dims.slice(-2),ve=new z.Tensor("int32",new Int32Array(ae*oe).fill(-1),[ae,oe]);qA.push({segmentation:ve,segments_info:[]});continue}let[TA,ke]=EA(bA,PA,UA,A,l,M,xe);qA.push({segmentation:TA,segments_info:ke})}return qA}function nA(g,b=.5,A=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class xA extends k.Callable{constructor(b){super(),this.image_mean=b.image_mean??b.mean,this.image_std=b.image_std??b.std,this.resample=b.resample??2,this.do_rescale=b.do_rescale??!0,this.rescale_factor=b.rescale_factor??.00392156862745098,this.do_normalize=b.do_normalize,this.do_thumbnail=b.do_thumbnail,this.size=b.size??b.image_size,this.do_resize=b.do_resize??this.size!==void 0,this.size_divisibility=b.size_divisibility??b.size_divisor,this.do_center_crop=b.do_center_crop,this.crop_size=b.crop_size,this.do_convert_rgb=b.do_convert_rgb??!0,this.do_crop_margin=b.do_crop_margin,this.pad_size=b.pad_size,this.do_pad=b.do_pad,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=b.do_flip_channel_order??!1,this.config=b}async thumbnail(b,A,l=2){const M=b.height,uA=b.width,D=A.height,P=A.width;let RA=Math.min(M,D),SA=Math.min(uA,P);return RA===M&&SA===uA?b:(M>uA?SA=Math.floor(uA*RA/M):uA>M&&(RA=Math.floor(M*SA/uA)),await b.resize(SA,RA,{resample:l}))}async crop_margin(b,A=200){const l=b.clone().grayscale(),M=(0,V.min)(l.data)[0],uA=(0,V.max)(l.data)[0]-M;if(uA===0)return b;const D=A/255;let P=l.width,RA=l.height,SA=0,YA=0;const qA=l.data;for(let ee=0;ee<l.height;++ee){const xe=ee*l.width;for(let Ge=0;Ge<l.width;++Ge)(qA[xe+Ge]-M)/uA<D&&(P=Math.min(P,Ge),RA=Math.min(RA,ee),SA=Math.max(SA,Ge),YA=Math.max(YA,ee))}return b=await b.crop([P,RA,SA,YA])}pad_image(b,A,l,{mode:M="constant",center:uA=!1,constant_values:D=0}={}){const[P,RA,SA]=A;let YA,qA;if(typeof l=="number"?(YA=l,qA=l):l==="square"?YA=qA=Math.max(P,RA):(YA=l.width,qA=l.height),YA!==RA||qA!==P){const ee=new Float32Array(YA*qA*SA);if(Array.isArray(D))for(let GA=0;GA<ee.length;++GA)ee[GA]=D[GA%SA];else D!==0&&ee.fill(D);const[xe,Ge]=uA?[Math.floor((YA-RA)/2),Math.floor((qA-P)/2)]:[0,0];for(let GA=0;GA<P;++GA){const bA=(GA+Ge)*YA,PA=GA*RA;for(let UA=0;UA<RA;++UA){const TA=(bA+UA+xe)*SA,ke=(PA+UA)*SA;for(let ae=0;ae<SA;++ae)ee[TA+ae]=b[ke+ae]}}if(M==="symmetric"){if(uA)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const GA=P-1,bA=RA-1;for(let PA=0;PA<qA;++PA){const UA=PA*YA,TA=(0,L.calculateReflectOffset)(PA,GA)*RA;for(let ke=0;ke<YA;++ke){if(PA<P&&ke<RA)continue;const ae=(UA+ke)*SA,oe=(TA+(0,L.calculateReflectOffset)(ke,bA))*SA;for(let ve=0;ve<SA;++ve)ee[ae+ve]=b[oe+ve]}}}b=ee,A=[qA,YA,SA]}return[b,A]}rescale(b){for(let A=0;A<b.length;++A)b[A]=this.rescale_factor*b[A]}get_resize_output_image_size(b,A){const[l,M]=b.size;let uA,D;if(this.do_thumbnail){const{height:P,width:RA}=A;uA=Math.min(P,RA)}else Number.isInteger(A)?(uA=A,D=this.config.max_size??uA):A!==void 0&&(uA=A.shortest_edge,D=A.longest_edge);if(uA!==void 0||D!==void 0){const P=uA===void 0?1:Math.max(uA/l,uA/M),RA=l*P,SA=M*P,YA=D===void 0?1:Math.min(D/RA,D/SA);let qA=Math.floor(Number((RA*YA).toFixed(2))),ee=Math.floor(Number((SA*YA).toFixed(2)));return this.size_divisibility!==void 0&&([qA,ee]=S([qA,ee],this.size_divisibility)),[qA,ee]}if(A!==void 0&&A.width!==void 0&&A.height!==void 0){let P=A.width,RA=A.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let SA=RA/M,YA=P/l;Math.abs(1-YA)<Math.abs(1-SA)?SA=YA:YA=SA,RA=W(SA*M,this.config.ensure_multiple_of),P=W(YA*l,this.config.ensure_multiple_of)}return[P,RA]}if(this.size_divisibility!==void 0)return S([l,M],this.size_divisibility);if(A.min_pixels!==void 0&&A.max_pixels!==void 0){const{min_pixels:P,max_pixels:RA}=A;return function(SA,YA,qA=28,ee=3136,xe=1003520){if(SA<qA||YA<qA)throw new Error(`height:${SA} or width:${YA} must be larger than factor:${qA}`);if(Math.max(SA,YA)/Math.min(SA,YA)>200)throw new Error("absolute aspect ratio must be smaller than 200, got "+Math.max(SA,YA)/Math.min(SA,YA));let Ge=Math.round(SA/qA)*qA,GA=Math.round(YA/qA)*qA;if(Ge*GA>xe){const bA=Math.sqrt(SA*YA/xe);Ge=Math.floor(SA/bA/qA)*qA,GA=Math.floor(YA/bA/qA)*qA}else if(Ge*GA<ee){const bA=Math.sqrt(ee/(SA*YA));Ge=Math.ceil(SA*bA/qA)*qA,GA=Math.ceil(YA*bA/qA)*qA}return[Ge,GA]}(M,l,this.config.patch_size*this.config.merge_size,P,RA)}throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(A)}`)}async resize(b){const[A,l]=this.get_resize_output_image_size(b,this.size);return await b.resize(A,l,{resample:this.resample})}async preprocess(b,{do_normalize:A=null,do_pad:l=null,do_convert_rgb:M=null,do_convert_grayscale:uA=null,do_flip_channel_order:D=null}={}){this.do_crop_margin&&(b=await this.crop_margin(b));const[P,RA]=b.size;if(M??this.do_convert_rgb?b=b.rgb():uA&&(b=b.grayscale()),this.do_resize&&(b=await this.resize(b)),this.do_thumbnail&&(b=await this.thumbnail(b,this.size,this.resample)),this.do_center_crop){let ee,xe;Number.isInteger(this.crop_size)?(ee=this.crop_size,xe=this.crop_size):(ee=this.crop_size.width,xe=this.crop_size.height),b=await b.center_crop(ee,xe)}const SA=[b.height,b.width];let YA=Float32Array.from(b.data),qA=[b.height,b.width,b.channels];if(this.do_rescale&&this.rescale(YA),A??this.do_normalize){let ee=this.image_mean;Array.isArray(this.image_mean)||(ee=new Array(b.channels).fill(ee));let xe=this.image_std;if(Array.isArray(this.image_std)||(xe=new Array(b.channels).fill(ee)),ee.length!==b.channels||xe.length!==b.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${ee.length}) and \`image_std\` (${xe.length}) must match the number of channels in the image (${b.channels}).`);for(let Ge=0;Ge<YA.length;Ge+=b.channels)for(let GA=0;GA<b.channels;++GA)YA[Ge+GA]=(YA[Ge+GA]-ee[GA])/xe[GA]}if(l??this.do_pad){if(this.pad_size)[YA,qA]=this.pad_image(YA,[b.height,b.width,b.channels],this.pad_size);else if(this.size_divisibility){const[ee,xe]=S([qA[1],qA[0]],this.size_divisibility);[YA,qA]=this.pad_image(YA,qA,{width:ee,height:xe})}}if(D??this.do_flip_channel_order){if(qA[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let ee=0;ee<YA.length;ee+=3){const xe=YA[ee];YA[ee]=YA[ee+2],YA[ee+2]=xe}}return{original_size:[RA,P],reshaped_input_size:SA,pixel_values:new z.Tensor("float32",YA,qA).permute(2,0,1)}}async _call(b,...A){Array.isArray(b)||(b=[b]);const l=await Promise.all(b.map(uA=>this.preprocess(uA)));return{pixel_values:(0,z.stack)(l.map(uA=>uA.pixel_values),0),original_sizes:l.map(uA=>uA.original_size),reshaped_input_sizes:l.map(uA=>uA.reshaped_input_size)}}static async from_pretrained(b,A){return new this(await(0,U.getModelJSON)(b,q.IMAGE_PROCESSOR_NAME,!0,A))}}},"./src/base/processing_utils.js":(x,C,d)=>{d.r(C),d.d(C,{Processor:()=>L});var k=d("./src/utils/constants.js"),z=d("./src/utils/generic.js"),V=d("./src/utils/hub.js");class L extends z.Callable{static classes=["image_processor_class","tokenizer_class","feature_extractor_class"];static uses_processor_config=!1;constructor(q,W){super(),this.config=q,this.components=W}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(q,W={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(q,{tokenize:!1,...W})}batch_decode(...q){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...q)}decode(...q){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.decode(...q)}async _call(q,...W){for(const S of[this.image_processor,this.feature_extractor,this.tokenizer])if(S)return S(q,...W);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(q,W){const[S,X]=await Promise.all([this.uses_processor_config?(0,V.getModelJSON)(q,k.PROCESSOR_NAME,!0,W):{},Promise.all(this.classes.filter(R=>R in this).map(async R=>{const aA=await this[R].from_pretrained(q,W);return[R.replace(/_class$/,""),aA]})).then(Object.fromEntries)]);return new this(S,X)}}},"./src/configs.js":(x,C,d)=>{d.r(C),d.d(C,{AutoConfig:()=>q,PretrainedConfig:()=>U,getKeyValueShapes:()=>L});var k=d("./src/utils/core.js"),z=d("./src/utils/hub.js");function V(W){const S={};let X={};switch(W.model_type){case"llava":case"paligemma":case"florence2":case"llava_onevision":case"idefics3":X=V(W.text_config);break;case"moondream1":X=V(W.phi_config);break;case"musicgen":X=V(W.decoder);break;case"multi_modality":X=V(W.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":S.num_heads="n_head",S.num_layers="n_layer",S.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":S.num_heads="num_attention_heads",S.num_layers="num_hidden_layers",S.hidden_size="hidden_size";break;case"llama":case"olmo":case"olmo2":case"mobilellm":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":S.num_heads="num_key_value_heads",S.num_layers="num_hidden_layers",S.hidden_size="hidden_size",S.num_attention_heads="num_attention_heads";break;case"gemma":case"gemma2":S.num_heads="num_key_value_heads",S.num_layers="num_hidden_layers",S.dim_kv="head_dim";break;case"openelm":S.num_heads="num_kv_heads",S.num_layers="num_transformer_layers",S.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":S.num_heads="num_heads",S.num_layers="num_layers",S.hidden_size="hidden_size";break;case"bloom":S.num_heads="n_head",S.num_layers="n_layer",S.hidden_size="hidden_size";break;case"mpt":S.num_heads="n_heads",S.num_layers="n_layers",S.hidden_size="d_model";break;case"exaone":S.num_heads="num_key_value_heads",S.num_layers="num_layers",S.dim_kv="head_dim",S.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":S.num_decoder_layers="num_decoder_layers",S.num_decoder_heads="num_heads",S.decoder_dim_kv="d_kv",S.num_encoder_layers="num_layers",S.num_encoder_heads="num_heads",S.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":S.num_decoder_layers="decoder_layers",S.num_decoder_heads="decoder_attention_heads",S.decoder_hidden_size="d_model",S.num_encoder_layers="encoder_layers",S.num_encoder_heads="encoder_attention_heads",S.encoder_hidden_size="d_model";break;case"speecht5":S.num_decoder_layers="decoder_layers",S.num_decoder_heads="decoder_attention_heads",S.decoder_hidden_size="hidden_size",S.num_encoder_layers="encoder_layers",S.num_encoder_heads="encoder_attention_heads",S.encoder_hidden_size="hidden_size";break;case"trocr":S.num_encoder_layers=S.num_decoder_layers="decoder_layers",S.num_encoder_heads=S.num_decoder_heads="decoder_attention_heads",S.encoder_hidden_size=S.decoder_hidden_size="d_model";break;case"musicgen_decoder":case"moonshine":S.num_encoder_layers=S.num_decoder_layers="num_hidden_layers",S.num_encoder_heads=S.num_decoder_heads="num_attention_heads",S.encoder_hidden_size=S.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const aA=V(W.decoder),CA="num_decoder_layers"in aA,kA=(0,k.pick)(W,["model_type","is_encoder_decoder"]);return CA?(kA.num_decoder_layers=aA.num_decoder_layers,kA.num_decoder_heads=aA.num_decoder_heads,kA.decoder_hidden_size=aA.decoder_hidden_size,kA.num_encoder_layers=aA.num_encoder_layers,kA.num_encoder_heads=aA.num_encoder_heads,kA.encoder_hidden_size=aA.encoder_hidden_size):(kA.num_layers=aA.num_layers,kA.num_heads=aA.num_heads,kA.hidden_size=aA.hidden_size),kA}const R={...X,...(0,k.pick)(W,["model_type","multi_query","is_encoder_decoder"])};for(const aA in S)R[aA]=W[S[aA]];return R}function L(W,{prefix:S="past_key_values",batch_size:X=1}={}){const R={},aA=W.normalized_config;if(aA.is_encoder_decoder&&"num_encoder_heads"in aA&&"num_decoder_heads"in aA){const CA=aA.encoder_dim_kv??aA.encoder_hidden_size/aA.num_encoder_heads,kA=aA.decoder_dim_kv??aA.decoder_hidden_size/aA.num_decoder_heads,EA=[X,aA.num_encoder_heads,0,CA],sA=[X,aA.num_decoder_heads,0,kA];for(let nA=0;nA<aA.num_decoder_layers;++nA)R[`${S}.${nA}.encoder.key`]=EA,R[`${S}.${nA}.encoder.value`]=EA,R[`${S}.${nA}.decoder.key`]=sA,R[`${S}.${nA}.decoder.value`]=sA}else{const CA=aA.num_heads,kA=aA.num_layers,EA=aA.dim_kv??aA.hidden_size/(aA.num_attention_heads??CA);if(aA.model_type==="falcon"){const sA=[X*CA,0,EA];for(let nA=0;nA<kA;++nA)R[`${S}.${nA}.key`]=sA,R[`${S}.${nA}.value`]=sA}else if(aA.multi_query){const sA=[X*CA,0,2*EA];for(let nA=0;nA<kA;++nA)R[`${S}.${nA}.key_value`]=sA}else if(aA.model_type==="bloom"){const sA=[X*CA,EA,0],nA=[X*CA,0,EA];for(let xA=0;xA<kA;++xA)R[`${S}.${xA}.key`]=sA,R[`${S}.${xA}.value`]=nA}else if(aA.model_type==="openelm")for(let sA=0;sA<kA;++sA){const nA=[X,CA[sA],0,EA];R[`${S}.${sA}.key`]=nA,R[`${S}.${sA}.value`]=nA}else{const sA=[X,CA,0,EA];for(let nA=0;nA<kA;++nA)R[`${S}.${nA}.key`]=sA,R[`${S}.${nA}.value`]=sA}}return R}class U{model_type=null;is_encoder_decoder=!1;max_position_embeddings;"transformers.js_config";constructor(S){Object.assign(this,S),this.normalized_config=V(this)}static async from_pretrained(S,{progress_callback:X=null,config:R=null,cache_dir:aA=null,local_files_only:CA=!1,revision:kA="main"}={}){!R||R instanceof U||(R=new U(R));const EA=R??await async function(sA,nA){return await(0,z.getModelJSON)(sA,"config.json",!0,nA)}(S,{progress_callback:X,config:R,cache_dir:aA,local_files_only:CA,revision:kA});return new this(EA)}}class q{static async from_pretrained(...S){return U.from_pretrained(...S)}}},"./src/env.js":(x,C,d)=>{d.r(C),d.d(C,{apis:()=>kA,env:()=>g});var k=d("?569f"),z=d("?3f59"),V=d("?154a");const L=typeof window<"u"&&window.document!==void 0,U=typeof self<"u"&&self.constructor?.name==="DedicatedWorkerGlobalScope",q=typeof self<"u"&&"caches"in self,W=typeof navigator<"u"&&"gpu"in navigator,S=typeof navigator<"u"&&"ml"in navigator,X=typeof process<"u",R=X&&process?.release?.name==="node",aA=!b(k),CA=!b(z),kA=Object.freeze({IS_BROWSER_ENV:L,IS_WEBWORKER_ENV:U,IS_WEB_CACHE_AVAILABLE:q,IS_WEBGPU_AVAILABLE:W,IS_WEBNN_AVAILABLE:S,IS_PROCESS_AVAILABLE:X,IS_NODE_ENV:R,IS_FS_AVAILABLE:aA,IS_PATH_AVAILABLE:CA}),EA=aA&&CA;let sA="./";if(EA){const A=Object(import.meta).url;A?sA=z.dirname(z.dirname(V.fileURLToPath(A))):typeof __dirname<"u"&&(sA=z.dirname(__dirname))}const nA=EA?z.join(sA,"/.cache/"):null,xA="/models/",g={version:"3.3.1",backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(L||U),localModelPath:EA?z.join(sA,xA):xA,useFS:aA,useBrowserCache:q,useFSCache:aA,cacheDir:nA,useCustomCache:!1,customCache:null};function b(A){return Object.keys(A).length===0}},"./src/generation/configuration_utils.js":(x,C,d)=>{d.r(C),d.d(C,{GenerationConfig:()=>z});var k=d("./src/utils/core.js");class z{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;streamer=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(L){Object.assign(this,(0,k.pick)(L,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(x,C,d)=>{d.r(C),d.d(C,{ClassifierFreeGuidanceLogitsProcessor:()=>sA,ForcedBOSTokenLogitsProcessor:()=>q,ForcedEOSTokenLogitsProcessor:()=>W,LogitsProcessor:()=>V,LogitsProcessorList:()=>U,LogitsWarper:()=>L,MinLengthLogitsProcessor:()=>CA,MinNewTokensLengthLogitsProcessor:()=>kA,NoBadWordsLogitsProcessor:()=>EA,NoRepeatNGramLogitsProcessor:()=>R,RepetitionPenaltyLogitsProcessor:()=>aA,SuppressTokensAtBeginLogitsProcessor:()=>S,TemperatureLogitsWarper:()=>nA,TopKLogitsWarper:()=>g,TopPLogitsWarper:()=>xA,WhisperTimeStampLogitsProcessor:()=>X});var k=d("./src/utils/generic.js");d("./src/utils/tensor.js");var z=d("./src/utils/maths.js");class V extends k.Callable{_call(A,l){throw Error("`_call` should be implemented in a subclass")}}class L extends k.Callable{_call(A,l){throw Error("`_call` should be implemented in a subclass")}}class U extends k.Callable{constructor(){super(),this.processors=[]}push(A){this.processors.push(A)}extend(A){this.processors.push(...A)}_call(A,l){let M=l;for(const uA of this.processors)M=uA(A,M);return M}[Symbol.iterator](){return this.processors.values()}}class q extends V{constructor(A){super(),this.bos_token_id=A}_call(A,l){for(let M=0;M<A.length;++M)if(A[M].length===1){const uA=l[M].data;uA.fill(-1/0),uA[this.bos_token_id]=0}return l}}class W extends V{constructor(A,l){super(),this.max_length=A,this.eos_token_id=Array.isArray(l)?l:[l]}_call(A,l){for(let M=0;M<A.length;++M)if(A[M].length===this.max_length-1){const uA=l[M].data;uA.fill(-1/0);for(const D of this.eos_token_id)uA[D]=0}return l}}class S extends V{constructor(A,l){super(),this.begin_suppress_tokens=A,this.begin_index=l}_call(A,l){for(let M=0;M<A.length;++M)if(A[M].length===this.begin_index){const uA=l[M].data;for(const D of this.begin_suppress_tokens)uA[D]=-1/0}return l}}class X extends V{constructor(A,l){super(),this.eos_token_id=Array.isArray(A.eos_token_id)?A.eos_token_id[0]:A.eos_token_id,this.no_timestamps_token_id=A.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=l.length,l.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=A.max_initial_timestamp_index}_call(A,l){for(let M=0;M<A.length;++M){const uA=l[M].data;if(uA[this.no_timestamps_token_id]=-1/0,A[M].length===this.begin_index-1){uA.fill(-1/0),uA[this.timestamp_begin]=0;continue}const D=A[M].slice(this.begin_index),P=D.length>=1&&D[D.length-1]>=this.timestamp_begin,RA=D.length<2||D[D.length-2]>=this.timestamp_begin;if(P&&(RA?uA.subarray(this.timestamp_begin).fill(-1/0):uA.subarray(0,this.eos_token_id).fill(-1/0)),A[M].length===this.begin_index&&this.max_initial_timestamp_index!==null){const qA=this.timestamp_begin+this.max_initial_timestamp_index;uA.subarray(qA+1).fill(-1/0)}const SA=(0,z.log_softmax)(uA);Math.log(SA.subarray(this.timestamp_begin).map(Math.exp).reduce((qA,ee)=>qA+ee))>(0,z.max)(SA.subarray(0,this.timestamp_begin))[0]&&uA.subarray(0,this.timestamp_begin).fill(-1/0)}return l}}class R extends V{constructor(A){super(),this.no_repeat_ngram_size=A}getNgrams(A){const l=A.length,M=[];for(let D=0;D<l+1-this.no_repeat_ngram_size;++D){const P=[];for(let RA=0;RA<this.no_repeat_ngram_size;++RA)P.push(A[D+RA]);M.push(P.map(Number))}const uA=new Map;for(const D of M){const P=D.slice(0,D.length-1),RA=JSON.stringify(P),SA=uA.get(RA)??[];SA.push(D[D.length-1]),uA.set(RA,SA)}return uA}getGeneratedNgrams(A,l){const M=l.slice(l.length+1-this.no_repeat_ngram_size,l.length);return A.get(JSON.stringify(M.map(Number)))??[]}calcBannedNgramTokens(A){const l=[];if(A.length+1<this.no_repeat_ngram_size)return l;{const M=this.getNgrams(A);return this.getGeneratedNgrams(M,A)}}_call(A,l){for(let M=0;M<A.length;++M){const uA=l[M].data,D=this.calcBannedNgramTokens(A[M]);for(const P of D)uA[P]=-1/0}return l}}class aA extends V{constructor(A){super(),this.penalty=A}_call(A,l){for(let M=0;M<A.length;++M){const uA=l[M].data;for(const D of new Set(A[M])){const P=Number(D);uA[P]<0?uA[P]*=this.penalty:uA[P]/=this.penalty}}return l}}class CA extends V{constructor(A,l){super(),this.min_length=A,this.eos_token_id=Array.isArray(l)?l:[l]}_call(A,l){for(let M=0;M<A.length;++M)if(A[M].length<this.min_length){const uA=l[M].data;for(const D of this.eos_token_id)uA[D]=-1/0}return l}}class kA extends V{constructor(A,l,M){super(),this.prompt_length_to_skip=A,this.min_new_tokens=l,this.eos_token_id=Array.isArray(M)?M:[M]}_call(A,l){for(let M=0;M<A.length;++M)if(A[M].length-this.prompt_length_to_skip<this.min_new_tokens){const uA=l[M].data;for(const D of this.eos_token_id)uA[D]=-1/0}return l}}class EA extends V{constructor(A,l){super(),this.bad_words_ids=A,this.eos_token_id=Array.isArray(l)?l:[l]}_call(A,l){for(let M=0;M<A.length;++M){const uA=l[M].data,D=A[M];for(const P of this.bad_words_ids){let RA=!0;for(let SA=1;SA<=P.length-1&&P.length<D.length;++SA)if(P.at(-SA-1)!=D.at(-SA)){RA=!1;break}RA&&(uA[P.at(-1)]=-1/0)}}return l}}class sA extends V{constructor(A){if(super(),A<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${A}.`);this.guidance_scale=A}_call(A,l){if(l.dims[0]!==2*A.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${l.dims[0]} for the logits and ${A.length} for the input ids.`);const M=A.length,uA=l.slice([0,M],null),D=l.slice([M,l.dims[0]],null);for(let P=0;P<D.data.length;++P)D.data[P]+=(uA.data[P]-D.data[P])*this.guidance_scale;return D}}class nA extends L{constructor(A){super(),this.temperature=A}_call(A,l){const M=l.data;for(let uA=0;uA<M.length;++uA)M[uA]/=this.temperature;return l}}class xA extends L{constructor(A,{filter_value:l=-1/0,min_tokens_to_keep:M=1}={}){if(super(),A<0||A>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${A}`);if(!Number.isInteger(M)||M<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${M}`);this.top_p=A,this.filter_value=l,this.min_tokens_to_keep=M}}class g extends L{constructor(A,{filter_value:l=-1/0,min_tokens_to_keep:M=1}={}){if(super(),!Number.isInteger(A)||A<0)throw new Error(`\`top_k\` must be a positive integer, but is ${A}`);this.top_k=Math.max(A,M),this.filter_value=l}}},"./src/generation/logits_sampler.js":(x,C,d)=>{d.r(C),d.d(C,{LogitsSampler:()=>L});var k=d("./src/utils/generic.js"),z=d("./src/utils/tensor.js"),V=d("./src/utils/maths.js");d("./src/generation/configuration_utils.js");class L extends k.Callable{constructor(X){super(),this.generation_config=X}async _call(X){return this.sample(X)}async sample(X){throw Error("sample should be implemented in subclasses.")}getLogits(X,R){let aA=X.dims.at(-1),CA=X.data;if(R===-1)CA=CA.slice(-aA);else{let kA=R*aA;CA=CA.slice(kA,kA+aA)}return CA}randomSelect(X){let R=0;for(let CA=0;CA<X.length;++CA)R+=X[CA];let aA=Math.random()*R;for(let CA=0;CA<X.length;++CA)if(aA-=X[CA],aA<=0)return CA;return 0}static getSampler(X){if(X.do_sample)return new q(X);if(X.num_beams>1)return new W(X);if(X.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${X.num_return_sequences}.`);return new U(X)}}class U extends L{async sample(X){const R=(0,V.max)(X.data)[1];return[[BigInt(R),0]]}}class q extends L{async sample(X){let R=X.dims.at(-1);this.generation_config.top_k>0&&(R=Math.min(this.generation_config.top_k,R));const[aA,CA]=await(0,z.topk)(X,R),kA=(0,V.softmax)(aA.data);return Array.from({length:this.generation_config.num_beams},()=>{const EA=this.randomSelect(kA);return[CA.data[EA],Math.log(kA[EA])]})}}class W extends L{async sample(X){let R=X.dims.at(-1);this.generation_config.top_k>0&&(R=Math.min(this.generation_config.top_k,R));const[aA,CA]=await(0,z.topk)(X,R),kA=(0,V.softmax)(aA.data);return Array.from({length:this.generation_config.num_beams},(EA,sA)=>[CA.data[sA],Math.log(kA[sA])])}}},"./src/generation/stopping_criteria.js":(x,C,d)=>{d.r(C),d.d(C,{EosTokenCriteria:()=>U,InterruptableStoppingCriteria:()=>q,MaxLengthCriteria:()=>L,StoppingCriteria:()=>z,StoppingCriteriaList:()=>V});var k=d("./src/utils/generic.js");class z extends k.Callable{_call(S,X){throw Error("StoppingCriteria needs to be subclassed")}}class V extends k.Callable{constructor(){super(),this.criteria=[]}push(S){this.criteria.push(S)}extend(S){S instanceof V?S=S.criteria:S instanceof z&&(S=[S]),this.criteria.push(...S)}_call(S,X){const R=new Array(S.length).fill(!1);for(const aA of this.criteria){const CA=aA(S,X);for(let kA=0;kA<R.length;++kA)R[kA]||=CA[kA]}return R}[Symbol.iterator](){return this.criteria.values()}}class L extends z{constructor(S,X=null){super(),this.max_length=S,this.max_position_embeddings=X}_call(S){return S.map(X=>X.length>=this.max_length)}}class U extends z{constructor(S){super(),Array.isArray(S)||(S=[S]),this.eos_token_id=S}_call(S,X){return S.map(R=>{const aA=R.at(-1);return this.eos_token_id.some(CA=>aA==CA)})}}class q extends z{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(S,X){return new Array(S.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(x,C,d)=>{d.r(C),d.d(C,{BaseStreamer:()=>L,TextStreamer:()=>q,WhisperTextStreamer:()=>W});var k=d("./src/utils/core.js"),z=d("./src/tokenizers.js"),V=d("./src/env.js");class L{put(X){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const U=V.apis.IS_PROCESS_AVAILABLE?S=>process.stdout.write(S):S=>console.log(S);class q extends L{constructor(X,{skip_prompt:R=!1,callback_function:aA=null,token_callback_function:CA=null,skip_special_tokens:kA=!0,decode_kwargs:EA={},...sA}={}){super(),this.tokenizer=X,this.skip_prompt=R,this.callback_function=aA??U,this.token_callback_function=CA,this.decode_kwargs={skip_special_tokens:kA,...EA,...sA},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(X){if(X.length>1)throw Error("TextStreamer only supports batch size of 1");if(this.skip_prompt&&this.next_tokens_are_prompt)return void(this.next_tokens_are_prompt=!1);const R=X[0];this.token_callback_function?.(R),this.token_cache=(0,k.mergeArrays)(this.token_cache,R);const aA=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let CA;aA.endsWith(`
`)?(CA=aA.slice(this.print_len),this.token_cache=[],this.print_len=0):aA.length>0&&(0,z.is_chinese_char)(aA.charCodeAt(aA.length-1))?(CA=aA.slice(this.print_len),this.print_len+=CA.length):(CA=aA.slice(this.print_len,aA.lastIndexOf(" ")+1),this.print_len+=CA.length),this.on_finalized_text(CA,!1)}end(){let X;this.token_cache.length>0?(X=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):X="",this.next_tokens_are_prompt=!0,this.on_finalized_text(X,!0)}on_finalized_text(X,R){X.length>0&&this.callback_function?.(X),R&&this.callback_function===U&&V.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.(`
`)}}class W extends q{constructor(X,{skip_prompt:R=!1,callback_function:aA=null,token_callback_function:CA=null,on_chunk_start:kA=null,on_chunk_end:EA=null,on_finalize:sA=null,time_precision:nA=.02,skip_special_tokens:xA=!0,decode_kwargs:g={}}={}){super(X,{skip_prompt:R,skip_special_tokens:xA,callback_function:aA,token_callback_function:CA,decode_kwargs:g}),this.timestamp_begin=X.timestamp_begin,this.on_chunk_start=kA,this.on_chunk_end=EA,this.on_finalize=sA,this.time_precision=nA,this.waiting_for_timestamp=!1}put(X){if(X.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const R=X[0];if(R.length===1){const aA=Number(R[0])-this.timestamp_begin;if(aA>=0){const CA=aA*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(CA):this.on_chunk_start?.(CA),this.waiting_for_timestamp=!this.waiting_for_timestamp,X=[[]]}}return super.put(X)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":(x,C,d)=>{d.r(C),d.d(C,{ASTForAudioClassification:()=>Si,ASTModel:()=>nn,ASTPreTrainedModel:()=>Da,AlbertForMaskedLM:()=>Ve,AlbertForQuestionAnswering:()=>HA,AlbertForSequenceClassification:()=>Se,AlbertModel:()=>de,AlbertPreTrainedModel:()=>$A,AutoModel:()=>Q1,AutoModelForAudioClassification:()=>lc,AutoModelForAudioFrameClassification:()=>cc,AutoModelForCTC:()=>o1,AutoModelForCausalLM:()=>Dt,AutoModelForDepthEstimation:()=>dc,AutoModelForDocumentQuestionAnswering:()=>gc,AutoModelForImageClassification:()=>n1,AutoModelForImageFeatureExtraction:()=>g1,AutoModelForImageMatting:()=>c1,AutoModelForImageSegmentation:()=>nc,AutoModelForImageToImage:()=>uc,AutoModelForMaskGeneration:()=>oc,AutoModelForMaskedLM:()=>T1,AutoModelForNormalEstimation:()=>fc,AutoModelForObjectDetection:()=>Rt,AutoModelForPoseEstimation:()=>jn,AutoModelForQuestionAnswering:()=>Di,AutoModelForSemanticSegmentation:()=>qr,AutoModelForSeq2SeqLM:()=>Vn,AutoModelForSequenceClassification:()=>ac,AutoModelForSpeechSeq2Seq:()=>i1,AutoModelForTextToSpectrogram:()=>sc,AutoModelForTextToWaveform:()=>ic,AutoModelForTokenClassification:()=>s1,AutoModelForUniversalSegmentation:()=>St,AutoModelForVision2Seq:()=>P1,AutoModelForXVector:()=>l1,AutoModelForZeroShotObjectDetection:()=>Ji,BartForConditionalGeneration:()=>ir,BartForSequenceClassification:()=>rt,BartModel:()=>pa,BartPretrainedModel:()=>Ya,BaseModelOutput:()=>Ee,BeitForImageClassification:()=>T,BeitModel:()=>E,BeitPreTrainedModel:()=>I,BertForMaskedLM:()=>J,BertForQuestionAnswering:()=>$,BertForSequenceClassification:()=>Oe,BertForTokenClassification:()=>gA,BertModel:()=>Ye,BertPreTrainedModel:()=>Pe,BlenderbotForConditionalGeneration:()=>Cr,BlenderbotModel:()=>Qr,BlenderbotPreTrainedModel:()=>Rr,BlenderbotSmallForConditionalGeneration:()=>Ai,BlenderbotSmallModel:()=>xr,BlenderbotSmallPreTrainedModel:()=>Ut,BloomForCausalLM:()=>Pn,BloomModel:()=>fr,BloomPreTrainedModel:()=>Va,CLIPModel:()=>Re,CLIPPreTrainedModel:()=>Rs,CLIPSegForImageSegmentation:()=>Ja,CLIPSegModel:()=>He,CLIPSegPreTrainedModel:()=>ai,CLIPTextModel:()=>pn,CLIPTextModelWithProjection:()=>Ni,CLIPVisionModel:()=>Ba,CLIPVisionModelWithProjection:()=>za,CamembertForMaskedLM:()=>bs,CamembertForQuestionAnswering:()=>ea,CamembertForSequenceClassification:()=>Is,CamembertForTokenClassification:()=>Ts,CamembertModel:()=>Qs,CamembertPreTrainedModel:()=>Za,CausalLMOutput:()=>Un,CausalLMOutputWithPast:()=>hc,ChineseCLIPModel:()=>l0,ChineseCLIPPreTrainedModel:()=>o0,ClapAudioModelWithProjection:()=>pl,ClapModel:()=>Eo,ClapPreTrainedModel:()=>X0,ClapTextModelWithProjection:()=>fl,CodeGenForCausalLM:()=>ps,CodeGenModel:()=>aa,CodeGenPreTrainedModel:()=>fs,CohereForCausalLM:()=>Vi,CohereModel:()=>ms,CoherePreTrainedModel:()=>yn,ConvBertForMaskedLM:()=>Aa,ConvBertForQuestionAnswering:()=>La,ConvBertForSequenceClassification:()=>It,ConvBertForTokenClassification:()=>Ka,ConvBertModel:()=>Ar,ConvBertPreTrainedModel:()=>Sr,ConvNextForImageClassification:()=>w2,ConvNextModel:()=>I2,ConvNextPreTrainedModel:()=>fo,ConvNextV2ForImageClassification:()=>x2,ConvNextV2Model:()=>k2,ConvNextV2PreTrainedModel:()=>po,DPTForDepthEstimation:()=>os,DPTModel:()=>ns,DPTPreTrainedModel:()=>As,DebertaForMaskedLM:()=>Dr,DebertaForQuestionAnswering:()=>Xt,DebertaForSequenceClassification:()=>Hr,DebertaForTokenClassification:()=>cs,DebertaModel:()=>Ma,DebertaPreTrainedModel:()=>xt,DebertaV2ForMaskedLM:()=>di,DebertaV2ForQuestionAnswering:()=>fi,DebertaV2ForSequenceClassification:()=>qs,DebertaV2ForTokenClassification:()=>Js,DebertaV2Model:()=>gs,DebertaV2PreTrainedModel:()=>Xa,DecisionTransformerModel:()=>Dl,DecisionTransformerPreTrainedModel:()=>Gl,DeiTForImageClassification:()=>Nt,DeiTModel:()=>ft,DeiTPreTrainedModel:()=>at,DepthAnythingForDepthEstimation:()=>Ei,DepthAnythingPreTrainedModel:()=>Us,DepthProForDepthEstimation:()=>M0,DepthProPreTrainedModel:()=>E0,DetrForObjectDetection:()=>AA,DetrForSegmentation:()=>cA,DetrModel:()=>Z,DetrObjectDetectionOutput:()=>hA,DetrPreTrainedModel:()=>O,DetrSegmentationOutput:()=>vA,Dinov2ForImageClassification:()=>v2,Dinov2Model:()=>B2,Dinov2PreTrainedModel:()=>ho,Dinov2WithRegistersForImageClassification:()=>E2,Dinov2WithRegistersModel:()=>y2,Dinov2WithRegistersPreTrainedModel:()=>mo,DistilBertForMaskedLM:()=>ws,DistilBertForQuestionAnswering:()=>qa,DistilBertForSequenceClassification:()=>us,DistilBertForTokenClassification:()=>_s,DistilBertModel:()=>ts,DistilBertPreTrainedModel:()=>Ur,DonutSwinModel:()=>b2,DonutSwinPreTrainedModel:()=>C2,EfficientNetForImageClassification:()=>wl,EfficientNetModel:()=>Il,EfficientNetPreTrainedModel:()=>Qo,ElectraForMaskedLM:()=>$e,ElectraForQuestionAnswering:()=>Ra,ElectraForSequenceClassification:()=>Ne,ElectraForTokenClassification:()=>Zt,ElectraModel:()=>Xe,ElectraPreTrainedModel:()=>wa,EsmForMaskedLM:()=>zs,EsmForSequenceClassification:()=>pi,EsmForTokenClassification:()=>Fs,EsmModel:()=>Ps,EsmPreTrainedModel:()=>kr,ExaoneForCausalLM:()=>Ii,ExaoneModel:()=>vr,ExaonePreTrainedModel:()=>Hi,FalconForCausalLM:()=>dl,FalconModel:()=>yo,FalconPreTrainedModel:()=>Z0,FastViTForImageClassification:()=>js,FastViTModel:()=>Ln,FastViTPreTrainedModel:()=>Zi,Florence2ForConditionalGeneration:()=>cn,Florence2PreTrainedModel:()=>as,GLPNForDepthEstimation:()=>m2,GLPNModel:()=>h2,GLPNPreTrainedModel:()=>uo,GPT2LMHeadModel:()=>ds,GPT2Model:()=>bi,GPT2PreTrainedModel:()=>mn,GPTBigCodeForCausalLM:()=>ra,GPTBigCodeModel:()=>m0,GPTBigCodePreTrainedModel:()=>ss,GPTJForCausalLM:()=>bn,GPTJModel:()=>Ht,GPTJPreTrainedModel:()=>bt,GPTNeoForCausalLM:()=>f0,GPTNeoModel:()=>d0,GPTNeoPreTrainedModel:()=>Li,GPTNeoXForCausalLM:()=>h0,GPTNeoXModel:()=>p0,GPTNeoXPreTrainedModel:()=>Or,Gemma2ForCausalLM:()=>ki,Gemma2Model:()=>Fa,Gemma2PreTrainedModel:()=>wi,GemmaForCausalLM:()=>ji,GemmaModel:()=>En,GemmaPreTrainedModel:()=>Lr,GraniteForCausalLM:()=>vn,GraniteModel:()=>b0,GranitePreTrainedModel:()=>Wi,GroundingDinoForObjectDetection:()=>G2,GroundingDinoPreTrainedModel:()=>M2,GroupViTModel:()=>na,GroupViTPreTrainedModel:()=>yi,HieraForImageClassification:()=>pr,HieraModel:()=>er,HieraPreTrainedModel:()=>Kt,HubertForCTC:()=>_2,HubertForSequenceClassification:()=>$2,HubertModel:()=>J2,HubertPreTrainedModel:()=>I1,IJepaForImageClassification:()=>ar,IJepaModel:()=>Zr,IJepaPreTrainedModel:()=>Bi,Idefics3ForConditionalGeneration:()=>dn,Idefics3PreTrainedModel:()=>un,ImageMattingOutput:()=>z1,JAISLMHeadModel:()=>u0,JAISModel:()=>g0,JAISPreTrainedModel:()=>Cn,JinaCLIPModel:()=>ri,JinaCLIPPreTrainedModel:()=>vs,JinaCLIPTextModel:()=>c0,JinaCLIPVisionModel:()=>Oi,LlamaForCausalLM:()=>C0,LlamaModel:()=>In,LlamaPreTrainedModel:()=>Yi,LlavaForConditionalGeneration:()=>mi,LlavaOnevisionForConditionalGeneration:()=>xa,LlavaPreTrainedModel:()=>hi,LongT5ForConditionalGeneration:()=>jt,LongT5Model:()=>sr,LongT5PreTrainedModel:()=>cr,M2M100ForConditionalGeneration:()=>S2,M2M100Model:()=>F2,M2M100PreTrainedModel:()=>bo,MBartForCausalLM:()=>Nr,MBartForConditionalGeneration:()=>Je,MBartForSequenceClassification:()=>ha,MBartModel:()=>ge,MBartPreTrainedModel:()=>dr,MPNetForMaskedLM:()=>Bs,MPNetForQuestionAnswering:()=>Os,MPNetForSequenceClassification:()=>Ns,MPNetForTokenClassification:()=>rs,MPNetModel:()=>$s,MPNetPreTrainedModel:()=>ka,MT5ForConditionalGeneration:()=>Jt,MT5Model:()=>Ke,MT5PreTrainedModel:()=>je,MarianMTModel:()=>z2,MarianModel:()=>P2,MarianPreTrainedModel:()=>Co,MaskFormerForInstanceSegmentation:()=>p2,MaskFormerModel:()=>f2,MaskFormerPreTrainedModel:()=>Hn,MaskedLMOutput:()=>Sa,MgpstrForSceneTextRecognition:()=>Fl,MgpstrModelOutput:()=>Pl,MgpstrPreTrainedModel:()=>zl,MistralForCausalLM:()=>vo,MistralModel:()=>Bo,MistralPreTrainedModel:()=>U0,MobileBertForMaskedLM:()=>xs,MobileBertForQuestionAnswering:()=>zt,MobileBertForSequenceClassification:()=>wt,MobileBertModel:()=>Ss,MobileBertPreTrainedModel:()=>ks,MobileLLMForCausalLM:()=>si,MobileLLMModel:()=>sa,MobileLLMPreTrainedModel:()=>wn,MobileNetV1ForImageClassification:()=>xl,MobileNetV1Model:()=>kl,MobileNetV1PreTrainedModel:()=>zo,MobileNetV2ForImageClassification:()=>vl,MobileNetV2Model:()=>Bl,MobileNetV2PreTrainedModel:()=>Fo,MobileNetV3ForImageClassification:()=>El,MobileNetV3Model:()=>yl,MobileNetV3PreTrainedModel:()=>So,MobileNetV4ForImageClassification:()=>Oo,MobileNetV4Model:()=>Ml,MobileNetV4PreTrainedModel:()=>No,MobileViTForImageClassification:()=>t,MobileViTModel:()=>e,MobileViTPreTrainedModel:()=>lt,MobileViTV2ForImageClassification:()=>s,MobileViTV2Model:()=>a,MobileViTV2PreTrainedModel:()=>r,ModelOutput:()=>fe,ModernBertForMaskedLM:()=>_A,ModernBertForSequenceClassification:()=>he,ModernBertForTokenClassification:()=>ce,ModernBertModel:()=>OA,ModernBertPreTrainedModel:()=>IA,Moondream1ForConditionalGeneration:()=>Ys,MoonshineForConditionalGeneration:()=>Pa,MoonshineModel:()=>R0,MoonshinePreTrainedModel:()=>ln,MptForCausalLM:()=>k0,MptModel:()=>ni,MptPreTrainedModel:()=>ys,MultiModalityCausalLM:()=>Tl,MultiModalityPreTrainedModel:()=>Ql,MusicgenForCausalLM:()=>B1,MusicgenForConditionalGeneration:()=>Po,MusicgenModel:()=>x1,MusicgenPreTrainedModel:()=>To,NomicBertModel:()=>Qe,NomicBertPreTrainedModel:()=>ye,OPTForCausalLM:()=>x0,OPTModel:()=>Fn,OPTPreTrainedModel:()=>zn,Olmo2ForCausalLM:()=>is,Olmo2Model:()=>Ri,Olmo2PreTrainedModel:()=>Bn,OlmoForCausalLM:()=>xn,OlmoModel:()=>kn,OlmoPreTrainedModel:()=>hs,OpenELMForCausalLM:()=>Gn,OpenELMModel:()=>_a,OpenELMPreTrainedModel:()=>Mn,OwlViTForObjectDetection:()=>c,OwlViTModel:()=>o,OwlViTPreTrainedModel:()=>i,Owlv2ForObjectDetection:()=>p,Owlv2Model:()=>m,Owlv2PreTrainedModel:()=>f,PaliGemmaForConditionalGeneration:()=>Hs,PaliGemmaPreTrainedModel:()=>gn,PatchTSMixerForPrediction:()=>Ll,PatchTSMixerModel:()=>Ol,PatchTSMixerPreTrainedModel:()=>Yo,PatchTSTForPrediction:()=>Nl,PatchTSTModel:()=>Sl,PatchTSTPreTrainedModel:()=>Lo,Phi3ForCausalLM:()=>Ki,Phi3Model:()=>Tn,Phi3PreTrainedModel:()=>ia,Phi3VForCausalLM:()=>De,Phi3VPreTrainedModel:()=>fn,PhiForCausalLM:()=>xi,PhiModel:()=>ma,PhiPreTrainedModel:()=>Qn,PreTrainedModel:()=>zA,PretrainedMixin:()=>br,PvtForImageClassification:()=>Vs,PvtModel:()=>Ws,PvtPreTrainedModel:()=>Cs,PyAnnoteForAudioFrameClassification:()=>H2,PyAnnoteModel:()=>Y2,PyAnnotePreTrainedModel:()=>Rn,QuestionAnsweringModelOutput:()=>ja,Qwen2ForCausalLM:()=>ii,Qwen2Model:()=>Dn,Qwen2PreTrainedModel:()=>Ui,Qwen2VLForConditionalGeneration:()=>w0,Qwen2VLPreTrainedModel:()=>I0,RTDetrForObjectDetection:()=>KA,RTDetrModel:()=>WA,RTDetrObjectDetectionOutput:()=>re,RTDetrPreTrainedModel:()=>QA,ResNetForImageClassification:()=>Er,ResNetModel:()=>yr,ResNetPreTrainedModel:()=>hr,RoFormerForMaskedLM:()=>Tt,RoFormerForQuestionAnswering:()=>$t,RoFormerForSequenceClassification:()=>dt,RoFormerForTokenClassification:()=>Ct,RoFormerModel:()=>Mt,RoFormerPreTrainedModel:()=>Te,RobertaForMaskedLM:()=>Ga,RobertaForQuestionAnswering:()=>ta,RobertaForSequenceClassification:()=>zi,RobertaForTokenClassification:()=>Gt,RobertaModel:()=>Pi,RobertaPreTrainedModel:()=>Ha,SamImageSegmentationOutput:()=>T2,SamModel:()=>Q2,SamPreTrainedModel:()=>D2,SapiensForDepthEstimation:()=>Gi,SapiensForNormalEstimation:()=>Yn,SapiensForSemanticSegmentation:()=>Mi,SapiensPreTrainedModel:()=>Ms,SegformerForImageClassification:()=>hl,SegformerForSemanticSegmentation:()=>ml,SegformerModel:()=>k1,SegformerPreTrainedModel:()=>q0,Seq2SeqLMOutput:()=>pc,SequenceClassifierOutput:()=>Pt,SiglipModel:()=>Ci,SiglipPreTrainedModel:()=>ti,SiglipTextModel:()=>hn,SiglipVisionModel:()=>Pr,SpeechT5ForSpeechToText:()=>nl,SpeechT5ForTextToSpeech:()=>ol,SpeechT5HifiGan:()=>ll,SpeechT5Model:()=>w1,SpeechT5PreTrainedModel:()=>j0,SqueezeBertForMaskedLM:()=>BA,SqueezeBertForQuestionAnswering:()=>VA,SqueezeBertForSequenceClassification:()=>NA,SqueezeBertModel:()=>_,SqueezeBertPreTrainedModel:()=>te,StableLmForCausalLM:()=>bl,StableLmModel:()=>Cl,StableLmPreTrainedModel:()=>Do,Starcoder2ForCausalLM:()=>ul,Starcoder2Model:()=>gl,Starcoder2PreTrainedModel:()=>K0,StyleTextToSpeech2Model:()=>il,StyleTextToSpeech2PreTrainedModel:()=>sl,Swin2SRForImageSuperResolution:()=>va,Swin2SRModel:()=>la,Swin2SRPreTrainedModel:()=>Xr,SwinForImageClassification:()=>oa,SwinModel:()=>Wr,SwinPreTrainedModel:()=>zr,T5ForConditionalGeneration:()=>Vt,T5Model:()=>Yt,T5PreTrainedModel:()=>Ce,TableTransformerForObjectDetection:()=>ze,TableTransformerModel:()=>Me,TableTransformerObjectDetectionOutput:()=>At,TableTransformerPreTrainedModel:()=>le,TokenClassifierOutput:()=>Qa,TrOCRForCausalLM:()=>D0,TrOCRPreTrainedModel:()=>cl,UniSpeechForCTC:()=>V2,UniSpeechForSequenceClassification:()=>j2,UniSpeechModel:()=>wo,UniSpeechPreTrainedModel:()=>W0,UniSpeechSatForAudioFrameClassification:()=>xo,UniSpeechSatForCTC:()=>ko,UniSpeechSatForSequenceClassification:()=>K2,UniSpeechSatModel:()=>U2,UniSpeechSatPreTrainedModel:()=>G0,ViTForImageClassification:()=>Sn,ViTMAEModel:()=>Ca,ViTMAEPreTrainedModel:()=>Nn,ViTMSNForImageClassification:()=>oi,ViTMSNModel:()=>v0,ViTMSNPreTrainedModel:()=>On,ViTModel:()=>$a,ViTPreTrainedModel:()=>Es,VisionEncoderDecoderModel:()=>rr,VitMatteForImageMatting:()=>li,VitMattePreTrainedModel:()=>y0,VitPoseForPoseEstimation:()=>B0,VitPosePreTrainedModel:()=>vi,VitsModel:()=>Go,VitsModelOutput:()=>F1,VitsPreTrainedModel:()=>Mo,Wav2Vec2BertForCTC:()=>X2,Wav2Vec2BertForSequenceClassification:()=>q2,Wav2Vec2BertModel:()=>Z2,Wav2Vec2BertPreTrainedModel:()=>V0,Wav2Vec2ForAudioFrameClassification:()=>L2,Wav2Vec2ForCTC:()=>O2,Wav2Vec2ForSequenceClassification:()=>Io,Wav2Vec2Model:()=>N2,Wav2Vec2PreTrainedModel:()=>ca,WavLMForAudioFrameClassification:()=>al,WavLMForCTC:()=>el,WavLMForSequenceClassification:()=>tl,WavLMForXVector:()=>rl,WavLMModel:()=>Al,WavLMPreTrainedModel:()=>Wn,WeSpeakerResNetModel:()=>W2,WeSpeakerResNetPreTrainedModel:()=>R2,WhisperForConditionalGeneration:()=>n0,WhisperModel:()=>i0,WhisperPreTrainedModel:()=>on,XLMForQuestionAnswering:()=>ei,XLMForSequenceClassification:()=>r0,XLMForTokenClassification:()=>a0,XLMModel:()=>e0,XLMPreTrainedModel:()=>Wa,XLMRobertaForMaskedLM:()=>Fi,XLMRobertaForQuestionAnswering:()=>qe,XLMRobertaForSequenceClassification:()=>Ta,XLMRobertaForTokenClassification:()=>Kr,XLMRobertaModel:()=>s0,XLMRobertaPreTrainedModel:()=>Ls,XLMWithLMHeadModel:()=>t0,XVectorOutput:()=>Jo,YolosForObjectDetection:()=>Xi,YolosModel:()=>ci,YolosObjectDetectionOutput:()=>qi,YolosPreTrainedModel:()=>Gs});var k=d("./src/configs.js"),z=d("./src/backends/onnx.js"),V=d("./src/utils/dtypes.js"),L=d("./src/utils/generic.js"),U=d("./src/utils/core.js"),q=d("./src/utils/hub.js"),W=d("./src/utils/constants.js"),S=d("./src/generation/logits_process.js"),X=d("./src/generation/configuration_utils.js"),R=d("./src/utils/tensor.js"),aA=d("./src/utils/image.js"),CA=d("./src/utils/maths.js"),kA=d("./src/generation/stopping_criteria.js"),EA=d("./src/generation/logits_sampler.js"),sA=d("./src/env.js"),nA=d("./src/models/whisper/generation_whisper.js"),xA=d("./src/models/whisper/common_whisper.js");const g=0,b=1,A=2,l=3,M=4,uA=5,D=6,P=7,RA=8,SA=9,YA=new Map,qA=new Map,ee=new Map;async function xe(K,j,yA){return Object.fromEntries(await Promise.all(Object.keys(j).map(async Ae=>{const{buffer:se,session_options:ue,session_config:Fe}=await async function(Ze,We,_e){const ut=_e.config?.["transformers.js_config"]??{};let ct=_e.device??ut.device;ct&&typeof ct!="string"&&(ct.hasOwnProperty(We)?ct=ct[We]:(console.warn(`device not specified for "${We}". Using the default device.`),ct=null));const Ft=ct??(sA.apis.IS_NODE_ENV?"cpu":"wasm"),Qt=(0,z.deviceToExecutionProviders)(Ft);let or=_e.dtype??ut.dtype;if(typeof or!="string"&&(or&&or.hasOwnProperty(We)?or=or[We]:(or=V.DEFAULT_DEVICE_DTYPE_MAPPING[Ft]??V.DATA_TYPES.fp32,console.warn(`dtype not specified for "${We}". Using the default dtype (${or}) for this device (${Ft}).`))),or===V.DATA_TYPES.auto){let _t=ut.dtype;typeof _t!="string"&&(_t=_t[We]),or=_t&&_t!==V.DATA_TYPES.auto&&V.DATA_TYPES.hasOwnProperty(_t)?_t:V.DEFAULT_DEVICE_DTYPE_MAPPING[Ft]??V.DATA_TYPES.fp32}const Bt=or;if(!V.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(Bt))throw new Error(`Invalid dtype: ${Bt}. Should be one of: ${Object.keys(V.DATA_TYPES).join(", ")}`);if(Bt===V.DATA_TYPES.fp16&&Ft==="webgpu"&&!await(0,V.isWebGpuFp16Supported)())throw new Error(`The device (${Ft}) does not support fp16.`);const Ot=ut.kv_cache_dtype?typeof ut.kv_cache_dtype=="string"?ut.kv_cache_dtype:ut.kv_cache_dtype[Bt]??"float32":void 0;if(Ot&&!["float32","float16"].includes(Ot))throw new Error(`Invalid kv_cache_dtype: ${Ot}. Should be one of: float32, float16`);const Ir={dtype:Bt,kv_cache_dtype:Ot},Mr=V.DEFAULT_DTYPE_SUFFIX_MAPPING[Bt],Vr=`${_e.subfolder??""}/${We}${Mr}.onnx`,Jr={..._e.session_options};Jr.executionProviders??=Qt;const Na=ut.free_dimension_overrides;Na?Jr.freeDimensionOverrides??=Na:Ft.startsWith("webnn")&&!Jr.freeDimensionOverrides&&console.warn('WebNN does not currently support dynamic shapes and requires `free_dimension_overrides` to be set in config.json as a field within "transformers.js_config". When `free_dimension_overrides` is not set, you may experience significant performance degradation.');const _r=(0,q.getModelFile)(Ze,Vr,!0,_e),Yr=_e.use_external_data_format??ut.use_external_data_format;let ba=[];if(Yr&&(Yr===!0||typeof Yr=="object"&&Yr.hasOwnProperty(We)&&Yr[We]===!0)){if(sA.apis.IS_NODE_ENV)throw new Error("External data format is not yet supported in Node.js");const _t=`${We}${Mr}.onnx_data`,Ua=`${_e.subfolder??""}/${_t}`;ba.push(new Promise(async(_i,_0)=>{const Kn=await(0,q.getModelFile)(Ze,Ua,!0,_e);_i({path:_t,data:Kn})}))}else Jr.externalData!==void 0&&(ba=Jr.externalData.map(async _t=>{if(typeof _t.data=="string"){const Ua=await(0,q.getModelFile)(Ze,_t.data,!0,_e);return{..._t,data:Ua}}return _t}));if(ba.length>0&&(Jr.externalData=await Promise.all(ba)),Ft==="webgpu"){const _t=(0,k.getKeyValueShapes)(_e.config,{prefix:"present"});if(Object.keys(_t).length>0&&!(0,z.isONNXProxy)()){const Ua={};for(const _i in _t)Ua[_i]="gpu-buffer";Jr.preferredOutputLocation=Ua}}return{buffer:await _r,session_options:Jr,session_config:Ir}}(K,j[Ae],yA);return[Ae,await(0,z.createInferenceSession)(se,ue,Fe)]})))}async function Ge(K,j,yA){return Object.fromEntries(await Promise.all(Object.keys(j).map(async Ae=>[Ae,await(0,q.getModelJSON)(K,j[Ae],!1,yA)])))}async function GA(K,j){const yA=function(Ae,se){const ue=Object.create(null),Fe=[];for(const _e of Ae.inputNames){const ut=se[_e];ut instanceof R.Tensor?ue[_e]=(0,z.isONNXProxy)()?ut.clone():ut:Fe.push(_e)}if(Fe.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${Fe.join(", ")}.`);const Ze=Object.keys(se).length,We=Ae.inputNames.length;if(Ze>We){let _e=Object.keys(se).filter(ut=>!Ae.inputNames.includes(ut));console.warn(`WARNING: Too many inputs were provided (${Ze} > ${We}). The following inputs will be ignored: "${_e.join(", ")}".`)}return ue}(K,j);try{const Ae=Object.fromEntries(Object.entries(yA).map(([ue,Fe])=>[ue,Fe.ort_tensor]));let se=await K.run(Ae);return se=bA(se),se}catch(Ae){const se=Object.fromEntries(Object.entries(yA).map(([ue,{type:Fe,dims:Ze,data:We}])=>[ue,{type:Fe,dims:Ze,data:We}]));throw console.error(`An error occurred during model execution: "${Ae}".`),console.error("Inputs given to model:",se),Ae}}function bA(K){for(let j in K)(0,z.isONNXTensor)(K[j])?K[j]=new R.Tensor(K[j]):typeof K[j]=="object"&&bA(K[j]);return K}function PA(K){if(K instanceof R.Tensor)return K;if(K.length===0)throw Error("items must be non-empty");if(Array.isArray(K[0])){if(K.some(j=>j.length!==K[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new R.Tensor("int64",BigInt64Array.from(K.flat().map(j=>BigInt(j))),[K.length,K[0].length])}return new R.Tensor("int64",BigInt64Array.from(K.map(j=>BigInt(j))),[1,K.length])}function UA(K){return new R.Tensor("bool",[K],[1])}async function TA(K,j){let{encoder_outputs:yA,input_ids:Ae,decoder_input_ids:se,...ue}=j;if(!yA){const Fe=(0,U.pick)(j,K.sessions.model.inputNames);yA=(await ke(K,Fe)).last_hidden_state}return ue.input_ids=se,ue.encoder_hidden_states=yA,K.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(ue.encoder_attention_mask=j.attention_mask),await ae(K,ue,!0)}async function ke(K,j){const yA=K.sessions.model,Ae=(0,U.pick)(j,yA.inputNames);if(yA.inputNames.includes("inputs_embeds")&&!Ae.inputs_embeds){if(!j.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");Ae.inputs_embeds=await K.encode_text({input_ids:j.input_ids})}if(yA.inputNames.includes("token_type_ids")&&!Ae.token_type_ids){if(!Ae.input_ids)throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");Ae.token_type_ids=(0,R.zeros_like)(Ae.input_ids)}if(yA.inputNames.includes("pixel_mask")&&!Ae.pixel_mask){if(!Ae.pixel_values)throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");const se=Ae.pixel_values.dims;Ae.pixel_mask=(0,R.ones)([se[0],se[2],se[3]])}return await GA(yA,Ae)}async function ae(K,j,yA=!1){const Ae=K.sessions[yA?"decoder_model_merged":"model"],{past_key_values:se,...ue}=j;if(Ae.inputNames.includes("use_cache_branch")&&(ue.use_cache_branch=UA(!!se)),Ae.inputNames.includes("position_ids")&&ue.attention_mask&&!ue.position_ids){const Ze=K.config.model_type==="paligemma"?1:0;ue.position_ids=function(We,_e=null,ut=0){const{input_ids:ct,inputs_embeds:Ft,attention_mask:Qt}=We,{data:or,dims:Bt}=ie(Qt,ut);let Ot=new R.Tensor("int64",or,Bt);if(_e){const Ir=-(ct??Ft).dims.at(1);Ot=Ot.slice(null,[Ir,null])}return Ot}(ue,se,Ze)}K.addPastKeyValues(ue,se);const Fe=(0,U.pick)(ue,Ae.inputNames);return await GA(Ae,Fe)}function oe({image_token_id:K,inputs_embeds:j,image_features:yA,input_ids:Ae,attention_mask:se}){const ue=Ae.tolist().map(_e=>_e.reduce((ut,ct,Ft)=>(ct==K&&ut.push(Ft),ut),[])),Fe=ue.reduce((_e,ut)=>_e+ut.length,0),Ze=yA.dims[0];if(Fe!==Ze)throw new Error(`Image features and image tokens do not match: tokens: ${Fe}, features ${Ze}`);let We=0;for(let _e=0;_e<ue.length;++_e){const ut=ue[_e],ct=j[_e];for(let Ft=0;Ft<ut.length;++Ft)ct[ut[Ft]].data.set(yA[We++].data)}return{inputs_embeds:j,attention_mask:se}}async function ve(K,{input_ids:j=null,attention_mask:yA=null,pixel_values:Ae=null,position_ids:se=null,inputs_embeds:ue=null,past_key_values:Fe=null,generation_config:Ze=null,logits_processor:We=null,..._e}){if(!ue){if(ue=await K.encode_text({input_ids:j,..._e}),Ae&&j.dims[1]!==1){const ut=await K.encode_image({pixel_values:Ae,..._e});({inputs_embeds:ue,attention_mask:yA}=K._merge_input_ids_with_image_features({image_features:ut,inputs_embeds:ue,input_ids:j,attention_mask:yA}))}else if(Fe&&Ae&&j.dims[1]===1){const ut=j.dims[1],ct=Object.values(Fe)[0].dims.at(-2);yA=(0,R.cat)([(0,R.ones)([j.dims[0],ct]),yA.slice(null,[yA.dims[1]-ut,yA.dims[1]])],1)}}if(!se&&K.config.model_type==="qwen2_vl"){const{image_grid_thw:ut,video_grid_thw:ct}=_e;[se]=K.get_rope_index(j,ut,ct,yA)}return await ae(K,{inputs_embeds:ue,past_key_values:Fe,attention_mask:yA,position_ids:se,generation_config:Ze,logits_processor:We},!0)}function ie(K,j=0){const[yA,Ae]=K.dims,se=K.data,ue=new BigInt64Array(se.length);for(let Fe=0;Fe<yA;++Fe){const Ze=Fe*Ae;let We=BigInt(j);for(let _e=0;_e<Ae;++_e){const ut=Ze+_e;se[ut]===0n?ue[ut]=BigInt(1):(ue[ut]=We,We+=se[ut])}}return{data:ue,dims:K.dims}}function FA(K,j,yA,Ae){if(yA.past_key_values){const se=Object.values(yA.past_key_values)[0].dims.at(-2),{input_ids:ue,attention_mask:Fe}=yA;if(!(Fe&&Fe.dims[1]>ue.dims[1])){if(se<ue.dims[1])yA.input_ids=ue.slice(null,[se,null]);else if(K.config.image_token_index!=null&&ue.data.some(Ze=>Ze==K.config.image_token_index)){const Ze=K.config.num_image_tokens;if(!Ze)throw new Error("`num_image_tokens` is missing in the model configuration.");const We=ue.dims[1]-(se-Ze);yA.input_ids=ue.slice(null,[-We,null]),yA.attention_mask=(0,R.ones)([1,se+We])}}}return yA}function XA(K,j,yA,Ae){return yA.past_key_values&&(j=j.map(se=>[se.at(-1)])),{...yA,decoder_input_ids:PA(j)}}function me(K,...j){return K.config.is_encoder_decoder?XA(K,...j):FA(K,...j)}function be(K,j,yA,Ae){const se=!!yA.past_key_values;return Ae.guidance_scale!==null&&Ae.guidance_scale>1&&(se?yA.input_ids=(0,R.cat)([yA.input_ids,yA.input_ids],0):(yA.input_ids=(0,R.cat)([yA.input_ids,(0,R.full_like)(yA.input_ids,BigInt(Ae.pad_token_id))],0),yA.attention_mask=(0,R.cat)([yA.attention_mask,(0,R.full_like)(yA.attention_mask,0n)],0))),!se&&yA.pixel_values||(yA.pixel_values=(0,R.full)([0,0,3,384,384],1)),se&&(yA.images_seq_mask=new R.Tensor("bool",new Array(1).fill(!0).fill(!1,0,1),[1,1]),yA.images_emb_mask=new R.Tensor("bool",new Array(0).fill(!1),[1,1,0])),yA}class zA extends L.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(j,yA,Ae){super(),this.config=j,this.sessions=yA,this.configs=Ae;const se=ee.get(this.constructor),ue=YA.get(se);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,ue){case M:this.can_generate=!0,this._forward=ae,this._prepare_inputs_for_generation=FA;break;case A:case l:case P:this.can_generate=!0,this._forward=TA,this._prepare_inputs_for_generation=XA;break;case b:this._forward=TA;break;case D:this.can_generate=!0,this._forward=ve,this._prepare_inputs_for_generation=me;break;case SA:this.can_generate=!0,this._prepare_inputs_for_generation=me;break;case RA:this.can_generate=!0,this._prepare_inputs_for_generation=be;break;default:this._forward=ke}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const j=[];for(const yA of Object.values(this.sessions))yA?.handler?.dispose&&j.push(yA.handler.dispose());return await Promise.all(j)}static async from_pretrained(j,{progress_callback:yA=null,config:Ae=null,cache_dir:se=null,local_files_only:ue=!1,revision:Fe="main",model_file_name:Ze=null,subfolder:We="onnx",device:_e=null,dtype:ut=null,use_external_data_format:ct=null,session_options:Ft={}}={}){let Qt={progress_callback:yA,config:Ae,cache_dir:se,local_files_only:ue,revision:Fe,model_file_name:Ze,subfolder:We,device:_e,dtype:ut,use_external_data_format:ct,session_options:Ft};const or=ee.get(this),Bt=YA.get(or);let Ot;if(Ae=Qt.config=await k.AutoConfig.from_pretrained(j,Qt),Bt===M)Ot=await Promise.all([xe(j,{model:Qt.model_file_name??"model"},Qt),Ge(j,{generation_config:"generation_config.json"},Qt)]);else if(Bt===A||Bt===l)Ot=await Promise.all([xe(j,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Qt),Ge(j,{generation_config:"generation_config.json"},Qt)]);else if(Bt===uA)Ot=await Promise.all([xe(j,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},Qt)]);else if(Bt===b)Ot=await Promise.all([xe(j,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Qt)]);else if(Bt===D){const Ir={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};Ae.is_encoder_decoder&&(Ir.model="encoder_model"),Ot=await Promise.all([xe(j,Ir,Qt),Ge(j,{generation_config:"generation_config.json"},Qt)])}else if(Bt===P)Ot=await Promise.all([xe(j,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},Qt),Ge(j,{generation_config:"generation_config.json"},Qt)]);else if(Bt===RA)Ot=await Promise.all([xe(j,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},Qt),Ge(j,{generation_config:"generation_config.json"},Qt)]);else if(Bt===SA)Ot=await Promise.all([xe(j,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},Qt),Ge(j,{generation_config:"generation_config.json"},Qt)]);else{if(Bt!==g){const Ir=or??Ae?.model_type;Ir!=="custom"&&console.warn(`Model type for '${Ir}' not found, assuming encoder-only architecture. Please report this at ${W.GITHUB_ISSUE_URL}.`)}Ot=await Promise.all([xe(j,{model:Qt.model_file_name??"model"},Qt)])}return new this(Ae,...Ot)}async _call(j){return await this.forward(j)}async forward(j){return await this._forward(this,j)}get generation_config(){return this.configs?.generation_config??null}_get_logits_warper(j){const yA=new S.LogitsProcessorList;return j.temperature!==null&&j.temperature!==1&&yA.push(new S.TemperatureLogitsWarper(j.temperature)),j.top_k!==null&&j.top_k!==0&&yA.push(new S.TopKLogitsWarper(j.top_k)),j.top_p!==null&&j.top_p<1&&yA.push(new S.TopPLogitsWarper(j.top_p)),yA}_get_logits_processor(j,yA,Ae=null){const se=new S.LogitsProcessorList;if(j.repetition_penalty!==null&&j.repetition_penalty!==1&&se.push(new S.RepetitionPenaltyLogitsProcessor(j.repetition_penalty)),j.no_repeat_ngram_size!==null&&j.no_repeat_ngram_size>0&&se.push(new S.NoRepeatNGramLogitsProcessor(j.no_repeat_ngram_size)),j.bad_words_ids!==null&&se.push(new S.NoBadWordsLogitsProcessor(j.bad_words_ids,j.eos_token_id)),j.min_length!==null&&j.eos_token_id!==null&&j.min_length>0&&se.push(new S.MinLengthLogitsProcessor(j.min_length,j.eos_token_id)),j.min_new_tokens!==null&&j.eos_token_id!==null&&j.min_new_tokens>0&&se.push(new S.MinNewTokensLengthLogitsProcessor(yA,j.min_new_tokens,j.eos_token_id)),j.forced_bos_token_id!==null&&se.push(new S.ForcedBOSTokenLogitsProcessor(j.forced_bos_token_id)),j.forced_eos_token_id!==null&&se.push(new S.ForcedEOSTokenLogitsProcessor(j.max_length,j.forced_eos_token_id)),j.begin_suppress_tokens!==null){const ue=yA>1||j.forced_bos_token_id===null?yA:yA+1;se.push(new S.SuppressTokensAtBeginLogitsProcessor(j.begin_suppress_tokens,ue))}return j.guidance_scale!==null&&j.guidance_scale>1&&se.push(new S.ClassifierFreeGuidanceLogitsProcessor(j.guidance_scale)),Ae!==null&&se.extend(Ae),se}_prepare_generation_config(j,yA,Ae=X.GenerationConfig){const se={...this.config};for(const Fe of["decoder","generator","text_config"])Fe in se&&Object.assign(se,se[Fe]);const ue=new Ae(se);return Object.assign(ue,this.generation_config??{}),j&&Object.assign(ue,j),yA&&Object.assign(ue,(0,U.pick)(yA,Object.getOwnPropertyNames(ue))),ue}_get_stopping_criteria(j,yA=null){const Ae=new kA.StoppingCriteriaList;return j.max_length!==null&&Ae.push(new kA.MaxLengthCriteria(j.max_length,this.config.max_position_embeddings??null)),j.eos_token_id!==null&&Ae.push(new kA.EosTokenCriteria(j.eos_token_id)),yA&&Ae.extend(yA),Ae}_validate_model_class(){if(!this.can_generate){const j=[Wo,jo,Ro,Ho],yA=ee.get(this.constructor),Ae=new Set,se=this.config.model_type;for(const Fe of j){const Ze=Fe.get(se);Ze&&Ae.add(Ze[0])}let ue=`The current model class (${yA}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw Ae.size>0&&(ue+=` Please use the following class instead: ${[...Ae].join(", ")}`),Error(ue)}}prepare_inputs_for_generation(...j){return this._prepare_inputs_for_generation(this,...j)}_update_model_kwargs_for_generation({generated_input_ids:j,outputs:yA,model_inputs:Ae,is_encoder_decoder:se}){return Ae.past_key_values=this.getPastKeyValues(yA,Ae.past_key_values),Ae.input_ids=new R.Tensor("int64",j.flat(),[j.length,1]),se||(Ae.attention_mask=(0,R.cat)([Ae.attention_mask,(0,R.ones)([Ae.attention_mask.dims[0],1])],1)),Ae.position_ids=null,Ae}_prepare_model_inputs({inputs:j,bos_token_id:yA,model_kwargs:Ae}){const se=(0,U.pick)(Ae,this.forward_params),ue=this.main_input_name;if(ue in se){if(j)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else se[ue]=j;return{inputs_tensor:se[ue],model_inputs:se,model_input_name:ue}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:j,model_inputs:yA,model_input_name:Ae,generation_config:se}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!yA.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:Fe,pixel_values:Ze,attention_mask:We,..._e}=yA,ut=await this._prepare_inputs_embeds(yA);yA={..._e,...(0,U.pick)(ut,["inputs_embeds","attention_mask"])}}let{last_hidden_state:ue}=await ke(this,yA);if(se.guidance_scale!==null&&se.guidance_scale>1)ue=(0,R.cat)([ue,(0,R.full_like)(ue,0)],0),"attention_mask"in yA&&(yA.attention_mask=(0,R.cat)([yA.attention_mask,(0,R.zeros_like)(yA.attention_mask)],0));else if(yA.decoder_input_ids){const Fe=PA(yA.decoder_input_ids).dims[0];if(Fe!==ue.dims[0]){if(ue.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${ue.dims[0]}) than the decoder inputs (${Fe}).`);ue=(0,R.cat)(Array.from({length:Fe},()=>ue),0)}}return yA.encoder_outputs=ue,yA}_prepare_decoder_input_ids_for_generation({batch_size:j,model_input_name:yA,model_kwargs:Ae,decoder_start_token_id:se,bos_token_id:ue,generation_config:Fe}){let{decoder_input_ids:Ze,...We}=Ae;if(!(Ze instanceof R.Tensor)){if(Ze)Array.isArray(Ze[0])||(Ze=Array.from({length:j},()=>Ze));else if(se??=ue,this.config.model_type==="musicgen")Ze=Array.from({length:j*this.config.decoder.num_codebooks},()=>[se]);else if(Array.isArray(se)){if(se.length!==j)throw new Error(`\`decoder_start_token_id\` expcted to have length ${j} but got ${se.length}`);Ze=se}else Ze=Array.from({length:j},()=>[se]);Ze=PA(Ze)}return Ae.decoder_attention_mask=(0,R.ones_like)(Ze),{input_ids:Ze,model_inputs:We}}async generate({inputs:j=null,generation_config:yA=null,logits_processor:Ae=null,stopping_criteria:se=null,streamer:ue=null,...Fe}){this._validate_model_class(),yA=this._prepare_generation_config(yA,Fe);let{inputs_tensor:Ze,model_inputs:We,model_input_name:_e}=this._prepare_model_inputs({inputs:j,model_kwargs:Fe});const ut=this.config.is_encoder_decoder;let ct;ut&&("encoder_outputs"in We||(We=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:Ze,model_inputs:We,model_input_name:_e,generation_config:yA}))),ut?{input_ids:ct,model_inputs:We}=this._prepare_decoder_input_ids_for_generation({batch_size:We[_e].dims.at(0),model_input_name:_e,model_kwargs:We,decoder_start_token_id:yA.decoder_start_token_id,bos_token_id:yA.bos_token_id,generation_config:yA}):ct=We[_e];let Ft=ct.dims.at(-1);yA.max_new_tokens!==null&&(yA.max_length=Ft+yA.max_new_tokens);const Qt=this._get_logits_processor(yA,Ft,Ae),or=this._get_stopping_criteria(yA,se),Bt=We[_e].dims.at(0),Ot=EA.LogitsSampler.getSampler(yA),Ir=new Array(Bt).fill(0),Mr=ct.tolist();let Vr;ue&&ue.put(Mr);let Jr={};for(;;){if(We=this.prepare_inputs_for_generation(Mr,We,yA),Vr=await this.forward(We),yA.output_attentions&&yA.return_dict_in_generate){const _t=this.getAttentions(Vr);for(const Ua in _t)Ua in Jr||(Jr[Ua]=[]),Jr[Ua].push(_t[Ua])}const Yr=Qt(Mr,Vr.logits.slice(null,-1,null)),ba=[];for(let _t=0;_t<Yr.dims.at(0);++_t){const Ua=Yr[_t],_i=await Ot(Ua);for(const[_0,Kn]of _i){const _o=BigInt(_0);Ir[_t]+=Kn,Mr[_t].push(_o),ba.push([_o]);break}}if(ue&&ue.put(ba),or(Mr).every(_t=>_t))break;We=this._update_model_kwargs_for_generation({generated_input_ids:ba,outputs:Vr,model_inputs:We,is_encoder_decoder:ut})}ue&&ue.end();const Na=this.getPastKeyValues(Vr,We.past_key_values,!0),_r=new R.Tensor("int64",Mr.flat(),[Mr.length,Mr[0].length]);if(yA.return_dict_in_generate)return{sequences:_r,past_key_values:Na,...Jr};for(const Yr of Object.values(Vr))Yr.location==="gpu-buffer"&&Yr.dispose();return _r}getPastKeyValues(j,yA,Ae=!1){const se=Object.create(null);for(const ue in j)if(ue.startsWith("present")){const Fe=ue.replace("present","past_key_values"),Ze=ue.includes("encoder");if(se[Fe]=Ze&&yA?yA[Fe]:j[ue],yA&&(!Ze||Ae)){const We=yA[Fe];We.location==="gpu-buffer"&&We.dispose()}}return se}getAttentions(j){const yA={};for(const Ae of["cross_attentions","encoder_attentions","decoder_attentions"])for(const se in j)se.startsWith(Ae)&&(Ae in yA||(yA[Ae]=[]),yA[Ae].push(j[se]));return yA}addPastKeyValues(j,yA){if(yA)Object.assign(j,yA);else{const Ae=this.sessions.decoder_model_merged??this.sessions.model,se=Ae?.config?.kv_cache_dtype??"float32",ue=se==="float16"?new Uint16Array:[],Fe=(j[this.main_input_name]??j.attention_mask)?.dims?.[0]??1,Ze=(0,k.getKeyValueShapes)(this.config,{batch_size:Fe});for(const We in Ze)j[We]=new R.Tensor(se,ue,Ze[We])}}async encode_image({pixel_values:j}){const yA=(await GA(this.sessions.vision_encoder,{pixel_values:j})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${yA.dims[1]}).`),this.config.num_image_tokens=yA.dims[1]),yA}async encode_text({input_ids:j}){return(await GA(this.sessions.embed_tokens,{input_ids:j})).inputs_embeds}}class fe{}class Ee extends fe{constructor({last_hidden_state:j,hidden_states:yA=null,attentions:Ae=null}){super(),this.last_hidden_state=j,this.hidden_states=yA,this.attentions=Ae}}class Pe extends zA{}class Ye extends Pe{}class J extends Pe{async _call(j){return new Sa(await super._call(j))}}class Oe extends Pe{async _call(j){return new Pt(await super._call(j))}}class gA extends Pe{async _call(j){return new Qa(await super._call(j))}}class $ extends Pe{async _call(j){return new ja(await super._call(j))}}class IA extends zA{}class OA extends IA{}class _A extends IA{async _call(j){return new Sa(await super._call(j))}}class he extends IA{async _call(j){return new Pt(await super._call(j))}}class ce extends IA{async _call(j){return new Qa(await super._call(j))}}class ye extends zA{}class Qe extends ye{}class Te extends zA{}class Mt extends Te{}class Tt extends Te{async _call(j){return new Sa(await super._call(j))}}class dt extends Te{async _call(j){return new Pt(await super._call(j))}}class Ct extends Te{async _call(j){return new Qa(await super._call(j))}}class $t extends Te{async _call(j){return new ja(await super._call(j))}}class Sr extends zA{}class Ar extends Sr{}class Aa extends Sr{async _call(j){return new Sa(await super._call(j))}}class It extends Sr{async _call(j){return new Pt(await super._call(j))}}class Ka extends Sr{async _call(j){return new Qa(await super._call(j))}}class La extends Sr{async _call(j){return new ja(await super._call(j))}}class wa extends zA{}class Xe extends wa{}class $e extends wa{async _call(j){return new Sa(await super._call(j))}}class Ne extends wa{async _call(j){return new Pt(await super._call(j))}}class Zt extends wa{async _call(j){return new Qa(await super._call(j))}}class Ra extends wa{async _call(j){return new ja(await super._call(j))}}class Za extends zA{}class Qs extends Za{}class bs extends Za{async _call(j){return new Sa(await super._call(j))}}class Is extends Za{async _call(j){return new Pt(await super._call(j))}}class Ts extends Za{async _call(j){return new Qa(await super._call(j))}}class ea extends Za{async _call(j){return new ja(await super._call(j))}}class xt extends zA{}class Ma extends xt{}class Dr extends xt{async _call(j){return new Sa(await super._call(j))}}class Hr extends xt{async _call(j){return new Pt(await super._call(j))}}class cs extends xt{async _call(j){return new Qa(await super._call(j))}}class Xt extends xt{async _call(j){return new ja(await super._call(j))}}class Xa extends zA{}class gs extends Xa{}class di extends Xa{async _call(j){return new Sa(await super._call(j))}}class qs extends Xa{async _call(j){return new Pt(await super._call(j))}}class Js extends Xa{async _call(j){return new Qa(await super._call(j))}}class fi extends Xa{async _call(j){return new ja(await super._call(j))}}class Ur extends zA{}class ts extends Ur{}class us extends Ur{async _call(j){return new Pt(await super._call(j))}}class _s extends Ur{async _call(j){return new Qa(await super._call(j))}}class qa extends Ur{async _call(j){return new ja(await super._call(j))}}class ws extends Ur{async _call(j){return new Sa(await super._call(j))}}class kr extends zA{}class Ps extends kr{}class zs extends kr{async _call(j){return new Sa(await super._call(j))}}class pi extends kr{async _call(j){return new Pt(await super._call(j))}}class Fs extends kr{async _call(j){return new Qa(await super._call(j))}}class ks extends zA{}class Ss extends ks{}class xs extends ks{async _call(j){return new Sa(await super._call(j))}}class wt extends ks{async _call(j){return new Pt(await super._call(j))}}class zt extends ks{async _call(j){return new ja(await super._call(j))}}class ka extends zA{}class $s extends ka{}class Bs extends ka{async _call(j){return new Sa(await super._call(j))}}class Ns extends ka{async _call(j){return new Pt(await super._call(j))}}class rs extends ka{async _call(j){return new Qa(await super._call(j))}}class Os extends ka{async _call(j){return new ja(await super._call(j))}}class te extends zA{}class _ extends te{}class BA extends te{async _call(j){return new Sa(await super._call(j))}}class NA extends te{async _call(j){return new Pt(await super._call(j))}}class VA extends te{async _call(j){return new ja(await super._call(j))}}class $A extends zA{}class de extends $A{}class Se extends $A{async _call(j){return new Pt(await super._call(j))}}class HA extends $A{async _call(j){return new ja(await super._call(j))}}class Ve extends $A{async _call(j){return new Sa(await super._call(j))}}class Ce extends zA{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]}class Yt extends Ce{}class Vt extends Ce{}class cr extends zA{}class sr extends cr{}class jt extends cr{}class je extends zA{}class Ke extends je{}class Jt extends je{}class Ya extends zA{}class pa extends Ya{}class ir extends Ya{}class rt extends Ya{async _call(j){return new Pt(await super._call(j))}}class dr extends zA{}class ge extends dr{}class Je extends dr{}class ha extends dr{async _call(j){return new Pt(await super._call(j))}}class Nr extends dr{}class Rr extends zA{}class Qr extends Rr{}class Cr extends Rr{}class Ut extends zA{}class xr extends Ut{}class Ai extends Ut{}class Ha extends zA{}class Pi extends Ha{}class Ga extends Ha{async _call(j){return new Sa(await super._call(j))}}class zi extends Ha{async _call(j){return new Pt(await super._call(j))}}class Gt extends Ha{async _call(j){return new Qa(await super._call(j))}}class ta extends Ha{async _call(j){return new ja(await super._call(j))}}class Wa extends zA{}class e0 extends Wa{}class t0 extends Wa{async _call(j){return new Sa(await super._call(j))}}class r0 extends Wa{async _call(j){return new Pt(await super._call(j))}}class a0 extends Wa{async _call(j){return new Qa(await super._call(j))}}class ei extends Wa{async _call(j){return new ja(await super._call(j))}}class Ls extends zA{}class s0 extends Ls{}class Fi extends Ls{async _call(j){return new Sa(await super._call(j))}}class Ta extends Ls{async _call(j){return new Pt(await super._call(j))}}class Kr extends Ls{async _call(j){return new Qa(await super._call(j))}}class qe extends Ls{async _call(j){return new ja(await super._call(j))}}class Da extends zA{}class nn extends Da{}class Si extends Da{}class on extends zA{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]}class i0 extends on{}class n0 extends on{_prepare_generation_config(j,yA){return super._prepare_generation_config(j,yA,nA.WhisperGenerationConfig)}_retrieve_init_tokens(j){const yA=[j.decoder_start_token_id];let Ae=j.language;const se=j.task;if(j.is_multilingual){Ae||(console.warn("No language specified - defaulting to English (en)."),Ae="en");const ue=`<|${(0,xA.whisper_language_to_code)(Ae)}|>`;yA.push(j.lang_to_id[ue]),yA.push(j.task_to_id[se??"transcribe"])}else if(Ae||se)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!j.return_timestamps&&j.no_timestamps_token_id&&yA.at(-1)!==j.no_timestamps_token_id?yA.push(j.no_timestamps_token_id):j.return_timestamps&&yA.at(-1)===j.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),yA.pop()),yA.filter(ue=>ue!=null)}async generate({inputs:j=null,generation_config:yA=null,logits_processor:Ae=null,stopping_criteria:se=null,...ue}){yA=this._prepare_generation_config(yA,ue);const Fe=ue.decoder_input_ids??this._retrieve_init_tokens(yA);if(yA.return_timestamps&&(Ae??=new S.LogitsProcessorList,Ae.push(new S.WhisperTimeStampLogitsProcessor(yA,Fe))),yA.begin_suppress_tokens&&(Ae??=new S.LogitsProcessorList,Ae.push(new S.SuppressTokensAtBeginLogitsProcessor(yA.begin_suppress_tokens,Fe.length))),yA.return_token_timestamps){if(!yA.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");yA.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),yA.output_attentions=!0,yA.return_dict_in_generate=!0}const Ze=await super.generate({inputs:j,generation_config:yA,logits_processor:Ae,decoder_input_ids:Fe,...ue});return yA.return_token_timestamps&&(Ze.token_timestamps=this._extract_token_timestamps(Ze,yA.alignment_heads,yA.num_frames)),Ze}_extract_token_timestamps(j,yA,Ae=null,se=.02){if(!j.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");Ae==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let ue=this.config.median_filter_width;ue===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),ue=7);const Fe=j.cross_attentions,Ze=Array.from({length:this.config.decoder_layers},(Bt,Ot)=>(0,R.cat)(Fe.map(Ir=>Ir[Ot]),2)),We=(0,R.stack)(yA.map(([Bt,Ot])=>{if(Bt>=Ze.length)throw new Error(`Layer index ${Bt} is out of bounds for cross attentions (length ${Ze.length}).`);return Ae?Ze[Bt].slice(null,Ot,null,[0,Ae]):Ze[Bt].slice(null,Ot)})).transpose(1,0,2,3),[_e,ut]=(0,R.std_mean)(We,-2,0,!0),ct=We.clone();for(let Bt=0;Bt<ct.dims[0];++Bt){const Ot=ct[Bt];for(let Ir=0;Ir<Ot.dims[0];++Ir){const Mr=Ot[Ir],Vr=_e[Bt][Ir][0].data,Jr=ut[Bt][Ir][0].data;for(let Na=0;Na<Mr.dims[0];++Na){let _r=Mr[Na].data;for(let Yr=0;Yr<_r.length;++Yr)_r[Yr]=(_r[Yr]-Jr[Yr])/Vr[Yr];_r.set((0,CA.medianFilter)(_r,ue))}}}const Ft=[(0,R.mean)(ct,1)],Qt=j.sequences.dims,or=new R.Tensor("float32",new Float32Array(Qt[0]*Qt[1]),Qt);for(let Bt=0;Bt<Qt[0];++Bt){const Ot=Ft[Bt].neg().squeeze_(0),[Ir,Mr]=(0,CA.dynamic_time_warping)(Ot.tolist()),Vr=Array.from({length:Ir.length-1},(_r,Yr)=>Ir[Yr+1]-Ir[Yr]),Jr=(0,U.mergeArrays)([1],Vr).map(_r=>!!_r),Na=[];for(let _r=0;_r<Jr.length;++_r)Jr[_r]&&Na.push(Mr[_r]*se);or[Bt].data.set(Na,1)}return or}}class ln extends zA{requires_attention_mask=!1;main_input_name="input_values";forward_params=["input_values","decoder_input_ids","past_key_values"]}class R0 extends ln{}class Pa extends ln{}class rr extends zA{main_input_name="pixel_values";forward_params=["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"]}class hi extends zA{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class mi extends hi{_merge_input_ids_with_image_features({inputs_embeds:j,image_features:yA,input_ids:Ae,attention_mask:se}){const ue=this.config.image_token_index,Fe=Ae.tolist().map(ct=>ct.findIndex(Ft=>Ft==ue)),Ze=Fe.every(ct=>ct===-1),We=Fe.every(ct=>ct!==-1);if(!Ze&&!We)throw new Error("Every input should contain either 0 or 1 image token.");if(Ze)return{inputs_embeds:j,attention_mask:se};const _e=[],ut=[];for(let ct=0;ct<Fe.length;++ct){const Ft=Fe[ct],Qt=j[ct],or=yA[ct],Bt=se[ct];_e.push((0,R.cat)([Qt.slice([0,Ft]),or,Qt.slice([Ft+1,Qt.dims[0]])],0)),ut.push((0,R.cat)([Bt.slice([0,Ft]),(0,R.ones)([or.dims[0]]),Bt.slice([Ft+1,Bt.dims[0]])],0))}return{inputs_embeds:(0,R.stack)(_e,0),attention_mask:(0,R.stack)(ut,0)}}}class xa extends mi{}class Ys extends mi{}class as extends zA{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds"}class cn extends as{_merge_input_ids_with_image_features({inputs_embeds:j,image_features:yA,input_ids:Ae,attention_mask:se}){return{inputs_embeds:(0,R.cat)([yA,j],1),attention_mask:(0,R.cat)([(0,R.ones)(yA.dims.slice(0,2)),se],1)}}async _prepare_inputs_embeds({input_ids:j,pixel_values:yA,inputs_embeds:Ae,attention_mask:se}){if(!j&&!yA)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let ue,Fe;return j&&(ue=await this.encode_text({input_ids:j})),yA&&(Fe=await this.encode_image({pixel_values:yA})),ue&&Fe?{inputs_embeds:Ae,attention_mask:se}=this._merge_input_ids_with_image_features({inputs_embeds:ue,image_features:Fe,input_ids:j,attention_mask:se}):Ae=ue||Fe,{inputs_embeds:Ae,attention_mask:se}}async forward({input_ids:j,pixel_values:yA,attention_mask:Ae,decoder_input_ids:se,decoder_attention_mask:ue,encoder_outputs:Fe,past_key_values:Ze,inputs_embeds:We,decoder_inputs_embeds:_e}){if(We||({inputs_embeds:We,attention_mask:Ae}=await this._prepare_inputs_embeds({input_ids:j,pixel_values:yA,inputs_embeds:We,attention_mask:Ae})),!Fe){let{last_hidden_state:ct}=await ke(this,{inputs_embeds:We,attention_mask:Ae});Fe=ct}if(!_e){if(!se)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");_e=await this.encode_text({input_ids:se})}return await ae(this,{inputs_embeds:_e,attention_mask:ue,encoder_attention_mask:Ae,encoder_hidden_states:Fe,past_key_values:Ze},!0)}}class gn extends zA{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class Hs extends gn{_merge_input_ids_with_image_features(j){const yA=j.image_features.dims.at(-1),Ae=j.image_features.view(-1,yA);return oe({image_token_id:this.config.image_token_index,...j,image_features:Ae})}}class un extends zA{forward_params=["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"]}class dn extends un{async encode_image({pixel_values:j,pixel_attention_mask:yA}){return(await GA(this.sessions.vision_encoder,{pixel_values:j,pixel_attention_mask:yA})).image_features}_merge_input_ids_with_image_features(j){const yA=j.image_features.dims.at(-1),Ae=j.image_features.view(-1,yA);return oe({image_token_id:this.config.image_token_id,...j,image_features:Ae})}}class fn extends zA{forward_params=["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"]}class De extends fn{async forward({input_ids:j=null,attention_mask:yA=null,pixel_values:Ae=null,image_sizes:se=null,position_ids:ue=null,inputs_embeds:Fe=null,past_key_values:Ze=null,generation_config:We=null,logits_processor:_e=null,...ut}){if(!Fe){let ct;if(Ae&&j.dims[1]!==1){if(!se)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:ct}=await GA(this.sessions.vision_encoder,{pixel_values:Ae,image_sizes:se}))}else{const Ft=this.config.normalized_config.hidden_size;ct=new R.Tensor("float32",[],[0,Ft])}({inputs_embeds:Fe}=await GA(this.sessions.prepare_inputs_embeds,{input_ids:j,image_features:ct}))}return await ae(this,{inputs_embeds:Fe,past_key_values:Ze,attention_mask:yA,position_ids:ue,generation_config:We,logits_processor:_e},!1)}}class Rs extends zA{}class Re extends Rs{}class pn extends Rs{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"text_model"})}}class Ni extends Rs{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"text_model"})}}class Ba extends Rs{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"vision_model"})}}class za extends Rs{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"vision_model"})}}class ti extends zA{}class Ci extends ti{}class hn extends ti{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"text_model"})}}class Pr extends Rs{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"vision_model"})}}class o0 extends zA{}class l0 extends o0{}class vs extends zA{}class ri extends vs{async forward(j){const yA=!j.input_ids,Ae=!j.pixel_values;if(yA&&Ae)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(yA&&(j.input_ids=(0,R.ones)([j.pixel_values.dims[0],1])),Ae){const{image_size:_e}=this.config.vision_config;j.pixel_values=(0,R.full)([0,3,_e,_e],0)}const{text_embeddings:se,image_embeddings:ue,l2norm_text_embeddings:Fe,l2norm_image_embeddings:Ze}=await super.forward(j),We={};return yA||(We.text_embeddings=se,We.l2norm_text_embeddings=Fe),Ae||(We.image_embeddings=ue,We.l2norm_image_embeddings=Ze),We}}class c0 extends vs{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"text_model"})}}class Oi extends vs{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"vision_model"})}}class ai extends zA{}class He extends ai{}class Ja extends ai{}class mn extends zA{}class bi extends mn{}class ds extends mn{}class Cn extends zA{}class g0 extends Cn{}class u0 extends Cn{}class Li extends zA{}class d0 extends Li{}class f0 extends Li{}class Or extends zA{}class p0 extends Or{}class h0 extends Or{}class bt extends zA{}class Ht extends bt{}class bn extends bt{}class ss extends zA{}class m0 extends ss{}class ra extends ss{}class fs extends zA{}class aa extends fs{}class ps extends fs{}class Yi extends zA{}class In extends Yi{}class C0 extends Yi{}class Hi extends zA{}class vr extends Hi{}class Ii extends Hi{}class wn extends zA{}class sa extends wn{}class si extends wn{}class hs extends zA{}class kn extends hs{}class xn extends hs{}class Bn extends zA{}class Ri extends Bn{}class is extends Bn{}class Wi extends zA{}class b0 extends Wi{}class vn extends Wi{}class yn extends zA{}class ms extends yn{}class Vi extends yn{}class Lr extends zA{}class En extends Lr{}class ji extends Lr{}class wi extends zA{}class Fa extends wi{}class ki extends wi{}class Mn extends zA{}class _a extends Mn{}class Gn extends Mn{}class Ui extends zA{}class Dn extends Ui{}class ii extends Ui{}class I0 extends zA{forward_params=["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"]}class w0 extends I0{get_rope_index(j,yA,Ae,se){const{vision_config:ue,image_token_id:Fe,video_token_id:Ze,vision_start_token_id:We}=this.config,_e=ue.spatial_merge_size??2,ut=[];if(yA||Ae){let ct=j.tolist();se||(se=(0,R.ones_like)(j));const Ft=se.tolist(),Qt=Array.from({length:3},Mr=>Array.from({length:j.dims[0]},Vr=>Array.from({length:j.dims[1]},Jr=>1))),or=yA?yA.tolist():[],Bt=Ae?Ae.tolist():[];let Ot=0,Ir=0;for(let Mr=0;Mr<ct.length;++Mr){const Vr=ct[Mr].filter((Tr,$r)=>Ft[Mr][$r]==1),Jr=Vr.reduce((Tr,$r,Qi)=>($r==We&&Tr.push(Qi),Tr),[]),Na=Jr.map(Tr=>Vr[Tr+1]),_r=Na.filter(Tr=>Tr==Fe).length,Yr=Na.filter(Tr=>Tr==Ze).length;let ba=[],_t=0,Ua=_r,_i=Yr;for(let Tr=0;Tr<Na.length;++Tr){const $r=Vr.findIndex((Zs,es)=>es>_t&&Zs==Fe),Qi=Vr.findIndex((Zs,es)=>es>_t&&Zs==Ze),$i=Ua>0&&$r!==-1?$r:Vr.length+1,Zn=_i>0&&Qi!==-1?Qi:Vr.length+1;let Q0,$0,gi,$o;$i<Zn?([$0,gi,$o]=or[Ot],++Ot,--Ua,Q0=$i):([$0,gi,$o]=Bt[Ir],++Ir,--_i,Q0=Zn);const[A2,Ao,T0]=[Number($0),Math.floor(Number(gi)/_e),Math.floor(Number($o)/_e)],eo=Q0-_t,e2=ba.length>0?(0,CA.max)(ba.at(-1))[0]+1:0;ba.push(Array.from({length:3*eo},(Zs,es)=>e2+es%eo));const to=eo+e2,P0=A2*Ao*T0,An=Array.from({length:P0},(Zs,es)=>to+Math.floor(es/(Ao*T0))),Ks=Array.from({length:P0},(Zs,es)=>to+Math.floor(es/T0)%Ao),z0=Array.from({length:P0},(Zs,es)=>to+es%T0);ba.push([An,Ks,z0].flat()),_t=Q0+P0}if(_t<Vr.length){const Tr=ba.length>0?(0,CA.max)(ba.at(-1))[0]+1:0,$r=Vr.length-_t;ba.push(Array.from({length:3*$r},(Qi,$i)=>Tr+$i%$r))}const _0=ba.reduce((Tr,$r)=>Tr+$r.length,0),Kn=new Array(_0);let _o=0;for(let Tr=0;Tr<3;++Tr)for(let $r=0;$r<ba.length;++$r){const Qi=ba[$r],$i=Qi.length/3;for(let Zn=Tr*$i;Zn<(Tr+1)*$i;++Zn)Kn[_o++]=Qi[Zn]}let S1=0;const N1=Ft[Mr];for(let Tr=0;Tr<N1.length;++Tr)if(N1[Tr]==1){for(let $r=0;$r<3;++$r)Qt[$r][Mr][Tr]=Kn[$r*_0/3+S1];++S1}const mc=(0,CA.max)(Kn)[0];ut.push(mc+1-ct[Mr].length)}return[new R.Tensor("int64",Qt.flat(1/0),[3,j.dims[0],j.dims[1]]),new R.Tensor("int64",ut,[ut.length,1])]}if(se){const{data:ct,dims:Ft}=ie(se),Qt=BigInt64Array.from({length:3*ct.length},(Bt,Ot)=>ct[Ot%ct.length]),or=Array.from({length:Ft[0]},(Bt,Ot)=>(0,CA.max)(ct.subarray(Ft[1]*Ot,Ft[1]*(Ot+1)))[0]+1n+BigInt(Ft[1]));return[new R.Tensor("int64",Qt,[3,...Ft]),new R.Tensor("int64",or,[or.length,1])]}{const[ct,Ft]=j.dims,Qt=BigInt64Array.from({length:3*ct*Ft},(or,Bt)=>BigInt(Math.floor(Bt%Ft/ct)));return[new R.Tensor("int64",Qt,[3,...j.dims]),(0,R.zeros)([ct,1])]}}async encode_image({pixel_values:j,image_grid_thw:yA}){return(await GA(this.sessions.vision_encoder,{pixel_values:j,grid_thw:yA})).image_features}_merge_input_ids_with_image_features(j){return oe({image_token_id:this.config.image_token_id,...j})}prepare_inputs_for_generation(j,yA,Ae){if(yA.attention_mask&&!yA.position_ids)if(yA.past_key_values){yA.pixel_values=null;const se=BigInt(Object.values(yA.past_key_values)[0].dims.at(-2)),ue=yA.rope_deltas.map(Fe=>se+Fe);yA.position_ids=(0,R.stack)([ue,ue,ue],0)}else[yA.position_ids,yA.rope_deltas]=this.get_rope_index(yA.input_ids,yA.image_grid_thw,yA.video_grid_thw,yA.attention_mask);return yA}}class Qn extends zA{}class ma extends Qn{}class xi extends Qn{}class ia extends zA{}class Tn extends ia{}class Ki extends ia{}class Va extends zA{}class fr extends Va{}class Pn extends Va{}class ys extends zA{}class ni extends ys{}class k0 extends ys{}class zn extends zA{}class Fn extends zn{}class x0 extends zn{}class Es extends zA{}class $a extends Es{}class Sn extends Es{async _call(j){return new Pt(await super._call(j))}}class Bi extends zA{}class Zr extends Bi{}class ar extends Bi{async _call(j){return new Pt(await super._call(j))}}class vi extends zA{}class B0 extends vi{}class Cs extends zA{}class Ws extends Cs{}class Vs extends Cs{async _call(j){return new Pt(await super._call(j))}}class Nn extends zA{}class Ca extends Nn{}class On extends zA{}class v0 extends On{}class oi extends On{async _call(j){return new Pt(await super._call(j))}}class yi extends zA{}class na extends yi{}class Zi extends zA{}class Ln extends Zi{}class js extends Zi{async _call(j){return new Pt(await super._call(j))}}class y0 extends zA{}class li extends y0{async _call(j){return new z1(await super._call(j))}}class lt extends zA{}class e extends lt{}class t extends lt{async _call(j){return new Pt(await super._call(j))}}class r extends zA{}class a extends r{}class s extends r{async _call(j){return new Pt(await super._call(j))}}class i extends zA{}class o extends i{}class c extends i{}class f extends zA{}class m extends f{}class p extends f{}class I extends zA{}class E extends I{}class T extends I{async _call(j){return new Pt(await super._call(j))}}class O extends zA{}class Z extends O{}class AA extends O{async _call(j){return new hA(await super._call(j))}}class cA extends O{async _call(j){return new vA(await super._call(j))}}class hA extends fe{constructor({logits:j,pred_boxes:yA}){super(),this.logits=j,this.pred_boxes=yA}}class vA extends fe{constructor({logits:j,pred_boxes:yA,pred_masks:Ae}){super(),this.logits=j,this.pred_boxes=yA,this.pred_masks=Ae}}class QA extends zA{}class WA extends QA{}class KA extends QA{async _call(j){return new re(await super._call(j))}}class re extends fe{constructor({logits:j,pred_boxes:yA}){super(),this.logits=j,this.pred_boxes=yA}}class le extends zA{}class Me extends le{}class ze extends le{async _call(j){return new At(await super._call(j))}}class At extends hA{}class at extends zA{}class ft extends at{}class Nt extends at{async _call(j){return new Pt(await super._call(j))}}class Kt extends zA{}class er extends Kt{}class pr extends Kt{async _call(j){return new Pt(await super._call(j))}}class hr extends zA{}class yr extends hr{}class Er extends hr{async _call(j){return new Pt(await super._call(j))}}class zr extends zA{}class Wr extends zr{}class oa extends zr{async _call(j){return new Pt(await super._call(j))}}class Xr extends zA{}class la extends Xr{}class va extends Xr{}class As extends zA{}class ns extends As{}class os extends As{}class Us extends zA{}class Ei extends Us{}class Ms extends zA{}class Mi extends Ms{}class Gi extends Ms{}class Yn extends Ms{}class E0 extends zA{}class M0 extends E0{}class Hn extends zA{}class f2 extends Hn{}class p2 extends Hn{}class uo extends zA{}class h2 extends uo{}class m2 extends uo{}class C2 extends zA{}class b2 extends C2{}class fo extends zA{}class I2 extends fo{}class w2 extends fo{async _call(j){return new Pt(await super._call(j))}}class po extends zA{}class k2 extends po{}class x2 extends po{async _call(j){return new Pt(await super._call(j))}}class ho extends zA{}class B2 extends ho{}class v2 extends ho{async _call(j){return new Pt(await super._call(j))}}class mo extends zA{}class y2 extends mo{}class E2 extends mo{async _call(j){return new Pt(await super._call(j))}}class M2 extends zA{}class G2 extends M2{}class Gs extends zA{}class ci extends Gs{}class Xi extends Gs{async _call(j){return new qi(await super._call(j))}}class qi extends fe{constructor({logits:j,pred_boxes:yA}){super(),this.logits=j,this.pred_boxes=yA}}class D2 extends zA{}class Q2 extends D2{async get_image_embeddings({pixel_values:j}){return await ke(this,{pixel_values:j})}async forward(j){if(j.image_embeddings&&j.image_positional_embeddings||(j={...j,...await this.get_image_embeddings(j)}),!j.input_labels&&j.input_points){const Ae=j.input_points.dims.slice(0,-1),se=Ae.reduce((ue,Fe)=>ue*Fe,1);j.input_labels=new R.Tensor("int64",new BigInt64Array(se).fill(1n),Ae)}const yA={image_embeddings:j.image_embeddings,image_positional_embeddings:j.image_positional_embeddings};return j.input_points&&(yA.input_points=j.input_points),j.input_labels&&(yA.input_labels=j.input_labels),j.input_boxes&&(yA.input_boxes=j.input_boxes),await GA(this.sessions.prompt_encoder_mask_decoder,yA)}async _call(j){return new T2(await super._call(j))}}class T2 extends fe{constructor({iou_scores:j,pred_masks:yA}){super(),this.iou_scores=j,this.pred_masks=yA}}class Co extends zA{}class P2 extends Co{}class z2 extends Co{}class bo extends zA{}class F2 extends bo{}class S2 extends bo{}class ca extends zA{}class N2 extends ca{}class O2 extends ca{async _call(j){return new Un(await super._call(j))}}class Io extends ca{async _call(j){return new Pt(await super._call(j))}}class L2 extends ca{async _call(j){return new Qa(await super._call(j))}}class Rn extends zA{}class Y2 extends Rn{}class H2 extends Rn{async _call(j){return new Qa(await super._call(j))}}class R2 extends zA{}class W2 extends R2{}class W0 extends zA{}class wo extends W0{}class V2 extends W0{async _call(j){return new Un(await super._call(j))}}class j2 extends W0{async _call(j){return new Pt(await super._call(j))}}class G0 extends zA{}class U2 extends G0{}class ko extends G0{async _call(j){return new Un(await super._call(j))}}class K2 extends G0{async _call(j){return new Pt(await super._call(j))}}class xo extends G0{async _call(j){return new Qa(await super._call(j))}}class V0 extends zA{}class Z2 extends V0{}class X2 extends V0{async _call(j){return new Un(await super._call(j))}}class q2 extends V0{async _call(j){return new Pt(await super._call(j))}}class I1 extends zA{}class J2 extends ca{}class _2 extends ca{async _call(j){return new Un(await super._call(j))}}class $2 extends ca{async _call(j){return new Pt(await super._call(j))}}class Wn extends zA{}class Al extends Wn{}class el extends Wn{async _call(j){return new Un(await super._call(j))}}class tl extends Wn{async _call(j){return new Pt(await super._call(j))}}class rl extends Wn{async _call(j){return new Jo(await super._call(j))}}class al extends Wn{async _call(j){return new Qa(await super._call(j))}}class sl extends zA{}class il extends sl{}class j0 extends zA{}class w1 extends j0{}class nl extends j0{}class ol extends j0{async generate_speech(j,yA,{threshold:Ae=.5,minlenratio:se=0,maxlenratio:ue=20,vocoder:Fe=null}={}){const Ze={input_ids:j},{encoder_outputs:We,encoder_attention_mask:_e}=await ke(this,Ze),ut=We.dims[1]/this.config.reduction_factor,ct=Math.floor(ut*ue),Ft=Math.floor(ut*se),Qt=this.config.num_mel_bins;let or=[],Bt=null,Ot=null,Ir=0;for(;;){++Ir;const Jr=UA(!!Ot);let Na;Na=Ot?Ot.output_sequence_out:new R.Tensor("float32",new Float32Array(Qt),[1,1,Qt]);let _r={use_cache_branch:Jr,output_sequence:Na,encoder_attention_mask:_e,speaker_embeddings:yA,encoder_hidden_states:We};this.addPastKeyValues(_r,Bt),Ot=await GA(this.sessions.decoder_model_merged,_r),Bt=this.getPastKeyValues(Ot,Bt);const{prob:Yr,spectrum:ba}=Ot;if(or.push(ba),Ir>=Ft&&(Array.from(Yr.data).filter(_t=>_t>=Ae).length>0||Ir>=ct))break}const Mr=(0,R.cat)(or),{waveform:Vr}=await GA(Fe.sessions.model,{spectrogram:Mr});return{spectrogram:Mr,waveform:Vr}}}class ll extends zA{main_input_name="spectrogram"}class cl extends zA{}class D0 extends cl{}class U0 extends zA{}class Bo extends U0{}class vo extends U0{}class K0 extends zA{}class gl extends K0{}class ul extends K0{}class Z0 extends zA{}class yo extends Z0{}class dl extends Z0{}class X0 extends zA{}class Eo extends X0{}class fl extends X0{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"text_model"})}}class pl extends X0{static async from_pretrained(j,yA={}){return super.from_pretrained(j,{...yA,model_file_name:yA.model_file_name??"audio_model"})}}class Mo extends zA{}class Go extends Mo{async _call(j){return new F1(await super._call(j))}}class q0 extends zA{}class k1 extends q0{}class hl extends q0{}class ml extends q0{}class Do extends zA{}class Cl extends Do{}class bl extends Do{}class Qo extends zA{}class Il extends Qo{}class wl extends Qo{async _call(j){return new Pt(await super._call(j))}}class To extends zA{}class x1 extends To{}class B1 extends To{}class Po extends zA{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];_apply_and_filter_by_delay_pattern_mask(j){const[yA,Ae]=j.dims,se=this.config.decoder.num_codebooks,ue=Ae-se;let Fe=0;for(let _e=0;_e<j.size;++_e){if(j.data[_e]===this.config.decoder.pad_token_id)continue;const ut=_e%Ae-Math.floor(_e/Ae)%se;ut>0&&ut<=ue&&(j.data[Fe++]=j.data[_e])}const Ze=Math.floor(yA/se),We=Fe/(Ze*se);return new R.Tensor(j.type,j.data.slice(0,Fe),[Ze,se,We])}prepare_inputs_for_generation(j,yA,Ae){let se=structuredClone(j);for(let ue=0;ue<se.length;++ue)for(let Fe=0;Fe<se[ue].length;++Fe)ue%this.config.decoder.num_codebooks>=Fe&&(se[ue][Fe]=BigInt(this.config.decoder.pad_token_id));return Ae.guidance_scale!==null&&Ae.guidance_scale>1&&(se=se.concat(se)),super.prepare_inputs_for_generation(se,yA,Ae)}async generate(j){const yA=await super.generate(j),Ae=this._apply_and_filter_by_delay_pattern_mask(yA).unsqueeze_(0),{audio_values:se}=await GA(this.sessions.encodec_decode,{audio_codes:Ae});return se}}class zo extends zA{}class kl extends zo{}class xl extends zo{async _call(j){return new Pt(await super._call(j))}}class Fo extends zA{}class Bl extends Fo{}class vl extends Fo{async _call(j){return new Pt(await super._call(j))}}class So extends zA{}class yl extends So{}class El extends So{async _call(j){return new Pt(await super._call(j))}}class No extends zA{}class Ml extends No{}class Oo extends No{async _call(j){return new Pt(await super._call(j))}}class Gl extends zA{}class Dl extends Gl{}class Ql extends zA{}class Tl extends Ql{forward_params=["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"];constructor(...j){super(...j),this._generation_mode="text"}async forward(j){const yA=this._generation_mode??"text";let Ae;if(yA!=="text"&&j.past_key_values){const We=this.sessions.gen_img_embeds,_e=(0,U.pick)({image_ids:j.input_ids},We.inputNames);Ae=await GA(We,_e)}else{const We=this.sessions.prepare_inputs_embeds,_e=(0,U.pick)(j,We.inputNames);Ae=await GA(We,_e)}const se={...j,...Ae},ue=await ae(this,se),Fe=this.sessions[yA==="text"?"lm_head":"gen_head"];if(!Fe)throw new Error(`Unable to find "${Fe}" generation head`);const Ze=await GA(Fe,(0,U.pick)(ue,Fe.inputNames));return{...Ae,...ue,...Ze}}async generate(j){return this._generation_mode="text",super.generate(j)}async generate_images(j){this._generation_mode="image";const yA=(j.inputs??j[this.main_input_name]).dims[1],Ae=(await super.generate(j)).slice(null,[yA,null]),se=this.sessions.image_decode,{decoded_image:ue}=await GA(se,{generated_tokens:Ae}),Fe=ue.add_(1).mul_(127.5).clamp_(0,255).to("uint8"),Ze=[];for(const We of Fe){const _e=aA.RawImage.fromTensor(We);Ze.push(_e)}return Ze}}class Pl extends fe{constructor({char_logits:j,bpe_logits:yA,wp_logits:Ae}){super(),this.char_logits=j,this.bpe_logits=yA,this.wp_logits=Ae}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class zl extends zA{}class Fl extends zl{async _call(j){return new Pl(await super._call(j))}}class Lo extends zA{}class Sl extends Lo{}class Nl extends Lo{}class Yo extends zA{}class Ol extends Yo{}class Ll extends Yo{}class br{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(j,{progress_callback:yA=null,config:Ae=null,cache_dir:se=null,local_files_only:ue=!1,revision:Fe="main",model_file_name:Ze=null,subfolder:We="onnx",device:_e=null,dtype:ut=null,use_external_data_format:ct=null,session_options:Ft={}}={}){const Qt={progress_callback:yA,config:Ae,cache_dir:se,local_files_only:ue,revision:Fe,model_file_name:Ze,subfolder:We,device:_e,dtype:ut,use_external_data_format:ct,session_options:Ft};if(Qt.config=await k.AutoConfig.from_pretrained(j,Qt),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);for(const or of this.MODEL_CLASS_MAPPINGS){const Bt=or.get(Qt.config.model_type);if(Bt)return await Bt[1].from_pretrained(j,Qt)}if(this.BASE_IF_FAIL)return console.warn(`Unknown model class "${Qt.config.model_type}", attempting to construct from base class.`),await zA.from_pretrained(j,Qt);throw Error(`Unsupported model type: ${Qt.config.model_type}`)}}const J0=new Map([["bert",["BertModel",Ye]],["modernbert",["ModernBertModel",OA]],["nomic_bert",["NomicBertModel",Qe]],["roformer",["RoFormerModel",Mt]],["electra",["ElectraModel",Xe]],["esm",["EsmModel",Ps]],["convbert",["ConvBertModel",Ar]],["camembert",["CamembertModel",Qs]],["deberta",["DebertaModel",Ma]],["deberta-v2",["DebertaV2Model",gs]],["mpnet",["MPNetModel",$s]],["albert",["AlbertModel",de]],["distilbert",["DistilBertModel",ts]],["roberta",["RobertaModel",Pi]],["xlm",["XLMModel",e0]],["xlm-roberta",["XLMRobertaModel",s0]],["clap",["ClapModel",Eo]],["clip",["CLIPModel",Re]],["clipseg",["CLIPSegModel",He]],["chinese_clip",["ChineseCLIPModel",l0]],["siglip",["SiglipModel",Ci]],["jina_clip",["JinaCLIPModel",ri]],["mobilebert",["MobileBertModel",Ss]],["squeezebert",["SqueezeBertModel",_]],["wav2vec2",["Wav2Vec2Model",N2]],["wav2vec2-bert",["Wav2Vec2BertModel",Z2]],["unispeech",["UniSpeechModel",wo]],["unispeech-sat",["UniSpeechSatModel",U2]],["hubert",["HubertModel",J2]],["wavlm",["WavLMModel",Al]],["audio-spectrogram-transformer",["ASTModel",nn]],["vits",["VitsModel",Go]],["pyannote",["PyAnnoteModel",Y2]],["wespeaker-resnet",["WeSpeakerResNetModel",W2]],["detr",["DetrModel",Z]],["rt_detr",["RTDetrModel",WA]],["table-transformer",["TableTransformerModel",Me]],["vit",["ViTModel",$a]],["ijepa",["IJepaModel",Zr]],["pvt",["PvtModel",Ws]],["vit_msn",["ViTMSNModel",v0]],["vit_mae",["ViTMAEModel",Ca]],["groupvit",["GroupViTModel",na]],["fastvit",["FastViTModel",Ln]],["mobilevit",["MobileViTModel",e]],["mobilevitv2",["MobileViTV2Model",a]],["owlvit",["OwlViTModel",o]],["owlv2",["Owlv2Model",m]],["beit",["BeitModel",E]],["deit",["DeiTModel",ft]],["hiera",["HieraModel",er]],["convnext",["ConvNextModel",I2]],["convnextv2",["ConvNextV2Model",k2]],["dinov2",["Dinov2Model",B2]],["dinov2_with_registers",["Dinov2WithRegistersModel",y2]],["resnet",["ResNetModel",yr]],["swin",["SwinModel",Wr]],["swin2sr",["Swin2SRModel",la]],["donut-swin",["DonutSwinModel",b2]],["yolos",["YolosModel",ci]],["dpt",["DPTModel",ns]],["glpn",["GLPNModel",h2]],["hifigan",["SpeechT5HifiGan",ll]],["efficientnet",["EfficientNetModel",Il]],["decision_transformer",["DecisionTransformerModel",Dl]],["patchtst",["PatchTSTForPrediction",Sl]],["patchtsmixer",["PatchTSMixerForPrediction",Ol]],["mobilenet_v1",["MobileNetV1Model",kl]],["mobilenet_v2",["MobileNetV2Model",Bl]],["mobilenet_v3",["MobileNetV3Model",yl]],["mobilenet_v4",["MobileNetV4Model",Ml]],["maskformer",["MaskFormerModel",f2]],["mgp-str",["MgpstrForSceneTextRecognition",Fl]],["style_text_to_speech_2",["StyleTextToSpeech2Model",il]]]),v1=new Map([["t5",["T5Model",Yt]],["longt5",["LongT5Model",sr]],["mt5",["MT5Model",Ke]],["bart",["BartModel",pa]],["mbart",["MBartModel",ge]],["marian",["MarianModel",P2]],["whisper",["WhisperModel",i0]],["m2m_100",["M2M100Model",F2]],["blenderbot",["BlenderbotModel",Qr]],["blenderbot-small",["BlenderbotSmallModel",xr]]]),Yl=new Map([["bloom",["BloomModel",fr]],["jais",["JAISModel",g0]],["gpt2",["GPT2Model",bi]],["gptj",["GPTJModel",Ht]],["gpt_bigcode",["GPTBigCodeModel",m0]],["gpt_neo",["GPTNeoModel",d0]],["gpt_neox",["GPTNeoXModel",p0]],["codegen",["CodeGenModel",aa]],["llama",["LlamaModel",In]],["exaone",["ExaoneModel",vr]],["olmo",["OlmoModel",kn]],["olmo2",["Olmo2Model",Ri]],["mobilellm",["MobileLLMModel",sa]],["granite",["GraniteModel",b0]],["cohere",["CohereModel",ms]],["gemma",["GemmaModel",En]],["gemma2",["Gemma2Model",Fa]],["openelm",["OpenELMModel",_a]],["qwen2",["Qwen2Model",Dn]],["phi",["PhiModel",ma]],["phi3",["Phi3Model",Tn]],["mpt",["MptModel",ni]],["opt",["OPTModel",Fn]],["mistral",["MistralModel",Bo]],["starcoder2",["Starcoder2Model",gl]],["falcon",["FalconModel",yo]],["stablelm",["StableLmModel",Cl]]]),Ho=new Map([["speecht5",["SpeechT5ForSpeechToText",nl]],["whisper",["WhisperForConditionalGeneration",n0]],["moonshine",["MoonshineForConditionalGeneration",Pa]]]),Hl=new Map([["speecht5",["SpeechT5ForTextToSpeech",ol]]]),Rl=new Map([["vits",["VitsModel",Go]],["musicgen",["MusicgenForConditionalGeneration",Po]]]),Wl=new Map([["bert",["BertForSequenceClassification",Oe]],["modernbert",["ModernBertForSequenceClassification",he]],["roformer",["RoFormerForSequenceClassification",dt]],["electra",["ElectraForSequenceClassification",Ne]],["esm",["EsmForSequenceClassification",pi]],["convbert",["ConvBertForSequenceClassification",It]],["camembert",["CamembertForSequenceClassification",Is]],["deberta",["DebertaForSequenceClassification",Hr]],["deberta-v2",["DebertaV2ForSequenceClassification",qs]],["mpnet",["MPNetForSequenceClassification",Ns]],["albert",["AlbertForSequenceClassification",Se]],["distilbert",["DistilBertForSequenceClassification",us]],["roberta",["RobertaForSequenceClassification",zi]],["xlm",["XLMForSequenceClassification",r0]],["xlm-roberta",["XLMRobertaForSequenceClassification",Ta]],["bart",["BartForSequenceClassification",rt]],["mbart",["MBartForSequenceClassification",ha]],["mobilebert",["MobileBertForSequenceClassification",wt]],["squeezebert",["SqueezeBertForSequenceClassification",NA]]]),Vl=new Map([["bert",["BertForTokenClassification",gA]],["modernbert",["ModernBertForTokenClassification",ce]],["roformer",["RoFormerForTokenClassification",Ct]],["electra",["ElectraForTokenClassification",Zt]],["esm",["EsmForTokenClassification",Fs]],["convbert",["ConvBertForTokenClassification",Ka]],["camembert",["CamembertForTokenClassification",Ts]],["deberta",["DebertaForTokenClassification",cs]],["deberta-v2",["DebertaV2ForTokenClassification",Js]],["mpnet",["MPNetForTokenClassification",rs]],["distilbert",["DistilBertForTokenClassification",_s]],["roberta",["RobertaForTokenClassification",Gt]],["xlm",["XLMForTokenClassification",a0]],["xlm-roberta",["XLMRobertaForTokenClassification",Kr]]]),Ro=new Map([["t5",["T5ForConditionalGeneration",Vt]],["longt5",["LongT5ForConditionalGeneration",jt]],["mt5",["MT5ForConditionalGeneration",Jt]],["bart",["BartForConditionalGeneration",ir]],["mbart",["MBartForConditionalGeneration",Je]],["marian",["MarianMTModel",z2]],["m2m_100",["M2M100ForConditionalGeneration",S2]],["blenderbot",["BlenderbotForConditionalGeneration",Cr]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",Ai]]]),Wo=new Map([["bloom",["BloomForCausalLM",Pn]],["gpt2",["GPT2LMHeadModel",ds]],["jais",["JAISLMHeadModel",u0]],["gptj",["GPTJForCausalLM",bn]],["gpt_bigcode",["GPTBigCodeForCausalLM",ra]],["gpt_neo",["GPTNeoForCausalLM",f0]],["gpt_neox",["GPTNeoXForCausalLM",h0]],["codegen",["CodeGenForCausalLM",ps]],["llama",["LlamaForCausalLM",C0]],["exaone",["ExaoneForCausalLM",Ii]],["olmo",["OlmoForCausalLM",xn]],["olmo2",["Olmo2ForCausalLM",is]],["mobilellm",["MobileLLMForCausalLM",si]],["granite",["GraniteForCausalLM",vn]],["cohere",["CohereForCausalLM",Vi]],["gemma",["GemmaForCausalLM",ji]],["gemma2",["Gemma2ForCausalLM",ki]],["openelm",["OpenELMForCausalLM",Gn]],["qwen2",["Qwen2ForCausalLM",ii]],["phi",["PhiForCausalLM",xi]],["phi3",["Phi3ForCausalLM",Ki]],["mpt",["MptForCausalLM",k0]],["opt",["OPTForCausalLM",x0]],["mbart",["MBartForCausalLM",Nr]],["mistral",["MistralForCausalLM",vo]],["starcoder2",["Starcoder2ForCausalLM",ul]],["falcon",["FalconForCausalLM",dl]],["trocr",["TrOCRForCausalLM",D0]],["stablelm",["StableLmForCausalLM",bl]],["phi3_v",["Phi3VForCausalLM",De]]]),y1=new Map([["multi_modality",["MultiModalityCausalLM",Tl]]]),Vo=new Map([["bert",["BertForMaskedLM",J]],["modernbert",["ModernBertForMaskedLM",_A]],["roformer",["RoFormerForMaskedLM",Tt]],["electra",["ElectraForMaskedLM",$e]],["esm",["EsmForMaskedLM",zs]],["convbert",["ConvBertForMaskedLM",Aa]],["camembert",["CamembertForMaskedLM",bs]],["deberta",["DebertaForMaskedLM",Dr]],["deberta-v2",["DebertaV2ForMaskedLM",di]],["mpnet",["MPNetForMaskedLM",Bs]],["albert",["AlbertForMaskedLM",Ve]],["distilbert",["DistilBertForMaskedLM",ws]],["roberta",["RobertaForMaskedLM",Ga]],["xlm",["XLMWithLMHeadModel",t0]],["xlm-roberta",["XLMRobertaForMaskedLM",Fi]],["mobilebert",["MobileBertForMaskedLM",xs]],["squeezebert",["SqueezeBertForMaskedLM",BA]]]),jl=new Map([["bert",["BertForQuestionAnswering",$]],["roformer",["RoFormerForQuestionAnswering",$t]],["electra",["ElectraForQuestionAnswering",Ra]],["convbert",["ConvBertForQuestionAnswering",La]],["camembert",["CamembertForQuestionAnswering",ea]],["deberta",["DebertaForQuestionAnswering",Xt]],["deberta-v2",["DebertaV2ForQuestionAnswering",fi]],["mpnet",["MPNetForQuestionAnswering",Os]],["albert",["AlbertForQuestionAnswering",HA]],["distilbert",["DistilBertForQuestionAnswering",qa]],["roberta",["RobertaForQuestionAnswering",ta]],["xlm",["XLMForQuestionAnswering",ei]],["xlm-roberta",["XLMRobertaForQuestionAnswering",qe]],["mobilebert",["MobileBertForQuestionAnswering",zt]],["squeezebert",["SqueezeBertForQuestionAnswering",VA]]]),jo=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",rr]],["idefics3",["Idefics3ForConditionalGeneration",dn]]]),E1=new Map([["llava",["LlavaForConditionalGeneration",mi]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",xa]],["moondream1",["Moondream1ForConditionalGeneration",Ys]],["florence2",["Florence2ForConditionalGeneration",cn]],["qwen2-vl",["Qwen2VLForConditionalGeneration",w0]],["idefics3",["Idefics3ForConditionalGeneration",dn]],["paligemma",["PaliGemmaForConditionalGeneration",Hs]]]),M1=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",rr]]]),Ul=new Map([["vit",["ViTForImageClassification",Sn]],["ijepa",["IJepaForImageClassification",ar]],["pvt",["PvtForImageClassification",Vs]],["vit_msn",["ViTMSNForImageClassification",oi]],["fastvit",["FastViTForImageClassification",js]],["mobilevit",["MobileViTForImageClassification",t]],["mobilevitv2",["MobileViTV2ForImageClassification",s]],["beit",["BeitForImageClassification",T]],["deit",["DeiTForImageClassification",Nt]],["hiera",["HieraForImageClassification",pr]],["convnext",["ConvNextForImageClassification",w2]],["convnextv2",["ConvNextV2ForImageClassification",x2]],["dinov2",["Dinov2ForImageClassification",v2]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",E2]],["resnet",["ResNetForImageClassification",Er]],["swin",["SwinForImageClassification",oa]],["segformer",["SegformerForImageClassification",hl]],["efficientnet",["EfficientNetForImageClassification",wl]],["mobilenet_v1",["MobileNetV1ForImageClassification",xl]],["mobilenet_v2",["MobileNetV2ForImageClassification",vl]],["mobilenet_v3",["MobileNetV3ForImageClassification",El]],["mobilenet_v4",["MobileNetV4ForImageClassification",Oo]]]),Kl=new Map([["detr",["DetrForObjectDetection",AA]],["rt_detr",["RTDetrForObjectDetection",KA]],["table-transformer",["TableTransformerForObjectDetection",ze]],["yolos",["YolosForObjectDetection",Xi]]]),Zl=new Map([["owlvit",["OwlViTForObjectDetection",c]],["owlv2",["Owlv2ForObjectDetection",p]],["grounding-dino",["GroundingDinoForObjectDetection",G2]]]),Xl=new Map([["detr",["DetrForSegmentation",cA]],["clipseg",["CLIPSegForImageSegmentation",Ja]]]),ql=new Map([["segformer",["SegformerForSemanticSegmentation",ml]],["sapiens",["SapiensForSemanticSegmentation",Mi]]]),Jl=new Map([["detr",["DetrForSegmentation",cA]],["maskformer",["MaskFormerForInstanceSegmentation",p2]]]),_l=new Map([["sam",["SamModel",Q2]]]),$l=new Map([["wav2vec2",["Wav2Vec2ForCTC",O2]],["wav2vec2-bert",["Wav2Vec2BertForCTC",X2]],["unispeech",["UniSpeechForCTC",V2]],["unispeech-sat",["UniSpeechSatForCTC",ko]],["wavlm",["WavLMForCTC",el]],["hubert",["HubertForCTC",_2]]]),A1=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",Io]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",q2]],["unispeech",["UniSpeechForSequenceClassification",j2]],["unispeech-sat",["UniSpeechSatForSequenceClassification",K2]],["wavlm",["WavLMForSequenceClassification",tl]],["hubert",["HubertForSequenceClassification",$2]],["audio-spectrogram-transformer",["ASTForAudioClassification",Si]]]),e1=new Map([["wavlm",["WavLMForXVector",rl]]]),t1=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",xo]],["wavlm",["WavLMForAudioFrameClassification",al]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",L2]],["pyannote",["PyAnnoteForAudioFrameClassification",H2]]]),Uo=new Map([["vitmatte",["VitMatteForImageMatting",li]]]),G1=new Map([["patchtst",["PatchTSTForPrediction",Nl]],["patchtsmixer",["PatchTSMixerForPrediction",Ll]]]),Ko=new Map([["swin2sr",["Swin2SRForImageSuperResolution",va]]]),Zo=new Map([["dpt",["DPTForDepthEstimation",os]],["depth_anything",["DepthAnythingForDepthEstimation",Ei]],["glpn",["GLPNForDepthEstimation",m2]],["sapiens",["SapiensForDepthEstimation",Gi]],["depth_pro",["DepthProForDepthEstimation",M0]]]),Xo=new Map([["sapiens",["SapiensForNormalEstimation",Yn]]]),r1=new Map([["vitpose",["VitPoseForPoseEstimation",B0]]]),a1=new Map([["clip",["CLIPVisionModelWithProjection",za]],["siglip",["SiglipVisionModel",Pr]],["jina_clip",["JinaCLIPVisionModel",Oi]]]),qo=[[J0,g],[v1,b],[Yl,M],[Wl,g],[Vl,g],[Ro,A],[Ho,A],[Wo,M],[y1,RA],[Vo,g],[jl,g],[jo,l],[E1,D],[Ul,g],[Xl,g],[Jl,g],[ql,g],[Uo,g],[G1,g],[Ko,g],[Zo,g],[Xo,g],[r1,g],[Kl,g],[Zl,g],[_l,uA],[$l,g],[A1,g],[Hl,A],[Rl,g],[e1,g],[t1,g],[a1,g]];for(const[K,j]of qo)for(const[yA,Ae]of K.values())YA.set(yA,j),ee.set(Ae,yA),qA.set(yA,Ae);const D1=[["MusicgenForConditionalGeneration",Po,P],["Phi3VForCausalLM",De,SA],["CLIPTextModelWithProjection",Ni,g],["SiglipTextModel",hn,g],["JinaCLIPTextModel",c0,g],["ClapTextModelWithProjection",fl,g],["ClapAudioModelWithProjection",pl,g]];for(const[K,j,yA]of D1)YA.set(K,yA),ee.set(j,K),qA.set(K,j);class Q1 extends br{static MODEL_CLASS_MAPPINGS=qo.map(j=>j[0]);static BASE_IF_FAIL=!0}class ac extends br{static MODEL_CLASS_MAPPINGS=[Wl]}class s1 extends br{static MODEL_CLASS_MAPPINGS=[Vl]}class Vn extends br{static MODEL_CLASS_MAPPINGS=[Ro]}class i1 extends br{static MODEL_CLASS_MAPPINGS=[Ho]}class sc extends br{static MODEL_CLASS_MAPPINGS=[Hl]}class ic extends br{static MODEL_CLASS_MAPPINGS=[Rl]}class Dt extends br{static MODEL_CLASS_MAPPINGS=[Wo]}class T1 extends br{static MODEL_CLASS_MAPPINGS=[Vo]}class Di extends br{static MODEL_CLASS_MAPPINGS=[jl]}class P1 extends br{static MODEL_CLASS_MAPPINGS=[jo]}class n1 extends br{static MODEL_CLASS_MAPPINGS=[Ul]}class nc extends br{static MODEL_CLASS_MAPPINGS=[Xl]}class qr extends br{static MODEL_CLASS_MAPPINGS=[ql]}class St extends br{static MODEL_CLASS_MAPPINGS=[Jl]}class Rt extends br{static MODEL_CLASS_MAPPINGS=[Kl]}class Ji extends br{static MODEL_CLASS_MAPPINGS=[Zl]}class oc extends br{static MODEL_CLASS_MAPPINGS=[_l]}class o1 extends br{static MODEL_CLASS_MAPPINGS=[$l]}class lc extends br{static MODEL_CLASS_MAPPINGS=[A1]}class l1 extends br{static MODEL_CLASS_MAPPINGS=[e1]}class cc extends br{static MODEL_CLASS_MAPPINGS=[t1]}class gc extends br{static MODEL_CLASS_MAPPINGS=[M1]}class c1 extends br{static MODEL_CLASS_MAPPINGS=[Uo]}class uc extends br{static MODEL_CLASS_MAPPINGS=[Ko]}class dc extends br{static MODEL_CLASS_MAPPINGS=[Zo]}class fc extends br{static MODEL_CLASS_MAPPINGS=[Xo]}class jn extends br{static MODEL_CLASS_MAPPINGS=[r1]}class g1 extends br{static MODEL_CLASS_MAPPINGS=[a1]}class pc extends fe{constructor({logits:j,past_key_values:yA,encoder_outputs:Ae,decoder_attentions:se=null,cross_attentions:ue=null}){super(),this.logits=j,this.past_key_values=yA,this.encoder_outputs=Ae,this.decoder_attentions=se,this.cross_attentions=ue}}class Pt extends fe{constructor({logits:j,...yA}){super(),this.logits=j;const Ae=Object.values(yA);Ae.length>0&&(this.attentions=Ae)}}class Jo extends fe{constructor({logits:j,embeddings:yA}){super(),this.logits=j,this.embeddings=yA}}class Qa extends fe{constructor({logits:j}){super(),this.logits=j}}class Sa extends fe{constructor({logits:j}){super(),this.logits=j}}class ja extends fe{constructor({start_logits:j,end_logits:yA}){super(),this.start_logits=j,this.end_logits=yA}}class Un extends fe{constructor({logits:j}){super(),this.logits=j}}class hc extends fe{constructor({logits:j,past_key_values:yA}){super(),this.logits=j,this.past_key_values=yA}}class z1 extends fe{constructor({alphas:j}){super(),this.alphas=j}}class F1 extends fe{constructor({waveform:j,spectrogram:yA}){super(),this.waveform=j,this.spectrogram=yA}}},"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":(x,C,d)=>{d.r(C),d.d(C,{ASTFeatureExtractor:()=>V});var k=d("./src/base/feature_extraction_utils.js");d("./src/utils/tensor.js");var z=d("./src/utils/audio.js");class V extends k.FeatureExtractor{constructor(U){super(U);const q=this.config.sampling_rate,W=(0,z.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(q/2),q,null,"kaldi",!0);for(let S=0;S<W.length;++S)W[S].push(0);this.mel_filters=W,this.window=(0,z.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(U,q){return(0,z.spectrogram)(U,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:q,transpose:!0})}async _call(U){(0,k.validate_audio_inputs)(U,"ASTFeatureExtractor");const q=await this._extract_fbank_features(U,this.config.max_length);if(this.config.do_normalize){const W=2*this.std,S=q.data;for(let X=0;X<S.length;++X)S[X]=(S[X]-this.mean)/W}return{input_values:q.unsqueeze_(0)}}}},"./src/models/auto/feature_extraction_auto.js":(x,C,d)=>{d.r(C),d.d(C,{AutoFeatureExtractor:()=>L});var k=d("./src/utils/constants.js"),z=d("./src/utils/hub.js");d("./src/base/feature_extraction_utils.js");var V=d("./src/models/feature_extractors.js");class L{static async from_pretrained(q,W={}){const S=await(0,z.getModelJSON)(q,k.FEATURE_EXTRACTOR_NAME,!0,W),X=S.feature_extractor_type,R=V[X];if(!R)throw new Error(`Unknown feature_extractor_type: '${X}'. Please report this at ${k.GITHUB_ISSUE_URL}.`);return new R(S)}}},"./src/models/auto/image_processing_auto.js":(x,C,d)=>{d.r(C),d.d(C,{AutoImageProcessor:()=>U});var k=d("./src/utils/constants.js"),z=d("./src/utils/hub.js"),V=d("./src/base/image_processors_utils.js"),L=d("./src/models/image_processors.js");class U{static async from_pretrained(W,S={}){const X=await(0,z.getModelJSON)(W,k.IMAGE_PROCESSOR_NAME,!0,S),R=X.image_processor_type??X.feature_extractor_type;let aA=L[R];return aA||(R!==void 0&&console.warn(`Image processor type '${R}' not found, assuming base ImageProcessor. Please report this at ${k.GITHUB_ISSUE_URL}.`),aA=V.ImageProcessor),new aA(X)}}},"./src/models/auto/processing_auto.js":(x,C,d)=>{d.r(C),d.d(C,{AutoProcessor:()=>W});var k=d("./src/utils/constants.js"),z=d("./src/utils/hub.js"),V=d("./src/base/processing_utils.js"),L=d("./src/models/processors.js"),U=d("./src/models/image_processors.js"),q=d("./src/models/feature_extractors.js");class W{static async from_pretrained(X,R={}){const aA=await(0,z.getModelJSON)(X,k.IMAGE_PROCESSOR_NAME,!0,R),{image_processor_type:CA,feature_extractor_type:kA,processor_class:EA}=aA;if(EA&&L[EA])return L[EA].from_pretrained(X,R);if(!CA&&!kA)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const sA={};if(CA){const nA=U[CA];if(!nA)throw new Error(`Unknown image_processor_type: '${CA}'.`);sA.image_processor=new nA(aA)}if(kA){const nA=U[kA];if(nA)sA.image_processor=new nA(aA);else{const xA=q[kA];if(!xA)throw new Error(`Unknown feature_extractor_type: '${kA}'.`);sA.feature_extractor=new xA(aA)}}return new V.Processor({},sA)}}},"./src/models/beit/image_processing_beit.js":(x,C,d)=>{d.r(C),d.d(C,{BeitFeatureExtractor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}},"./src/models/bit/image_processing_bit.js":(x,C,d)=>{d.r(C),d.d(C,{BitImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}},"./src/models/chinese_clip/image_processing_chinese_clip.js":(x,C,d)=>{d.r(C),d.d(C,{ChineseCLIPFeatureExtractor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}},"./src/models/clap/feature_extraction_clap.js":(x,C,d)=>{d.r(C),d.d(C,{ClapFeatureExtractor:()=>V});var k=d("./src/base/feature_extraction_utils.js");d("./src/utils/tensor.js");var z=d("./src/utils/audio.js");class V extends k.FeatureExtractor{constructor(U){super(U),this.mel_filters=(0,z.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,z.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,z.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(U,q,W,S){let X;const R=U.length-q;if(R>0){if(W!=="rand_trunc")throw new Error(`Truncation strategy "${W}" not implemented`);{const aA=Math.floor(Math.random()*(R+1));U=U.subarray(aA,aA+q),X=await this._extract_fbank_features(U,this.mel_filters_slaney,this.config.nb_max_samples)}}else{if(R<0){let aA=new Float64Array(q);if(aA.set(U),S==="repeat")for(let CA=U.length;CA<q;CA+=U.length)aA.set(U.subarray(0,Math.min(U.length,q-CA)),CA);else if(S==="repeatpad")for(let CA=U.length;CA<-R;CA+=U.length)aA.set(U,CA);U=aA}if(W==="fusion")throw new Error(`Truncation strategy "${W}" not implemented`);X=await this._extract_fbank_features(U,this.mel_filters_slaney,this.config.nb_max_samples)}return X.unsqueeze_(0)}async _extract_fbank_features(U,q,W=null){return(0,z.spectrogram)(U,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:q,log_mel:"dB",max_num_frames:W,do_pad:!1,transpose:!0})}async _call(U,{max_length:q=null}={}){return(0,k.validate_audio_inputs)(U,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(U,q??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}},"./src/models/clip/image_processing_clip.js":(x,C,d)=>{d.r(C),d.d(C,{CLIPFeatureExtractor:()=>V,CLIPImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}class V extends z{}},"./src/models/convnext/image_processing_convnext.js":(x,C,d)=>{d.r(C),d.d(C,{ConvNextFeatureExtractor:()=>V,ConvNextImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{constructor(U){super(U),this.crop_pct=this.config.crop_pct??.875}async resize(U){const q=this.size?.shortest_edge;if(q===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(q<384){const W=Math.floor(q/this.crop_pct),[S,X]=this.get_resize_output_image_size(U,{shortest_edge:W});U=await U.resize(S,X,{resample:this.resample}),U=await U.center_crop(q,q)}else U=await U.resize(q,q,{resample:this.resample});return U}}class V extends z{}},"./src/models/deit/image_processing_deit.js":(x,C,d)=>{d.r(C),d.d(C,{DeiTFeatureExtractor:()=>V,DeiTImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}class V extends z{}},"./src/models/detr/image_processing_detr.js":(x,C,d)=>{d.r(C),d.d(C,{DetrFeatureExtractor:()=>L,DetrImageProcessor:()=>V});var k=d("./src/base/image_processors_utils.js"),z=d("./src/utils/tensor.js");class V extends k.ImageProcessor{async _call(q){const W=await super._call(q),S=[W.pixel_values.dims[0],64,64],X=(0,z.full)(S,1n);return{...W,pixel_mask:X}}post_process_object_detection(...q){return(0,k.post_process_object_detection)(...q)}post_process_panoptic_segmentation(...q){return(0,k.post_process_panoptic_segmentation)(...q)}post_process_instance_segmentation(...q){return(0,k.post_process_instance_segmentation)(...q)}}class L extends V{}},"./src/models/donut/image_processing_donut.js":(x,C,d)=>{d.r(C),d.d(C,{DonutFeatureExtractor:()=>V,DonutImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{pad_image(U,q,W,S={}){const[X,R,aA]=q;let CA=this.image_mean;Array.isArray(this.image_mean)||(CA=new Array(aA).fill(CA));let kA=this.image_std;Array.isArray(kA)||(kA=new Array(aA).fill(CA));const EA=CA.map((sA,nA)=>-sA/kA[nA]);return super.pad_image(U,q,W,{center:!0,constant_values:EA,...S})}}class V extends z{}},"./src/models/dpt/image_processing_dpt.js":(x,C,d)=>{d.r(C),d.d(C,{DPTFeatureExtractor:()=>V,DPTImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}class V extends z{}},"./src/models/efficientnet/image_processing_efficientnet.js":(x,C,d)=>{d.r(C),d.d(C,{EfficientNetImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{constructor(L){super(L),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(U=>U*U))}}},"./src/models/feature_extractors.js":(x,C,d)=>{d.r(C),d.d(C,{ASTFeatureExtractor:()=>k.ASTFeatureExtractor,ClapFeatureExtractor:()=>z.ClapFeatureExtractor,ImageFeatureExtractor:()=>R.ImageProcessor,MoonshineFeatureExtractor:()=>V.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>L.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>U.SeamlessM4TFeatureExtractor,SpeechT5FeatureExtractor:()=>q.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>W.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>S.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>X.WhisperFeatureExtractor});var k=d("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),z=d("./src/models/clap/feature_extraction_clap.js"),V=d("./src/models/moonshine/feature_extraction_moonshine.js"),L=d("./src/models/pyannote/feature_extraction_pyannote.js"),U=d("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),q=d("./src/models/speecht5/feature_extraction_speecht5.js"),W=d("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),S=d("./src/models/wespeaker/feature_extraction_wespeaker.js"),X=d("./src/models/whisper/feature_extraction_whisper.js"),R=d("./src/base/image_processors_utils.js")},"./src/models/florence2/processing_florence2.js":(x,C,d)=>{d.r(C),d.d(C,{Florence2Processor:()=>L});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js");class L extends k.Processor{static tokenizer_class=V.AutoTokenizer;static image_processor_class=z.AutoImageProcessor;constructor(q,W){super(q,W);const{tasks_answer_post_processing_type:S,task_prompts_without_inputs:X,task_prompts_with_input:R}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(S??{})),this.task_prompts_without_inputs=new Map(Object.entries(X??{})),this.task_prompts_with_input=new Map(Object.entries(R??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(q){typeof q=="string"&&(q=[q]);const W=[];for(const S of q)if(this.task_prompts_without_inputs.has(S))W.push(this.task_prompts_without_inputs.get(S));else{for(const[X,R]of this.task_prompts_with_input)if(S.includes(X)){W.push(R.replaceAll("{input}",S).replaceAll(X,""));break}W.length!==q.length&&W.push(S)}return W}post_process_generation(q,W,S){const X=this.tasks_answer_post_processing_type.get(W)??"pure_text";let R;switch(q=q.replaceAll("<s>","").replaceAll("</s>",""),X){case"pure_text":R=q;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const aA=X==="ocr"?"quad_boxes":"bboxes",CA=q.matchAll(this.regexes[aA]),kA=[],EA=[];for(const[sA,nA,...xA]of CA)kA.push(nA?nA.trim():kA.at(-1)??""),EA.push(xA.map((g,b)=>(Number(g)+.5)/this.size_per_bin*S[b%2]));R={labels:kA,[aA]:EA};break;default:throw new Error(`Task "${W}" (of type "${X}") not yet implemented.`)}return{[W]:R}}async _call(q,W=null,S={}){if(!q&&!W)throw new Error("Either text or images must be provided");return{...await this.image_processor(q,S),...W?this.tokenizer(W,S):{}}}}},"./src/models/glpn/image_processing_glpn.js":(x,C,d)=>{d.r(C),d.d(C,{GLPNFeatureExtractor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}},"./src/models/grounding_dino/image_processing_grounding_dino.js":(x,C,d)=>{d.r(C),d.d(C,{GroundingDinoImageProcessor:()=>V});var k=d("./src/base/image_processors_utils.js"),z=d("./src/utils/tensor.js");class V extends k.ImageProcessor{async _call(U){const q=await super._call(U),W=q.pixel_values.dims,S=(0,z.ones)([W[0],W[2],W[3]]);return{...q,pixel_mask:S}}}},"./src/models/grounding_dino/processing_grounding_dino.js":(x,C,d)=>{d.r(C),d.d(C,{GroundingDinoProcessor:()=>q});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js"),L=d("./src/base/image_processors_utils.js");function U(W,S){const X=W.dims.at(-1)-1,R=W.tolist();R.fill(!1,0,1),R.fill(!1,X);const aA=S.tolist();return R.map((CA,kA)=>CA?kA:null).filter(CA=>CA!==null).map(CA=>aA[CA])}class q extends k.Processor{static tokenizer_class=V.AutoTokenizer;static image_processor_class=z.AutoImageProcessor;async _call(S,X,R={}){const aA=S?await this.image_processor(S,R):{};return{...X?this.tokenizer(X,R):{},...aA}}post_process_grounded_object_detection(S,X,{box_threshold:R=.25,text_threshold:aA=.25,target_sizes:CA=null}={}){const{logits:kA,pred_boxes:EA}=S,sA=kA.dims[0];if(CA!==null&&CA.length!==sA)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const nA=kA.dims.at(1),xA=kA.sigmoid(),g=xA.max(-1).tolist(),b=EA.tolist().map(l=>l.map(M=>(0,L.center_to_corners_format)(M))),A=[];for(let l=0;l<sA;++l){const M=CA!==null?CA[l]:null;M!==null&&(b[l]=b[l].map(SA=>SA.map((YA,qA)=>YA*M[(qA+1)%2])));const uA=g[l],D=[],P=[],RA=[];for(let SA=0;SA<nA;++SA){const YA=uA[SA];if(YA<=R)continue;const qA=b[l][SA],ee=xA[l][SA];D.push(YA),RA.push(qA);const xe=U(ee.gt(aA),X[l]);P.push(xe)}A.push({scores:D,boxes:RA,labels:this.batch_decode(P)})}return A}}},"./src/models/idefics3/image_processing_idefics3.js":(x,C,d)=>{d.r(C),d.d(C,{Idefics3ImageProcessor:()=>V});var k=d("./src/base/image_processors_utils.js"),z=d("./src/utils/tensor.js");class V extends k.ImageProcessor{constructor(U){super(U),this.do_image_splitting=U.do_image_splitting??!0,this.max_image_size=U.max_image_size}get_resize_for_vision_encoder(U,q){let[W,S]=U.dims.slice(-2);const X=S/W;return S>=W?(S=Math.ceil(S/q)*q,W=Math.floor(S/X),W=Math.ceil(W/q)*q):(W=Math.ceil(W/q)*q,S=Math.floor(W*X),S=Math.ceil(S/q)*q),{height:W,width:S}}async _call(U,{do_image_splitting:q=null,return_row_col_info:W=!1}={}){let S;if(Array.isArray(U)){if(U.length===0||!U[0])throw new Error("No images provided.");S=Array.isArray(U[0])?U:[U]}else S=[[U]];let X=[],R=[],aA=[];const CA=[],kA=[];for(const l of S){let M=await Promise.all(l.map(P=>this.preprocess(P)));CA.push(...M.map(P=>P.original_size)),kA.push(...M.map(P=>P.reshaped_input_size)),M.forEach(P=>P.pixel_values.unsqueeze_(0));const{longest_edge:uA}=this.max_image_size;let D;if(q??this.do_image_splitting){let P=new Array(M.length),RA=new Array(M.length);D=await Promise.all(M.map(async(SA,YA)=>{const qA=this.get_resize_for_vision_encoder(SA.pixel_values,uA),ee=await(0,z.interpolate_4d)(SA.pixel_values,{size:[qA.height,qA.width]}),{frames:xe,num_splits_h:Ge,num_splits_w:GA}=await this.split_image(ee,this.max_image_size);return P[YA]=Ge,RA[YA]=GA,(0,z.cat)(xe,0)})),R.push(P),aA.push(RA)}else{const P=[uA,uA];D=await Promise.all(M.map(RA=>(0,z.interpolate_4d)(RA.pixel_values,{size:P}))),R.push(new Array(M.length).fill(0)),aA.push(new Array(M.length).fill(0))}X.push((0,z.cat)(D,0))}const EA=X.length,[sA,nA,xA,g]=X[0].dims;let b,A;if(EA===1)b=X[0].unsqueeze_(0),A=(0,z.full)([EA,sA,xA,g],!0);else{const l=Math.max(...X.map(D=>D.dims.at(0)));A=(0,z.full)([EA,l,xA,g],!0);const M=A.data,uA=l*xA*g;for(let D=0;D<EA;++D){const P=X[D].dims[0];if(P<l){X[D]=(0,z.cat)([X[D],(0,z.full)([l-P,nA,xA,g],0)],0);const RA=D*uA+P*xA*g,SA=(D+1)*uA;M.fill(!1,RA,SA)}}b=(0,z.stack)(X,0)}return{pixel_values:b,pixel_attention_mask:A,original_sizes:CA,reshaped_input_sizes:kA,...W?{rows:R,cols:aA}:{}}}async split_image(U,{longest_edge:q}){const W=q,S=q,X=[],[R,aA]=U.dims.slice(-2);let CA=0,kA=0;if(R>W||aA>S){CA=Math.ceil(R/W),kA=Math.ceil(aA/S);const EA=Math.ceil(R/CA),sA=Math.ceil(aA/kA);for(let g=0;g<CA;++g)for(let b=0;b<kA;++b){let A,l,M,uA;g===CA-1?(l=R-EA,uA=R):(l=g*EA,uA=(g+1)*EA),b===kA-1?(A=aA-sA,M=aA):(A=b*sA,M=(b+1)*sA);const D=[l,A],P=[uA,M],RA=await(0,z.slice)(U,D,P,[2,3]);X.push(RA)}const nA=W,xA=S;R===nA&&aA===xA||(U=await(0,z.interpolate_4d)(U,{size:[nA,xA]}))}return X.push(U),{frames:X,num_splits_h:CA,num_splits_w:kA}}}},"./src/models/idefics3/processing_idefics3.js":(x,C,d)=>{d.r(C),d.d(C,{Idefics3Processor:()=>q});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js");d("./src/utils/image.js");var L=d("./src/utils/core.js");function U(W,S,X,R,aA,CA){return W===0&&S===0?function(kA,EA,sA,nA){return`${EA}${nA}`+sA.repeat(kA)+`${EA}`}(X,R,aA,CA):function(kA,EA,sA,nA,xA,g){let b="";for(let A=0;A<EA;++A){for(let l=0;l<sA;++l)b+=nA+`<row_${A+1}_col_${l+1}>`+xA.repeat(kA);b+=`
`}return b+=`
${nA}${g}`+xA.repeat(kA)+`${nA}`,b}(X,W,S,R,aA,CA)}class q extends k.Processor{static image_processor_class=z.AutoImageProcessor;static tokenizer_class=V.AutoTokenizer;static uses_processor_config=!0;fake_image_token="<fake_token_around_image>";image_token="<image>";global_img_token="<global-img>";async _call(S,X=null,R={}){let aA;R.return_row_col_info??=!0,X&&(aA=await this.image_processor(X,R)),Array.isArray(S)||(S=[S]);const CA=aA.rows??[new Array(S.length).fill(0)],kA=aA.cols??[new Array(S.length).fill(0)],EA=this.config.image_seq_len,sA=[],nA=[];for(let xA=0;xA<S.length;++xA){const g=S[xA],b=CA[xA],A=kA[xA];sA.push((0,L.count)(g,this.image_token));const l=b.map((D,P)=>U(D,A[P],EA,this.fake_image_token,this.image_token,this.global_img_token)),M=g.split(this.image_token);if(M.length===0)throw new Error("The image token should be present in the text.");let uA=M[0];for(let D=0;D<l.length;++D)uA+=l[D]+M[D+1];nA.push(uA)}return{...this.tokenizer(nA),...aA}}}},"./src/models/image_processors.js":(x,C,d)=>{d.r(C),d.d(C,{BeitFeatureExtractor:()=>k.BeitFeatureExtractor,BitImageProcessor:()=>z.BitImageProcessor,CLIPFeatureExtractor:()=>L.CLIPFeatureExtractor,CLIPImageProcessor:()=>L.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>V.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>U.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>U.ConvNextImageProcessor,DPTFeatureExtractor:()=>X.DPTFeatureExtractor,DPTImageProcessor:()=>X.DPTImageProcessor,DeiTFeatureExtractor:()=>q.DeiTFeatureExtractor,DeiTImageProcessor:()=>q.DeiTImageProcessor,DetrFeatureExtractor:()=>W.DetrFeatureExtractor,DetrImageProcessor:()=>W.DetrImageProcessor,DonutFeatureExtractor:()=>S.DonutFeatureExtractor,DonutImageProcessor:()=>S.DonutImageProcessor,EfficientNetImageProcessor:()=>R.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>aA.GLPNFeatureExtractor,GroundingDinoImageProcessor:()=>CA.GroundingDinoImageProcessor,Idefics3ImageProcessor:()=>kA.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>sA.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>nA.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>xA.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>g.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>g.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>b.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>b.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>A.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>A.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>l.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>l.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>M.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>M.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>uA.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>uA.MobileViTImageProcessor,NougatImageProcessor:()=>D.NougatImageProcessor,OwlViTFeatureExtractor:()=>RA.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>RA.OwlViTImageProcessor,Owlv2ImageProcessor:()=>P.Owlv2ImageProcessor,Phi3VImageProcessor:()=>SA.Phi3VImageProcessor,PvtImageProcessor:()=>YA.PvtImageProcessor,Qwen2VLImageProcessor:()=>qA.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>ee.RTDetrImageProcessor,SamImageProcessor:()=>xe.SamImageProcessor,SegformerFeatureExtractor:()=>Ge.SegformerFeatureExtractor,SegformerImageProcessor:()=>Ge.SegformerImageProcessor,SiglipImageProcessor:()=>GA.SiglipImageProcessor,Swin2SRImageProcessor:()=>bA.Swin2SRImageProcessor,VLMImageProcessor:()=>EA.VLMImageProcessor,ViTFeatureExtractor:()=>PA.ViTFeatureExtractor,ViTImageProcessor:()=>PA.ViTImageProcessor,VitMatteImageProcessor:()=>UA.VitMatteImageProcessor,VitPoseImageProcessor:()=>TA.VitPoseImageProcessor,YolosFeatureExtractor:()=>ke.YolosFeatureExtractor,YolosImageProcessor:()=>ke.YolosImageProcessor});var k=d("./src/models/beit/image_processing_beit.js"),z=d("./src/models/bit/image_processing_bit.js"),V=d("./src/models/chinese_clip/image_processing_chinese_clip.js"),L=d("./src/models/clip/image_processing_clip.js"),U=d("./src/models/convnext/image_processing_convnext.js"),q=d("./src/models/deit/image_processing_deit.js"),W=d("./src/models/detr/image_processing_detr.js"),S=d("./src/models/donut/image_processing_donut.js"),X=d("./src/models/dpt/image_processing_dpt.js"),R=d("./src/models/efficientnet/image_processing_efficientnet.js"),aA=d("./src/models/glpn/image_processing_glpn.js"),CA=d("./src/models/grounding_dino/image_processing_grounding_dino.js"),kA=d("./src/models/idefics3/image_processing_idefics3.js"),EA=d("./src/models/janus/image_processing_janus.js"),sA=d("./src/models/jina_clip/image_processing_jina_clip.js"),nA=d("./src/models/llava_onevision/image_processing_llava_onevision.js"),xA=d("./src/models/mask2former/image_processing_mask2former.js"),g=d("./src/models/maskformer/image_processing_maskformer.js"),b=d("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),A=d("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),l=d("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),M=d("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),uA=d("./src/models/mobilevit/image_processing_mobilevit.js"),D=d("./src/models/nougat/image_processing_nougat.js"),P=d("./src/models/owlv2/image_processing_owlv2.js"),RA=d("./src/models/owlvit/image_processing_owlvit.js"),SA=d("./src/models/phi3_v/image_processing_phi3_v.js"),YA=d("./src/models/pvt/image_processing_pvt.js"),qA=d("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),ee=d("./src/models/rt_detr/image_processing_rt_detr.js"),xe=d("./src/models/sam/image_processing_sam.js"),Ge=d("./src/models/segformer/image_processing_segformer.js"),GA=d("./src/models/siglip/image_processing_siglip.js"),bA=d("./src/models/swin2sr/image_processing_swin2sr.js"),PA=d("./src/models/vit/image_processing_vit.js"),UA=d("./src/models/vitmatte/image_processing_vitmatte.js"),TA=d("./src/models/vitpose/image_processing_vitpose.js"),ke=d("./src/models/yolos/image_processing_yolos.js")},"./src/models/janus/image_processing_janus.js":(x,C,d)=>{d.r(C),d.d(C,{VLMImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{constructor(L){super({do_pad:!0,pad_size:{width:L.image_size,height:L.image_size},...L}),this.constant_values=this.config.background_color.map(U=>U*this.rescale_factor)}pad_image(L,U,q,W){return super.pad_image(L,U,q,{constant_values:this.constant_values,center:!0,...W})}}},"./src/models/janus/processing_janus.js":(x,C,d)=>{d.r(C),d.d(C,{VLChatProcessor:()=>W});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js"),L=d("./src/utils/core.js"),U=d("./src/utils/tensor.js"),q=d("./src/utils/image.js");class W extends k.Processor{static image_processor_class=z.AutoImageProcessor;static tokenizer_class=V.AutoTokenizer;static uses_processor_config=!0;constructor(X,R){super(X,R),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(X,{images:R=null,chat_template:aA="default"}={}){R?Array.isArray(R)||(R=[R]):R=await Promise.all(X.filter(uA=>uA.images).flatMap(uA=>uA.images).map(uA=>q.RawImage.read(uA)));const CA=this.tokenizer,kA=uA=>CA.encode(uA,{add_special_tokens:!1}),EA=CA.apply_chat_template(X,{tokenize:!1,add_generation_prompt:!0,chat_template:aA}).split(this.image_tag),sA=EA.length-1;if(R.length!==sA)throw new Error(`Number of images provided (${R.length}) does not match number of "${this.image_tag}" image tags (${sA})`);const[nA,xA,g]=CA.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let b=kA(EA[0]),A=new Array(b.length).fill(!1);for(let uA=1;uA<EA.length;++uA){const D=new Array(this.num_image_tokens).fill(nA),P=kA(EA[uA]);b=(0,L.mergeArrays)(b,[xA],D,[g],P);const RA=new Array(this.num_image_tokens).fill(!0);A=(0,L.mergeArrays)(A,[!1],RA,[!1],new Array(P.length).fill(!1))}const l=[1,b.length],M={input_ids:new U.Tensor("int64",b,l),attention_mask:new U.Tensor("int64",new Array(b.length).fill(1),l),images_seq_mask:new U.Tensor("bool",A,l),images_emb_mask:new U.Tensor("bool",new Array(sA*this.num_image_tokens).fill(!0),[1,sA,this.num_image_tokens])};if(R&&R.length>0){const uA=await this.image_processor(R);return uA.pixel_values.unsqueeze_(0),{...M,...uA}}return M}}},"./src/models/jina_clip/image_processing_jina_clip.js":(x,C,d)=>{d.r(C),d.d(C,{JinaCLIPImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{constructor(L){const{resize_mode:U,fill_color:q,interpolation:W,size:S,...X}=L;super({...X,size:U==="squash"?{width:S,height:S}:U==="shortest"?{shortest_edge:S}:{longest_edge:S},resample:W==="bicubic"?3:2,do_center_crop:!0,crop_size:S,do_normalize:!0})}}},"./src/models/jina_clip/processing_jina_clip.js":(x,C,d)=>{d.r(C),d.d(C,{JinaCLIPProcessor:()=>L});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js");class L extends k.Processor{static tokenizer_class=V.AutoTokenizer;static image_processor_class=z.AutoImageProcessor;async _call(q=null,W=null,S={}){if(!q&&!W)throw new Error("Either text or images must be provided");return{...q?this.tokenizer(q,S):{},...W?await this.image_processor(W,S):{}}}}},"./src/models/llava_onevision/image_processing_llava_onevision.js":(x,C,d)=>{d.r(C),d.d(C,{LlavaOnevisionImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}},"./src/models/mask2former/image_processing_mask2former.js":(x,C,d)=>{d.r(C),d.d(C,{Mask2FormerImageProcessor:()=>z});var k=d("./src/models/maskformer/image_processing_maskformer.js");class z extends k.MaskFormerImageProcessor{}},"./src/models/maskformer/image_processing_maskformer.js":(x,C,d)=>{d.r(C),d.d(C,{MaskFormerFeatureExtractor:()=>V,MaskFormerImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{post_process_panoptic_segmentation(...U){return(0,k.post_process_panoptic_segmentation)(...U)}post_process_instance_segmentation(...U){return(0,k.post_process_instance_segmentation)(...U)}}class V extends z{}},"./src/models/mgp_str/processing_mgp_str.js":(x,C,d)=>{d.r(C),d.d(C,{MgpstrProcessor:()=>q});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js"),L=d("./src/utils/maths.js");const U={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class q extends k.Processor{static tokenizer_class=V.AutoTokenizer;static image_processor_class=z.AutoImageProcessor;get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(S,X){if(!U.hasOwnProperty(X))throw new Error(`Format ${X} is not supported.`);const[R,aA]=U[X],CA=this[R].bind(this),[kA,EA]=S.dims,sA=[],nA=[],xA=S.tolist();for(let g=0;g<kA;++g){const b=xA[g],A=[],l=[];for(let uA=1;uA<EA;++uA){const[D,P]=(0,L.max)((0,L.softmax)(b[uA]));if(l.push(D),P==aA)break;A.push(P)}const M=l.length>0?l.reduce((uA,D)=>uA*D,1):0;nA.push(A),sA.push(M)}return[CA(nA),sA]}char_decode(S){return this.char_tokenizer.batch_decode(S).map(X=>X.replaceAll(" ",""))}bpe_decode(S){return this.bpe_tokenizer.batch_decode(S)}wp_decode(S){return this.wp_tokenizer.batch_decode(S).map(X=>X.replaceAll(" ",""))}batch_decode([S,X,R]){const[aA,CA]=this._decode_helper(S,"char"),[kA,EA]=this._decode_helper(X,"bpe"),[sA,nA]=this._decode_helper(R,"wp"),xA=[],g=[];for(let b=0;b<aA.length;++b){const[A,l]=(0,L.max)([CA[b],EA[b],nA[b]]);xA.push([aA[b],kA[b],sA[b]][l]),g.push(A)}return{generated_text:xA,scores:g,char_preds:aA,bpe_preds:kA,wp_preds:sA}}static async from_pretrained(...S){const X=await super.from_pretrained(...S),R=await V.AutoTokenizer.from_pretrained("Xenova/gpt2"),aA=await V.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return X.components={image_processor:X.image_processor,char_tokenizer:X.tokenizer,bpe_tokenizer:R,wp_tokenizer:aA},X}async _call(S,X=null){const R=await this.image_processor(S);return X&&(R.labels=this.tokenizer(X).input_ids),R}}},"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":(x,C,d)=>{d.r(C),d.d(C,{MobileNetV1FeatureExtractor:()=>V,MobileNetV1ImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}class V extends z{}},"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":(x,C,d)=>{d.r(C),d.d(C,{MobileNetV2FeatureExtractor:()=>V,MobileNetV2ImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}class V extends z{}},"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":(x,C,d)=>{d.r(C),d.d(C,{MobileNetV3FeatureExtractor:()=>V,MobileNetV3ImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}class V extends z{}},"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":(x,C,d)=>{d.r(C),d.d(C,{MobileNetV4FeatureExtractor:()=>V,MobileNetV4ImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}class V extends z{}},"./src/models/mobilevit/image_processing_mobilevit.js":(x,C,d)=>{d.r(C),d.d(C,{MobileViTFeatureExtractor:()=>V,MobileViTImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}class V extends z{}},"./src/models/moonshine/feature_extraction_moonshine.js":(x,C,d)=>{d.r(C),d.d(C,{MoonshineFeatureExtractor:()=>V});var k=d("./src/base/feature_extraction_utils.js"),z=d("./src/utils/tensor.js");class V extends k.FeatureExtractor{async _call(U){(0,k.validate_audio_inputs)(U,"MoonshineFeatureExtractor"),U instanceof Float64Array&&(U=new Float32Array(U));const q=[1,U.length];return{input_values:new z.Tensor("float32",U,q)}}}},"./src/models/moonshine/processing_moonshine.js":(x,C,d)=>{d.r(C),d.d(C,{MoonshineProcessor:()=>L});var k=d("./src/models/auto/feature_extraction_auto.js"),z=d("./src/tokenizers.js"),V=d("./src/base/processing_utils.js");class L extends V.Processor{static tokenizer_class=z.AutoTokenizer;static feature_extractor_class=k.AutoFeatureExtractor;async _call(q){return await this.feature_extractor(q)}}},"./src/models/nougat/image_processing_nougat.js":(x,C,d)=>{d.r(C),d.d(C,{NougatImageProcessor:()=>z});var k=d("./src/models/donut/image_processing_donut.js");class z extends k.DonutImageProcessor{}},"./src/models/owlv2/image_processing_owlv2.js":(x,C,d)=>{d.r(C),d.d(C,{Owlv2ImageProcessor:()=>z});var k=d("./src/models/owlvit/image_processing_owlvit.js");class z extends k.OwlViTImageProcessor{}},"./src/models/owlvit/image_processing_owlvit.js":(x,C,d)=>{d.r(C),d.d(C,{OwlViTFeatureExtractor:()=>V,OwlViTImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{post_process_object_detection(...U){return(0,k.post_process_object_detection)(...U)}}class V extends z{}},"./src/models/owlvit/processing_owlvit.js":(x,C,d)=>{d.r(C),d.d(C,{OwlViTProcessor:()=>L});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js");class L extends k.Processor{static tokenizer_class=V.AutoTokenizer;static image_processor_class=z.AutoImageProcessor}},"./src/models/paligemma/processing_paligemma.js":(x,C,d)=>{d.r(C),d.d(C,{PaliGemmaProcessor:()=>U});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js");const L="<image>";class U extends k.Processor{static tokenizer_class=V.AutoTokenizer;static image_processor_class=z.AutoImageProcessor;static uses_processor_config=!1;async _call(W,S=null,X={}){S||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),S=""),Array.isArray(W)||(W=[W]),Array.isArray(S)||(S=[S]);const R=this.tokenizer.bos_token,aA=this.image_processor.config.image_seq_length;let CA;S.some(EA=>EA.includes(L))?CA=S.map(EA=>{const sA=EA.replaceAll(L,L.repeat(aA)),nA=sA.lastIndexOf(L),xA=nA===-1?0:nA+7;return sA.slice(0,xA)+R+sA.slice(xA)+`
`}):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),CA=S.map(EA=>function(sA,nA,xA,g,b){return`${g.repeat(xA*b)}${nA}${sA}
`}(EA,R,aA,L,W.length)));const kA=this.tokenizer(CA,X);return{...await this.image_processor(W,X),...kA}}}},"./src/models/phi3_v/image_processing_phi3_v.js":(x,C,d)=>{d.r(C),d.d(C,{Phi3VImageProcessor:()=>S});var k=d("./src/base/image_processors_utils.js"),z=d("./src/utils/tensor.js");const V=336,L=[2,3],{ceil:U,floor:q,sqrt:W}=Math;class S extends k.ImageProcessor{constructor(R){super({...R,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=R.num_crops}calc_num_image_tokens_from_image_size(R,aA){const{num_img_tokens:CA}=this.config;return q((q(aA/V)*q(R/V)+1)*CA+1+(q(aA/V)+1)*W(CA))}get_resize_output_image_size(R,aA){const CA=this._num_crops,[kA,EA]=R.size;let sA=kA/EA,nA=1;for(;nA*Math.ceil(nA/sA)<=CA;)nA+=1;nA-=1;const xA=Math.floor(336*nA);return[xA,Math.floor(xA/sA)]}pad_image(R,aA,CA,kA={}){const[EA,sA]=aA,nA=V*U(EA/V),xA=V*U(sA/V),g=[1,1,1].map((b,A)=>(b-this.image_mean[A])/this.image_std[A]);return super.pad_image(R,aA,{width:xA,height:nA},{center:!0,constant_values:g,...kA})}async _call(R,{num_crops:aA=null}={}){if(this._num_crops=aA??=this.config.num_crops,aA<4||W(aA)%1!=0)throw new Error("num_crops must be a square number >= 4");Array.isArray(R)||(R=[R]);const CA=R.length,kA=await Promise.all(R.map(b=>this.preprocess(b))),EA=kA.map(b=>b.original_size),sA=kA.map(b=>b.reshaped_input_size),nA=[];for(const{pixel_values:b}of kA){b.unsqueeze_(0);const[A,l]=b.dims.slice(-2),M=await(0,z.interpolate_4d)(b,{size:[V,V],mode:"bicubic"});if(aA>0){const uA=[],D=W(aA),P=q(l/D),RA=q(A/D);for(let YA=0;YA<D;++YA)for(let qA=0;qA<D;++qA){let ee,xe,Ge,GA;YA===D-1?(xe=A-RA,GA=A):(xe=YA*RA,GA=(YA+1)*RA),qA===D-1?(ee=l-P,Ge=l):(ee=qA*P,Ge=(qA+1)*P);const bA=[xe,ee],PA=[GA,Ge],UA=await(0,z.slice)(b,bA,PA,L);uA.push(UA)}const SA=await(0,z.interpolate_4d)((0,z.cat)(uA,0),{size:[V,V],mode:"bicubic"});nA.push((0,z.cat)([M,SA],0))}else nA.push(M)}const xA=(0,z.stack)(nA,0),g=sA.map(b=>b.map(A=>V*U(A/V)));return{pixel_values:xA,original_sizes:EA,reshaped_input_sizes:sA,image_sizes:new z.Tensor("int64",g.flat(),[CA,2]),num_img_tokens:g.map(([b,A])=>this.calc_num_image_tokens_from_image_size(A,b))}}}},"./src/models/phi3_v/processing_phi3_v.js":(x,C,d)=>{d.r(C),d.d(C,{Phi3VProcessor:()=>q});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js");d("./src/utils/image.js");const L="<|image|>",U=/<\|image_\d+\|>/g;class q extends k.Processor{static image_processor_class=z.AutoImageProcessor;static tokenizer_class=V.AutoTokenizer;async _call(S,X=null,{padding:R=!0,truncation:aA=!0,num_crops:CA=null}={}){let kA,EA;if(Array.isArray(S)||(S=[S]),X){EA=await this.image_processor(X,{num_crops:CA});const{num_img_tokens:sA}=EA,nA=S.map((g,b)=>g.split(U).join(L.repeat(sA[b])));kA=this.tokenizer(nA,{padding:R,truncation:aA});const xA=this.tokenizer.model.convert_tokens_to_ids([L])[0];kA.input_ids.map_(g=>g==xA?-g:g)}else kA=this.tokenizer(S);return{...kA,...EA}}}},"./src/models/processors.js":(x,C,d)=>{d.r(C),d.d(C,{Florence2Processor:()=>k.Florence2Processor,GroundingDinoProcessor:()=>z.GroundingDinoProcessor,Idefics3Processor:()=>V.Idefics3Processor,JinaCLIPProcessor:()=>U.JinaCLIPProcessor,MgpstrProcessor:()=>q.MgpstrProcessor,MoonshineProcessor:()=>W.MoonshineProcessor,OwlViTProcessor:()=>S.OwlViTProcessor,PaliGemmaProcessor:()=>R.PaliGemmaProcessor,Phi3VProcessor:()=>X.Phi3VProcessor,PyAnnoteProcessor:()=>aA.PyAnnoteProcessor,Qwen2VLProcessor:()=>CA.Qwen2VLProcessor,SamProcessor:()=>kA.SamProcessor,SpeechT5Processor:()=>EA.SpeechT5Processor,VLChatProcessor:()=>L.VLChatProcessor,Wav2Vec2ProcessorWithLM:()=>sA.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>nA.WhisperProcessor});var k=d("./src/models/florence2/processing_florence2.js"),z=d("./src/models/grounding_dino/processing_grounding_dino.js"),V=d("./src/models/idefics3/processing_idefics3.js"),L=d("./src/models/janus/processing_janus.js"),U=d("./src/models/jina_clip/processing_jina_clip.js"),q=d("./src/models/mgp_str/processing_mgp_str.js"),W=d("./src/models/moonshine/processing_moonshine.js"),S=d("./src/models/owlvit/processing_owlvit.js"),X=d("./src/models/phi3_v/processing_phi3_v.js"),R=d("./src/models/paligemma/processing_paligemma.js"),aA=d("./src/models/pyannote/processing_pyannote.js"),CA=d("./src/models/qwen2_vl/processing_qwen2_vl.js"),kA=d("./src/models/sam/processing_sam.js"),EA=d("./src/models/speecht5/processing_speecht5.js"),sA=d("./src/models/wav2vec2/processing_wav2vec2.js"),nA=d("./src/models/whisper/processing_whisper.js")},"./src/models/pvt/image_processing_pvt.js":(x,C,d)=>{d.r(C),d.d(C,{PvtImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}},"./src/models/pyannote/feature_extraction_pyannote.js":(x,C,d)=>{d.r(C),d.d(C,{PyAnnoteFeatureExtractor:()=>L});var k=d("./src/base/feature_extraction_utils.js"),z=d("./src/utils/tensor.js"),V=d("./src/utils/maths.js");class L extends k.FeatureExtractor{async _call(q){(0,k.validate_audio_inputs)(q,"PyAnnoteFeatureExtractor"),q instanceof Float64Array&&(q=new Float32Array(q));const W=[1,1,q.length];return{input_values:new z.Tensor("float32",q,W)}}samples_to_frames(q){return(q-this.config.offset)/this.config.step}post_process_speaker_diarization(q,W){const S=W/this.samples_to_frames(W)/this.config.sampling_rate,X=[];for(const R of q.tolist()){const aA=[];let CA=-1;for(let kA=0;kA<R.length;++kA){const EA=(0,V.softmax)(R[kA]),[sA,nA]=(0,V.max)(EA),[xA,g]=[kA,kA+1];nA!==CA?(CA=nA,aA.push({id:nA,start:xA,end:g,score:sA})):(aA.at(-1).end=g,aA.at(-1).score+=sA)}X.push(aA.map(({id:kA,start:EA,end:sA,score:nA})=>({id:kA,start:EA*S,end:sA*S,confidence:nA/(sA-EA)})))}return X}}},"./src/models/pyannote/processing_pyannote.js":(x,C,d)=>{d.r(C),d.d(C,{PyAnnoteProcessor:()=>V});var k=d("./src/base/processing_utils.js"),z=d("./src/models/pyannote/feature_extraction_pyannote.js");class V extends k.Processor{static feature_extractor_class=z.PyAnnoteFeatureExtractor;async _call(U){return await this.feature_extractor(U)}post_process_speaker_diarization(...U){return this.feature_extractor.post_process_speaker_diarization(...U)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}},"./src/models/qwen2_vl/image_processing_qwen2_vl.js":(x,C,d)=>{d.r(C),d.d(C,{Qwen2VLImageProcessor:()=>V});var k=d("./src/base/image_processors_utils.js"),z=d("./src/utils/tensor.js");class V extends k.ImageProcessor{async _call(U,...q){const{pixel_values:W,original_sizes:S,reshaped_input_sizes:X}=await super._call(U,...q);let R=W;const{temporal_patch_size:aA,merge_size:CA,patch_size:kA}=this.config;R.dims[0]===1&&(R=(0,z.cat)(Array.from({length:aA},()=>R),0));const EA=R.dims[0]/aA,sA=R.dims[1],nA=Math.floor(R.dims[2]/kA),xA=Math.floor(R.dims[3]/kA);return{pixel_values:R.view(EA,aA,sA,Math.floor(nA/CA),CA,kA,Math.floor(xA/CA),CA,kA).permute(0,3,6,4,7,2,1,5,8).view(EA*nA*xA,sA*aA*kA*kA),image_grid_thw:new z.Tensor("int64",[EA,nA,xA],[1,3]),original_sizes:S,reshaped_input_sizes:X}}}},"./src/models/qwen2_vl/processing_qwen2_vl.js":(x,C,d)=>{d.r(C),d.d(C,{Qwen2VLProcessor:()=>L});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js"),V=d("./src/tokenizers.js");d("./src/utils/image.js");class L extends k.Processor{static image_processor_class=z.AutoImageProcessor;static tokenizer_class=V.AutoTokenizer;async _call(q,W=null,...S){let X,R;if(Array.isArray(q)||(q=[q]),W&&(X=await this.image_processor(W),R=X.image_grid_thw),R){let aA=this.image_processor.config.merge_size**2,CA=0;const kA=R.tolist();q=q.map(EA=>{for(;EA.includes("<|image_pad|>");){const sA=Number(kA[CA++].reduce((nA,xA)=>nA*xA,1n));EA=EA.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(sA/aA)))}return EA.replaceAll("<|placeholder|>","<|image_pad|>")})}return{...this.tokenizer(q),...X}}}},"./src/models/rt_detr/image_processing_rt_detr.js":(x,C,d)=>{d.r(C),d.d(C,{RTDetrImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{post_process_object_detection(...L){return(0,k.post_process_object_detection)(...L)}}},"./src/models/sam/image_processing_sam.js":(x,C,d)=>{d.r(C),d.d(C,{SamImageProcessor:()=>L});var k=d("./src/base/image_processors_utils.js"),z=d("./src/utils/core.js"),V=d("./src/utils/tensor.js");class L extends k.ImageProcessor{reshape_input_points(q,W,S,X=!1){q=structuredClone(q);let R=(0,z.calculateDimensions)(q);if(R.length===3)X||(R=[1,...R]),q=[q];else if(R.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let aA=0;aA<q.length;++aA){let CA=W[aA],kA=S[aA],EA=[kA[0]/CA[0],kA[1]/CA[1]];for(let sA=0;sA<q[aA].length;++sA)for(let nA=0;nA<q[aA][sA].length;++nA)for(let xA=0;xA<q[aA][sA][nA].length;++xA)q[aA][sA][nA][xA]*=EA[xA%2]}return new V.Tensor("float32",Float32Array.from(q.flat(1/0)),R)}add_input_labels(q,W){let S=(0,z.calculateDimensions)(q);if(S.length===2)S=[1,...S],q=[q];else if(S.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(S.some((X,R)=>X!==W.dims[R]))throw Error(`The first ${S.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new V.Tensor("int64",q.flat(1/0).map(BigInt),S)}async _call(q,{input_points:W=null,input_labels:S=null,input_boxes:X=null}={}){const R=await super._call(q);if(W&&(R.input_points=this.reshape_input_points(W,R.original_sizes,R.reshaped_input_sizes)),S){if(!R.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");R.input_labels=this.add_input_labels(S,R.input_points)}return X&&(R.input_boxes=this.reshape_input_points(X,R.original_sizes,R.reshaped_input_sizes,!0)),R}async post_process_masks(q,W,S,{mask_threshold:X=0,binarize:R=!0,pad_size:aA=null}={}){const CA=[],kA=[(aA=aA??this.pad_size).height,aA.width];for(let EA=0;EA<W.length;++EA){const sA=W[EA],nA=S[EA];let xA=await(0,V.interpolate_4d)(q[EA],{mode:"bilinear",size:kA});if(xA=xA.slice(null,null,[0,nA[0]],[0,nA[1]]),xA=await(0,V.interpolate_4d)(xA,{mode:"bilinear",size:sA}),R){const g=xA.data,b=new Uint8Array(g.length);for(let A=0;A<g.length;++A)g[A]>X&&(b[A]=1);xA=new V.Tensor("bool",b,xA.dims)}CA.push(xA)}return CA}generate_crop_boxes(q,W,{crop_n_layers:S=0,overlap_ratio:X=.3413333333333333,points_per_crop:R=32,crop_n_points_downscale_factor:aA=1}={}){}}},"./src/models/sam/processing_sam.js":(x,C,d)=>{d.r(C),d.d(C,{SamProcessor:()=>V});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/image_processing_auto.js");class V extends k.Processor{static image_processor_class=z.AutoImageProcessor;async _call(...U){return await this.image_processor(...U)}post_process_masks(...U){return this.image_processor.post_process_masks(...U)}reshape_input_points(...U){return this.image_processor.reshape_input_points(...U)}}},"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":(x,C,d)=>{d.r(C),d.d(C,{SeamlessM4TFeatureExtractor:()=>L});var k=d("./src/base/feature_extraction_utils.js"),z=d("./src/utils/tensor.js"),V=d("./src/utils/audio.js");class L extends k.FeatureExtractor{constructor(q){super(q);const W=this.config.sampling_rate,S=(0,V.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(W/2),W,null,"kaldi",!0);for(let X=0;X<S.length;++X)S[X].push(0);this.mel_filters=S,this.window=(0,V.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(q,W){return q=q.map(S=>32768*S),(0,V.spectrogram)(q,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:W,transpose:!0})}async _call(q,{padding:W=!0,pad_to_multiple_of:S=2,do_normalize_per_mel_bins:X=!0,return_attention_mask:R=!0}={}){(0,k.validate_audio_inputs)(q,"SeamlessM4TFeatureExtractor");let aA,CA=await this._extract_fbank_features(q,this.config.max_length);if(X){const[g,b]=CA.dims,A=CA.data;for(let l=0;l<b;++l){let M=0;for(let RA=0;RA<g;++RA)M+=A[RA*b+l];const uA=M/g;let D=0;for(let RA=0;RA<g;++RA)D+=(A[RA*b+l]-uA)**2;D/=g-1;const P=Math.sqrt(D+1e-7);for(let RA=0;RA<g;++RA){const SA=RA*b+l;A[SA]=(A[SA]-uA)/P}}}if(W){const[g,b]=CA.dims,A=CA.data,l=g%S;if(l>0){const M=new Float32Array(b*(g+l));M.set(A),M.fill(this.config.padding_value,A.length);const uA=g+l;CA=new z.Tensor(CA.type,M,[uA,b]),R&&(aA=new z.Tensor("int64",new BigInt64Array(uA),[1,uA]),aA.data.fill(1n,0,g))}}const[kA,EA]=CA.dims,sA=this.config.stride;if(kA%sA!==0)throw new Error(`The number of frames (${kA}) must be a multiple of the stride (${sA}).`);const nA=CA.view(1,Math.floor(kA/sA),EA*sA),xA={input_features:nA};if(R){const g=nA.dims[1],b=new BigInt64Array(g);if(aA){const A=aA.data;for(let l=1,M=0;l<kA;l+=sA,++M)b[M]=A[l]}else b.fill(1n);xA.attention_mask=new z.Tensor("int64",b,[1,g])}return xA}}},"./src/models/segformer/image_processing_segformer.js":(x,C,d)=>{d.r(C),d.d(C,{SegformerFeatureExtractor:()=>V,SegformerImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{post_process_semantic_segmentation(...U){return(0,k.post_process_semantic_segmentation)(...U)}}class V extends z{}},"./src/models/siglip/image_processing_siglip.js":(x,C,d)=>{d.r(C),d.d(C,{SiglipImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}},"./src/models/speecht5/feature_extraction_speecht5.js":(x,C,d)=>{d.r(C),d.d(C,{SpeechT5FeatureExtractor:()=>z});var k=d("./src/base/feature_extraction_utils.js");class z extends k.FeatureExtractor{}},"./src/models/speecht5/processing_speecht5.js":(x,C,d)=>{d.r(C),d.d(C,{SpeechT5Processor:()=>L});var k=d("./src/base/processing_utils.js"),z=d("./src/tokenizers.js"),V=d("./src/models/auto/feature_extraction_auto.js");class L extends k.Processor{static tokenizer_class=z.AutoTokenizer;static feature_extractor_class=V.AutoFeatureExtractor;async _call(q){return await this.feature_extractor(q)}}},"./src/models/swin2sr/image_processing_swin2sr.js":(x,C,d)=>{d.r(C),d.d(C,{Swin2SRImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{pad_image(L,U,q,W={}){const[S,X,R]=U;return super.pad_image(L,U,{width:X+(q-X%q)%q,height:S+(q-S%q)%q},{mode:"symmetric",center:!1,constant_values:-1,...W})}}},"./src/models/vit/image_processing_vit.js":(x,C,d)=>{d.r(C),d.d(C,{ViTFeatureExtractor:()=>V,ViTImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{}class V extends z{}},"./src/models/vitmatte/image_processing_vitmatte.js":(x,C,d)=>{d.r(C),d.d(C,{VitMatteImageProcessor:()=>V});var k=d("./src/base/image_processors_utils.js"),z=d("./src/utils/tensor.js");class V extends k.ImageProcessor{async _call(U,q){Array.isArray(U)||(U=[U]),Array.isArray(q)||(q=[q]);const W=await Promise.all(U.map(R=>this.preprocess(R))),S=await Promise.all(q.map(R=>this.preprocess(R,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,z.stack)(W.map((R,aA)=>(0,z.cat)([R.pixel_values,S[aA].pixel_values],0)),0),original_sizes:W.map(R=>R.original_size),reshaped_input_sizes:W.map(R=>R.reshaped_input_size)}}}},"./src/models/vitpose/image_processing_vitpose.js":(x,C,d)=>{d.r(C),d.d(C,{VitPoseImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{post_process_pose_estimation(L,U,{threshold:q=null}={}){const W=L.tolist(),[S,X,R,aA]=L.dims,CA=[];for(let kA=0;kA<S;++kA){const EA=W[kA],sA=U[kA],nA=[];for(let xA=0;xA<sA.length;++xA){const g=sA[xA],b=[],A=[],l=[],M=g.at(-2)/aA,uA=g.at(-1)/R;for(let D=0;D<EA.length;++D){let[P,RA]=[0,0],SA=0,YA=-1/0;const qA=EA[D];for(let xe=0;xe<qA.length;++xe){const Ge=qA[xe];for(let GA=0;GA<Ge.length;++GA){const bA=Ge[GA];SA+=bA,YA=Math.max(YA,bA),P+=(GA+.5)*bA,RA+=xe*bA}}if(q!=null&&YA<q)continue;const ee=[M*P/SA,uA*RA/SA];b.push(ee),l.push(D),A.push(YA)}nA.push({bbox:g,scores:A,labels:l,keypoints:b})}CA.push(nA)}return CA}}},"./src/models/wav2vec2/feature_extraction_wav2vec2.js":(x,C,d)=>{d.r(C),d.d(C,{Wav2Vec2FeatureExtractor:()=>V});var k=d("./src/base/feature_extraction_utils.js"),z=d("./src/utils/tensor.js");class V extends k.FeatureExtractor{_zero_mean_unit_var_norm(U){const q=U.reduce((X,R)=>X+R,0),W=q/U.length,S=U.reduce((X,R)=>X+(R-W)**2,0)/U.length;return U.map(X=>(X-W)/Math.sqrt(S+1e-7))}async _call(U){(0,k.validate_audio_inputs)(U,"Wav2Vec2FeatureExtractor"),U instanceof Float64Array&&(U=new Float32Array(U));let q=U;this.config.do_normalize&&(q=this._zero_mean_unit_var_norm(q));const W=[1,q.length];return{input_values:new z.Tensor("float32",q,W),attention_mask:new z.Tensor("int64",new BigInt64Array(q.length).fill(1n),W)}}}},"./src/models/wav2vec2/processing_wav2vec2.js":(x,C,d)=>{d.r(C),d.d(C,{Wav2Vec2ProcessorWithLM:()=>V});var k=d("./src/base/processing_utils.js"),z=d("./src/models/auto/feature_extraction_auto.js");class V extends k.Processor{static feature_extractor_class=z.AutoFeatureExtractor;async _call(U){return await this.feature_extractor(U)}}},"./src/models/wespeaker/feature_extraction_wespeaker.js":(x,C,d)=>{d.r(C),d.d(C,{WeSpeakerFeatureExtractor:()=>V});var k=d("./src/base/feature_extraction_utils.js");d("./src/utils/tensor.js");var z=d("./src/utils/audio.js");class V extends k.FeatureExtractor{constructor(U){super(U);const q=this.config.sampling_rate,W=(0,z.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(q/2),q,null,"kaldi",!0);for(let S=0;S<W.length;++S)W[S].push(0);this.mel_filters=W,this.window=(0,z.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(U){return U=U.map(q=>32768*q),(0,z.spectrogram)(U,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(U){(0,k.validate_audio_inputs)(U,"WeSpeakerFeatureExtractor");const q=(await this._extract_fbank_features(U)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const W=q.mean(1).data,S=q.data,[X,R,aA]=q.dims;for(let CA=0;CA<X;++CA){const kA=CA*R*aA,EA=CA*aA;for(let sA=0;sA<R;++sA){const nA=kA+sA*aA;for(let xA=0;xA<aA;++xA)S[nA+xA]-=W[EA+xA]}}}return{input_features:q}}}},"./src/models/whisper/common_whisper.js":(x,C,d)=>{d.r(C),d.d(C,{WHISPER_LANGUAGE_MAPPING:()=>z,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>V,whisper_language_to_code:()=>L});const k=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],z=new Map(k),V=new Map([...k.map(([U,q])=>[q,U]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function L(U){U=U.toLowerCase();let q=V.get(U);if(q===void 0){if(!z.has(U)){const W=U.length===2?z.keys():z.values();throw new Error(`Language "${U}" is not supported. Must be one of: ${JSON.stringify(W)}`)}q=U}return q}},"./src/models/whisper/feature_extraction_whisper.js":(x,C,d)=>{d.r(C),d.d(C,{WhisperFeatureExtractor:()=>L});var k=d("./src/base/feature_extraction_utils.js");d("./src/utils/tensor.js");var z=d("./src/utils/audio.js"),V=d("./src/utils/maths.js");class L extends k.FeatureExtractor{constructor(q){super(q),this.config.mel_filters??=(0,z.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,z.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(q){const W=await(0,z.spectrogram)(q,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:this.config.nb_max_frames}),S=W.data,X=(0,V.max)(S)[0];for(let R=0;R<S.length;++R)S[R]=(Math.max(S[R],X-8)+4)/4;return W}async _call(q){let W;return(0,k.validate_audio_inputs)(q,"WhisperFeatureExtractor"),q.length>this.config.n_samples?(console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),W=q.slice(0,this.config.n_samples)):(W=new Float32Array(this.config.n_samples),W.set(q)),{input_features:(await this._extract_fbank_features(W)).unsqueeze_(0)}}}},"./src/models/whisper/generation_whisper.js":(x,C,d)=>{d.r(C),d.d(C,{WhisperGenerationConfig:()=>z});var k=d("./src/generation/configuration_utils.js");class z extends k.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}},"./src/models/whisper/processing_whisper.js":(x,C,d)=>{d.r(C),d.d(C,{WhisperProcessor:()=>L});var k=d("./src/models/auto/feature_extraction_auto.js"),z=d("./src/tokenizers.js"),V=d("./src/base/processing_utils.js");class L extends V.Processor{static tokenizer_class=z.AutoTokenizer;static feature_extractor_class=k.AutoFeatureExtractor;async _call(q){return await this.feature_extractor(q)}}},"./src/models/yolos/image_processing_yolos.js":(x,C,d)=>{d.r(C),d.d(C,{YolosFeatureExtractor:()=>V,YolosImageProcessor:()=>z});var k=d("./src/base/image_processors_utils.js");class z extends k.ImageProcessor{post_process_object_detection(...U){return(0,k.post_process_object_detection)(...U)}}class V extends z{}},"./src/ops/registry.js":(x,C,d)=>{d.r(C),d.d(C,{TensorOpRegistry:()=>L});var k=d("./src/backends/onnx.js"),z=d("./src/utils/tensor.js");const V=async(U,q,W)=>{const S=await(0,k.createInferenceSession)(new Uint8Array(U),q);return async X=>{const R=(0,k.isONNXProxy)(),aA=Object.fromEntries(Object.entries(X).map(([kA,EA])=>[kA,(R?EA.clone():EA).ort_tensor])),CA=await S.run(aA);return Array.isArray(W)?W.map(kA=>new z.Tensor(CA[kA])):new z.Tensor(CA[W])}};class L{static session_options={};static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=V([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=V([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=V([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=V([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=V([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=V([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=V([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=V([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}},"./src/pipelines.js":(x,C,d)=>{d.r(C),d.d(C,{AudioClassificationPipeline:()=>RA,AutomaticSpeechRecognitionPipeline:()=>YA,DepthEstimationPipeline:()=>ke,DocumentQuestionAnsweringPipeline:()=>PA,FeatureExtractionPipeline:()=>D,FillMaskPipeline:()=>xA,ImageClassificationPipeline:()=>ee,ImageFeatureExtractionPipeline:()=>P,ImageSegmentationPipeline:()=>xe,ImageToImagePipeline:()=>TA,ImageToTextPipeline:()=>qA,ObjectDetectionPipeline:()=>GA,Pipeline:()=>kA,QuestionAnsweringPipeline:()=>nA,SummarizationPipeline:()=>b,Text2TextGenerationPipeline:()=>g,TextClassificationPipeline:()=>EA,TextGenerationPipeline:()=>M,TextToAudioPipeline:()=>UA,TokenClassificationPipeline:()=>sA,TranslationPipeline:()=>A,ZeroShotAudioClassificationPipeline:()=>SA,ZeroShotClassificationPipeline:()=>uA,ZeroShotImageClassificationPipeline:()=>Ge,ZeroShotObjectDetectionPipeline:()=>bA,pipeline:()=>ve});var k=d("./src/tokenizers.js"),z=d("./src/models.js"),V=d("./src/models/auto/processing_auto.js");d("./src/base/processing_utils.js");var L=d("./src/utils/generic.js"),U=d("./src/utils/core.js"),q=d("./src/utils/maths.js"),W=d("./src/utils/audio.js"),S=d("./src/utils/tensor.js"),X=d("./src/utils/image.js");async function R(ie){return Array.isArray(ie)||(ie=[ie]),await Promise.all(ie.map(FA=>X.RawImage.read(FA)))}async function aA(ie,FA){return Array.isArray(ie)||(ie=[ie]),await Promise.all(ie.map(XA=>typeof XA=="string"||XA instanceof URL?(0,W.read_audio)(XA,FA):XA instanceof Float64Array?new Float32Array(XA):XA))}function CA(ie,FA){FA&&(ie=ie.map(fe=>0|fe));const[XA,me,be,zA]=ie;return{xmin:XA,ymin:me,xmax:be,ymax:zA}}class kA extends L.Callable{constructor({task:FA,model:XA,tokenizer:me=null,processor:be=null}){super(),this.task=FA,this.model=XA,this.tokenizer=me,this.processor=be}async dispose(){await this.model.dispose()}}class EA extends kA{constructor(FA){super(FA)}async _call(FA,{top_k:XA=1}={}){const me=this.tokenizer(FA,{padding:!0,truncation:!0}),be=await this.model(me),zA=this.model.config.problem_type==="multi_label_classification"?Pe=>Pe.sigmoid():Pe=>new S.Tensor("float32",(0,q.softmax)(Pe.data),Pe.dims),fe=this.model.config.id2label,Ee=[];for(const Pe of be.logits){const Ye=zA(Pe),J=await(0,S.topk)(Ye,XA),Oe=J[0].tolist(),gA=J[1].tolist().map(($,IA)=>({label:fe?fe[$]:`LABEL_${$}`,score:Oe[IA]}));XA===1?Ee.push(...gA):Ee.push(gA)}return Array.isArray(FA)||XA===1?Ee:Ee[0]}}class sA extends kA{constructor(FA){super(FA)}async _call(FA,{ignore_labels:XA=["O"]}={}){const me=Array.isArray(FA),be=this.tokenizer(me?FA:[FA],{padding:!0,truncation:!0}),zA=(await this.model(be)).logits,fe=this.model.config.id2label,Ee=[];for(let Pe=0;Pe<zA.dims[0];++Pe){const Ye=be.input_ids[Pe],J=zA[Pe],Oe=[];for(let gA=0;gA<J.dims[0];++gA){const $=J[gA],IA=(0,q.max)($.data)[1],OA=fe?fe[IA]:`LABEL_${IA}`;if(XA.includes(OA))continue;const _A=this.tokenizer.decode([Ye[gA].item()],{skip_special_tokens:!0});if(_A==="")continue;const he=(0,q.softmax)($.data);Oe.push({entity:OA,score:he[IA],index:gA,word:_A})}Ee.push(Oe)}return me?Ee:Ee[0]}}class nA extends kA{constructor(FA){super(FA)}async _call(FA,XA,{top_k:me=1}={}){const be=this.tokenizer(FA,{text_pair:XA,padding:!0,truncation:!0}),{start_logits:zA,end_logits:fe}=await this.model(be),Ee=be.input_ids.tolist(),Pe=be.attention_mask.tolist(),Ye=this.tokenizer.all_special_ids,J=[];for(let Oe=0;Oe<zA.dims[0];++Oe){const gA=Ee[Oe],$=gA.findIndex(ye=>ye==this.tokenizer.sep_token_id);Pe[Oe].map((ye,Qe)=>ye==1&&(Qe===0||Qe>$&&Ye.findIndex(Te=>Te==gA[Qe])===-1));const IA=zA[Oe].tolist(),OA=fe[Oe].tolist();for(let ye=1;ye<IA.length;++ye)(Pe[Oe]==0||ye<=$||Ye.findIndex(Qe=>Qe==gA[ye])!==-1)&&(IA[ye]=-1/0,OA[ye]=-1/0);const _A=(0,q.softmax)(IA).map((ye,Qe)=>[ye,Qe]),he=(0,q.softmax)(OA).map((ye,Qe)=>[ye,Qe]);_A[0][0]=0,he[0][0]=0;const ce=(0,U.product)(_A,he).filter(ye=>ye[0][1]<=ye[1][1]).map(ye=>[ye[0][1],ye[1][1],ye[0][0]*ye[1][0]]).sort((ye,Qe)=>Qe[2]-ye[2]);for(let ye=0;ye<Math.min(ce.length,me);++ye){const[Qe,Te,Mt]=ce[ye],Tt=gA.slice(Qe,Te+1),dt=this.tokenizer.decode(Tt,{skip_special_tokens:!0});J.push({answer:dt,score:Mt})}}return me===1?J[0]:J}}class xA extends kA{constructor(FA){super(FA)}async _call(FA,{top_k:XA=5}={}){const me=this.tokenizer(FA,{padding:!0,truncation:!0}),{logits:be}=await this.model(me),zA=[],fe=me.input_ids.tolist();for(let Ee=0;Ee<fe.length;++Ee){const Pe=fe[Ee],Ye=Pe.findIndex(IA=>IA==this.tokenizer.mask_token_id);if(Ye===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const J=be[Ee][Ye],Oe=await(0,S.topk)(new S.Tensor("float32",(0,q.softmax)(J.data),J.dims),XA),gA=Oe[0].tolist(),$=Oe[1].tolist();zA.push($.map((IA,OA)=>{const _A=Pe.slice();return _A[Ye]=IA,{score:gA[OA],token:Number(IA),token_str:this.tokenizer.decode([IA]),sequence:this.tokenizer.decode(_A,{skip_special_tokens:!0})}}))}return Array.isArray(FA)?zA:zA[0]}}class g extends kA{_key="generated_text";constructor(FA){super(FA)}async _call(FA,XA={}){Array.isArray(FA)||(FA=[FA]),this.model.config.prefix&&(FA=FA.map(Pe=>this.model.config.prefix+Pe));const me=this.model.config.task_specific_params;me&&me[this.task]&&me[this.task].prefix&&(FA=FA.map(Pe=>me[this.task].prefix+Pe));const be=this.tokenizer,zA={padding:!0,truncation:!0};let fe;fe=this instanceof A&&"_build_translation_inputs"in be?be._build_translation_inputs(FA,zA,XA):be(FA,zA);const Ee=await this.model.generate({...fe,...XA});return be.batch_decode(Ee,{skip_special_tokens:!0}).map(Pe=>({[this._key]:Pe}))}}class b extends g{_key="summary_text";constructor(FA){super(FA)}}class A extends g{_key="translation_text";constructor(FA){super(FA)}}function l(ie){return Array.isArray(ie)&&ie.every(FA=>"role"in FA&&"content"in FA)}class M extends kA{constructor(FA){super(FA)}async _call(FA,XA={}){let me,be=!1,zA=!1;if(typeof FA=="string")me=FA=[FA];else if(Array.isArray(FA)&&FA.every($=>typeof $=="string"))be=!0,me=FA;else{if(l(FA))FA=[FA];else{if(!Array.isArray(FA)||!FA.every(l))throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");be=!0}zA=!0,me=FA.map($=>this.tokenizer.apply_chat_template($,{tokenize:!1,add_generation_prompt:!0}))}const fe=XA.add_special_tokens??!1,Ee=!zA&&(XA.return_full_text??!0);this.tokenizer.padding_side="left";const Pe=this.tokenizer(me,{add_special_tokens:fe,padding:!0,truncation:!0}),Ye=await this.model.generate({...Pe,...XA}),J=this.tokenizer.batch_decode(Ye,{skip_special_tokens:!0});let Oe;!Ee&&Pe.input_ids.dims.at(-1)>0&&(Oe=this.tokenizer.batch_decode(Pe.input_ids,{skip_special_tokens:!0}).map($=>$.length));const gA=Array.from({length:FA.length},$=>[]);for(let $=0;$<J.length;++$){const IA=Math.floor($/Ye.dims[0]*FA.length);Oe&&(J[$]=J[$].slice(Oe[IA])),gA[IA].push({generated_text:zA?[...FA[IA],{role:"assistant",content:J[$]}]:J[$]})}return be||gA.length!==1?gA:gA[0]}}class uA extends kA{constructor(FA){super(FA),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([XA,me])=>[XA.toLowerCase(),me])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(FA,XA,{hypothesis_template:me="This example is {}.",multi_label:be=!1}={}){const zA=Array.isArray(FA);zA||(FA=[FA]),Array.isArray(XA)||(XA=[XA]);const fe=XA.map(Ye=>me.replace("{}",Ye)),Ee=be||XA.length===1,Pe=[];for(const Ye of FA){const J=[];for(const $ of fe){const IA=this.tokenizer(Ye,{text_pair:$,padding:!0,truncation:!0}),OA=await this.model(IA);Ee?J.push([OA.logits.data[this.contradiction_id],OA.logits.data[this.entailment_id]]):J.push(OA.logits.data[this.entailment_id])}const Oe=Ee?J.map($=>(0,q.softmax)($)[1]):(0,q.softmax)(J),gA=Oe.map(($,IA)=>[$,IA]).sort(($,IA)=>IA[0]-$[0]);Pe.push({sequence:Ye,labels:gA.map($=>XA[$[1]]),scores:gA.map($=>$[0])})}return zA?Pe:Pe[0]}}class D extends kA{constructor(FA){super(FA)}async _call(FA,{pooling:XA="none",normalize:me=!1,quantize:be=!1,precision:zA="binary"}={}){const fe=this.tokenizer(FA,{padding:!0,truncation:!0}),Ee=await this.model(fe);let Pe=Ee.last_hidden_state??Ee.logits??Ee.token_embeddings;if(XA!=="none")if(XA==="mean")Pe=(0,S.mean_pooling)(Pe,fe.attention_mask);else{if(XA!=="cls")throw Error(`Pooling method '${XA}' not supported.`);Pe=Pe.slice(null,0)}return me&&(Pe=Pe.normalize(2,-1)),be&&(Pe=(0,S.quantize_embeddings)(Pe,zA)),Pe}}class P extends kA{constructor(FA){super(FA)}async _call(FA,{pool:XA=null}={}){const me=await R(FA),{pixel_values:be}=await this.processor(me),zA=await this.model({pixel_values:be});let fe;if(XA){if(!("pooler_output"in zA))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");fe=zA.pooler_output}else fe=zA.last_hidden_state??zA.logits??zA.image_embeds;return fe}}class RA extends kA{constructor(FA){super(FA)}async _call(FA,{top_k:XA=5}={}){const me=this.processor.feature_extractor.config.sampling_rate,be=await aA(FA,me),zA=this.model.config.id2label,fe=[];for(const Ee of be){const Pe=await this.processor(Ee),Ye=(await this.model(Pe)).logits[0],J=await(0,S.topk)(new S.Tensor("float32",(0,q.softmax)(Ye.data),Ye.dims),XA),Oe=J[0].tolist(),gA=J[1].tolist().map(($,IA)=>({label:zA?zA[$]:`LABEL_${$}`,score:Oe[IA]}));fe.push(gA)}return Array.isArray(FA)?fe:fe[0]}}class SA extends kA{constructor(FA){super(FA)}async _call(FA,XA,{hypothesis_template:me="This is a sound of {}."}={}){const be=!Array.isArray(FA);be&&(FA=[FA]);const zA=XA.map(J=>me.replace("{}",J)),fe=this.tokenizer(zA,{padding:!0,truncation:!0}),Ee=this.processor.feature_extractor.config.sampling_rate,Pe=await aA(FA,Ee),Ye=[];for(const J of Pe){const Oe=await this.processor(J),gA=await this.model({...fe,...Oe}),$=(0,q.softmax)(gA.logits_per_audio.data);Ye.push([...$].map((IA,OA)=>({score:IA,label:XA[OA]})))}return be?Ye[0]:Ye}}class YA extends kA{constructor(FA){super(FA)}async _call(FA,XA={}){switch(this.model.config.model_type){case"whisper":return this._call_whisper(FA,XA);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(FA,XA);case"moonshine":return this._call_moonshine(FA,XA);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(FA,XA){XA.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),XA.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const me=!Array.isArray(FA);me&&(FA=[FA]);const be=this.processor.feature_extractor.config.sampling_rate,zA=await aA(FA,be),fe=[];for(const Ee of zA){const Pe=await this.processor(Ee),Ye=(await this.model(Pe)).logits[0],J=[];for(const gA of Ye)J.push((0,q.max)(gA.data)[1]);const Oe=this.tokenizer.decode(J);fe.push({text:Oe})}return me?fe[0]:fe}async _call_whisper(FA,XA){const me=XA.return_timestamps??!1,be=XA.chunk_length_s??0,zA=XA.force_full_sequences??!1;let fe=XA.stride_length_s??null;const Ee={...XA};me==="word"&&(Ee.return_token_timestamps=!0,Ee.return_timestamps=!1);const Pe=!Array.isArray(FA);Pe&&(FA=[FA]);const Ye=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,J=this.processor.feature_extractor.config.hop_length,Oe=this.processor.feature_extractor.config.sampling_rate,gA=await aA(FA,Oe),$=[];for(const IA of gA){let OA=[];if(be>0){if(fe===null)fe=be/6;else if(be<=fe)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const ce=Oe*be,ye=Oe*fe,Qe=ce-2*ye;let Te=0;for(;;){const Mt=Te+ce,Tt=IA.subarray(Te,Mt),dt=await this.processor(Tt),Ct=Te===0,$t=Mt>=IA.length;if(OA.push({stride:[Tt.length,Ct?0:ye,$t?0:ye],input_features:dt.input_features,is_last:$t}),$t)break;Te+=Qe}}else OA=[{stride:[IA.length,0,0],input_features:(await this.processor(IA)).input_features,is_last:!0}];for(const ce of OA){Ee.num_frames=Math.floor(ce.stride[0]/J);const ye=await this.model.generate({inputs:ce.input_features,...Ee});me==="word"?(ce.tokens=ye.sequences.tolist()[0],ce.token_timestamps=ye.token_timestamps.tolist()[0].map(Qe=>(0,q.round)(Qe,2))):ce.tokens=ye[0].tolist(),ce.stride=ce.stride.map(Qe=>Qe/Oe)}const[_A,he]=this.tokenizer._decode_asr(OA,{time_precision:Ye,return_timestamps:me,force_full_sequences:zA});$.push({text:_A,...he})}return Pe?$[0]:$}async _call_moonshine(FA,XA){const me=!Array.isArray(FA);me&&(FA=[FA]);const be=this.processor.feature_extractor.config.sampling_rate,zA=await aA(FA,be),fe=[];for(const Ee of zA){const Pe=await this.processor(Ee),Ye=6*Math.floor(Ee.length/be),J=await this.model.generate({max_new_tokens:Ye,...XA,...Pe}),Oe=this.processor.batch_decode(J,{skip_special_tokens:!0})[0];fe.push({text:Oe})}return me?fe[0]:fe}}class qA extends kA{constructor(FA){super(FA)}async _call(FA,XA={}){const me=Array.isArray(FA),be=await R(FA),{pixel_values:zA}=await this.processor(be),fe=[];for(const Ee of zA){Ee.dims=[1,...Ee.dims];const Pe=await this.model.generate({inputs:Ee,...XA}),Ye=this.tokenizer.batch_decode(Pe,{skip_special_tokens:!0}).map(J=>({generated_text:J.trim()}));fe.push(Ye)}return me?fe:fe[0]}}class ee extends kA{constructor(FA){super(FA)}async _call(FA,{top_k:XA=5}={}){const me=await R(FA),{pixel_values:be}=await this.processor(me),zA=await this.model({pixel_values:be}),fe=this.model.config.id2label,Ee=[];for(const Pe of zA.logits){const Ye=await(0,S.topk)(new S.Tensor("float32",(0,q.softmax)(Pe.data),Pe.dims),XA),J=Ye[0].tolist(),Oe=Ye[1].tolist().map((gA,$)=>({label:fe?fe[gA]:`LABEL_${gA}`,score:J[$]}));Ee.push(Oe)}return Array.isArray(FA)?Ee:Ee[0]}}class xe extends kA{constructor(FA){super(FA),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(FA,{threshold:XA=.5,mask_threshold:me=.5,overlap_mask_area_threshold:be=.8,label_ids_to_fuse:zA=null,target_sizes:fe=null,subtask:Ee=null}={}){if(Array.isArray(FA)&&FA.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const Pe=await R(FA),Ye=Pe.map(_A=>[_A.height,_A.width]),{pixel_values:J,pixel_mask:Oe}=await this.processor(Pe),gA=await this.model({pixel_values:J,pixel_mask:Oe});let $=null;if(Ee!==null)$=this.subtasks_mapping[Ee];else for(let[_A,he]of Object.entries(this.subtasks_mapping))if(he in this.processor.image_processor){$=this.processor.image_processor[he].bind(this.processor.image_processor),Ee=_A;break}const IA=this.model.config.id2label,OA=[];if(Ee==="panoptic"||Ee==="instance"){const _A=$(gA,XA,me,be,zA,fe??Ye)[0],he=_A.segmentation;for(const ce of _A.segments_info){const ye=new Uint8ClampedArray(he.data.length);for(let Te=0;Te<he.data.length;++Te)he.data[Te]===ce.id&&(ye[Te]=255);const Qe=new X.RawImage(ye,he.dims[1],he.dims[0],1);OA.push({score:ce.score,label:IA[ce.label_id],mask:Qe})}}else{if(Ee!=="semantic")throw Error(`Subtask ${Ee} not supported.`);{const{segmentation:_A,labels:he}=$(gA,fe??Ye)[0];for(const ce of he){const ye=new Uint8ClampedArray(_A.data.length);for(let Te=0;Te<_A.data.length;++Te)_A.data[Te]===ce&&(ye[Te]=255);const Qe=new X.RawImage(ye,_A.dims[1],_A.dims[0],1);OA.push({score:null,label:IA[ce],mask:Qe})}}}return OA}}class Ge extends kA{constructor(FA){super(FA)}async _call(FA,XA,{hypothesis_template:me="This is a photo of {}"}={}){const be=Array.isArray(FA),zA=await R(FA),fe=XA.map(gA=>me.replace("{}",gA)),Ee=this.tokenizer(fe,{padding:this.model.config.model_type!=="siglip"||"max_length",truncation:!0}),{pixel_values:Pe}=await this.processor(zA),Ye=await this.model({...Ee,pixel_values:Pe}),J=this.model.config.model_type==="siglip"?gA=>gA.sigmoid().data:gA=>(0,q.softmax)(gA.data),Oe=[];for(const gA of Ye.logits_per_image){const $=[...J(gA)].map((IA,OA)=>({score:IA,label:XA[OA]}));$.sort((IA,OA)=>OA.score-IA.score),Oe.push($)}return be?Oe:Oe[0]}}class GA extends kA{constructor(FA){super(FA)}async _call(FA,{threshold:XA=.9,percentage:me=!1}={}){const be=Array.isArray(FA);if(be&&FA.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const zA=await R(FA),fe=me?null:zA.map($=>[$.height,$.width]),{pixel_values:Ee,pixel_mask:Pe}=await this.processor(zA),Ye=await this.model({pixel_values:Ee,pixel_mask:Pe}),J=this.processor.image_processor.post_process_object_detection(Ye,XA,fe),Oe=this.model.config.id2label,gA=J.map($=>$.boxes.map((IA,OA)=>({score:$.scores[OA],label:Oe[$.classes[OA]],box:CA(IA,!me)})));return be?gA:gA[0]}}class bA extends kA{constructor(FA){super(FA)}async _call(FA,XA,{threshold:me=.1,top_k:be=null,percentage:zA=!1}={}){const fe=Array.isArray(FA),Ee=await R(FA),Pe=this.tokenizer(XA,{padding:!0,truncation:!0}),Ye=await this.processor(Ee),J=[];for(let Oe=0;Oe<Ee.length;++Oe){const gA=Ee[Oe],$=zA?null:[[gA.height,gA.width]],IA=Ye.pixel_values[Oe].unsqueeze_(0),OA=await this.model({...Pe,pixel_values:IA});let _A;if("post_process_grounded_object_detection"in this.processor){const he=this.processor.post_process_grounded_object_detection(OA,Pe.input_ids,{box_threshold:me,text_threshold:me,target_sizes:$})[0];_A=he.boxes.map((ce,ye)=>({score:he.scores[ye],label:he.labels[ye],box:CA(ce,!zA)}))}else{const he=this.processor.image_processor.post_process_object_detection(OA,me,$,!0)[0];_A=he.boxes.map((ce,ye)=>({score:he.scores[ye],label:XA[he.classes[ye]],box:CA(ce,!zA)}))}_A.sort((he,ce)=>ce.score-he.score),be!==null&&(_A=_A.slice(0,be)),J.push(_A)}return fe?J:J[0]}}class PA extends kA{constructor(FA){super(FA)}async _call(FA,XA,me={}){const be=(await R(FA))[0],{pixel_values:zA}=await this.processor(be),fe=`<s_docvqa><s_question>${XA}</s_question><s_answer>`,Ee=this.tokenizer(fe,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,Pe=await this.model.generate({inputs:zA,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:Ee,...me}),Ye=this.tokenizer.batch_decode(Pe)[0].match(/<s_answer>(.*?)<\/s_answer>/);let J=null;return Ye&&Ye.length>=2&&(J=Ye[1].trim()),[{answer:J}]}}class UA extends kA{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(FA){super(FA),this.vocoder=FA.vocoder??null}async _call(FA,{speaker_embeddings:XA=null}={}){return this.processor?this._call_text_to_spectrogram(FA,{speaker_embeddings:XA}):this._call_text_to_waveform(FA)}async _call_text_to_waveform(FA){const XA=this.tokenizer(FA,{padding:!0,truncation:!0}),{waveform:me}=await this.model(XA),be=this.model.config.sampling_rate;return new W.RawAudio(me.data,be)}async _call_text_to_spectrogram(FA,{speaker_embeddings:XA}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await z.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof XA=="string"||XA instanceof URL)&&(XA=new Float32Array(await(await fetch(XA)).arrayBuffer())),XA instanceof Float32Array)XA=new S.Tensor("float32",XA,[1,XA.length]);else if(!(XA instanceof S.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:me}=this.tokenizer(FA,{padding:!0,truncation:!0}),{waveform:be}=await this.model.generate_speech(me,XA,{vocoder:this.vocoder}),zA=this.processor.feature_extractor.config.sampling_rate;return new W.RawAudio(be.data,zA)}}class TA extends kA{constructor(FA){super(FA)}async _call(FA){const XA=await R(FA),me=await this.processor(XA),be=await this.model(me),zA=[];for(const fe of be.reconstruction){const Ee=fe.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");zA.push(X.RawImage.fromTensor(Ee))}return zA.length>1?zA:zA[0]}}class ke extends kA{constructor(FA){super(FA)}async _call(FA){const XA=await R(FA),me=await this.processor(XA),{predicted_depth:be}=await this.model(me),zA=[];for(let fe=0;fe<XA.length;++fe){const Ee=be[fe],[Pe,Ye]=Ee.dims.slice(-2),[J,Oe]=XA[fe].size,gA=(await(0,S.interpolate_4d)(Ee.view(1,1,Pe,Ye),{size:[Oe,J],mode:"bilinear"})).view(Oe,J),$=gA.min().item(),IA=gA.max().item(),OA=gA.sub($).div_(IA-$).mul_(255).to("uint8").unsqueeze(0),_A=X.RawImage.fromTensor(OA);zA.push({predicted_depth:gA,depth:_A})}return zA.length>1?zA:zA[0]}}const ae=Object.freeze({"text-classification":{tokenizer:k.AutoTokenizer,pipeline:EA,model:z.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:k.AutoTokenizer,pipeline:sA,model:z.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:k.AutoTokenizer,pipeline:nA,model:z.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:k.AutoTokenizer,pipeline:xA,model:z.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:k.AutoTokenizer,pipeline:b,model:z.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:k.AutoTokenizer,pipeline:A,model:z.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:k.AutoTokenizer,pipeline:g,model:z.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:k.AutoTokenizer,pipeline:M,model:z.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:k.AutoTokenizer,pipeline:uA,model:z.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:RA,model:z.AutoModelForAudioClassification,processor:V.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:k.AutoTokenizer,pipeline:SA,model:z.AutoModel,processor:V.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:k.AutoTokenizer,pipeline:YA,model:[z.AutoModelForSpeechSeq2Seq,z.AutoModelForCTC],processor:V.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:k.AutoTokenizer,pipeline:UA,model:[z.AutoModelForTextToWaveform,z.AutoModelForTextToSpectrogram],processor:[V.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:k.AutoTokenizer,pipeline:qA,model:z.AutoModelForVision2Seq,processor:V.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:ee,model:z.AutoModelForImageClassification,processor:V.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:xe,model:[z.AutoModelForImageSegmentation,z.AutoModelForSemanticSegmentation,z.AutoModelForUniversalSegmentation],processor:V.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"zero-shot-image-classification":{tokenizer:k.AutoTokenizer,pipeline:Ge,model:z.AutoModel,processor:V.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:GA,model:z.AutoModelForObjectDetection,processor:V.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:k.AutoTokenizer,pipeline:bA,model:z.AutoModelForZeroShotObjectDetection,processor:V.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:k.AutoTokenizer,pipeline:PA,model:z.AutoModelForDocumentQuestionAnswering,processor:V.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:TA,model:z.AutoModelForImageToImage,processor:V.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:ke,model:z.AutoModelForDepthEstimation,processor:V.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:k.AutoTokenizer,pipeline:D,model:z.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:V.AutoProcessor,pipeline:P,model:[z.AutoModelForImageFeatureExtraction,z.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),oe=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function ve(ie,FA=null,{progress_callback:XA=null,config:me=null,cache_dir:be=null,local_files_only:zA=!1,revision:fe="main",device:Ee=null,dtype:Pe=null,model_file_name:Ye=null,session_options:J={}}={}){ie=oe[ie]??ie;const Oe=ae[ie.split("_",1)[0]];if(!Oe)throw Error(`Unsupported pipeline: ${ie}. Must be one of [${Object.keys(ae)}]`);FA||(FA=Oe.default.model,console.log(`No model specified. Using default model: "${FA}".`));const gA={progress_callback:XA,config:me,cache_dir:be,local_files_only:zA,revision:fe,device:Ee,dtype:Pe,model_file_name:Ye,session_options:J},$=new Map([["tokenizer",Oe.tokenizer],["model",Oe.model],["processor",Oe.processor]]),IA=await async function(OA,_A,he){const ce=Object.create(null),ye=[];for(const[Qe,Te]of OA.entries()){if(!Te)continue;let Mt;Mt=Array.isArray(Te)?new Promise(async(Tt,dt)=>{let Ct;for(const $t of Te){if($t===null)return void Tt(null);try{return void Tt(await $t.from_pretrained(_A,he))}catch(Sr){if(Sr.message?.includes("Unsupported model type"))Ct=Sr;else{if(!Sr.message?.includes("Could not locate file"))return void dt(Sr);Ct=Sr}}}dt(Ct)}):Te.from_pretrained(_A,he),ce[Qe]=Mt,ye.push(Mt)}await Promise.all(ye);for(const[Qe,Te]of Object.entries(ce))ce[Qe]=await Te;return ce}($,FA,gA);return IA.task=ie,(0,U.dispatchCallback)(XA,{status:"ready",task:ie,model:FA}),new Oe.pipeline(IA)}},"./src/tokenizers.js":(x,C,d)=>{d.r(C),d.d(C,{AlbertTokenizer:()=>La,AutoTokenizer:()=>Os,BartTokenizer:()=>Ma,BertTokenizer:()=>Ka,BlenderbotSmallTokenizer:()=>zt,BlenderbotTokenizer:()=>wt,BloomTokenizer:()=>Xt,CLIPTokenizer:()=>Fs,CamembertTokenizer:()=>bs,CodeGenTokenizer:()=>pi,CodeLlamaTokenizer:()=>di,CohereTokenizer:()=>Ns,ConvBertTokenizer:()=>Ra,DebertaTokenizer:()=>$e,DebertaV2Tokenizer:()=>Ne,DistilBertTokenizer:()=>Qs,ElectraTokenizer:()=>Ts,EsmTokenizer:()=>ts,FalconTokenizer:()=>fi,GPT2Tokenizer:()=>xt,GPTNeoXTokenizer:()=>Ur,GemmaTokenizer:()=>_s,Grok1Tokenizer:()=>qa,HerbertTokenizer:()=>Zt,LlamaTokenizer:()=>gs,M2M100Tokenizer:()=>Ps,MBart50Tokenizer:()=>Hr,MBartTokenizer:()=>Dr,MPNetTokenizer:()=>Js,MarianTokenizer:()=>Ss,MgpstrTokenizer:()=>rs,MobileBertTokenizer:()=>wa,NllbTokenizer:()=>kr,NougatTokenizer:()=>$s,PreTrainedTokenizer:()=>It,Qwen2Tokenizer:()=>us,RoFormerTokenizer:()=>Za,RobertaTokenizer:()=>cs,SiglipTokenizer:()=>ks,SpeechT5Tokenizer:()=>ka,SqueezeBertTokenizer:()=>Xe,T5Tokenizer:()=>ea,TokenizerModel:()=>l,VitsTokenizer:()=>Bs,Wav2Vec2CTCTokenizer:()=>xs,WhisperTokenizer:()=>zs,XLMRobertaTokenizer:()=>qs,XLMTokenizer:()=>Is,is_chinese_char:()=>sA});var k=d("./src/utils/generic.js"),z=d("./src/utils/core.js"),V=d("./src/utils/hub.js"),L=d("./src/utils/maths.js"),U=d("./src/utils/tensor.js"),q=d("./src/utils/data-structures.js"),W=d("./node_modules/@huggingface/jinja/dist/index.js"),S=d("./src/models/whisper/common_whisper.js");async function X(te,_){const BA=await Promise.all([(0,V.getModelJSON)(te,"tokenizer.json",!0,_),(0,V.getModelJSON)(te,"tokenizer_config.json",!0,_)]);return _.legacy!==null&&(BA[1].legacy=_.legacy),BA}function R(te,_=!0){if(te.Regex!==void 0){let BA=te.Regex.replace(/\\([#&~])/g,"$1");for(const[NA,VA]of b)BA=BA.replaceAll(NA,VA);return new RegExp(BA,"gu")}if(te.String!==void 0){const BA=(0,z.escapeRegExp)(te.String);return new RegExp(_?BA:`(${BA})`,"gu")}return console.warn("Unknown pattern type:",te),null}function aA(te){return new Map(Object.entries(te))}function CA(te){const _=te.dims;switch(_.length){case 1:return te.tolist();case 2:if(_[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return te.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${_.length}.`)}}function kA(te){return te.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function EA(te){return te.replace(/\p{M}/gu,"")}function sA(te){return te>=19968&&te<=40959||te>=13312&&te<=19903||te>=131072&&te<=173791||te>=173824&&te<=177983||te>=177984&&te<=178207||te>=178208&&te<=183983||te>=63744&&te<=64255||te>=194560&&te<=195103}const nA="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",xA=new RegExp(`^[${nA}]+$`,"gu"),g=".,!?…。，、।۔،",b=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${g}])]+`,` ?[^\\s${g}]+`]]);class A{constructor(_){this.content=_.content,this.id=_.id,this.single_word=_.single_word??!1,this.lstrip=_.lstrip??!1,this.rstrip=_.rstrip??!1,this.special=_.special??!1,this.normalized=_.normalized??null}}class l extends k.Callable{constructor(_){super(),this.config=_,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(_,...BA){switch(_.type){case"WordPiece":return new M(_);case"Unigram":return new uA(_,...BA);case"BPE":return new RA(_);default:if(_.vocab)return Array.isArray(_.vocab)?new uA(_,...BA):new SA(_,...BA);throw new Error(`Unknown TokenizerModel type: ${_.type}`)}}_call(_){return _=this.encode(_),this.fuse_unk&&(_=function(BA,NA,VA){const $A=[];let de=0;for(;de<BA.length;)if($A.push(BA[de]),(NA.get(BA[de])??VA)===VA)for(;++de<BA.length&&(NA.get(BA[de])??VA)===VA;)NA.get($A.at(-1))!==VA&&($A[$A.length-1]+=BA[de]);else++de;return $A}(_,this.tokens_to_ids,this.unk_token_id)),_}encode(_){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(_){return _.map(BA=>this.tokens_to_ids.get(BA)??this.unk_token_id)}convert_ids_to_tokens(_){return _.map(BA=>this.vocab[BA]??this.unk_token)}}class M extends l{constructor(_){super(_),this.tokens_to_ids=aA(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.max_input_chars_per_word=_.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[BA,NA]of this.tokens_to_ids)this.vocab[NA]=BA}encode(_){const BA=[];for(const NA of _){const VA=[...NA];if(VA.length>this.max_input_chars_per_word){BA.push(this.unk_token);continue}let $A=!1,de=0;const Se=[];for(;de<VA.length;){let HA=VA.length,Ve=null;for(;de<HA;){let Ce=VA.slice(de,HA).join("");if(de>0&&(Ce=this.config.continuing_subword_prefix+Ce),this.tokens_to_ids.has(Ce)){Ve=Ce;break}--HA}if(Ve===null){$A=!0;break}Se.push(Ve),de=HA}$A?BA.push(this.unk_token):BA.push(...Se)}return BA}}class uA extends l{constructor(_,BA){super(_);const NA=_.vocab.length;this.vocab=new Array(NA),this.scores=new Array(NA);for(let VA=0;VA<NA;++VA)[this.vocab[VA],this.scores[VA]]=_.vocab[VA];this.unk_token_id=_.unk_id,this.unk_token=this.vocab[_.unk_id],this.tokens_to_ids=new Map(this.vocab.map((VA,$A)=>[VA,$A])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=BA.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,L.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new q.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(_){const BA=_.chars;let NA=0;for(;NA<BA.length;){let VA=!1;const $A=BA.slice(NA).join(""),de=this.trie.commonPrefixSearch($A);for(const Se of de){const HA=this.tokens_to_ids.get(Se),Ve=this.scores[HA],Ce=(0,z.len)(Se);_.insert(NA,Ce,Ve,HA),VA||Ce!==1||(VA=!0)}VA||_.insert(NA,1,this.unk_score,this.unk_token_id),NA+=1}}tokenize(_){const BA=new q.TokenLattice(_,this.bos_token_id,this.eos_token_id);return this.populateNodes(BA),BA.tokens()}encode(_){const BA=[];for(const NA of _){const VA=this.tokenize(NA);BA.push(...VA)}return BA}}const D=(()=>{const te=[...Array.from({length:94},(VA,$A)=>$A+33),...Array.from({length:12},(VA,$A)=>$A+161),...Array.from({length:82},(VA,$A)=>$A+174)],_=te.slice();let BA=0;for(let VA=0;VA<256;++VA)te.includes(VA)||(te.push(VA),_.push(256+BA),BA+=1);const NA=_.map(VA=>String.fromCharCode(VA));return Object.fromEntries(te.map((VA,$A)=>[VA,NA[$A]]))})(),P=(0,z.reverseDictionary)(D);class RA extends l{constructor(_){super(_),this.tokens_to_ids=aA(_.vocab),this.unk_token_id=this.tokens_to_ids.get(_.unk_token),this.unk_token=_.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[NA,VA]of this.tokens_to_ids)this.vocab[VA]=NA;const BA=Array.isArray(_.merges[0]);this.merges=BA?_.merges:_.merges.map(NA=>NA.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((NA,VA)=>[JSON.stringify(NA),VA])),this.end_of_word_suffix=_.end_of_word_suffix,this.continuing_subword_suffix=_.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.cache=new Map}bpe(_){if(_.length===0)return[];const BA=this.cache.get(_);if(BA!==void 0)return BA;const NA=Array.from(_);this.end_of_word_suffix&&(NA[NA.length-1]+=this.end_of_word_suffix);let VA=[];if(NA.length>1){const $A=new q.PriorityQueue((HA,Ve)=>HA.score<Ve.score);let de={token:NA[0],bias:0,prev:null,next:null},Se=de;for(let HA=1;HA<NA.length;++HA){const Ve={bias:HA/NA.length,token:NA[HA],prev:Se,next:null};Se.next=Ve,this._add_node($A,Se),Se=Ve}for(;!$A.isEmpty();){const HA=$A.pop();if(HA.deleted||!HA.next||HA.next.deleted)continue;if(HA.deleted=!0,HA.next.deleted=!0,HA.prev){const Ce={...HA.prev};HA.prev.deleted=!0,HA.prev=Ce,Ce.prev?Ce.prev.next=Ce:de=Ce}const Ve={token:HA.token+HA.next.token,bias:HA.bias,prev:HA.prev,next:HA.next.next};Ve.prev?(Ve.prev.next=Ve,this._add_node($A,Ve.prev)):de=Ve,Ve.next&&(Ve.next.prev=Ve,this._add_node($A,Ve))}for(let HA=de;HA!==null;HA=HA.next)VA.push(HA.token)}else VA=NA;if(this.continuing_subword_suffix)for(let $A=0;$A<VA.length-1;++$A)VA[$A]+=this.continuing_subword_suffix;return this.cache.set(_,VA),VA}_add_node(_,BA){const NA=this.bpe_ranks.get(JSON.stringify([BA.token,BA.next.token]));NA!==void 0&&(BA.score=NA+BA.bias,_.push(BA))}encode(_){const BA=[];for(const NA of _){if(this.ignore_merges&&this.tokens_to_ids.has(NA)){BA.push(NA);continue}const VA=this.bpe(NA);for(const $A of VA)if(this.tokens_to_ids.has($A))BA.push($A);else if(this.byte_fallback){const de=Array.from(this.text_encoder.encode($A)).map(Se=>`<0x${Se.toString(16).toUpperCase().padStart(2,"0")}>`);de.every(Se=>this.tokens_to_ids.has(Se))?BA.push(...de):BA.push(this.unk_token)}else BA.push(this.unk_token)}return BA}}class SA extends l{constructor(_,BA){super(_),this.tokens_to_ids=aA(BA.target_lang?_.vocab[BA.target_lang]:_.vocab),this.bos_token=BA.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=BA.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=BA.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=BA.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[NA,VA]of this.tokens_to_ids)this.vocab[VA]=NA}encode(_){return _}}class YA extends k.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"BertNormalizer":return new ke(_);case"Precompiled":return new Mt(_);case"Sequence":return new TA(_);case"Replace":return new qA(_);case"NFC":return new ee(_);case"NFKC":return new xe(_);case"NFKD":return new Ge(_);case"Strip":return new GA(_);case"StripAccents":return new bA(_);case"Lowercase":return new PA(_);case"Prepend":return new UA(_);default:throw new Error(`Unknown Normalizer type: ${_.type}`)}}normalize(_){throw Error("normalize should be implemented in subclass.")}_call(_){return this.normalize(_)}}class qA extends YA{normalize(_){const BA=R(this.config.pattern);return BA===null?_:_.replaceAll(BA,this.config.content)}}class ee extends YA{normalize(_){return _=_.normalize("NFC")}}class xe extends YA{normalize(_){return _=_.normalize("NFKC")}}class Ge extends YA{normalize(_){return _=_.normalize("NFKD")}}class GA extends YA{normalize(_){return this.config.strip_left&&this.config.strip_right?_=_.trim():(this.config.strip_left&&(_=_.trimStart()),this.config.strip_right&&(_=_.trimEnd())),_}}class bA extends YA{normalize(_){return _=EA(_)}}class PA extends YA{normalize(_){return _=_.toLowerCase()}}class UA extends YA{normalize(_){return _=this.config.prepend+_}}class TA extends YA{constructor(_){super(_),this.normalizers=_.normalizers.map(BA=>YA.fromConfig(BA))}normalize(_){return this.normalizers.reduce((BA,NA)=>NA.normalize(BA),_)}}class ke extends YA{_tokenize_chinese_chars(_){const BA=[];for(let NA=0;NA<_.length;++NA){const VA=_[NA];sA(VA.charCodeAt(0))?(BA.push(" "),BA.push(VA),BA.push(" ")):BA.push(VA)}return BA.join("")}stripAccents(_){return _.normalize("NFD").replace(/\p{Mn}/gu,"")}_is_control(_){switch(_){case"	":case`
`:case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(_)}}_clean_text(_){const BA=[];for(const NA of _){const VA=NA.charCodeAt(0);VA===0||VA===65533||this._is_control(NA)||(/^\s$/.test(NA)?BA.push(" "):BA.push(NA))}return BA.join("")}normalize(_){return this.config.clean_text&&(_=this._clean_text(_)),this.config.handle_chinese_chars&&(_=this._tokenize_chinese_chars(_)),this.config.lowercase?(_=_.toLowerCase(),this.config.strip_accents!==!1&&(_=this.stripAccents(_))):this.config.strip_accents&&(_=this.stripAccents(_)),_}}class ae extends k.Callable{static fromConfig(_){if(_===null)return null;switch(_.type){case"BertPreTokenizer":return new oe(_);case"Sequence":return new Tt(_);case"Whitespace":return new dt(_);case"WhitespaceSplit":return new Ct(_);case"Metaspace":return new Qe(_);case"ByteLevel":return new ve(_);case"Split":return new ie(_);case"Punctuation":return new FA(_);case"Digits":return new XA(_);case"Replace":return new $t(_);default:throw new Error(`Unknown PreTokenizer type: ${_.type}`)}}pre_tokenize_text(_,BA){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(_,BA){return(Array.isArray(_)?_.map(NA=>this.pre_tokenize_text(NA,BA)):this.pre_tokenize_text(_,BA)).flat()}_call(_,BA){return this.pre_tokenize(_,BA)}}class oe extends ae{constructor(_){super(),this.pattern=new RegExp(`[^\\s${nA}]+|[${nA}]`,"gu")}pre_tokenize_text(_,BA){return _.trim().match(this.pattern)||[]}}class ve extends ae{constructor(_){super(),this.config=_,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=D,this.text_encoder=new TextEncoder}pre_tokenize_text(_,BA){return this.add_prefix_space&&!_.startsWith(" ")&&(_=" "+_),(this.use_regex?_.match(this.pattern)||[]:[_]).map(NA=>Array.from(this.text_encoder.encode(NA),VA=>this.byte_encoder[VA]).join(""))}}class ie extends ae{constructor(_){super(),this.config=_,this.pattern=R(this.config.pattern,this.config.invert)}pre_tokenize_text(_,BA){return this.pattern===null?[]:this.config.invert?_.match(this.pattern)||[]:this.config.behavior?.toLowerCase()==="removed"?_.split(this.pattern).filter(NA=>NA):function(NA,VA){const $A=[];let de=0;for(const Se of NA.matchAll(VA)){const HA=Se[0];de<Se.index&&$A.push(NA.slice(de,Se.index)),HA.length>0&&$A.push(HA),de=Se.index+HA.length}return de<NA.length&&$A.push(NA.slice(de)),$A}(_,this.pattern)}}class FA extends ae{constructor(_){super(),this.config=_,this.pattern=new RegExp(`[^${nA}]+|[${nA}]+`,"gu")}pre_tokenize_text(_,BA){return _.match(this.pattern)||[]}}class XA extends ae{constructor(_){super(),this.config=_;const BA="[^\\d]+|\\d"+(this.config.individual_digits?"":"+");this.pattern=new RegExp(BA,"gu")}pre_tokenize_text(_,BA){return _.match(this.pattern)||[]}}class me extends k.Callable{constructor(_){super(),this.config=_}static fromConfig(_){if(_===null)return null;switch(_.type){case"TemplateProcessing":return new fe(_);case"ByteLevel":return new Ee(_);case"RobertaProcessing":return new zA(_);case"BertProcessing":return new be(_);case"Sequence":return new Pe(_);default:throw new Error(`Unknown PostProcessor type: ${_.type}`)}}post_process(_,...BA){throw Error("post_process should be implemented in subclass.")}_call(_,...BA){return this.post_process(_,...BA)}}class be extends me{constructor(_){super(_),this.cls=_.cls[0],this.sep=_.sep[0]}post_process(_,BA=null,{add_special_tokens:NA=!0}={}){NA&&(_=(0,z.mergeArrays)([this.cls],_,[this.sep]));let VA=new Array(_.length).fill(0);if(BA!==null){const $A=NA&&this instanceof zA?[this.sep]:[],de=NA?[this.sep]:[];_=(0,z.mergeArrays)(_,$A,BA,de),VA=(0,z.mergeArrays)(VA,new Array(BA.length+$A.length+de.length).fill(1))}return{tokens:_,token_type_ids:VA}}}class zA extends be{}class fe extends me{constructor(_){super(_),this.single=_.single,this.pair=_.pair}post_process(_,BA=null,{add_special_tokens:NA=!0}={}){const VA=BA===null?this.single:this.pair;let $A=[],de=[];for(const Se of VA)"SpecialToken"in Se?NA&&($A.push(Se.SpecialToken.id),de.push(Se.SpecialToken.type_id)):"Sequence"in Se&&(Se.Sequence.id==="A"?($A=(0,z.mergeArrays)($A,_),de=(0,z.mergeArrays)(de,new Array(_.length).fill(Se.Sequence.type_id))):Se.Sequence.id==="B"&&($A=(0,z.mergeArrays)($A,BA),de=(0,z.mergeArrays)(de,new Array(BA.length).fill(Se.Sequence.type_id))));return{tokens:$A,token_type_ids:de}}}class Ee extends me{post_process(_,BA=null){return BA&&(_=(0,z.mergeArrays)(_,BA)),{tokens:_}}}class Pe extends me{constructor(_){super(_),this.processors=_.processors.map(BA=>me.fromConfig(BA))}post_process(_,BA=null,NA={}){let VA;for(const $A of this.processors)if($A instanceof Ee)_=$A.post_process(_).tokens,BA&&(BA=$A.post_process(BA).tokens);else{const de=$A.post_process(_,BA,NA);_=de.tokens,VA=de.token_type_ids}return{tokens:_,token_type_ids:VA}}}class Ye extends k.Callable{constructor(_){super(),this.config=_,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=_.trim_offsets}static fromConfig(_){if(_===null)return null;switch(_.type){case"WordPiece":return new IA(_);case"Metaspace":return new Te(_);case"ByteLevel":return new OA(_);case"Replace":return new J(_);case"ByteFallback":return new Oe(_);case"Fuse":return new gA(_);case"Strip":return new $(_);case"Sequence":return new he(_);case"CTC":return new _A(_);case"BPEDecoder":return new ce(_);default:throw new Error(`Unknown Decoder type: ${_.type}`)}}_call(_){return this.decode(_)}decode(_){return this.decode_chain(_).join("")}decode_chain(_){throw Error("`decode_chain` should be implemented in subclass.")}}class J extends Ye{decode_chain(_){const BA=R(this.config.pattern);return BA===null?_:_.map(NA=>NA.replaceAll(BA,this.config.content))}}class Oe extends Ye{constructor(_){super(_),this.text_decoder=new TextDecoder}decode_chain(_){const BA=[];let NA=[];for(const VA of _){let $A=null;if(VA.length===6&&VA.startsWith("<0x")&&VA.endsWith(">")){const de=parseInt(VA.slice(3,5),16);isNaN(de)||($A=de)}if($A!==null)NA.push($A);else{if(NA.length>0){const de=this.text_decoder.decode(Uint8Array.from(NA));BA.push(de),NA=[]}BA.push(VA)}}if(NA.length>0){const VA=this.text_decoder.decode(Uint8Array.from(NA));BA.push(VA),NA=[]}return BA}}class gA extends Ye{decode_chain(_){return[_.join("")]}}class $ extends Ye{constructor(_){super(_),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(_){return _.map(BA=>{let NA=0;for(let $A=0;$A<this.start&&BA[$A]===this.content;++$A)NA=$A+1;let VA=BA.length;for(let $A=0;$A<this.stop;++$A){const de=BA.length-$A-1;if(BA[de]!==this.content)break;VA=de}return BA.slice(NA,VA)})}}class IA extends Ye{constructor(_){super(_),this.cleanup=_.cleanup}decode_chain(_){return _.map((BA,NA)=>(NA!==0&&(BA=BA.startsWith(this.config.prefix)?BA.replace(this.config.prefix,""):" "+BA),this.cleanup&&(BA=kA(BA)),BA))}}class OA extends Ye{constructor(_){super(_),this.byte_decoder=P,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(_){const BA=_.join(""),NA=new Uint8Array([...BA].map(VA=>this.byte_decoder[VA]));return this.text_decoder.decode(NA)}decode_chain(_){const BA=[];let NA=[];for(const VA of _)this.added_tokens.find($A=>$A.content===VA)!==void 0?(NA.length>0&&(BA.push(this.convert_tokens_to_string(NA)),NA=[]),BA.push(VA)):NA.push(VA);return NA.length>0&&BA.push(this.convert_tokens_to_string(NA)),BA}}class _A extends Ye{constructor(_){super(_),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(_){if(_.length===0)return"";const BA=[_[0]];for(let VA=1;VA<_.length;++VA)_[VA]!==BA.at(-1)&&BA.push(_[VA]);let NA=BA.filter(VA=>VA!==this.pad_token).join("");return this.cleanup&&(NA=kA(NA).replaceAll(this.word_delimiter_token," ").trim()),NA}decode_chain(_){return[this.convert_tokens_to_string(_)]}}class he extends Ye{constructor(_){super(_),this.decoders=_.decoders.map(BA=>Ye.fromConfig(BA))}decode_chain(_){return this.decoders.reduce((BA,NA)=>NA.decode_chain(BA),_)}}class ce extends Ye{constructor(_){super(_),this.suffix=this.config.suffix}decode_chain(_){return _.map((BA,NA)=>BA.replaceAll(this.suffix,NA===_.length-1?"":" "))}}class ye extends Ye{decode_chain(_){let BA="";for(let NA=1;NA<_.length;NA+=2)BA+=_[NA];return[BA]}}class Qe extends ae{constructor(_){super(),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement,this.strRep=_.str_rep||this.replacement,this.prepend_scheme=_.prepend_scheme??"always"}pre_tokenize_text(_,{section_index:BA}={}){let NA=_.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!NA.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&BA===0)&&(NA=this.strRep+NA),[NA]}}class Te extends Ye{constructor(_){super(_),this.addPrefixSpace=_.add_prefix_space,this.replacement=_.replacement}decode_chain(_){const BA=[];for(let NA=0;NA<_.length;++NA){let VA=_[NA].replaceAll(this.replacement," ");this.addPrefixSpace&&NA==0&&VA.startsWith(" ")&&(VA=VA.substring(1)),BA.push(VA)}return BA}}class Mt extends YA{constructor(_){super(_),this.charsmap=_.precompiled_charsmap}normalize(_){return(_=(_=_.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,"")).replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," ")).includes("～")?_=_.split("～").map(NA=>NA.normalize("NFKC")).join("～"):_=_.normalize("NFKC"),_}}class Tt extends ae{constructor(_){super(),this.tokenizers=_.pretokenizers.map(BA=>ae.fromConfig(BA))}pre_tokenize_text(_,BA){return this.tokenizers.reduce((NA,VA)=>VA.pre_tokenize(NA,BA),[_])}}class dt extends ae{constructor(_){super()}pre_tokenize_text(_,BA){return _.match(/\w+|[^\w\s]+/g)||[]}}class Ct extends ae{constructor(_){super()}pre_tokenize_text(_,BA){return function(NA){return NA.match(/\S+/g)||[]}(_)}}class $t extends ae{constructor(_){super(),this.config=_,this.pattern=R(this.config.pattern),this.content=this.config.content}pre_tokenize_text(_,BA){return this.pattern===null?[_]:[_.replaceAll(this.pattern,this.config.content)]}}const Sr=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Ar(te,_,BA,NA){for(const VA of Object.keys(te)){const $A=_-te[VA].length,de=BA(VA),Se=new Array($A).fill(de);te[VA]=NA==="right"?(0,z.mergeArrays)(te[VA],Se):(0,z.mergeArrays)(Se,te[VA])}}function Aa(te,_){for(const BA of Object.keys(te))te[BA].length=_}class It extends k.Callable{return_token_type_ids=!1;padding_side="right";constructor(_,BA){super(),this._tokenizer_config=BA,this.normalizer=YA.fromConfig(_.normalizer),this.pre_tokenizer=ae.fromConfig(_.pre_tokenizer),this.model=l.fromConfig(_.model,BA),this.post_processor=me.fromConfig(_.post_processor),this.decoder=Ye.fromConfig(_.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const NA of _.added_tokens){const VA=new A(NA);this.added_tokens.push(VA),this.model.tokens_to_ids.set(VA.content,VA.id),this.model.vocab[VA.id]=VA.content,VA.special&&(this.special_tokens.push(VA.content),this.all_special_ids.push(VA.id))}if(this.additional_special_tokens=BA.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_regex=this.added_tokens.length>0?new RegExp(this.added_tokens.slice().sort((NA,VA)=>VA.content.length-NA.content.length).map(NA=>`${NA.lstrip?"\\s*":""}(${(0,z.escapeRegExp)(NA.content)})${NA.rstrip?"\\s*":""}`).join("|")):null,this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=BA.model_max_length,this.remove_space=BA.remove_space,this.clean_up_tokenization_spaces=BA.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=BA.do_lowercase_and_remove_accent??!1,BA.padding_side&&(this.padding_side=BA.padding_side),this.legacy=!1,this.chat_template=BA.chat_template??null,Array.isArray(this.chat_template)){const NA=Object.create(null);for(const{name:VA,template:$A}of this.chat_template){if(typeof VA!="string"||typeof $A!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');NA[VA]=$A}this.chat_template=NA}this._compiled_template_cache=new Map}getToken(..._){for(const BA of _){const NA=this._tokenizer_config[BA];if(NA){if(typeof NA=="object"){if(NA.__type==="AddedToken")return NA.content;throw Error(`Unknown token: ${NA}`)}return NA}}return null}static async from_pretrained(_,{progress_callback:BA=null,config:NA=null,cache_dir:VA=null,local_files_only:$A=!1,revision:de="main",legacy:Se=null}={}){return new this(...await X(_,{progress_callback:BA,config:NA,cache_dir:VA,local_files_only:$A,revision:de,legacy:Se}))}_call(_,{text_pair:BA=null,add_special_tokens:NA=!0,padding:VA=!1,truncation:$A=null,max_length:de=null,return_tensor:Se=!0,return_token_type_ids:HA=null}={}){const Ve=Array.isArray(_);let Ce;if(Ve){if(_.length===0)throw Error("text array must be non-empty");if(BA!==null){if(!Array.isArray(BA))throw Error("text_pair must also be an array");if(_.length!==BA.length)throw Error("text and text_pair must have the same length");Ce=_.map((Vt,cr)=>this._encode_plus(Vt,{text_pair:BA[cr],add_special_tokens:NA,return_token_type_ids:HA}))}else Ce=_.map(Vt=>this._encode_plus(Vt,{add_special_tokens:NA,return_token_type_ids:HA}))}else{if(_==null)throw Error("text may not be null or undefined");if(Array.isArray(BA))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");Ce=[this._encode_plus(_,{text_pair:BA,add_special_tokens:NA,return_token_type_ids:HA})]}if(de===null?de=VA==="max_length"?this.model_max_length:(0,L.max)(Ce.map(Vt=>Vt.input_ids.length))[0]:$A||console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."),de=Math.min(de,this.model_max_length??1/0),VA||$A)for(let Vt=0;Vt<Ce.length;++Vt)Ce[Vt].input_ids.length!==de&&(Ce[Vt].input_ids.length>de?$A&&Aa(Ce[Vt],de):VA&&Ar(Ce[Vt],de,cr=>cr==="input_ids"?this.pad_token_id:0,this.padding_side));const Yt={};if(Se){if((!VA||!$A)&&Ce.some(cr=>{for(const sr of Object.keys(cr))if(cr[sr].length!==Ce[0][sr]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const Vt=[Ce.length,Ce[0].input_ids.length];for(const cr of Object.keys(Ce[0]))Yt[cr]=new U.Tensor("int64",BigInt64Array.from(Ce.flatMap(sr=>sr[cr]).map(BigInt)),Vt)}else{for(const Vt of Object.keys(Ce[0]))Yt[Vt]=Ce.map(cr=>cr[Vt]);if(!Ve)for(const Vt of Object.keys(Yt))Yt[Vt]=Yt[Vt][0]}return Yt}_encode_text(_){return _===null?null:(this.added_tokens_regex?_.split(this.added_tokens_regex).filter(VA=>VA):[_]).map((VA,$A)=>{if(this.added_tokens.find(Se=>Se.content===VA)!==void 0)return VA;{if(this.remove_space===!0&&(VA=VA.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(VA=function(HA){return EA(HA.toLowerCase())}(VA)),this.normalizer!==null&&(VA=this.normalizer(VA)),VA.length===0)return[];const Se=this.pre_tokenizer!==null?this.pre_tokenizer(VA,{section_index:$A}):[VA];return this.model(Se)}}).flat()}_encode_plus(_,{text_pair:BA=null,add_special_tokens:NA=!0,return_token_type_ids:VA=null}={}){const{tokens:$A,token_type_ids:de}=this._tokenize_helper(_,{pair:BA,add_special_tokens:NA}),Se=this.model.convert_tokens_to_ids($A),HA={input_ids:Se,attention_mask:new Array(Se.length).fill(1)};return(VA??this.return_token_type_ids)&&de&&(HA.token_type_ids=de),HA}_tokenize_helper(_,{pair:BA=null,add_special_tokens:NA=!1}={}){const VA=this._encode_text(_),$A=this._encode_text(BA);return this.post_processor?this.post_processor(VA,$A,{add_special_tokens:NA}):{tokens:(0,z.mergeArrays)(VA??[],$A??[])}}tokenize(_,{pair:BA=null,add_special_tokens:NA=!1}={}){return this._tokenize_helper(_,{pair:BA,add_special_tokens:NA}).tokens}encode(_,{text_pair:BA=null,add_special_tokens:NA=!0,return_token_type_ids:VA=null}={}){return this._encode_plus(_,{text_pair:BA,add_special_tokens:NA,return_token_type_ids:VA}).input_ids}batch_decode(_,BA={}){return _ instanceof U.Tensor&&(_=_.tolist()),_.map(NA=>this.decode(NA,BA))}decode(_,BA={}){if(_ instanceof U.Tensor&&(_=CA(_)),!Array.isArray(_)||_.length===0||!(0,z.isIntegralNumber)(_[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(_,BA)}decode_single(_,{skip_special_tokens:BA=!1,clean_up_tokenization_spaces:NA=null}){let VA=this.model.convert_ids_to_tokens(_);BA&&(VA=VA.filter(de=>!this.special_tokens.includes(de)));let $A=this.decoder?this.decoder(VA):VA.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&($A=$A.replaceAll(this.decoder.end_of_word_suffix," "),BA&&($A=$A.trim())),(NA??this.clean_up_tokenization_spaces)&&($A=kA($A)),$A}get_chat_template({chat_template:_=null,tools:BA=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const NA=this.chat_template;if(_!==null&&Object.hasOwn(NA,_))_=NA[_];else if(_===null)if(BA!==null&&"tool_use"in NA)_=NA.tool_use;else{if(!("default"in NA))throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(NA).sort()}.`);_=NA.default}}else if(_===null){if(!this.chat_template)throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");_=this.chat_template}return _}apply_chat_template(_,{tools:BA=null,documents:NA=null,chat_template:VA=null,add_generation_prompt:$A=!1,tokenize:de=!0,padding:Se=!1,truncation:HA=!1,max_length:Ve=null,return_tensor:Ce=!0,return_dict:Yt=!1,tokenizer_kwargs:Vt={},...cr}={}){if(typeof(VA=this.get_chat_template({chat_template:VA,tools:BA}))!="string")throw Error("chat_template must be a string, but got "+typeof VA);let sr=this._compiled_template_cache.get(VA);sr===void 0&&(sr=new W.Template(VA),this._compiled_template_cache.set(VA,sr));const jt=Object.create(null);for(const Ke of Sr){const Jt=this.getToken(Ke);Jt&&(jt[Ke]=Jt)}const je=sr.render({messages:_,add_generation_prompt:$A,tools:BA,documents:NA,...jt,...cr});if(de){const Ke=this._call(je,{add_special_tokens:!1,padding:Se,truncation:HA,max_length:Ve,return_tensor:Ce,...Vt});return Yt?Ke:Ke.input_ids}return je}}class Ka extends It{return_token_type_ids=!0}class La extends It{return_token_type_ids=!0}class wa extends It{return_token_type_ids=!0}class Xe extends It{return_token_type_ids=!0}class $e extends It{return_token_type_ids=!0}class Ne extends It{return_token_type_ids=!0}class Zt extends It{return_token_type_ids=!0}class Ra extends It{return_token_type_ids=!0}class Za extends It{return_token_type_ids=!0}class Qs extends It{}class bs extends It{}class Is extends It{return_token_type_ids=!0;constructor(_,BA){super(_,BA),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Ts extends It{return_token_type_ids=!0}class ea extends It{}class xt extends It{}class Ma extends It{}class Dr extends It{constructor(_,BA){super(_,BA),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(NA=>this.languageRegex.test(NA)),this.lang_to_token=NA=>NA}_build_translation_inputs(_,BA,NA){return ws(this,_,BA,NA)}}class Hr extends Dr{}class cs extends It{}class Xt extends It{}const Xa="▁";class gs extends It{padding_side="left";constructor(_,BA){super(_,BA),this.legacy=BA.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new Qe({replacement:Xa,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(_){if(_===null)return null;if(this.legacy||_.length===0)return super._encode_text(_);let BA=super._encode_text(Xa+_.replaceAll(Xa," "));return BA.length>1&&BA[0]===Xa&&this.special_tokens.includes(BA[1])&&(BA=BA.slice(1)),BA}}class di extends It{}class qs extends It{}class Js extends It{}class fi extends It{}class Ur extends It{}class ts extends It{}class us extends It{}class _s extends It{}class qa extends It{}function ws(te,_,BA,NA){if(!("language_codes"in te)||!Array.isArray(te.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in te&&te.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in te)||typeof te.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const VA=NA.src_lang,$A=NA.tgt_lang;if(!te.language_codes.includes($A))throw new Error(`Target language code "${$A}" is not valid. Must be one of: {${te.language_codes.join(", ")}}`);if(VA!==void 0){if(!te.language_codes.includes(VA))throw new Error(`Source language code "${VA}" is not valid. Must be one of: {${te.language_codes.join(", ")}}`);for(const de of te.post_processor.config.single)if("SpecialToken"in de&&te.languageRegex.test(de.SpecialToken.id)){de.SpecialToken.id=te.lang_to_token(VA);break}}return NA.forced_bos_token_id=te.model.convert_tokens_to_ids([te.lang_to_token($A)])[0],te._call(_,BA)}class kr extends It{constructor(_,BA){super(_,BA),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(NA=>this.languageRegex.test(NA)),this.lang_to_token=NA=>NA}_build_translation_inputs(_,BA,NA){return ws(this,_,BA,NA)}}class Ps extends It{constructor(_,BA){super(_,BA),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(NA=>this.languageRegex.test(NA)).map(NA=>NA.slice(2,-2)),this.lang_to_token=NA=>`__${NA}__`}_build_translation_inputs(_,BA,NA){return ws(this,_,BA,NA)}}class zs extends It{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(_,{return_timestamps:BA=!1,return_language:NA=!1,time_precision:VA=null,force_full_sequences:$A=!0}={}){if(VA===null)throw Error("Must specify time_precision");let de=null;const Se=BA==="word";function HA(){return{language:de,timestamp:[null,null],text:""}}const Ve=[];let Ce=HA(),Yt=0;const Vt=this.timestamp_begin,cr=Vt+1500;let sr=[],jt=[],je=!1,Ke=null;const Jt=new Set(this.all_special_ids);for(const ir of _){const rt=ir.tokens,dr=Se?ir.token_timestamps:null;let ge=null,Je=Vt;if("stride"in ir){const[Rr,Qr,Cr]=ir.stride;if(Yt-=Qr,Ke=Rr-Cr,Qr&&(Je=Qr/VA+Vt),Cr)for(let Ut=rt.length-1;Ut>=0;--Ut){const xr=Number(rt[Ut]);if(xr>=Vt){if(ge!==null&&(xr-Vt)*VA<Ke)break;ge=xr}}}let ha=[],Nr=[];for(let Rr=0;Rr<rt.length;++Rr){const Qr=Number(rt[Rr]);if(Jt.has(Qr)){const Cr=this.decode([Qr]),Ut=S.WHISPER_LANGUAGE_MAPPING.get(Cr.slice(2,-2));if(Ut!==void 0){if(de!==null&&Ut!==de&&!BA){sr.push(ha);const xr=this.findLongestCommonSequence(sr)[0],Ai=this.decode(xr);Ce.text=Ai,Ve.push(Ce),sr=[],ha=[],Ce=HA()}de=Ce.language=Ut}}else if(Qr>=Vt&&Qr<=cr){const Cr=(Qr-Vt)*VA+Yt,Ut=(0,L.round)(Cr,2);if(ge!==null&&Qr>=ge)je=!0;else if(je||sr.length>0&&Qr<Je)je=!1;else if(Ce.timestamp[0]===null)Ce.timestamp[0]=Ut;else if(Ut!==Ce.timestamp[0]){Ce.timestamp[1]=Ut,sr.push(ha),Se&&jt.push(Nr);const[xr,Ai]=this.findLongestCommonSequence(sr,jt),Ha=this.decode(xr);Ce.text=Ha,Se&&(Ce.words=this.collateWordTimestamps(xr,Ai,de)),Ve.push(Ce),sr=[],ha=[],jt=[],Nr=[],Ce=HA()}}else if(ha.push(Qr),Se){let Cr,Ut=(0,L.round)(dr[Rr]+Yt,2);if(Rr+1<dr.length){Cr=(0,L.round)(dr[Rr+1]+Yt,2);const xr=this.decode([Qr]);xA.test(xr)&&(Cr=(0,L.round)(Math.min(Ut+VA,Cr),2))}else Cr=null;Nr.push([Ut,Cr])}}if("stride"in ir){const[Rr,Qr,Cr]=ir.stride;Yt+=Rr-Cr}ha.length>0?(sr.push(ha),Se&&jt.push(Nr)):sr.every(Rr=>Rr.length===0)&&(Ce=HA(),sr=[],ha=[],jt=[],Nr=[])}if(sr.length>0){if($A&&BA)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[ir,rt]=this.findLongestCommonSequence(sr,jt),dr=this.decode(ir);Ce.text=dr,Se&&(Ce.words=this.collateWordTimestamps(ir,rt,de)),Ve.push(Ce)}let Ya=Object.create(null);const pa=Ve.map(ir=>ir.text).join("");if(BA||NA){for(let ir=0;ir<Ve.length;++ir){const rt=Ve[ir];BA||delete rt.timestamp,NA||delete rt.language}if(Se){const ir=[];for(const rt of Ve)for(const dr of rt.words)ir.push(dr);Ya={chunks:ir}}else Ya={chunks:Ve}}return[pa,Ya]}findLongestCommonSequence(_,BA=null){let NA=_[0],VA=NA.length,$A=[];const de=Array.isArray(BA)&&BA.length>0;let Se=de?[]:null,HA=de?BA[0]:null;for(let Ve=1;Ve<_.length;++Ve){const Ce=_[Ve];let Yt=0,Vt=[VA,VA,0,0];const cr=Ce.length;for(let pa=1;pa<VA+cr;++pa){const ir=Math.max(0,VA-pa),rt=Math.min(VA,VA+cr-pa),dr=NA.slice(ir,rt),ge=Math.max(0,pa-VA),Je=Math.min(cr,pa),ha=Ce.slice(ge,Je);if(dr.length!==ha.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let Nr;Nr=de?dr.filter((Qr,Cr)=>Qr===ha[Cr]&&HA[ir+Cr]<=BA[Ve][ge+Cr]).length:dr.filter((Qr,Cr)=>Qr===ha[Cr]).length;const Rr=Nr/pa+pa/1e4;Nr>1&&Rr>Yt&&(Yt=Rr,Vt=[ir,rt,ge,Je])}const[sr,jt,je,Ke]=Vt,Jt=Math.floor((jt+sr)/2),Ya=Math.floor((Ke+je)/2);$A.push(...NA.slice(0,Jt)),NA=Ce.slice(Ya),VA=NA.length,de&&(Se.push(...HA.slice(0,Jt)),HA=BA[Ve].slice(Ya))}return $A.push(...NA),de?(Se.push(...HA),[$A,Se]):[$A,[]]}collateWordTimestamps(_,BA,NA){const[VA,$A,de]=this.combineTokensIntoWords(_,NA),Se=[];for(let HA=0;HA<VA.length;++HA){const Ve=de[HA];Se.push({text:VA[HA],timestamp:[BA[Ve.at(0)][0],BA[Ve.at(-1)][1]]})}return Se}combineTokensIntoWords(_,BA,NA=`"'“¡¿([{-`,VA=`"'.。,，!！?？:：”)]}、`){let $A,de,Se;return["chinese","japanese","thai","lao","myanmar"].includes(BA=BA??"english")?[$A,de,Se]=this.splitTokensOnUnicode(_):[$A,de,Se]=this.splitTokensOnSpaces(_),this.mergePunctuations($A,de,Se,NA,VA)}decode(_,BA){let NA;return BA?.decode_with_timestamps?(_ instanceof U.Tensor&&(_=CA(_)),NA=this.decodeWithTimestamps(_,BA)):NA=super.decode(_,BA),NA}decodeWithTimestamps(_,BA){const NA=BA?.time_precision??.02,VA=Array.from(this.all_special_ids).at(-1)+1;let $A=[[]];for(let de of _)if(de=Number(de),de>=VA){const Se=((de-VA)*NA).toFixed(2);$A.push(`<|${Se}|>`),$A.push([])}else $A[$A.length-1].push(de);return $A=$A.map(de=>typeof de=="string"?de:super.decode(de,BA)),$A.join("")}splitTokensOnUnicode(_){const BA=this.decode(_,{decode_with_timestamps:!0}),NA=[],VA=[],$A=[];let de=[],Se=[],HA=0;for(let Ve=0;Ve<_.length;++Ve){const Ce=_[Ve];de.push(Ce),Se.push(Ve);const Yt=this.decode(de,{decode_with_timestamps:!0});Yt.includes("�")&&BA[HA+Yt.indexOf("�")]!=="�"||(NA.push(Yt),VA.push(de),$A.push(Se),de=[],Se=[],HA+=Yt.length)}return[NA,VA,$A]}splitTokensOnSpaces(_){const[BA,NA,VA]=this.splitTokensOnUnicode(_),$A=[],de=[],Se=[],HA=new RegExp(`^[${nA}]$`,"gu");for(let Ve=0;Ve<BA.length;++Ve){const Ce=BA[Ve],Yt=NA[Ve],Vt=VA[Ve],cr=Yt[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),sr=Ce.startsWith(" "),jt=Ce.trim(),je=HA.test(jt);if(cr||sr||je||$A.length===0)$A.push(Ce),de.push(Yt),Se.push(Vt);else{const Ke=$A.length-1;$A[Ke]+=Ce,de[Ke].push(...Yt),Se[Ke].push(...Vt)}}return[$A,de,Se]}mergePunctuations(_,BA,NA,VA,$A){const de=structuredClone(_),Se=structuredClone(BA),HA=structuredClone(NA);let Ve=de.length-2,Ce=de.length-1;for(;Ve>=0;)de[Ve].startsWith(" ")&&VA.includes(de[Ve].trim())?(de[Ce]=de[Ve]+de[Ce],Se[Ce]=(0,z.mergeArrays)(Se[Ve],Se[Ce]),HA[Ce]=(0,z.mergeArrays)(HA[Ve],HA[Ce]),de[Ve]="",Se[Ve]=[],HA[Ve]=[]):Ce=Ve,--Ve;for(Ve=0,Ce=1;Ce<de.length;)!de[Ve].endsWith(" ")&&$A.includes(de[Ce])?(de[Ve]+=de[Ce],Se[Ve]=(0,z.mergeArrays)(Se[Ve],Se[Ce]),HA[Ve]=(0,z.mergeArrays)(HA[Ve],HA[Ce]),de[Ce]="",Se[Ce]=[],HA[Ce]=[]):Ve=Ce,++Ce;return[de.filter(Yt=>Yt),Se.filter(Yt=>Yt.length>0),HA.filter(Yt=>Yt.length>0)]}}class pi extends It{}class Fs extends It{}class ks extends It{}class Ss extends It{constructor(_,BA){super(_,BA),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(NA=>this.languageRegex.test(NA)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(_){if(_===null)return null;const[BA,...NA]=_.trim().split(this.languageRegex);if(NA.length===0)return super._encode_text(BA);if(NA.length===2){const[VA,$A]=NA;return this.supported_language_codes.includes(VA)||console.warn(`Unsupported language code "${VA}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,z.mergeArrays)([VA],super._encode_text($A))}}}class xs extends It{}class wt extends It{}class zt extends It{}class ka extends It{}class $s extends It{}class Bs extends It{constructor(_,BA){super(_,BA),this.decoder=new ye({})}}class Ns extends It{}class rs extends It{}class Os{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:ea,DistilBertTokenizer:Qs,CamembertTokenizer:bs,DebertaTokenizer:$e,DebertaV2Tokenizer:Ne,BertTokenizer:Ka,HerbertTokenizer:Zt,ConvBertTokenizer:Ra,RoFormerTokenizer:Za,XLMTokenizer:Is,ElectraTokenizer:Ts,MobileBertTokenizer:wa,SqueezeBertTokenizer:Xe,AlbertTokenizer:La,GPT2Tokenizer:xt,BartTokenizer:Ma,MBartTokenizer:Dr,MBart50Tokenizer:Hr,RobertaTokenizer:cs,WhisperTokenizer:zs,CodeGenTokenizer:pi,CLIPTokenizer:Fs,SiglipTokenizer:ks,MarianTokenizer:Ss,BloomTokenizer:Xt,NllbTokenizer:kr,M2M100Tokenizer:Ps,LlamaTokenizer:gs,CodeLlamaTokenizer:di,XLMRobertaTokenizer:qs,MPNetTokenizer:Js,FalconTokenizer:fi,GPTNeoXTokenizer:Ur,EsmTokenizer:ts,Wav2Vec2CTCTokenizer:xs,BlenderbotTokenizer:wt,BlenderbotSmallTokenizer:zt,SpeechT5Tokenizer:ka,NougatTokenizer:$s,VitsTokenizer:Bs,Qwen2Tokenizer:us,GemmaTokenizer:_s,Grok1Tokenizer:qa,CohereTokenizer:Ns,MgpstrTokenizer:rs,PreTrainedTokenizer:It};static async from_pretrained(_,{progress_callback:BA=null,config:NA=null,cache_dir:VA=null,local_files_only:$A=!1,revision:de="main",legacy:Se=null}={}){const[HA,Ve]=await X(_,{progress_callback:BA,config:NA,cache_dir:VA,local_files_only:$A,revision:de,legacy:Se}),Ce=Ve.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let Yt=this.TOKENIZER_CLASS_MAPPING[Ce];return Yt||(console.warn(`Unknown tokenizer class "${Ce}", attempting to construct from base class.`),Yt=It),new Yt(HA,Ve)}}},"./src/utils/audio.js":(x,C,d)=>{d.r(C),d.d(C,{RawAudio:()=>A,hamming:()=>R,hanning:()=>X,mel_filter_bank:()=>sA,read_audio:()=>W,spectrogram:()=>xA,window_function:()=>g});var k=d("./src/utils/hub.js"),z=d("./src/utils/maths.js"),V=d("./src/utils/core.js"),L=d("./src/env.js"),U=d("?7a2c"),q=d("./src/utils/tensor.js");async function W(l,M){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const uA=await(await(0,k.getFile)(l)).arrayBuffer(),D=new AudioContext({sampleRate:M});M===void 0&&console.warn(`No sampling rate provided, using default of ${D.sampleRate}Hz.`);const P=await D.decodeAudioData(uA);let RA;if(P.numberOfChannels===2){const SA=Math.sqrt(2),YA=P.getChannelData(0),qA=P.getChannelData(1);RA=new Float32Array(YA.length);for(let ee=0;ee<P.length;++ee)RA[ee]=SA*(YA[ee]+qA[ee])/2}else RA=P.getChannelData(0);return RA}function S(l,M){if(l<1)return new Float64Array;if(l===1)return new Float64Array([1]);const uA=1-M,D=2*Math.PI/(l-1),P=new Float64Array(l);for(let RA=0;RA<l;++RA)P[RA]=M-uA*Math.cos(RA*D);return P}function X(l){return S(l,.5)}function R(l){return S(l,.54)}const aA={htk:l=>2595*Math.log10(1+l/700),kaldi:l=>1127*Math.log(1+l/700),slaney:(l,M=1e3,uA=15,D=27/Math.log(6.4))=>l>=M?uA+Math.log(l/M)*D:3*l/200};function CA(l,M="htk"){const uA=aA[M];if(!uA)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof l=="number"?uA(l):l.map(D=>uA(D))}const kA={htk:l=>700*(10**(l/2595)-1),kaldi:l=>700*(Math.exp(l/1127)-1),slaney:(l,M=1e3,uA=15,D=Math.log(6.4)/27)=>l>=uA?M*Math.exp(D*(l-uA)):200*l/3};function EA(l,M,uA){const D=(M-l)/(uA-1);return Float64Array.from({length:uA},(P,RA)=>l+D*RA)}function sA(l,M,uA,D,P,RA=null,SA="htk",YA=!1){if(RA!==null&&RA!=="slaney")throw new Error('norm must be one of null or "slaney"');const qA=EA(CA(uA,SA),CA(D,SA),M+2);let ee,xe=function(GA,bA="htk"){const PA=kA[bA];if(!PA)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof GA=="number"?PA(GA):GA.map(UA=>PA(UA))}(qA,SA);if(YA){const GA=P/(2*l);ee=CA(Float64Array.from({length:l},(bA,PA)=>PA*GA),SA),xe=qA}else ee=EA(0,Math.floor(P/2),l);const Ge=function(GA,bA){const PA=Float64Array.from({length:bA.length-1},(ae,oe)=>bA[oe+1]-bA[oe]),UA=Array.from({length:GA.length},()=>new Array(bA.length));for(let ae=0;ae<GA.length;++ae){const oe=UA[ae];for(let ve=0;ve<bA.length;++ve)oe[ve]=bA[ve]-GA[ae]}const TA=bA.length-2,ke=Array.from({length:TA},()=>new Array(GA.length));for(let ae=0;ae<GA.length;++ae){const oe=UA[ae];for(let ve=0;ve<TA;++ve){const ie=-oe[ve]/PA[ve],FA=oe[ve+2]/PA[ve+1];ke[ve][ae]=Math.max(0,Math.min(ie,FA))}}return ke}(ee,xe);if(RA!==null&&RA==="slaney")for(let GA=0;GA<M;++GA){const bA=Ge[GA],PA=2/(xe[GA+2]-xe[GA]);for(let UA=0;UA<l;++UA)bA[UA]*=PA}return Ge}function nA(l,M,uA,D,P){if(uA<=0)throw new Error("reference must be greater than zero");if(D<=0)throw new Error("min_value must be greater than zero");uA=Math.max(D,uA);const RA=Math.log10(uA);for(let SA=0;SA<l.length;++SA)l[SA]=M*Math.log10(Math.max(D,l[SA])-RA);if(P!==null){if(P<=0)throw new Error("db_range must be greater than zero");const SA=(0,z.max)(l)[0]-P;for(let YA=0;YA<l.length;++YA)l[YA]=Math.max(l[YA],SA)}return l}async function xA(l,M,uA,D,{fft_length:P=null,power:RA=1,center:SA=!0,pad_mode:YA="reflect",onesided:qA=!0,preemphasis:ee=null,mel_filters:xe=null,mel_floor:Ge=1e-10,log_mel:GA=null,reference:bA=1,min_value:PA=1e-10,db_range:UA=null,remove_dc_offset:TA=null,min_num_frames:ke=null,max_num_frames:ae=null,do_pad:oe=!0,transpose:ve=!1}={}){const ie=M.length;if(P===null&&(P=uA),uA>P)throw Error(`frame_length (${uA}) may not be larger than fft_length (${P})`);if(ie!==uA)throw new Error(`Length of the window (${ie}) must equal frame_length (${uA})`);if(D<=0)throw new Error("hop_length must be greater than zero");if(RA===null&&xe!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(SA){if(YA!=="reflect")throw new Error(`pad_mode="${YA}" not implemented yet.`);const gA=Math.floor((P-1)/2)+1;l=function($,IA,OA){const _A=new $.constructor($.length+IA+OA),he=$.length-1;for(let ce=0;ce<$.length;++ce)_A[IA+ce]=$[ce];for(let ce=1;ce<=IA;++ce)_A[IA-ce]=$[(0,V.calculateReflectOffset)(ce,he)];for(let ce=1;ce<=OA;++ce)_A[he+IA+ce]=$[(0,V.calculateReflectOffset)(he-ce,he)];return _A}(l,gA,gA)}let FA=Math.floor(1+Math.floor((l.length-uA)/D));ke!==null&&FA<ke&&(FA=ke);const XA=qA?Math.floor(P/2)+1:P;let me=FA,be=FA;ae!==null&&(ae>FA?oe&&(be=ae):be=me=ae);const zA=new z.FFT(P),fe=new Float64Array(P),Ee=new Float64Array(zA.outputBufferSize),Pe=new Float32Array(XA*be);for(let gA=0;gA<me;++gA){const $=gA*D,IA=Math.min(l.length-$,uA);IA!==uA&&fe.fill(0,0,uA);for(let OA=0;OA<IA;++OA)fe[OA]=l[$+OA];if(TA){let OA=0;for(let he=0;he<IA;++he)OA+=fe[he];const _A=OA/IA;for(let he=0;he<IA;++he)fe[he]-=_A}if(ee!==null){for(let OA=IA-1;OA>=1;--OA)fe[OA]-=ee*fe[OA-1];fe[0]*=1-ee}for(let OA=0;OA<M.length;++OA)fe[OA]*=M[OA];zA.realTransform(Ee,fe);for(let OA=0;OA<XA;++OA){const _A=OA<<1;Pe[OA*be+gA]=Ee[_A]**2+Ee[_A+1]**2}}if(RA!==null&&RA!==2){const gA=2/RA;for(let $=0;$<Pe.length;++$)Pe[$]**=gA}const Ye=xe.length;let J=await(0,q.matmul)(new q.Tensor("float32",xe.flat(),[Ye,XA]),new q.Tensor("float32",Pe,[XA,be]));ve&&(J=J.transpose(1,0));const Oe=J.data;for(let gA=0;gA<Oe.length;++gA)Oe[gA]=Math.max(Ge,Oe[gA]);if(RA!==null&&GA!==null){const gA=Math.min(Oe.length,me*Ye);switch(GA){case"log":for(let $=0;$<gA;++$)Oe[$]=Math.log(Oe[$]);break;case"log10":for(let $=0;$<gA;++$)Oe[$]=Math.log10(Oe[$]);break;case"dB":if(RA===1)(function($,IA=1,OA=1e-5,_A=null){nA($,20,IA,OA,_A)})(Oe,bA,PA,UA);else{if(RA!==2)throw new Error(`Cannot use log_mel option '${GA}' with power ${RA}`);(function($,IA=1,OA=1e-10,_A=null){nA($,10,IA,OA,_A)})(Oe,bA,PA,UA)}break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${GA}'`)}}return J}function g(l,M,{periodic:uA=!0,frame_length:D=null,center:P=!0}={}){const RA=uA?l+1:l;let SA;switch(M){case"boxcar":SA=new Float64Array(RA).fill(1);break;case"hann":case"hann_window":SA=X(RA);break;case"hamming":SA=R(RA);break;case"povey":SA=X(RA).map(YA=>Math.pow(YA,.85));break;default:throw new Error(`Unknown window type ${M}.`)}if(uA&&(SA=SA.subarray(0,l)),D===null)return SA;if(l>D)throw new Error(`Length of the window (${l}) may not be larger than frame_length (${D})`);return SA}function b(l,M,uA){for(let D=0;D<uA.length;++D)l.setUint8(M+D,uA.charCodeAt(D))}class A{constructor(M,uA){this.audio=M,this.sampling_rate=uA}toWav(){return function(M,uA){let D=44;const P=new ArrayBuffer(D+4*M.length),RA=new DataView(P);b(RA,0,"RIFF"),RA.setUint32(4,36+4*M.length,!0),b(RA,8,"WAVE"),b(RA,12,"fmt "),RA.setUint32(16,16,!0),RA.setUint16(20,3,!0),RA.setUint16(22,1,!0),RA.setUint32(24,uA,!0),RA.setUint32(28,4*uA,!0),RA.setUint16(32,4,!0),RA.setUint16(34,32,!0),b(RA,36,"data"),RA.setUint32(40,4*M.length,!0);for(let SA=0;SA<M.length;++SA,D+=4)RA.setFloat32(D,M[SA],!0);return P}(this.audio,this.sampling_rate)}toBlob(){const M=this.toWav();return new Blob([M],{type:"audio/wav"})}async save(M){let uA;if(L.apis.IS_BROWSER_ENV){if(L.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save a file from a Web Worker.");uA=V.saveBlob}else{if(!L.apis.IS_FS_AVAILABLE)throw new Error("Unable to save because filesystem is disabled in this environment.");uA=async(D,P)=>{let RA=await P.arrayBuffer();U.writeFileSync(D,Buffer.from(RA))}}await uA(M,this.toBlob())}}},"./src/utils/constants.js":(x,C,d)=>{d.r(C),d.d(C,{CHAT_TEMPLATE_NAME:()=>q,CONFIG_NAME:()=>z,FEATURE_EXTRACTOR_NAME:()=>V,GENERATION_CONFIG_NAME:()=>W,GITHUB_ISSUE_URL:()=>k,IMAGE_PROCESSOR_NAME:()=>L,PROCESSOR_NAME:()=>U});const k="https://github.com/huggingface/transformers.js/issues/new/choose",z="config.json",V="preprocessor_config.json",L=V,U="processor_config.json",q="chat_template.json",W="generation_config.json"},"./src/utils/core.js":(x,C,d)=>{function k(nA,xA){nA&&nA(xA)}function z(nA){return Object.fromEntries(Object.entries(nA).map(([xA,g])=>[g,xA]))}function V(nA){return nA.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function L(nA){return nA?.prototype?.__proto__?.constructor?.name==="TypedArray"}function U(nA){return Number.isInteger(nA)||typeof nA=="bigint"}function q(nA){return nA==null||nA===-1}function W(nA){const xA=[];let g=nA;for(;Array.isArray(g);)xA.push(g.length),g=g[0];return xA}function S(nA,xA,g=void 0){const b=nA[xA];if(b!==void 0)return delete nA[xA],b;if(g===void 0)throw Error(`Key ${xA} does not exist in object.`);return g}function X(...nA){return Array.prototype.concat.apply([],nA)}function R(...nA){return nA.reduce((xA,g)=>xA.flatMap(b=>g.map(A=>[b,A])))}function aA(nA,xA){return Math.abs((nA+xA)%(2*xA)-xA)}function CA(nA,xA){const g=URL.createObjectURL(xA),b=document.createElement("a");b.href=g,b.download=nA,b.click(),b.remove(),URL.revokeObjectURL(g)}function kA(nA,xA){return Object.assign({},...xA.map(g=>{if(nA[g]!==void 0)return{[g]:nA[g]}}))}function EA(nA){let xA=0;for(const g of nA)++xA;return xA}function sA(nA,xA){let g=0;for(const b of nA)b===xA&&++g;return g}d.r(C),d.d(C,{calculateDimensions:()=>W,calculateReflectOffset:()=>aA,count:()=>sA,dispatchCallback:()=>k,escapeRegExp:()=>V,isIntegralNumber:()=>U,isNullishDimension:()=>q,isTypedArray:()=>L,len:()=>EA,mergeArrays:()=>X,pick:()=>kA,pop:()=>S,product:()=>R,reverseDictionary:()=>z,saveBlob:()=>CA})},"./src/utils/data-structures.js":(x,C,d)=>{d.r(C),d.d(C,{CharTrie:()=>z,PriorityQueue:()=>k,TokenLattice:()=>L});class k{constructor(W=(X,R)=>X>R,S=1/0){this._heap=[],this._comparator=W,this._maxSize=S}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...W){return this.extend(W)}extend(W){for(const S of W)if(this.size<this._maxSize)this._heap.push(S),this._siftUp();else{const X=this._smallest();this._comparator(S,this._heap[X])&&(this._heap[X]=S,this._siftUpFrom(X))}return this.size}pop(){const W=this.peek(),S=this.size-1;return S>0&&this._swap(0,S),this._heap.pop(),this._siftDown(),W}replace(W){const S=this.peek();return this._heap[0]=W,this._siftDown(),S}_parent(W){return(W+1>>>1)-1}_left(W){return 1+(W<<1)}_right(W){return W+1<<1}_greater(W,S){return this._comparator(this._heap[W],this._heap[S])}_swap(W,S){const X=this._heap[W];this._heap[W]=this._heap[S],this._heap[S]=X}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(W){for(;W>0&&this._greater(W,this._parent(W));)this._swap(W,this._parent(W)),W=this._parent(W)}_siftDown(){let W=0;for(;this._left(W)<this.size&&this._greater(this._left(W),W)||this._right(W)<this.size&&this._greater(this._right(W),W);){const S=this._right(W)<this.size&&this._greater(this._right(W),this._left(W))?this._right(W):this._left(W);this._swap(W,S),W=S}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class z{constructor(){this.root=V.default()}extend(W){for(const S of W)this.push(S)}push(W){let S=this.root;for(const X of W){let R=S.children.get(X);R===void 0&&(R=V.default(),S.children.set(X,R)),S=R}S.isLeaf=!0}*commonPrefixSearch(W){let S=this.root;if(S===void 0)return;let X="";for(const R of W){if(X+=R,S=S.children.get(R),S===void 0)return;S.isLeaf&&(yield X)}}}class V{constructor(W,S){this.isLeaf=W,this.children=S}static default(){return new V(!1,new Map)}}class L{constructor(W,S,X){this.chars=Array.from(W),this.len=this.chars.length,this.bosTokenId=S,this.eosTokenId=X,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const R=new U(this.bosTokenId,0,0,0,0),aA=new U(this.eosTokenId,1,this.len,0,0);this.nodes.push(R.clone()),this.nodes.push(aA.clone()),this.beginNodes[this.len].push(aA),this.endNodes[0].push(R)}insert(W,S,X,R){const aA=this.nodes.length,CA=new U(R,aA,W,S,X);this.beginNodes[W].push(CA),this.endNodes[W+S].push(CA),this.nodes.push(CA)}viterbi(){const W=this.len;let S=0;for(;S<=W;){if(this.beginNodes[S].length==0)return[];for(let CA of this.beginNodes[S]){CA.prev=null;let kA=0,EA=null;for(let sA of this.endNodes[S]){const nA=sA.backtraceScore+CA.score;(EA===null||nA>kA)&&(EA=sA.clone(),kA=nA)}if(EA===null)return[];CA.prev=EA,CA.backtraceScore=kA}++S}const X=[],R=this.beginNodes[W][0].prev;if(R===null)return[];let aA=R.clone();for(;aA.prev!==null;)X.push(aA.clone()),aA=aA.clone().prev.clone();return X.reverse(),X}piece(W){return this.chars.slice(W.pos,W.pos+W.length).join("")}tokens(){return this.viterbi().map(W=>this.piece(W))}tokenIds(){return this.viterbi().map(W=>W.tokenId)}}class U{constructor(W,S,X,R,aA){this.tokenId=W,this.nodeId=S,this.pos=X,this.length=R,this.score=aA,this.prev=null,this.backtraceScore=0}clone(){const W=new U(this.tokenId,this.nodeId,this.pos,this.length,this.score);return W.prev=this.prev,W.backtraceScore=this.backtraceScore,W}}},"./src/utils/devices.js":(x,C,d)=>{d.r(C),d.d(C,{DEVICE_TYPES:()=>k});const k=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(x,C,d)=>{d.r(C),d.d(C,{DATA_TYPES:()=>L,DEFAULT_DEVICE_DTYPE_MAPPING:()=>U,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>q,isWebGpuFp16Supported:()=>V});var k=d("./src/env.js"),z=d("./src/utils/devices.js");const V=function(){let W;return async function(){if(W===void 0)if(k.apis.IS_WEBGPU_AVAILABLE)try{W=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{W=!1}else W=!1;return W}}(),L=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),U=Object.freeze({[z.DEVICE_TYPES.wasm]:L.q8}),q=Object.freeze({[L.fp32]:"",[L.fp16]:"_fp16",[L.int8]:"_int8",[L.uint8]:"_uint8",[L.q8]:"_quantized",[L.q4]:"_q4",[L.q4f16]:"_q4f16",[L.bnb4]:"_bnb4"})},"./src/utils/generic.js":(x,C,d)=>{d.r(C),d.d(C,{Callable:()=>k});const k=class{constructor(){let z=function(...V){return z._call(...V)};return Object.setPrototypeOf(z,new.target.prototype)}_call(...z){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(x,C,d)=>{d.r(C),d.d(C,{getFile:()=>S,getModelFile:()=>aA,getModelJSON:()=>CA});var k=d("?7a2c"),z=d("?a42a"),V=d("./src/env.js"),L=d("./src/utils/core.js");const U={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class q{constructor(sA){if(this.filePath=sA,this.headers=new Headers,this.exists=k.existsSync(sA),this.exists){this.status=200,this.statusText="OK";let nA=k.statSync(sA);this.headers.set("content-length",nA.size.toString()),this.updateContentType();let xA=this;this.body=new ReadableStream({start(g){xA.arrayBuffer().then(b=>{g.enqueue(new Uint8Array(b)),g.close()})}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const sA=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",U[sA]??"application/octet-stream")}clone(){let sA=new q(this.filePath);return sA.exists=this.exists,sA.status=this.status,sA.statusText=this.statusText,sA.headers=new Headers(this.headers),sA}async arrayBuffer(){return(await k.promises.readFile(this.filePath)).buffer}async blob(){const sA=await k.promises.readFile(this.filePath);return new Blob([sA],{type:this.headers.get("content-type")})}async text(){return await k.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function W(EA,sA=null,nA=null){let xA;try{xA=new URL(EA)}catch{return!1}return!(sA&&!sA.includes(xA.protocol))&&!(nA&&!nA.includes(xA.hostname))}async function S(EA){if(V.env.useFS&&!W(EA,["http:","https:","blob:"]))return new q(EA);if(typeof process<"u"&&process?.release?.name==="node"){const sA=!!jc?.TESTING_REMOTELY,nA=V.env.version,xA=new Headers;if(xA.set("User-Agent",`transformers.js/${nA}; is_ci/${sA};`),W(EA,["http:","https:"],["huggingface.co","hf.co"])){const g=jc?.HF_TOKEN??jc?.HF_ACCESS_TOKEN;g&&xA.set("Authorization",`Bearer ${g}`)}return fetch(EA,{headers:xA})}return fetch(EA)}const X={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};class R{constructor(sA){this.path=sA}async match(sA){let nA=z.join(this.path,sA),xA=new q(nA);return xA.exists?xA:void 0}async put(sA,nA){const xA=Buffer.from(await nA.arrayBuffer());let g=z.join(this.path,sA);try{await k.promises.mkdir(z.dirname(g),{recursive:!0}),await k.promises.writeFile(g,xA)}catch(b){console.warn("An error occurred while writing the file to cache:",b)}}}async function aA(EA,sA,nA=!0,xA={}){if(!V.env.allowLocalModels){if(xA.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!V.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}let g;if((0,L.dispatchCallback)(xA.progress_callback,{status:"initiate",name:EA,file:sA}),!g&&V.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{g=await caches.open("transformers-cache")}catch(ee){console.warn("An error occurred while opening the browser cache:",ee)}}if(!g&&V.env.useFSCache&&(g=new R(xA.cache_dir??V.env.cacheDir)),!g&&V.env.useCustomCache){if(!V.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!V.env.customCache.match||!V.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");g=V.env.customCache}const b=xA.revision??"main";let A,l,M=kA(EA,sA),uA=kA(V.env.localModelPath,M),D=kA(V.env.remoteHost,V.env.remotePathTemplate.replaceAll("{model}",EA).replaceAll("{revision}",encodeURIComponent(b)),sA),P=b==="main"?M:kA(EA,b,sA),RA=g instanceof R?P:D,SA=!1;g&&(l=await async function(ee,...xe){for(let Ge of xe)try{let GA=await ee.match(Ge);if(GA)return GA}catch{continue}}(g,uA,RA));const YA=l!==void 0;if(l===void 0){if(V.env.allowLocalModels)if(W(M,["http:","https:"])){if(xA.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${M}.`);if(!V.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${M}.`)}else try{l=await S(uA),A=uA}catch(ee){console.warn(`Unable to load from local path "${uA}": "${ee}"`)}if(l===void 0||l.status===404){if(xA.local_files_only||!V.env.allowRemoteModels){if(nA)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${uA}".`);return null}if(l=await S(D),l.status!==200)return function(ee,xe,Ge){if(!Ge)return null;const GA=X[ee]??`Error (${ee}) occurred while trying to load file`;throw Error(`${GA}: "${xe}".`)}(l.status,D,nA);A=RA}SA=g&&typeof Response<"u"&&l instanceof Response&&l.status===200}let qA;return(0,L.dispatchCallback)(xA.progress_callback,{status:"download",name:EA,file:sA}),xA.progress_callback?YA&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(qA=new Uint8Array(await l.arrayBuffer()),(0,L.dispatchCallback)(xA.progress_callback,{status:"progress",name:EA,file:sA,progress:100,loaded:qA.length,total:qA.length})):qA=await async function(ee,xe){const Ge=ee.headers.get("Content-Length");Ge===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let GA=parseInt(Ge??"0"),bA=new Uint8Array(GA),PA=0;const UA=ee.body.getReader();async function TA(){const{done:ke,value:ae}=await UA.read();if(ke)return;let oe=PA+ae.length;if(oe>GA){GA=oe;let ve=new Uint8Array(GA);ve.set(bA),bA=ve}return bA.set(ae,PA),PA=oe,xe({progress:PA/GA*100,loaded:PA,total:GA}),TA()}return await TA(),bA}(l,ee=>{(0,L.dispatchCallback)(xA.progress_callback,{status:"progress",name:EA,file:sA,...ee})}):qA=new Uint8Array(await l.arrayBuffer()),SA&&A&&await g.match(A)===void 0&&await g.put(A,new Response(qA,{headers:l.headers})).catch(ee=>{console.warn(`Unable to add response to browser cache: ${ee}.`)}),(0,L.dispatchCallback)(xA.progress_callback,{status:"done",name:EA,file:sA}),qA}async function CA(EA,sA,nA=!0,xA={}){let g=await aA(EA,sA,nA,xA);if(g===null)return{};let b=new TextDecoder("utf-8").decode(g);return JSON.parse(b)}function kA(...EA){return(EA=EA.map((sA,nA)=>(nA&&(sA=sA.replace(new RegExp("^/"),"")),nA!==EA.length-1&&(sA=sA.replace(new RegExp("/$"),"")),sA))).join("/")}},"./src/utils/image.js":(x,C,d)=>{d.r(C),d.d(C,{RawImage:()=>CA,load_image:()=>kA});var k=d("./src/utils/core.js"),z=d("./src/utils/hub.js"),V=d("./src/env.js"),L=d("./src/utils/tensor.js"),U=d("?2b25");let q,W,S;const X=V.apis.IS_BROWSER_ENV||V.apis.IS_WEBWORKER_ENV;if(X)q=(EA,sA)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(EA,sA)},S=self.createImageBitmap,W=self.ImageData;else{if(!U)throw new Error("Unable to load image processing library.");S=async EA=>{const sA=(await EA.metadata()).channels,{data:nA,info:xA}=await EA.rotate().raw().toBuffer({resolveWithObject:!0}),g=new CA(new Uint8ClampedArray(nA),xA.width,xA.height,xA.channels);return sA!==void 0&&sA!==xA.channels&&g.convert(sA),g}}const R={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},aA=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class CA{constructor(sA,nA,xA,g){this.data=sA,this.width=nA,this.height=xA,this.channels=g}get size(){return[this.width,this.height]}static async read(sA){if(sA instanceof CA)return sA;if(typeof sA=="string"||sA instanceof URL)return await this.fromURL(sA);throw new Error("Unsupported input type: "+typeof sA)}static fromCanvas(sA){if(!X)throw new Error("fromCanvas() is only supported in browser environments.");const nA=sA.getContext("2d").getImageData(0,0,sA.width,sA.height).data;return new CA(nA,sA.width,sA.height,4)}static async fromURL(sA){const nA=await(0,z.getFile)(sA);if(nA.status!==200)throw new Error(`Unable to read image from "${sA}" (${nA.status} ${nA.statusText})`);const xA=await nA.blob();return this.fromBlob(xA)}static async fromBlob(sA){if(X){const nA=await S(sA),xA=q(nA.width,nA.height).getContext("2d");return xA.drawImage(nA,0,0),new this(xA.getImageData(0,0,nA.width,nA.height).data,nA.width,nA.height,4)}{const nA=U(await sA.arrayBuffer());return await S(nA)}}static fromTensor(sA,nA="CHW"){if(sA.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${sA.dims.length} dimensions.`);if(nA==="CHW")sA=sA.transpose(1,2,0);else if(nA!=="HWC")throw new Error(`Unsupported channel format: ${nA}`);if(!(sA.data instanceof Uint8ClampedArray||sA.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${sA.type}`);switch(sA.dims[2]){case 1:case 2:case 3:case 4:return new CA(sA.data,sA.dims[1],sA.dims[0],sA.dims[2]);default:throw new Error(`Unsupported number of channels: ${sA.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const sA=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let nA=0,xA=0;nA<this.data.length;nA+=this.channels){const g=this.data[nA],b=this.data[nA+1],A=this.data[nA+2];sA[xA++]=Math.round(.2989*g+.587*b+.114*A)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(sA,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const sA=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let nA=0,xA=0;nA<this.data.length;++nA)sA[xA++]=this.data[nA],sA[xA++]=this.data[nA],sA[xA++]=this.data[nA];break;case 4:for(let nA=0,xA=0;nA<this.data.length;nA+=4)sA[xA++]=this.data[nA],sA[xA++]=this.data[nA+1],sA[xA++]=this.data[nA+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(sA,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const sA=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let nA=0,xA=0;nA<this.data.length;++nA)sA[xA++]=this.data[nA],sA[xA++]=this.data[nA],sA[xA++]=this.data[nA],sA[xA++]=255;break;case 3:for(let nA=0,xA=0;nA<this.data.length;nA+=3)sA[xA++]=this.data[nA],sA[xA++]=this.data[nA+1],sA[xA++]=this.data[nA+2],sA[xA++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(sA,this.width,this.height,4)}putAlpha(sA){if(sA.width!==this.width||sA.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${sA.width}x${sA.height}`);if(sA.channels!==1)throw new Error(`Expected mask to have 1 channel, but got ${sA.channels}`);const nA=this.data,xA=sA.data,g=this.width*this.height;if(this.channels===3){const b=new Uint8ClampedArray(4*g);for(let A=0,l=0,M=0;A<g;++A)b[M++]=nA[l++],b[M++]=nA[l++],b[M++]=nA[l++],b[M++]=xA[A];return this._update(b,this.width,this.height,4)}if(this.channels===4){for(let b=0;b<g;++b)nA[4*b+3]=xA[b];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(sA,nA,{resample:xA=2}={}){if(this.width===sA&&this.height===nA)return this;let g=R[xA]??xA;const b=(0,k.isNullishDimension)(sA),A=(0,k.isNullishDimension)(nA);if(b&&A)return this;if(b?sA=nA/this.height*this.width:A&&(nA=sA/this.width*this.height),X){const l=this.channels,M=this.toCanvas(),uA=q(sA,nA).getContext("2d");return uA.drawImage(M,0,0,sA,nA),new CA(uA.getImageData(0,0,sA,nA).data,sA,nA,4).convert(l)}{let l=this.toSharp();switch(g){case"box":case"hamming":g!=="box"&&g!=="hamming"||(console.warn(`Resampling method ${g} is not yet supported. Using bilinear instead.`),g="bilinear");case"nearest":case"bilinear":case"bicubic":l=l.affine([sA/this.width,0,0,nA/this.height],{interpolator:g});break;case"lanczos":l=l.resize({width:sA,height:nA,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${g} is not supported.`)}return await S(l)}}async pad([sA,nA,xA,g]){if(sA=Math.max(sA,0),nA=Math.max(nA,0),xA=Math.max(xA,0),g=Math.max(g,0),sA===0&&nA===0&&xA===0&&g===0)return this;if(X){const b=this.channels,A=this.toCanvas(),l=this.width+sA+nA,M=this.height+xA+g,uA=q(l,M).getContext("2d");return uA.drawImage(A,0,0,this.width,this.height,sA,xA,this.width,this.height),new CA(uA.getImageData(0,0,l,M).data,l,M,4).convert(b)}{const b=this.toSharp().extend({left:sA,right:nA,top:xA,bottom:g});return await S(b)}}async crop([sA,nA,xA,g]){if(sA=Math.max(sA,0),nA=Math.max(nA,0),xA=Math.min(xA,this.width-1),g=Math.min(g,this.height-1),sA===0&&nA===0&&xA===this.width-1&&g===this.height-1)return this;const b=xA-sA+1,A=g-nA+1;if(X){const l=this.channels,M=this.toCanvas(),uA=q(b,A).getContext("2d");return uA.drawImage(M,sA,nA,b,A,0,0,b,A),new CA(uA.getImageData(0,0,b,A).data,b,A,4).convert(l)}{const l=this.toSharp().extract({left:sA,top:nA,width:b,height:A});return await S(l)}}async center_crop(sA,nA){if(this.width===sA&&this.height===nA)return this;const xA=(this.width-sA)/2,g=(this.height-nA)/2;if(X){const b=this.channels,A=this.toCanvas(),l=q(sA,nA).getContext("2d");let M=0,uA=0,D=0,P=0;return xA>=0?M=xA:D=-xA,g>=0?uA=g:P=-g,l.drawImage(A,M,uA,sA,nA,D,P,sA,nA),new CA(l.getImageData(0,0,sA,nA).data,sA,nA,4).convert(b)}{let b=this.toSharp();if(xA>=0&&g>=0)b=b.extract({left:Math.floor(xA),top:Math.floor(g),width:sA,height:nA});else if(xA<=0&&g<=0){const A=Math.floor(-g),l=Math.floor(-xA);b=b.extend({top:A,left:l,right:sA-this.width-l,bottom:nA-this.height-A})}else{let A=[0,0],l=0;g<0?(A[0]=Math.floor(-g),A[1]=nA-this.height-A[0]):l=Math.floor(g);let M=[0,0],uA=0;xA<0?(M[0]=Math.floor(-xA),M[1]=sA-this.width-M[0]):uA=Math.floor(xA),b=b.extend({top:A[0],bottom:A[1],left:M[0],right:M[1]}).extract({left:uA,top:l,width:sA,height:nA})}return await S(b)}}async toBlob(sA="image/png",nA=1){if(!X)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:sA,quality:nA})}toTensor(sA="CHW"){let nA=new L.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(sA!=="HWC"){if(sA!=="CHW")throw new Error(`Unsupported channel format: ${sA}`);nA=nA.permute(2,0,1)}return nA}toCanvas(){if(!X)throw new Error("toCanvas() is only supported in browser environments.");const sA=this.clone().rgba(),nA=q(sA.width,sA.height),xA=new W(sA.data,sA.width,sA.height);return nA.getContext("2d").putImageData(xA,0,0),nA}split(){const{data:sA,width:nA,height:xA,channels:g}=this,b=sA.constructor,A=sA.length/g,l=Array.from({length:g},()=>new b(A));for(let M=0;M<A;++M){const uA=g*M;for(let D=0;D<g;++D)l[D][M]=sA[uA+D]}return l.map(M=>new CA(M,nA,xA,1))}_update(sA,nA,xA,g=null){return this.data=sA,this.width=nA,this.height=xA,g!==null&&(this.channels=g),this}clone(){return new CA(this.data.slice(),this.width,this.height,this.channels)}convert(sA){if(this.channels===sA)return this;switch(sA){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(sA){if(!X){if(V.apis.IS_FS_AVAILABLE)return await this.toSharp().toFile(sA);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}{if(V.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const nA=sA.split(".").pop().toLowerCase(),xA=aA.get(nA)??"image/png",g=await this.toBlob(xA);(0,k.saveBlob)(sA,g)}}toSharp(){if(X)throw new Error("toSharp() is only supported in server-side environments.");return U(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const kA=CA.read.bind(CA)},"./src/utils/maths.js":(x,C,d)=>{function k(g,[b,A,l],[M,uA],D="bilinear",P=!1){const RA=uA/l,SA=M/A,YA=new g.constructor(M*uA*b),qA=A*l,ee=M*uA;for(let xe=0;xe<M;++xe)for(let Ge=0;Ge<uA;++Ge){const GA=xe*uA+Ge,bA=(Ge+.5)/RA-.5,PA=(xe+.5)/SA-.5;let UA=Math.floor(bA),TA=Math.floor(PA);const ke=Math.min(UA+1,l-1),ae=Math.min(TA+1,A-1);UA=Math.max(UA,0),TA=Math.max(TA,0);const oe=bA-UA,ve=PA-TA,ie=(1-oe)*(1-ve),FA=oe*(1-ve),XA=(1-oe)*ve,me=oe*ve,be=TA*l,zA=ae*l,fe=be+UA,Ee=be+ke,Pe=zA+UA,Ye=zA+ke;for(let J=0;J<b;++J){const Oe=J*qA;YA[J*ee+GA]=ie*g[Oe+fe]+FA*g[Oe+Ee]+XA*g[Oe+Pe]+me*g[Oe+Ye]}}return YA}function z(g,b,A){const l=new Array(A.length),M=new Array(A.length);for(let P=A.length-1,RA=1;P>=0;--P)M[P]=RA,l[P]=b[A[P]],RA*=l[P];const uA=A.map((P,RA)=>M[A.indexOf(RA)]),D=new g.constructor(g.length);for(let P=0;P<g.length;++P){let RA=0;for(let SA=b.length-1,YA=P;SA>=0;--SA)RA+=YA%b[SA]*uA[SA],YA=Math.floor(YA/b[SA]);D[RA]=g[P]}return[D,l]}function V(g){const b=X(g)[0],A=g.map(uA=>Math.exp(uA-b)),l=A.reduce((uA,D)=>uA+D,0);return A.map(uA=>uA/l)}function L(g){const b=X(g)[0];let A=0;for(let uA=0;uA<g.length;++uA)A+=Math.exp(g[uA]-b);const l=Math.log(A);return g.map(uA=>uA-b-l)}function U(g,b){let A=0;for(let l=0;l<g.length;++l)A+=g[l]*b[l];return A}function q(g,b){return U(g,b)/(W(g)*W(b))}function W(g){return Math.sqrt(g.reduce((b,A)=>b+A*A,0))}function S(g){if(g.length===0)throw Error("Array must not be empty");let b=g[0],A=0;for(let l=1;l<g.length;++l)g[l]<b&&(b=g[l],A=l);return[b,A]}function X(g){if(g.length===0)throw Error("Array must not be empty");let b=g[0],A=0;for(let l=1;l<g.length;++l)g[l]>b&&(b=g[l],A=l);return[b,A]}function R(g){return g>0&&!(g&g-1)}d.r(C),d.d(C,{FFT:()=>kA,bankers_round:()=>nA,cos_sim:()=>q,dot:()=>U,dynamic_time_warping:()=>xA,interpolate_data:()=>k,log_softmax:()=>L,magnitude:()=>W,max:()=>X,medianFilter:()=>EA,min:()=>S,permute_data:()=>z,round:()=>sA,softmax:()=>V});class aA{constructor(b){if(this.size=0|b,this.size<=1||!R(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=b<<1,this.table=new Float64Array(2*this.size);for(let l=0;l<this.table.length;l+=2){const M=Math.PI*l/this.size;this.table[l]=Math.cos(M),this.table[l+1]=-Math.sin(M)}let A=0;for(let l=1;this.size>l;l<<=1)++A;this._width=A%2==0?A-1:A,this._bitrev=new Int32Array(1<<this._width);for(let l=0;l<this._bitrev.length;++l){this._bitrev[l]=0;for(let M=0;M<this._width;M+=2){const uA=this._width-M-2;this._bitrev[l]|=(l>>>M&3)<<uA}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(b,A){const l=A||new Array(b.length>>>1);for(let M=0;M<b.length;M+=2)l[M>>>1]=b[M];return l}toComplexArray(b,A){const l=A||this.createComplexArray();for(let M=0;M<l.length;M+=2)l[M]=b[M>>>1],l[M+1]=0;return l}transform(b,A){if(b===A)throw new Error("Input and output buffers must be different");this._transform4(b,A,1)}realTransform(b,A){if(b===A)throw new Error("Input and output buffers must be different");this._realTransform4(b,A,1)}inverseTransform(b,A){if(b===A)throw new Error("Input and output buffers must be different");this._transform4(b,A,-1);for(let l=0;l<b.length;++l)b[l]/=this.size}_transform4(b,A,l){const M=this._csize;let uA,D,P=1<<this._width,RA=M/P<<1;const SA=this._bitrev;if(RA===4)for(uA=0,D=0;uA<M;uA+=RA,++D){const qA=SA[D];this._singleTransform2(A,b,uA,qA,P)}else for(uA=0,D=0;uA<M;uA+=RA,++D){const qA=SA[D];this._singleTransform4(A,b,uA,qA,P,l)}const YA=this.table;for(P>>=2;P>=2;P>>=2){RA=M/P<<1;const qA=RA>>>2;for(uA=0;uA<M;uA+=RA){const ee=uA+qA-1;for(let xe=uA,Ge=0;xe<ee;xe+=2,Ge+=P){const GA=xe,bA=GA+qA,PA=bA+qA,UA=PA+qA,TA=b[GA],ke=b[GA+1],ae=b[bA],oe=b[bA+1],ve=b[PA],ie=b[PA+1],FA=b[UA],XA=b[UA+1],me=YA[Ge],be=l*YA[Ge+1],zA=ae*me-oe*be,fe=ae*be+oe*me,Ee=YA[2*Ge],Pe=l*YA[2*Ge+1],Ye=ve*Ee-ie*Pe,J=ve*Pe+ie*Ee,Oe=YA[3*Ge],gA=l*YA[3*Ge+1],$=FA*Oe-XA*gA,IA=FA*gA+XA*Oe,OA=TA+Ye,_A=ke+J,he=TA-Ye,ce=ke-J,ye=zA+$,Qe=fe+IA,Te=l*(zA-$),Mt=l*(fe-IA);b[GA]=OA+ye,b[GA+1]=_A+Qe,b[bA]=he+Mt,b[bA+1]=ce-Te,b[PA]=OA-ye,b[PA+1]=_A-Qe,b[UA]=he-Mt,b[UA+1]=ce+Te}}}}_singleTransform2(b,A,l,M,uA){const D=b[M],P=b[M+1],RA=b[M+uA],SA=b[M+uA+1];A[l]=D+RA,A[l+1]=P+SA,A[l+2]=D-RA,A[l+3]=P-SA}_singleTransform4(b,A,l,M,uA,D){const P=2*uA,RA=3*uA,SA=b[M],YA=b[M+1],qA=b[M+uA],ee=b[M+uA+1],xe=b[M+P],Ge=b[M+P+1],GA=b[M+RA],bA=b[M+RA+1],PA=SA+xe,UA=YA+Ge,TA=SA-xe,ke=YA-Ge,ae=qA+GA,oe=ee+bA,ve=D*(qA-GA),ie=D*(ee-bA);A[l]=PA+ae,A[l+1]=UA+oe,A[l+2]=TA+ie,A[l+3]=ke-ve,A[l+4]=PA-ae,A[l+5]=UA-oe,A[l+6]=TA-ie,A[l+7]=ke+ve}_realTransform4(b,A,l){const M=this._csize;let uA,D,P=1<<this._width,RA=M/P<<1;const SA=this._bitrev;if(RA===4)for(uA=0,D=0;uA<M;uA+=RA,++D){const ee=SA[D];this._singleRealTransform2(A,b,uA,ee>>>1,P>>>1)}else for(uA=0,D=0;uA<M;uA+=RA,++D){const ee=SA[D];this._singleRealTransform4(A,b,uA,ee>>>1,P>>>1,l)}const YA=this.table;for(P>>=2;P>=2;P>>=2){RA=M/P<<1;const ee=RA>>>1,xe=ee>>>1,Ge=xe>>>1;for(uA=0;uA<M;uA+=RA)for(let GA=0,bA=0;GA<=Ge;GA+=2,bA+=P){const PA=uA+GA,UA=PA+xe,TA=UA+xe,ke=TA+xe,ae=b[PA],oe=b[PA+1],ve=b[UA],ie=b[UA+1],FA=b[TA],XA=b[TA+1],me=b[ke],be=b[ke+1],zA=ae,fe=oe,Ee=YA[bA],Pe=l*YA[bA+1],Ye=ve*Ee-ie*Pe,J=ve*Pe+ie*Ee,Oe=YA[2*bA],gA=l*YA[2*bA+1],$=FA*Oe-XA*gA,IA=FA*gA+XA*Oe,OA=YA[3*bA],_A=l*YA[3*bA+1],he=me*OA-be*_A,ce=me*_A+be*OA,ye=zA+$,Qe=fe+IA,Te=zA-$,Mt=fe-IA,Tt=Ye+he,dt=J+ce,Ct=l*(Ye-he),$t=l*(J-ce);if(b[PA]=ye+Tt,b[PA+1]=Qe+dt,b[UA]=Te+$t,b[UA+1]=Mt-Ct,GA===0){b[TA]=ye-Tt,b[TA+1]=Qe-dt;continue}if(GA===Ge)continue;const Sr=uA+xe-GA,Ar=uA+ee-GA;b[Sr]=Te-l*$t,b[Sr+1]=-Mt-l*Ct,b[Ar]=ye-l*Tt,b[Ar+1]=l*dt-Qe}}const qA=M>>>1;for(let ee=2;ee<qA;ee+=2)b[M-ee]=b[ee],b[M-ee+1]=-b[ee+1]}_singleRealTransform2(b,A,l,M,uA){const D=b[M],P=b[M+uA];A[l]=D+P,A[l+1]=0,A[l+2]=D-P,A[l+3]=0}_singleRealTransform4(b,A,l,M,uA,D){const P=2*uA,RA=3*uA,SA=b[M],YA=b[M+uA],qA=b[M+P],ee=b[M+RA],xe=SA+qA,Ge=SA-qA,GA=YA+ee,bA=D*(YA-ee);A[l]=xe+GA,A[l+1]=0,A[l+2]=Ge,A[l+3]=-bA,A[l+4]=xe-GA,A[l+5]=0,A[l+6]=Ge,A[l+7]=bA}}class CA{constructor(b){const A=2*(b-1),l=2*(2*b-1),M=2**Math.ceil(Math.log2(l));this.bufferSize=M,this._a=A;const uA=new Float64Array(l),D=new Float64Array(M);this._chirpBuffer=new Float64Array(M),this._buffer1=new Float64Array(M),this._buffer2=new Float64Array(M),this._outBuffer1=new Float64Array(M),this._outBuffer2=new Float64Array(M);const P=-2*Math.PI/b,RA=Math.cos(P),SA=Math.sin(P);for(let YA=0;YA<l>>1;++YA){const qA=(YA+1-b)**2/2,ee=Math.sqrt(RA**2+SA**2)**qA,xe=qA*Math.atan2(SA,RA),Ge=2*YA;uA[Ge]=ee*Math.cos(xe),uA[Ge+1]=ee*Math.sin(xe),D[Ge]=uA[Ge],D[Ge+1]=-uA[Ge+1]}this._slicedChirpBuffer=uA.subarray(A,l),this._f=new aA(M>>1),this._f.transform(this._chirpBuffer,D)}_transform(b,A,l){const M=this._buffer1,uA=this._buffer2,D=this._outBuffer1,P=this._outBuffer2,RA=this._chirpBuffer,SA=this._slicedChirpBuffer,YA=this._a;if(l)for(let qA=0;qA<SA.length;qA+=2){const ee=qA+1,xe=A[qA>>1];M[qA]=xe*SA[qA],M[ee]=xe*SA[ee]}else for(let qA=0;qA<SA.length;qA+=2){const ee=qA+1;M[qA]=A[qA]*SA[qA]-A[ee]*SA[ee],M[ee]=A[qA]*SA[ee]+A[ee]*SA[qA]}this._f.transform(D,M);for(let qA=0;qA<RA.length;qA+=2){const ee=qA+1;uA[qA]=D[qA]*RA[qA]-D[ee]*RA[ee],uA[ee]=D[qA]*RA[ee]+D[ee]*RA[qA]}this._f.inverseTransform(P,uA);for(let qA=0;qA<P.length;qA+=2){const ee=P[qA+YA],xe=P[qA+YA+1],Ge=SA[qA],GA=SA[qA+1];b[qA]=ee*Ge-xe*GA,b[qA+1]=ee*GA+xe*Ge}}transform(b,A){this._transform(b,A,!1)}realTransform(b,A){this._transform(b,A,!0)}}class kA{constructor(b){this.fft_length=b,this.isPowerOfTwo=R(b),this.isPowerOfTwo?(this.fft=new aA(b),this.outputBufferSize=2*b):(this.fft=new CA(b),this.outputBufferSize=this.fft.bufferSize)}realTransform(b,A){this.fft.realTransform(b,A)}transform(b,A){this.fft.transform(b,A)}}function EA(g,b){if(b%2==0||b<=0)throw new Error("Window size must be a positive odd number");const A=new g.constructor(g.length),l=new g.constructor(b),M=Math.floor(b/2);for(let uA=0;uA<g.length;++uA){let D=0;for(let P=-M;P<=M;++P){let RA=uA+P;RA<0?RA=Math.abs(RA):RA>=g.length&&(RA=2*(g.length-1)-RA),l[D++]=g[RA]}l.sort(),A[uA]=l[M]}return A}function sA(g,b){const A=Math.pow(10,b);return Math.round(g*A)/A}function nA(g){const b=Math.round(g);return Math.abs(g)%1==.5?b%2==0?b:b-1:b}function xA(g){const b=g.length,A=g[0].length,l=[b+1,A+1],M=Array.from({length:l[0]},()=>Array(l[1]).fill(1/0));M[0][0]=0;const uA=Array.from({length:l[0]},()=>Array(l[1]).fill(-1));for(let YA=1;YA<l[1];++YA)for(let qA=1;qA<l[0];++qA){const ee=M[qA-1][YA-1],xe=M[qA-1][YA],Ge=M[qA][YA-1];let GA,bA;ee<xe&&ee<Ge?(GA=ee,bA=0):xe<ee&&xe<Ge?(GA=xe,bA=1):(GA=Ge,bA=2),M[qA][YA]=g[qA-1][YA-1]+GA,uA[qA][YA]=bA}for(let YA=0;YA<l[1];++YA)uA[0][YA]=2;for(let YA=0;YA<l[0];++YA)uA[YA][0]=1;let D=b,P=A,RA=[],SA=[];for(;D>0||P>0;)switch(RA.push(D-1),SA.push(P-1),uA[D][P]){case 0:--D,--P;break;case 1:--D;break;case 2:--P;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${D}, ${P}]. Please file a bug report.`)}return RA.reverse(),SA.reverse(),[RA,SA]}},"./src/utils/tensor.js":(x,C,d)=>{d.r(C),d.d(C,{Tensor:()=>U,cat:()=>b,full:()=>P,full_like:()=>RA,interpolate:()=>W,interpolate_4d:()=>S,layer_norm:()=>sA,matmul:()=>X,mean:()=>uA,mean_pooling:()=>EA,ones:()=>SA,ones_like:()=>YA,permute:()=>q,quantize_embeddings:()=>Ge,rand:()=>xe,rfft:()=>R,slice:()=>kA,stack:()=>A,std_mean:()=>M,topk:()=>aA,zeros:()=>qA,zeros_like:()=>ee});var k=d("./src/utils/maths.js"),z=d("./src/backends/onnx.js"),V=d("./src/ops/registry.js");const L=Object.freeze({float32:Float32Array,float16:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class U{get dims(){return this.ort_tensor.dims}set dims(bA){this.ort_tensor.dims=bA}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...bA){return(0,z.isONNXTensor)(bA[0])?this.ort_tensor=bA[0]:this.ort_tensor=new z.Tensor(bA[0],bA[1],bA[2]),new Proxy(this,{get:(PA,UA)=>{if(typeof UA=="string"){let TA=Number(UA);if(Number.isInteger(TA))return PA._getitem(TA)}return PA[UA]},set:(PA,UA,TA)=>PA[UA]=TA})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[bA,...PA]=this.dims;if(PA.length>0){const UA=PA.reduce((TA,ke)=>TA*ke);for(let TA=0;TA<bA;++TA)yield this._subarray(TA,UA,PA)}else yield*this.data}_getitem(bA){const[PA,...UA]=this.dims;if(bA=g(bA,PA),UA.length>0){const TA=UA.reduce((ke,ae)=>ke*ae);return this._subarray(bA,TA,UA)}return new U(this.type,[this.data[bA]],UA)}indexOf(bA){const PA=this.data;for(let UA=0;UA<PA.length;++UA)if(PA[UA]==bA)return UA;return-1}_subarray(bA,PA,UA){const TA=bA*PA,ke=(bA+1)*PA,ae="subarray"in this.data?this.data.subarray(TA,ke):this.data.slice(TA,ke);return new U(this.type,ae,UA)}item(){const bA=this.data;if(bA.length!==1)throw new Error(`a Tensor with ${bA.length} elements cannot be converted to Scalar`);return bA[0]}tolist(){return function(bA,PA){const UA=bA.length,TA=PA.reduce((ae,oe)=>ae*oe);if(UA!==TA)throw Error(`cannot reshape array of size ${UA} into shape (${PA})`);let ke=bA;for(let ae=PA.length-1;ae>=0;ae--)ke=ke.reduce((oe,ve)=>{let ie=oe[oe.length-1];return ie.length<PA[ae]?ie.push(ve):oe.push([ve]),oe},[[]]);return ke[0]}(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const bA=this.data;for(let PA=0;PA<bA.length;++PA)bA[PA]=1/(1+Math.exp(-bA[PA]));return this}map(bA){return this.clone().map_(bA)}map_(bA){const PA=this.data;for(let UA=0;UA<PA.length;++UA)PA[UA]=bA(PA[UA],UA,PA);return this}mul(bA){return this.clone().mul_(bA)}mul_(bA){const PA=this.data;for(let UA=0;UA<PA.length;++UA)PA[UA]*=bA;return this}div(bA){return this.clone().div_(bA)}div_(bA){const PA=this.data;for(let UA=0;UA<PA.length;++UA)PA[UA]/=bA;return this}add(bA){return this.clone().add_(bA)}add_(bA){const PA=this.data;for(let UA=0;UA<PA.length;++UA)PA[UA]+=bA;return this}sub(bA){return this.clone().sub_(bA)}sub_(bA){const PA=this.data;for(let UA=0;UA<PA.length;++UA)PA[UA]-=bA;return this}clone(){return new U(this.type,this.data.slice(),this.dims.slice())}slice(...bA){const PA=[],UA=[];for(let ie=0;ie<this.dims.length;++ie){let FA=bA[ie];if(FA==null)UA.push([0,this.dims[ie]]),PA.push(this.dims[ie]);else if(typeof FA=="number")FA=g(FA,this.dims[ie],ie),UA.push([FA,FA+1]);else{if(!Array.isArray(FA)||FA.length!==2)throw new Error(`Invalid slice: ${FA}`);{let[XA,me]=FA;if(XA=XA===null?0:g(XA,this.dims[ie],ie,!1),me=me===null?this.dims[ie]:g(me,this.dims[ie],ie,!1),XA>me)throw new Error(`Invalid slice: ${FA}`);const be=[Math.max(XA,0),Math.min(me,this.dims[ie])];UA.push(be),PA.push(be[1]-be[0])}}}const TA=UA.map(([ie,FA])=>FA-ie),ke=TA.reduce((ie,FA)=>ie*FA),ae=this.data,oe=new ae.constructor(ke),ve=this.stride();for(let ie=0;ie<ke;++ie){let FA=0;for(let XA=TA.length-1,me=ie;XA>=0;--XA){const be=TA[XA];FA+=(me%be+UA[XA][0])*ve[XA],me=Math.floor(me/be)}oe[ie]=ae[FA]}return new U(this.type,oe,PA)}permute(...bA){return q(this,bA)}transpose(...bA){return this.permute(...bA)}sum(bA=null,PA=!1){return this.norm(1,bA,PA)}norm(bA="fro",PA=null,UA=!1){if(bA==="fro")bA=2;else if(typeof bA=="string")throw Error(`Unsupported norm: ${bA}`);const TA=this.data,ke=(ie,FA)=>ie+FA**bA;if(PA===null){const ie=TA.reduce(ke,0)**(1/bA);return new U(this.type,[ie],[])}const[ae,oe,ve]=l(ke,this,PA,UA);if(bA!==1)for(let ie=0;ie<oe.length;++ie)oe[ie]=oe[ie]**(1/bA);return new U(ae,oe,ve)}normalize_(bA=2,PA=1){PA=g(PA,this.dims.length);const UA=this.norm(bA,PA,!0),TA=this.data,ke=UA.data;for(let ae=0;ae<TA.length;++ae){let oe=0;for(let ve=this.dims.length-1,ie=ae,FA=1;ve>=0;--ve){const XA=this.dims[ve];ve!==PA&&(oe+=ie%XA*FA,FA*=this.dims[ve]),ie=Math.floor(ie/XA)}TA[ae]/=ke[oe]}return this}normalize(bA=2,PA=1){return this.clone().normalize_(bA,PA)}stride(){return function(bA){const PA=new Array(bA.length);for(let UA=bA.length-1,TA=1;UA>=0;--UA)PA[UA]=TA,TA*=bA[UA];return PA}(this.dims)}squeeze(bA=null){return new U(this.type,this.data,nA(this.dims,bA))}squeeze_(bA=null){return this.dims=nA(this.dims,bA),this}unsqueeze(bA=null){return new U(this.type,this.data,xA(this.dims,bA))}unsqueeze_(bA=null){return this.dims=xA(this.dims,bA),this}flatten_(bA=0,PA=-1){PA=(PA+this.dims.length)%this.dims.length;let UA=this.dims.slice(0,bA),TA=this.dims.slice(bA,PA+1),ke=this.dims.slice(PA+1);return this.dims=[...UA,TA.reduce((ae,oe)=>ae*oe,1),...ke],this}flatten(bA=0,PA=-1){return this.clone().flatten_(bA,PA)}view(...bA){let PA=-1;for(let TA=0;TA<bA.length;++TA)if(bA[TA]===-1){if(PA!==-1)throw new Error("Only one dimension can be inferred");PA=TA}const UA=this.data;if(PA!==-1){const TA=bA.reduce((ke,ae,oe)=>oe!==PA?ke*ae:ke,1);bA[PA]=UA.length/TA}return new U(this.type,UA,bA)}neg_(){const bA=this.data;for(let PA=0;PA<bA.length;++PA)bA[PA]=-bA[PA];return this}neg(){return this.clone().neg_()}gt(bA){const PA=new Uint8Array(this.data.length),UA=this.data;for(let TA=0;TA<UA.length;++TA)PA[TA]=UA[TA]>bA?1:0;return new U("bool",PA,this.dims)}lt(bA){const PA=new Uint8Array(this.data.length),UA=this.data;for(let TA=0;TA<UA.length;++TA)PA[TA]=UA[TA]<bA?1:0;return new U("bool",PA,this.dims)}clamp_(bA,PA){const UA=this.data;for(let TA=0;TA<UA.length;++TA)UA[TA]=Math.min(Math.max(UA[TA],bA),PA);return this}clamp(bA,PA){return this.clone().clamp_(bA,PA)}round_(){const bA=this.data;for(let PA=0;PA<bA.length;++PA)bA[PA]=Math.round(bA[PA]);return this}round(){return this.clone().round_()}mean(bA=null,PA=!1){return uA(this,bA,PA)}min(bA=null,PA=!1){if(bA===null){const ae=(0,k.min)(this.data)[0];return new U(this.type,[ae],[])}const[UA,TA,ke]=l((ae,oe)=>Math.min(ae,oe),this,bA,PA,1/0);return new U(UA,TA,ke)}max(bA=null,PA=!1){if(bA===null){const ae=(0,k.max)(this.data)[0];return new U(this.type,[ae],[])}const[UA,TA,ke]=l((ae,oe)=>Math.max(ae,oe),this,bA,PA,-1/0);return new U(UA,TA,ke)}argmin(bA=null,PA=!1){if(bA!==null)throw new Error("`dim !== null` not yet implemented.");const UA=(0,k.min)(this.data)[1];return new U("int64",[BigInt(UA)],[])}argmax(bA=null,PA=!1){if(bA!==null)throw new Error("`dim !== null` not yet implemented.");const UA=(0,k.max)(this.data)[1];return new U("int64",[BigInt(UA)],[])}to(bA){if(this.type===bA)return this;if(!L.hasOwnProperty(bA))throw new Error(`Unsupported type: ${bA}`);let PA;const UA=["int64","uint64"].includes(this.type),TA=["int64","uint64"].includes(bA);return UA&&!TA?PA=Number:!UA&&TA&&(PA=BigInt),new U(bA,L[bA].from(this.data,PA),this.dims)}}function q(GA,bA){const[PA,UA]=(0,k.permute_data)(GA.data,GA.dims,bA);return new U(GA.type,PA,UA)}function W(GA,[bA,PA],UA="bilinear",TA=!1){const ke=GA.dims.at(-3)??1,ae=GA.dims.at(-2),oe=GA.dims.at(-1);let ve=(0,k.interpolate_data)(GA.data,[ke,ae,oe],[bA,PA],UA,TA);return new U(GA.type,ve,[ke,bA,PA])}async function S(GA,{size:bA=null,mode:PA="bilinear"}={}){if(GA.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!bA)throw new Error("`interpolate_4d` requires a `size` argument.");let UA,TA;if(bA.length===2)UA=[...GA.dims.slice(0,2),...bA];else if(bA.length===3)UA=[GA.dims[0],...bA];else{if(bA.length!==4)throw new Error("`size` must be of length 2, 3, or 4.");UA=bA}if(PA==="nearest")TA=await V.TensorOpRegistry.nearest_interpolate_4d;else if(PA==="bilinear")TA=await V.TensorOpRegistry.bilinear_interpolate_4d;else{if(PA!=="bicubic")throw new Error(`Unsupported mode: ${PA}`);TA=await V.TensorOpRegistry.bicubic_interpolate_4d}const ke=new U("int64",new BigInt64Array(UA.map(BigInt)),[UA.length]);return await TA({x:GA,s:ke})}async function X(GA,bA){return await(await V.TensorOpRegistry.matmul)({a:GA,b:bA})}async function R(GA,bA){return await(await V.TensorOpRegistry.rfft)({x:GA,a:bA})}async function aA(GA,bA){const PA=await V.TensorOpRegistry.top_k;return bA=bA==null?GA.dims.at(-1):Math.min(bA,GA.dims.at(-1)),await PA({x:GA,k:new U("int64",[BigInt(bA)],[1])})}const CA=GA=>new U("int64",GA,[GA.length]);async function kA(GA,bA,PA,UA,TA){return await(await V.TensorOpRegistry.slice)({x:GA,s:CA(bA),e:CA(PA),a:CA(UA),t:CA(TA??new Array(UA.length).fill(1))})}function EA(GA,bA){const PA=GA.data,UA=bA.data,TA=[GA.dims[0],GA.dims[2]],ke=new PA.constructor(TA[0]*TA[1]),[ae,oe,ve]=GA.dims;let ie=0;for(let FA=0;FA<ae;++FA){const XA=FA*ve*oe;for(let me=0;me<ve;++me){let be=0,zA=0;const fe=FA*oe,Ee=XA+me;for(let Ye=0;Ye<oe;++Ye){const J=Number(UA[fe+Ye]);zA+=J,be+=PA[Ee+Ye*ve]*J}const Pe=be/zA;ke[ie++]=Pe}}return new U(GA.type,ke,TA)}function sA(GA,bA,{eps:PA=1e-5}={}){if(GA.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[UA,TA]=GA.dims;if(bA.length!==1&&bA[0]!==TA)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[ke,ae]=M(GA,1,0,!0),oe=ke.data,ve=ae.data,ie=GA.data,FA=new ie.constructor(ie.length);for(let XA=0;XA<UA;++XA){const me=XA*TA;for(let be=0;be<TA;++be){const zA=me+be;FA[zA]=(ie[zA]-ve[XA])/(oe[XA]+PA)}}return new U(GA.type,FA,GA.dims)}function nA(GA,bA){return GA=GA.slice(),bA===null?GA=GA.filter(PA=>PA!==1):typeof bA=="number"?GA[bA]===1&&GA.splice(bA,1):Array.isArray(bA)&&(GA=GA.filter((PA,UA)=>PA!==1||!bA.includes(UA))),GA}function xA(GA,bA){return bA=g(bA,GA.length+1),(GA=GA.slice()).splice(bA,0,1),GA}function g(GA,bA,PA=null,UA=!0){if(UA&&(GA<-bA||GA>=bA))throw new Error(`IndexError: index ${GA} is out of bounds for dimension${PA===null?"":" "+PA} with size ${bA}`);return GA<0&&(GA=(GA%bA+bA)%bA),GA}function b(GA,bA=0){bA=g(bA,GA[0].dims.length);const PA=GA[0].dims.slice();PA[bA]=GA.reduce((ae,oe)=>ae+oe.dims[bA],0);const UA=PA.reduce((ae,oe)=>ae*oe,1),TA=new GA[0].data.constructor(UA),ke=GA[0].type;if(bA===0){let ae=0;for(const oe of GA){const ve=oe.data;TA.set(ve,ae),ae+=ve.length}}else{let ae=0;for(let oe=0;oe<GA.length;++oe){const{data:ve,dims:ie}=GA[oe];for(let FA=0;FA<ve.length;++FA){let XA=0;for(let me=ie.length-1,be=FA,zA=1;me>=0;--me){const fe=ie[me];let Ee=be%fe;me===bA&&(Ee+=ae),XA+=Ee*zA,zA*=PA[me],be=Math.floor(be/fe)}TA[XA]=ve[FA]}ae+=ie[bA]}}return new U(ke,TA,PA)}function A(GA,bA=0){return b(GA.map(PA=>PA.unsqueeze(bA)),bA)}function l(GA,bA,PA=null,UA=!1,TA=null){const ke=bA.data,ae=bA.dims;PA=g(PA,ae.length);const oe=ae.slice();oe[PA]=1;const ve=new ke.constructor(ke.length/ae[PA]);TA!==null&&ve.fill(TA);for(let ie=0;ie<ke.length;++ie){let FA=0;for(let XA=ae.length-1,me=ie,be=1;XA>=0;--XA){const zA=ae[XA];XA!==PA&&(FA+=me%zA*be,be*=oe[XA]),me=Math.floor(me/zA)}ve[FA]=GA(ve[FA],ke[ie],ie,FA)}return UA||oe.splice(PA,1),[bA.type,ve,oe]}function M(GA,bA=null,PA=1,UA=!1){const TA=GA.data,ke=GA.dims;if(bA===null){const XA=TA.reduce((fe,Ee)=>fe+Ee,0),me=XA/TA.length,be=Math.sqrt(TA.reduce((fe,Ee)=>fe+(Ee-me)**2,0)/(TA.length-PA)),zA=new U(GA.type,[me],[]);return[new U(GA.type,[be],[]),zA]}const ae=uA(GA,bA=g(bA,ke.length),UA),oe=ae.data,[ve,ie,FA]=l((XA,me,be,zA)=>XA+(me-oe[zA])**2,GA,bA,UA);for(let XA=0;XA<ie.length;++XA)ie[XA]=Math.sqrt(ie[XA]/(ke[bA]-PA));return[new U(ve,ie,FA),ae]}function uA(GA,bA=null,PA=!1){const UA=GA.dims,TA=GA.data;if(bA===null){const ve=TA.reduce((ie,FA)=>ie+FA,0);return new U(GA.type,[ve/TA.length],[])}bA=g(bA,UA.length);const[ke,ae,oe]=l((ve,ie)=>ve+ie,GA,bA,PA);if(UA[bA]!==1)for(let ve=0;ve<ae.length;++ve)ae[ve]/=UA[bA];return new U(ke,ae,oe)}function D(GA,bA,PA,UA){const TA=GA.reduce((ke,ae)=>ke*ae,1);return new U(PA,new UA(TA).fill(bA),GA)}function P(GA,bA){let PA,UA;if(typeof bA=="number")PA="float32",UA=Float32Array;else if(typeof bA=="bigint")PA="int64",UA=BigInt64Array;else{if(typeof bA!="boolean")throw new Error("Unsupported data type: "+typeof bA);PA="bool",UA=Uint8Array}return D(GA,bA,PA,UA)}function RA(GA,bA){return P(GA.dims,bA)}function SA(GA){return D(GA,1n,"int64",BigInt64Array)}function YA(GA){return SA(GA.dims)}function qA(GA){return D(GA,0n,"int64",BigInt64Array)}function ee(GA){return qA(GA.dims)}function xe(GA){const bA=GA.reduce((PA,UA)=>PA*UA,1);return new U("float32",Float32Array.from({length:bA},()=>Math.random()),GA)}function Ge(GA,bA){if(GA.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(GA.dims.at(-1)%8!=0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(bA))throw new Error("The precision must be either 'binary' or 'ubinary'");const PA=bA==="binary",UA=PA?"int8":"uint8",TA=PA?Int8Array:Uint8Array,ke=GA.data,ae=new TA(ke.length/8);for(let oe=0;oe<ke.length;++oe){const ve=ke[oe]>0?1:0,ie=Math.floor(oe/8),FA=oe%8;ae[ie]|=ve<<7-FA,PA&&FA===0&&(ae[ie]-=128)}return new U(UA,ae,[GA.dims[0],GA.dims[1]/8])}}},Nu={};function ur(x){var C=Nu[x];if(C!==void 0)return C.exports;var d=Nu[x]={exports:{}};return Uu[x](d,d.exports,ur),d.exports}ur.m=Uu,i2=Object.getPrototypeOf?x=>Object.getPrototypeOf(x):x=>x.__proto__,ur.t=function(x,C){if(1&C&&(x=this(x)),8&C||typeof x=="object"&&x&&(4&C&&x.__esModule||16&C&&typeof x.then=="function"))return x;var d=Object.create(null);ur.r(d);var k={};Uc=Uc||[null,i2({}),i2([]),i2(i2)];for(var z=2&C&&x;typeof z=="object"&&!~Uc.indexOf(z);z=i2(z))Object.getOwnPropertyNames(z).forEach(V=>k[V]=()=>x[V]);return k.default=()=>x,ur.d(d,k),d},ur.d=(x,C)=>{for(var d in C)ur.o(C,d)&&!ur.o(x,d)&&Object.defineProperty(x,d,{enumerable:!0,get:C[d]})},ur.o=(x,C)=>Object.prototype.hasOwnProperty.call(x,C),ur.r=x=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(x,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(x,"__esModule",{value:!0})},(()=>{var x;if(typeof import.meta.url=="string"&&(x=import.meta.url),!x)throw new Error("Automatic publicPath is not supported in this browser");x=x.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),ur.p=x})(),ur.b=new URL("./",import.meta.url);var g2={};(()=>{ur.r(g2),ur.d(g2,{ASTFeatureExtractor:()=>S.ASTFeatureExtractor,ASTForAudioClassification:()=>d.ASTForAudioClassification,ASTModel:()=>d.ASTModel,ASTPreTrainedModel:()=>d.ASTPreTrainedModel,AlbertForMaskedLM:()=>d.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>d.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>d.AlbertForSequenceClassification,AlbertModel:()=>d.AlbertModel,AlbertPreTrainedModel:()=>d.AlbertPreTrainedModel,AlbertTokenizer:()=>k.AlbertTokenizer,AudioClassificationPipeline:()=>C.AudioClassificationPipeline,AutoConfig:()=>z.AutoConfig,AutoFeatureExtractor:()=>X.AutoFeatureExtractor,AutoImageProcessor:()=>CA.AutoImageProcessor,AutoModel:()=>d.AutoModel,AutoModelForAudioClassification:()=>d.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>d.AutoModelForAudioFrameClassification,AutoModelForCTC:()=>d.AutoModelForCTC,AutoModelForCausalLM:()=>d.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>d.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>d.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>d.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>d.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>d.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>d.AutoModelForImageSegmentation,AutoModelForImageToImage:()=>d.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>d.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>d.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>d.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>d.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>d.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>d.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>d.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>d.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>d.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>d.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>d.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>d.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>d.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>d.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>d.AutoModelForVision2Seq,AutoModelForXVector:()=>d.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>d.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>sA.AutoProcessor,AutoTokenizer:()=>k.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>C.AutomaticSpeechRecognitionPipeline,BartForConditionalGeneration:()=>d.BartForConditionalGeneration,BartForSequenceClassification:()=>d.BartForSequenceClassification,BartModel:()=>d.BartModel,BartPretrainedModel:()=>d.BartPretrainedModel,BartTokenizer:()=>k.BartTokenizer,BaseModelOutput:()=>d.BaseModelOutput,BaseStreamer:()=>nA.BaseStreamer,BeitFeatureExtractor:()=>aA.BeitFeatureExtractor,BeitForImageClassification:()=>d.BeitForImageClassification,BeitModel:()=>d.BeitModel,BeitPreTrainedModel:()=>d.BeitPreTrainedModel,BertForMaskedLM:()=>d.BertForMaskedLM,BertForQuestionAnswering:()=>d.BertForQuestionAnswering,BertForSequenceClassification:()=>d.BertForSequenceClassification,BertForTokenClassification:()=>d.BertForTokenClassification,BertModel:()=>d.BertModel,BertPreTrainedModel:()=>d.BertPreTrainedModel,BertTokenizer:()=>k.BertTokenizer,BitImageProcessor:()=>aA.BitImageProcessor,BlenderbotForConditionalGeneration:()=>d.BlenderbotForConditionalGeneration,BlenderbotModel:()=>d.BlenderbotModel,BlenderbotPreTrainedModel:()=>d.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>d.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>d.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>d.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>k.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>k.BlenderbotTokenizer,BloomForCausalLM:()=>d.BloomForCausalLM,BloomModel:()=>d.BloomModel,BloomPreTrainedModel:()=>d.BloomPreTrainedModel,BloomTokenizer:()=>k.BloomTokenizer,CLIPFeatureExtractor:()=>aA.CLIPFeatureExtractor,CLIPImageProcessor:()=>aA.CLIPImageProcessor,CLIPModel:()=>d.CLIPModel,CLIPPreTrainedModel:()=>d.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>d.CLIPSegForImageSegmentation,CLIPSegModel:()=>d.CLIPSegModel,CLIPSegPreTrainedModel:()=>d.CLIPSegPreTrainedModel,CLIPTextModel:()=>d.CLIPTextModel,CLIPTextModelWithProjection:()=>d.CLIPTextModelWithProjection,CLIPTokenizer:()=>k.CLIPTokenizer,CLIPVisionModel:()=>d.CLIPVisionModel,CLIPVisionModelWithProjection:()=>d.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>d.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>d.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>d.CamembertForSequenceClassification,CamembertForTokenClassification:()=>d.CamembertForTokenClassification,CamembertModel:()=>d.CamembertModel,CamembertPreTrainedModel:()=>d.CamembertPreTrainedModel,CamembertTokenizer:()=>k.CamembertTokenizer,CausalLMOutput:()=>d.CausalLMOutput,CausalLMOutputWithPast:()=>d.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>aA.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>d.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>d.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>d.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>S.ClapFeatureExtractor,ClapModel:()=>d.ClapModel,ClapPreTrainedModel:()=>d.ClapPreTrainedModel,ClapTextModelWithProjection:()=>d.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>g.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>d.CodeGenForCausalLM,CodeGenModel:()=>d.CodeGenModel,CodeGenPreTrainedModel:()=>d.CodeGenPreTrainedModel,CodeGenTokenizer:()=>k.CodeGenTokenizer,CodeLlamaTokenizer:()=>k.CodeLlamaTokenizer,CohereForCausalLM:()=>d.CohereForCausalLM,CohereModel:()=>d.CohereModel,CoherePreTrainedModel:()=>d.CoherePreTrainedModel,CohereTokenizer:()=>k.CohereTokenizer,ConvBertForMaskedLM:()=>d.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>d.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>d.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>d.ConvBertForTokenClassification,ConvBertModel:()=>d.ConvBertModel,ConvBertPreTrainedModel:()=>d.ConvBertPreTrainedModel,ConvBertTokenizer:()=>k.ConvBertTokenizer,ConvNextFeatureExtractor:()=>aA.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>d.ConvNextForImageClassification,ConvNextImageProcessor:()=>aA.ConvNextImageProcessor,ConvNextModel:()=>d.ConvNextModel,ConvNextPreTrainedModel:()=>d.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>d.ConvNextV2ForImageClassification,ConvNextV2Model:()=>d.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>d.ConvNextV2PreTrainedModel,DPTFeatureExtractor:()=>aA.DPTFeatureExtractor,DPTForDepthEstimation:()=>d.DPTForDepthEstimation,DPTImageProcessor:()=>aA.DPTImageProcessor,DPTModel:()=>d.DPTModel,DPTPreTrainedModel:()=>d.DPTPreTrainedModel,DebertaForMaskedLM:()=>d.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>d.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>d.DebertaForSequenceClassification,DebertaForTokenClassification:()=>d.DebertaForTokenClassification,DebertaModel:()=>d.DebertaModel,DebertaPreTrainedModel:()=>d.DebertaPreTrainedModel,DebertaTokenizer:()=>k.DebertaTokenizer,DebertaV2ForMaskedLM:()=>d.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>d.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>d.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>d.DebertaV2ForTokenClassification,DebertaV2Model:()=>d.DebertaV2Model,DebertaV2PreTrainedModel:()=>d.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>k.DebertaV2Tokenizer,DecisionTransformerModel:()=>d.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>d.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>aA.DeiTFeatureExtractor,DeiTForImageClassification:()=>d.DeiTForImageClassification,DeiTImageProcessor:()=>aA.DeiTImageProcessor,DeiTModel:()=>d.DeiTModel,DeiTPreTrainedModel:()=>d.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>d.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>d.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>C.DepthEstimationPipeline,DepthProForDepthEstimation:()=>d.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>d.DepthProPreTrainedModel,DetrFeatureExtractor:()=>aA.DetrFeatureExtractor,DetrForObjectDetection:()=>d.DetrForObjectDetection,DetrForSegmentation:()=>d.DetrForSegmentation,DetrImageProcessor:()=>aA.DetrImageProcessor,DetrModel:()=>d.DetrModel,DetrObjectDetectionOutput:()=>d.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>d.DetrPreTrainedModel,DetrSegmentationOutput:()=>d.DetrSegmentationOutput,Dinov2ForImageClassification:()=>d.Dinov2ForImageClassification,Dinov2Model:()=>d.Dinov2Model,Dinov2PreTrainedModel:()=>d.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>d.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>d.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>d.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>d.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>d.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>d.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>d.DistilBertForTokenClassification,DistilBertModel:()=>d.DistilBertModel,DistilBertPreTrainedModel:()=>d.DistilBertPreTrainedModel,DistilBertTokenizer:()=>k.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>C.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>aA.DonutFeatureExtractor,DonutImageProcessor:()=>aA.DonutImageProcessor,DonutSwinModel:()=>d.DonutSwinModel,DonutSwinPreTrainedModel:()=>d.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>d.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>aA.EfficientNetImageProcessor,EfficientNetModel:()=>d.EfficientNetModel,EfficientNetPreTrainedModel:()=>d.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>d.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>d.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>d.ElectraForSequenceClassification,ElectraForTokenClassification:()=>d.ElectraForTokenClassification,ElectraModel:()=>d.ElectraModel,ElectraPreTrainedModel:()=>d.ElectraPreTrainedModel,ElectraTokenizer:()=>k.ElectraTokenizer,EosTokenCriteria:()=>xA.EosTokenCriteria,EsmForMaskedLM:()=>d.EsmForMaskedLM,EsmForSequenceClassification:()=>d.EsmForSequenceClassification,EsmForTokenClassification:()=>d.EsmForTokenClassification,EsmModel:()=>d.EsmModel,EsmPreTrainedModel:()=>d.EsmPreTrainedModel,EsmTokenizer:()=>k.EsmTokenizer,ExaoneForCausalLM:()=>d.ExaoneForCausalLM,ExaoneModel:()=>d.ExaoneModel,ExaonePreTrainedModel:()=>d.ExaonePreTrainedModel,FFT:()=>q.FFT,FalconForCausalLM:()=>d.FalconForCausalLM,FalconModel:()=>d.FalconModel,FalconPreTrainedModel:()=>d.FalconPreTrainedModel,FalconTokenizer:()=>k.FalconTokenizer,FastViTForImageClassification:()=>d.FastViTForImageClassification,FastViTModel:()=>d.FastViTModel,FastViTPreTrainedModel:()=>d.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>C.FeatureExtractionPipeline,FeatureExtractor:()=>W.FeatureExtractor,FillMaskPipeline:()=>C.FillMaskPipeline,Florence2ForConditionalGeneration:()=>d.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>d.Florence2PreTrainedModel,Florence2Processor:()=>EA.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>g.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>g.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>aA.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>d.GLPNForDepthEstimation,GLPNModel:()=>d.GLPNModel,GLPNPreTrainedModel:()=>d.GLPNPreTrainedModel,GPT2LMHeadModel:()=>d.GPT2LMHeadModel,GPT2Model:()=>d.GPT2Model,GPT2PreTrainedModel:()=>d.GPT2PreTrainedModel,GPT2Tokenizer:()=>k.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>d.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>d.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>d.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>d.GPTJForCausalLM,GPTJModel:()=>d.GPTJModel,GPTJPreTrainedModel:()=>d.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>d.GPTNeoForCausalLM,GPTNeoModel:()=>d.GPTNeoModel,GPTNeoPreTrainedModel:()=>d.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>d.GPTNeoXForCausalLM,GPTNeoXModel:()=>d.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>d.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>k.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>d.Gemma2ForCausalLM,Gemma2Model:()=>d.Gemma2Model,Gemma2PreTrainedModel:()=>d.Gemma2PreTrainedModel,GemmaForCausalLM:()=>d.GemmaForCausalLM,GemmaModel:()=>d.GemmaModel,GemmaPreTrainedModel:()=>d.GemmaPreTrainedModel,GemmaTokenizer:()=>k.GemmaTokenizer,GraniteForCausalLM:()=>d.GraniteForCausalLM,GraniteModel:()=>d.GraniteModel,GranitePreTrainedModel:()=>d.GranitePreTrainedModel,Grok1Tokenizer:()=>k.Grok1Tokenizer,GroundingDinoForObjectDetection:()=>d.GroundingDinoForObjectDetection,GroundingDinoImageProcessor:()=>aA.GroundingDinoImageProcessor,GroundingDinoPreTrainedModel:()=>d.GroundingDinoPreTrainedModel,GroundingDinoProcessor:()=>EA.GroundingDinoProcessor,GroupViTModel:()=>d.GroupViTModel,GroupViTPreTrainedModel:()=>d.GroupViTPreTrainedModel,HerbertTokenizer:()=>k.HerbertTokenizer,HieraForImageClassification:()=>d.HieraForImageClassification,HieraModel:()=>d.HieraModel,HieraPreTrainedModel:()=>d.HieraPreTrainedModel,HubertForCTC:()=>d.HubertForCTC,HubertForSequenceClassification:()=>d.HubertForSequenceClassification,HubertModel:()=>d.HubertModel,HubertPreTrainedModel:()=>d.HubertPreTrainedModel,IJepaForImageClassification:()=>d.IJepaForImageClassification,IJepaModel:()=>d.IJepaModel,IJepaPreTrainedModel:()=>d.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>d.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>aA.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>d.Idefics3PreTrainedModel,Idefics3Processor:()=>EA.Idefics3Processor,ImageClassificationPipeline:()=>C.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>C.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>S.ImageFeatureExtractor,ImageMattingOutput:()=>d.ImageMattingOutput,ImageProcessor:()=>R.ImageProcessor,ImageSegmentationPipeline:()=>C.ImageSegmentationPipeline,ImageToImagePipeline:()=>C.ImageToImagePipeline,ImageToTextPipeline:()=>C.ImageToTextPipeline,InterruptableStoppingCriteria:()=>xA.InterruptableStoppingCriteria,JAISLMHeadModel:()=>d.JAISLMHeadModel,JAISModel:()=>d.JAISModel,JAISPreTrainedModel:()=>d.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>aA.JinaCLIPImageProcessor,JinaCLIPModel:()=>d.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>d.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>EA.JinaCLIPProcessor,JinaCLIPTextModel:()=>d.JinaCLIPTextModel,JinaCLIPVisionModel:()=>d.JinaCLIPVisionModel,LlamaForCausalLM:()=>d.LlamaForCausalLM,LlamaModel:()=>d.LlamaModel,LlamaPreTrainedModel:()=>d.LlamaPreTrainedModel,LlamaTokenizer:()=>k.LlamaTokenizer,LlavaForConditionalGeneration:()=>d.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>d.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>aA.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>d.LlavaPreTrainedModel,LogitsProcessor:()=>g.LogitsProcessor,LogitsProcessorList:()=>g.LogitsProcessorList,LogitsWarper:()=>g.LogitsWarper,LongT5ForConditionalGeneration:()=>d.LongT5ForConditionalGeneration,LongT5Model:()=>d.LongT5Model,LongT5PreTrainedModel:()=>d.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>d.M2M100ForConditionalGeneration,M2M100Model:()=>d.M2M100Model,M2M100PreTrainedModel:()=>d.M2M100PreTrainedModel,M2M100Tokenizer:()=>k.M2M100Tokenizer,MBart50Tokenizer:()=>k.MBart50Tokenizer,MBartForCausalLM:()=>d.MBartForCausalLM,MBartForConditionalGeneration:()=>d.MBartForConditionalGeneration,MBartForSequenceClassification:()=>d.MBartForSequenceClassification,MBartModel:()=>d.MBartModel,MBartPreTrainedModel:()=>d.MBartPreTrainedModel,MBartTokenizer:()=>k.MBartTokenizer,MPNetForMaskedLM:()=>d.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>d.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>d.MPNetForSequenceClassification,MPNetForTokenClassification:()=>d.MPNetForTokenClassification,MPNetModel:()=>d.MPNetModel,MPNetPreTrainedModel:()=>d.MPNetPreTrainedModel,MPNetTokenizer:()=>k.MPNetTokenizer,MT5ForConditionalGeneration:()=>d.MT5ForConditionalGeneration,MT5Model:()=>d.MT5Model,MT5PreTrainedModel:()=>d.MT5PreTrainedModel,MarianMTModel:()=>d.MarianMTModel,MarianModel:()=>d.MarianModel,MarianPreTrainedModel:()=>d.MarianPreTrainedModel,MarianTokenizer:()=>k.MarianTokenizer,Mask2FormerImageProcessor:()=>aA.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>aA.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>d.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>aA.MaskFormerImageProcessor,MaskFormerModel:()=>d.MaskFormerModel,MaskFormerPreTrainedModel:()=>d.MaskFormerPreTrainedModel,MaskedLMOutput:()=>d.MaskedLMOutput,MaxLengthCriteria:()=>xA.MaxLengthCriteria,MgpstrForSceneTextRecognition:()=>d.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>d.MgpstrModelOutput,MgpstrPreTrainedModel:()=>d.MgpstrPreTrainedModel,MgpstrProcessor:()=>EA.MgpstrProcessor,MgpstrTokenizer:()=>k.MgpstrTokenizer,MinLengthLogitsProcessor:()=>g.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>g.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>d.MistralForCausalLM,MistralModel:()=>d.MistralModel,MistralPreTrainedModel:()=>d.MistralPreTrainedModel,MobileBertForMaskedLM:()=>d.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>d.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>d.MobileBertForSequenceClassification,MobileBertModel:()=>d.MobileBertModel,MobileBertPreTrainedModel:()=>d.MobileBertPreTrainedModel,MobileBertTokenizer:()=>k.MobileBertTokenizer,MobileLLMForCausalLM:()=>d.MobileLLMForCausalLM,MobileLLMModel:()=>d.MobileLLMModel,MobileLLMPreTrainedModel:()=>d.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>aA.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>d.MobileNetV1ForImageClassification,MobileNetV1ImageProcessor:()=>aA.MobileNetV1ImageProcessor,MobileNetV1Model:()=>d.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>d.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>aA.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>d.MobileNetV2ForImageClassification,MobileNetV2ImageProcessor:()=>aA.MobileNetV2ImageProcessor,MobileNetV2Model:()=>d.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>d.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>aA.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>d.MobileNetV3ForImageClassification,MobileNetV3ImageProcessor:()=>aA.MobileNetV3ImageProcessor,MobileNetV3Model:()=>d.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>d.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>aA.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>d.MobileNetV4ForImageClassification,MobileNetV4ImageProcessor:()=>aA.MobileNetV4ImageProcessor,MobileNetV4Model:()=>d.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>d.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>aA.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>d.MobileViTForImageClassification,MobileViTImageProcessor:()=>aA.MobileViTImageProcessor,MobileViTModel:()=>d.MobileViTModel,MobileViTPreTrainedModel:()=>d.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>d.MobileViTV2ForImageClassification,MobileViTV2Model:()=>d.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>d.MobileViTV2PreTrainedModel,ModelOutput:()=>d.ModelOutput,ModernBertForMaskedLM:()=>d.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>d.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>d.ModernBertForTokenClassification,ModernBertModel:()=>d.ModernBertModel,ModernBertPreTrainedModel:()=>d.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>d.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>S.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>d.MoonshineForConditionalGeneration,MoonshineModel:()=>d.MoonshineModel,MoonshinePreTrainedModel:()=>d.MoonshinePreTrainedModel,MoonshineProcessor:()=>EA.MoonshineProcessor,MptForCausalLM:()=>d.MptForCausalLM,MptModel:()=>d.MptModel,MptPreTrainedModel:()=>d.MptPreTrainedModel,MultiModalityCausalLM:()=>d.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>d.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>d.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>d.MusicgenForConditionalGeneration,MusicgenModel:()=>d.MusicgenModel,MusicgenPreTrainedModel:()=>d.MusicgenPreTrainedModel,NllbTokenizer:()=>k.NllbTokenizer,NoBadWordsLogitsProcessor:()=>g.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>g.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>d.NomicBertModel,NomicBertPreTrainedModel:()=>d.NomicBertPreTrainedModel,NougatImageProcessor:()=>aA.NougatImageProcessor,NougatTokenizer:()=>k.NougatTokenizer,OPTForCausalLM:()=>d.OPTForCausalLM,OPTModel:()=>d.OPTModel,OPTPreTrainedModel:()=>d.OPTPreTrainedModel,ObjectDetectionPipeline:()=>C.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>d.Olmo2ForCausalLM,Olmo2Model:()=>d.Olmo2Model,Olmo2PreTrainedModel:()=>d.Olmo2PreTrainedModel,OlmoForCausalLM:()=>d.OlmoForCausalLM,OlmoModel:()=>d.OlmoModel,OlmoPreTrainedModel:()=>d.OlmoPreTrainedModel,OpenELMForCausalLM:()=>d.OpenELMForCausalLM,OpenELMModel:()=>d.OpenELMModel,OpenELMPreTrainedModel:()=>d.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>aA.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>d.OwlViTForObjectDetection,OwlViTImageProcessor:()=>aA.OwlViTImageProcessor,OwlViTModel:()=>d.OwlViTModel,OwlViTPreTrainedModel:()=>d.OwlViTPreTrainedModel,OwlViTProcessor:()=>EA.OwlViTProcessor,Owlv2ForObjectDetection:()=>d.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>aA.Owlv2ImageProcessor,Owlv2Model:()=>d.Owlv2Model,Owlv2PreTrainedModel:()=>d.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>d.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>d.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>EA.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>d.PatchTSMixerForPrediction,PatchTSMixerModel:()=>d.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>d.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>d.PatchTSTForPrediction,PatchTSTModel:()=>d.PatchTSTModel,PatchTSTPreTrainedModel:()=>d.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>d.Phi3ForCausalLM,Phi3Model:()=>d.Phi3Model,Phi3PreTrainedModel:()=>d.Phi3PreTrainedModel,Phi3VForCausalLM:()=>d.Phi3VForCausalLM,Phi3VImageProcessor:()=>aA.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>d.Phi3VPreTrainedModel,Phi3VProcessor:()=>EA.Phi3VProcessor,PhiForCausalLM:()=>d.PhiForCausalLM,PhiModel:()=>d.PhiModel,PhiPreTrainedModel:()=>d.PhiPreTrainedModel,Pipeline:()=>C.Pipeline,PreTrainedModel:()=>d.PreTrainedModel,PreTrainedTokenizer:()=>k.PreTrainedTokenizer,PretrainedConfig:()=>z.PretrainedConfig,PretrainedMixin:()=>d.PretrainedMixin,Processor:()=>kA.Processor,PvtForImageClassification:()=>d.PvtForImageClassification,PvtImageProcessor:()=>aA.PvtImageProcessor,PvtModel:()=>d.PvtModel,PvtPreTrainedModel:()=>d.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>S.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>d.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>d.PyAnnoteModel,PyAnnotePreTrainedModel:()=>d.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>EA.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>d.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>C.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>d.Qwen2ForCausalLM,Qwen2Model:()=>d.Qwen2Model,Qwen2PreTrainedModel:()=>d.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>k.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>d.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>aA.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>d.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>EA.Qwen2VLProcessor,RTDetrForObjectDetection:()=>d.RTDetrForObjectDetection,RTDetrImageProcessor:()=>aA.RTDetrImageProcessor,RTDetrModel:()=>d.RTDetrModel,RTDetrObjectDetectionOutput:()=>d.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>d.RTDetrPreTrainedModel,RawAudio:()=>V.RawAudio,RawImage:()=>L.RawImage,RepetitionPenaltyLogitsProcessor:()=>g.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>d.ResNetForImageClassification,ResNetModel:()=>d.ResNetModel,ResNetPreTrainedModel:()=>d.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>d.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>d.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>d.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>d.RoFormerForTokenClassification,RoFormerModel:()=>d.RoFormerModel,RoFormerPreTrainedModel:()=>d.RoFormerPreTrainedModel,RoFormerTokenizer:()=>k.RoFormerTokenizer,RobertaForMaskedLM:()=>d.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>d.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>d.RobertaForSequenceClassification,RobertaForTokenClassification:()=>d.RobertaForTokenClassification,RobertaModel:()=>d.RobertaModel,RobertaPreTrainedModel:()=>d.RobertaPreTrainedModel,RobertaTokenizer:()=>k.RobertaTokenizer,SamImageProcessor:()=>aA.SamImageProcessor,SamImageSegmentationOutput:()=>d.SamImageSegmentationOutput,SamModel:()=>d.SamModel,SamPreTrainedModel:()=>d.SamPreTrainedModel,SamProcessor:()=>EA.SamProcessor,SapiensForDepthEstimation:()=>d.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>d.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>d.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>d.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>S.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>aA.SegformerFeatureExtractor,SegformerForImageClassification:()=>d.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>d.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>aA.SegformerImageProcessor,SegformerModel:()=>d.SegformerModel,SegformerPreTrainedModel:()=>d.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>d.Seq2SeqLMOutput,SequenceClassifierOutput:()=>d.SequenceClassifierOutput,SiglipImageProcessor:()=>aA.SiglipImageProcessor,SiglipModel:()=>d.SiglipModel,SiglipPreTrainedModel:()=>d.SiglipPreTrainedModel,SiglipTextModel:()=>d.SiglipTextModel,SiglipTokenizer:()=>k.SiglipTokenizer,SiglipVisionModel:()=>d.SiglipVisionModel,SpeechT5FeatureExtractor:()=>S.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>d.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>d.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>d.SpeechT5HifiGan,SpeechT5Model:()=>d.SpeechT5Model,SpeechT5PreTrainedModel:()=>d.SpeechT5PreTrainedModel,SpeechT5Processor:()=>EA.SpeechT5Processor,SpeechT5Tokenizer:()=>k.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>d.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>d.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>d.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>d.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>d.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>k.SqueezeBertTokenizer,StableLmForCausalLM:()=>d.StableLmForCausalLM,StableLmModel:()=>d.StableLmModel,StableLmPreTrainedModel:()=>d.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>d.Starcoder2ForCausalLM,Starcoder2Model:()=>d.Starcoder2Model,Starcoder2PreTrainedModel:()=>d.Starcoder2PreTrainedModel,StoppingCriteria:()=>xA.StoppingCriteria,StoppingCriteriaList:()=>xA.StoppingCriteriaList,StyleTextToSpeech2Model:()=>d.StyleTextToSpeech2Model,StyleTextToSpeech2PreTrainedModel:()=>d.StyleTextToSpeech2PreTrainedModel,SummarizationPipeline:()=>C.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>g.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>d.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>aA.Swin2SRImageProcessor,Swin2SRModel:()=>d.Swin2SRModel,Swin2SRPreTrainedModel:()=>d.Swin2SRPreTrainedModel,SwinForImageClassification:()=>d.SwinForImageClassification,SwinModel:()=>d.SwinModel,SwinPreTrainedModel:()=>d.SwinPreTrainedModel,T5ForConditionalGeneration:()=>d.T5ForConditionalGeneration,T5Model:()=>d.T5Model,T5PreTrainedModel:()=>d.T5PreTrainedModel,T5Tokenizer:()=>k.T5Tokenizer,TableTransformerForObjectDetection:()=>d.TableTransformerForObjectDetection,TableTransformerModel:()=>d.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>d.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>d.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>g.TemperatureLogitsWarper,Tensor:()=>U.Tensor,Text2TextGenerationPipeline:()=>C.Text2TextGenerationPipeline,TextClassificationPipeline:()=>C.TextClassificationPipeline,TextGenerationPipeline:()=>C.TextGenerationPipeline,TextStreamer:()=>nA.TextStreamer,TextToAudioPipeline:()=>C.TextToAudioPipeline,TokenClassificationPipeline:()=>C.TokenClassificationPipeline,TokenClassifierOutput:()=>d.TokenClassifierOutput,TokenizerModel:()=>k.TokenizerModel,TopKLogitsWarper:()=>g.TopKLogitsWarper,TopPLogitsWarper:()=>g.TopPLogitsWarper,TrOCRForCausalLM:()=>d.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>d.TrOCRPreTrainedModel,TranslationPipeline:()=>C.TranslationPipeline,UniSpeechForCTC:()=>d.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>d.UniSpeechForSequenceClassification,UniSpeechModel:()=>d.UniSpeechModel,UniSpeechPreTrainedModel:()=>d.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>d.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>d.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>d.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>d.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>d.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>EA.VLChatProcessor,VLMImageProcessor:()=>aA.VLMImageProcessor,ViTFeatureExtractor:()=>aA.ViTFeatureExtractor,ViTForImageClassification:()=>d.ViTForImageClassification,ViTImageProcessor:()=>aA.ViTImageProcessor,ViTMAEModel:()=>d.ViTMAEModel,ViTMAEPreTrainedModel:()=>d.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>d.ViTMSNForImageClassification,ViTMSNModel:()=>d.ViTMSNModel,ViTMSNPreTrainedModel:()=>d.ViTMSNPreTrainedModel,ViTModel:()=>d.ViTModel,ViTPreTrainedModel:()=>d.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>d.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>d.VitMatteForImageMatting,VitMatteImageProcessor:()=>aA.VitMatteImageProcessor,VitMattePreTrainedModel:()=>d.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>d.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>aA.VitPoseImageProcessor,VitPosePreTrainedModel:()=>d.VitPosePreTrainedModel,VitsModel:()=>d.VitsModel,VitsModelOutput:()=>d.VitsModelOutput,VitsPreTrainedModel:()=>d.VitsPreTrainedModel,VitsTokenizer:()=>k.VitsTokenizer,Wav2Vec2BertForCTC:()=>d.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>d.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>d.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>d.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>k.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>S.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>d.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>d.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>d.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>d.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>d.Wav2Vec2PreTrainedModel,Wav2Vec2ProcessorWithLM:()=>EA.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>d.WavLMForAudioFrameClassification,WavLMForCTC:()=>d.WavLMForCTC,WavLMForSequenceClassification:()=>d.WavLMForSequenceClassification,WavLMForXVector:()=>d.WavLMForXVector,WavLMModel:()=>d.WavLMModel,WavLMPreTrainedModel:()=>d.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>S.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>d.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>d.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>S.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>d.WhisperForConditionalGeneration,WhisperModel:()=>d.WhisperModel,WhisperPreTrainedModel:()=>d.WhisperPreTrainedModel,WhisperProcessor:()=>EA.WhisperProcessor,WhisperTextStreamer:()=>nA.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>g.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>k.WhisperTokenizer,XLMForQuestionAnswering:()=>d.XLMForQuestionAnswering,XLMForSequenceClassification:()=>d.XLMForSequenceClassification,XLMForTokenClassification:()=>d.XLMForTokenClassification,XLMModel:()=>d.XLMModel,XLMPreTrainedModel:()=>d.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>d.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>d.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>d.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>d.XLMRobertaForTokenClassification,XLMRobertaModel:()=>d.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>d.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>k.XLMRobertaTokenizer,XLMTokenizer:()=>k.XLMTokenizer,XLMWithLMHeadModel:()=>d.XLMWithLMHeadModel,XVectorOutput:()=>d.XVectorOutput,YolosFeatureExtractor:()=>aA.YolosFeatureExtractor,YolosForObjectDetection:()=>d.YolosForObjectDetection,YolosImageProcessor:()=>aA.YolosImageProcessor,YolosModel:()=>d.YolosModel,YolosObjectDetectionOutput:()=>d.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>d.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>C.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>C.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>C.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>C.ZeroShotObjectDetectionPipeline,bankers_round:()=>q.bankers_round,cat:()=>U.cat,cos_sim:()=>q.cos_sim,dot:()=>q.dot,dynamic_time_warping:()=>q.dynamic_time_warping,env:()=>x.env,full:()=>U.full,full_like:()=>U.full_like,getKeyValueShapes:()=>z.getKeyValueShapes,hamming:()=>V.hamming,hanning:()=>V.hanning,interpolate:()=>U.interpolate,interpolate_4d:()=>U.interpolate_4d,interpolate_data:()=>q.interpolate_data,is_chinese_char:()=>k.is_chinese_char,layer_norm:()=>U.layer_norm,load_image:()=>L.load_image,log_softmax:()=>q.log_softmax,magnitude:()=>q.magnitude,matmul:()=>U.matmul,max:()=>q.max,mean:()=>U.mean,mean_pooling:()=>U.mean_pooling,medianFilter:()=>q.medianFilter,mel_filter_bank:()=>V.mel_filter_bank,min:()=>q.min,ones:()=>U.ones,ones_like:()=>U.ones_like,permute:()=>U.permute,permute_data:()=>q.permute_data,pipeline:()=>C.pipeline,quantize_embeddings:()=>U.quantize_embeddings,rand:()=>U.rand,read_audio:()=>V.read_audio,rfft:()=>U.rfft,round:()=>q.round,slice:()=>U.slice,softmax:()=>q.softmax,spectrogram:()=>V.spectrogram,stack:()=>U.stack,std_mean:()=>U.std_mean,topk:()=>U.topk,window_function:()=>V.window_function,zeros:()=>U.zeros,zeros_like:()=>U.zeros_like});var x=ur("./src/env.js"),C=ur("./src/pipelines.js"),d=ur("./src/models.js"),k=ur("./src/tokenizers.js"),z=ur("./src/configs.js"),V=ur("./src/utils/audio.js"),L=ur("./src/utils/image.js"),U=ur("./src/utils/tensor.js"),q=ur("./src/utils/maths.js"),W=ur("./src/base/feature_extraction_utils.js"),S=ur("./src/models/feature_extractors.js"),X=ur("./src/models/auto/feature_extraction_auto.js"),R=ur("./src/base/image_processors_utils.js"),aA=ur("./src/models/image_processors.js"),CA=ur("./src/models/auto/image_processing_auto.js"),kA=ur("./src/base/processing_utils.js"),EA=ur("./src/models/processors.js"),sA=ur("./src/models/auto/processing_auto.js"),nA=ur("./src/generation/streamers.js"),xA=ur("./src/generation/stopping_criteria.js"),g=ur("./src/generation/logits_process.js")})();var Qp=g2.AutoTokenizer,Tp=g2.RawAudio,Pp=g2.StyleTextToSpeech2Model,Ou=g2.Tensor,pA=pA!==void 0?pA:{};pA.expectedDataFileDownloads||(pA.expectedDataFileDownloads=0);var zp=typeof importScripts=="function",Kc=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",Lu=typeof atob=="function"?atob:function(x){var C,d,k,z,V,L,U="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",q="",W=0;x=x.replace(/[^A-Za-z0-9\+\/\=]/g,"");do C=U.indexOf(x.charAt(W++))<<2|(z=U.indexOf(x.charAt(W++)))>>4,d=(15&z)<<4|(V=U.indexOf(x.charAt(W++)))>>2,k=(3&V)<<6|(L=U.indexOf(x.charAt(W++))),q+=String.fromCharCode(C),V!==64&&(q+=String.fromCharCode(d)),L!==64&&(q+=String.fromCharCode(k));while(W<x.length);return q};Kc&&(process.argv.length>1&&(eg=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",function(x){if(!(x instanceof Fp))throw x}),process.on("unhandledRejection",function(x){throw x}),pA.inspect=function(){return"[Emscripten Module object]"}),pA.expectedDataFileDownloads++,function(){if(pA.ENVIRONMENT_IS_PTHREAD)return;const x="/usr/share/espeak-ng-data",C=x+"/lang",d=x+"/voices";(function(k){var z=null,V=null;function L(){function U(R,aA){if(!R)throw aA+new Error().stack}function q(R,aA,CA){this.start=R,this.end=aA,this.audio=CA}pA.FS_createPath("/","usr",!0,!0),pA.FS_createPath("/usr","share",!0,!0),pA.FS_createPath("/usr/share","espeak-ng-data",!0,!0),pA.FS_createPath(x,"lang",!0,!0),pA.FS_createPath(C,"aav",!0,!0),pA.FS_createPath(C,"art",!0,!0),pA.FS_createPath(C,"azc",!0,!0),pA.FS_createPath(C,"bat",!0,!0),pA.FS_createPath(C,"bnt",!0,!0),pA.FS_createPath(C,"ccs",!0,!0),pA.FS_createPath(C,"cel",!0,!0),pA.FS_createPath(C,"cus",!0,!0),pA.FS_createPath(C,"dra",!0,!0),pA.FS_createPath(C,"esx",!0,!0),pA.FS_createPath(C,"gmq",!0,!0),pA.FS_createPath(C,"gmw",!0,!0),pA.FS_createPath(C,"grk",!0,!0),pA.FS_createPath(C,"inc",!0,!0),pA.FS_createPath(C,"ine",!0,!0),pA.FS_createPath(C,"ira",!0,!0),pA.FS_createPath(C,"iro",!0,!0),pA.FS_createPath(C,"itc",!0,!0),pA.FS_createPath(C,"jpx",!0,!0),pA.FS_createPath(C,"map",!0,!0),pA.FS_createPath(C,"miz",!0,!0),pA.FS_createPath(C,"myn",!0,!0),pA.FS_createPath(C,"poz",!0,!0),pA.FS_createPath(C,"roa",!0,!0),pA.FS_createPath(C,"sai",!0,!0),pA.FS_createPath(C,"sem",!0,!0),pA.FS_createPath(C,"sit",!0,!0),pA.FS_createPath(C,"tai",!0,!0),pA.FS_createPath(C,"trk",!0,!0),pA.FS_createPath(C,"urj",!0,!0),pA.FS_createPath(C,"zle",!0,!0),pA.FS_createPath(C,"zls",!0,!0),pA.FS_createPath(C,"zlw",!0,!0),pA.FS_createPath(x,"voices",!0,!0),pA.FS_createPath(d,"!v",!0,!0),pA.FS_createPath(d,"mb",!0,!0),q.prototype={requests:{},open:function(R,aA){this.name=aA,this.requests[aA]=this,pA.addRunDependency("fp "+this.name)},send:function(){},onload:function(){var R=this.byteArray.subarray(this.start,this.end);this.finish(R)},finish:function(R){pA.FS_createDataFile(this.name,null,R,!0,!0,!0),pA.removeRunDependency("fp "+this.name),this.requests[this.name]=null}};for(var W=k.files,S=0;S<W.length;++S)new q(W[S].start,W[S].end,W[S].audio||0).open("GET",W[S].filename);function X(R){U(R,"Loading data file failed."),U(R.constructor.name===ArrayBuffer.name,"bad input to processPackageData");var aA=new Uint8Array(R);q.prototype.byteArray=aA;for(var CA=k.files,kA=0;kA<CA.length;++kA)q.prototype.requests[CA[kA].filename].onload();pA.removeRunDependency("datafile_js/espeakng.worker.data")}pA.addRunDependency("datafile_js/espeakng.worker.data"),V?(X(V),V=null):z=X}(async()=>{const U=function(X){if(typeof Kc=="boolean"&&Kc){var R=Buffer.from(X,"base64");return new Uint8Array(R.buffer,R.byteOffset,R.byteLength)}try{for(var aA=Lu(X),CA=new Uint8Array(aA.length),kA=0;kA<aA.length;++kA)CA[kA]=aA.charCodeAt(kA);return CA}catch(EA){throw console.error(Lu),console.error(EA),new Error("Converting base64 string to bytes failed.")}}(""),q=new Blob([U]).stream().pipeThrough(new DecompressionStream("gzip")),W=[];for await(const X of q)W.push(X);const S=await new Blob(W).arrayBuffer();z?(z(S),z=null):V=S})(),pA.calledRun?L():(pA.preRun||(pA.preRun=[]),pA.preRun.push(L))})({files:[{filename:x+"/en_dict",start:0,end:167064},{filename:x+"/intonations",start:167064,end:169104},{filename:C+"/aav/vi",start:169104,end:169215},{filename:C+"/aav/vi-VN-x-central",start:169215,end:169358},{filename:C+"/aav/vi-VN-x-south",start:169358,end:169500},{filename:C+"/art/eo",start:169500,end:169541},{filename:C+"/art/ia",start:169541,end:169570},{filename:C+"/art/io",start:169570,end:169620},{filename:C+"/art/jbo",start:169620,end:169689},{filename:C+"/art/lfn",start:169689,end:169824},{filename:C+"/art/piqd",start:169824,end:169880},{filename:C+"/art/py",start:169880,end:170020},{filename:C+"/art/qdb",start:170020,end:170077},{filename:C+"/art/qya",start:170077,end:170250},{filename:C+"/art/sjn",start:170250,end:170425},{filename:C+"/azc/nci",start:170425,end:170539},{filename:C+"/bat/lt",start:170539,end:170567},{filename:C+"/bat/ltg",start:170567,end:170879},{filename:C+"/bat/lv",start:170879,end:171108},{filename:C+"/bnt/sw",start:171108,end:171149},{filename:C+"/bnt/tn",start:171149,end:171191},{filename:C+"/ccs/ka",start:171191,end:171315},{filename:C+"/cel/cy",start:171315,end:171352},{filename:C+"/cel/ga",start:171352,end:171418},{filename:C+"/cel/gd",start:171418,end:171469},{filename:C+"/cus/om",start:171469,end:171508},{filename:C+"/dra/kn",start:171508,end:171563},{filename:C+"/dra/ml",start:171563,end:171620},{filename:C+"/dra/ta",start:171620,end:171671},{filename:C+"/dra/te",start:171671,end:171741},{filename:C+"/esx/kl",start:171741,end:171771},{filename:C+"/eu",start:171771,end:171825},{filename:C+"/gmq/da",start:171825,end:171868},{filename:C+"/gmq/is",start:171868,end:171895},{filename:C+"/gmq/nb",start:171895,end:171982},{filename:C+"/gmq/sv",start:171982,end:172007},{filename:C+"/gmw/af",start:172007,end:172130},{filename:C+"/gmw/de",start:172130,end:172172},{filename:C+"/gmw/en",start:172172,end:172312},{filename:C+"/gmw/en-029",start:172312,end:172647},{filename:C+"/gmw/en-GB-scotland",start:172647,end:172942},{filename:C+"/gmw/en-GB-x-gbclan",start:172942,end:173180},{filename:C+"/gmw/en-GB-x-gbcwmd",start:173180,end:173368},{filename:C+"/gmw/en-GB-x-rp",start:173368,end:173617},{filename:C+"/gmw/en-US",start:173617,end:173874},{filename:C+"/gmw/en-US-nyc",start:173874,end:174145},{filename:C+"/gmw/lb",start:174145,end:174176},{filename:C+"/gmw/nl",start:174176,end:174199},{filename:C+"/grk/el",start:174199,end:174222},{filename:C+"/grk/grc",start:174222,end:174321},{filename:C+"/inc/as",start:174321,end:174363},{filename:C+"/inc/bn",start:174363,end:174388},{filename:C+"/inc/bpy",start:174388,end:174427},{filename:C+"/inc/gu",start:174427,end:174469},{filename:C+"/inc/hi",start:174469,end:174492},{filename:C+"/inc/kok",start:174492,end:174518},{filename:C+"/inc/mr",start:174518,end:174559},{filename:C+"/inc/ne",start:174559,end:174596},{filename:C+"/inc/or",start:174596,end:174635},{filename:C+"/inc/pa",start:174635,end:174660},{filename:C+"/inc/sd",start:174660,end:174726},{filename:C+"/inc/si",start:174726,end:174781},{filename:C+"/inc/ur",start:174781,end:174875},{filename:C+"/ine/hy",start:174875,end:174936},{filename:C+"/ine/hyw",start:174936,end:175301},{filename:C+"/ine/sq",start:175301,end:175404},{filename:C+"/ira/fa",start:175404,end:175494},{filename:C+"/ira/fa-Latn",start:175494,end:175763},{filename:C+"/ira/ku",start:175763,end:175803},{filename:C+"/iro/chr",start:175803,end:176372},{filename:C+"/itc/la",start:176372,end:176669},{filename:C+"/jpx/ja",start:176669,end:176721},{filename:C+"/ko",start:176721,end:176772},{filename:C+"/map/haw",start:176772,end:176814},{filename:C+"/miz/mto",start:176814,end:176997},{filename:C+"/myn/quc",start:176997,end:177207},{filename:C+"/poz/id",start:177207,end:177341},{filename:C+"/poz/mi",start:177341,end:177708},{filename:C+"/poz/ms",start:177708,end:178138},{filename:C+"/qu",start:178138,end:178226},{filename:C+"/roa/an",start:178226,end:178253},{filename:C+"/roa/ca",start:178253,end:178278},{filename:C+"/roa/es",start:178278,end:178341},{filename:C+"/roa/es-419",start:178341,end:178508},{filename:C+"/roa/fr",start:178508,end:178587},{filename:C+"/roa/fr-BE",start:178587,end:178671},{filename:C+"/roa/fr-CH",start:178671,end:178757},{filename:C+"/roa/ht",start:178757,end:178897},{filename:C+"/roa/it",start:178897,end:179006},{filename:C+"/roa/pap",start:179006,end:179068},{filename:C+"/roa/pt",start:179068,end:179163},{filename:C+"/roa/pt-BR",start:179163,end:179272},{filename:C+"/roa/ro",start:179272,end:179298},{filename:C+"/sai/gn",start:179298,end:179345},{filename:C+"/sem/am",start:179345,end:179386},{filename:C+"/sem/ar",start:179386,end:179436},{filename:C+"/sem/he",start:179436,end:179476},{filename:C+"/sem/mt",start:179476,end:179517},{filename:C+"/sem/ti",start:179517,end:179610},{filename:C+"/sit/cmn",start:179610,end:180296},{filename:C+"/sit/cmn-Latn-pinyin",start:180296,end:180457},{filename:C+"/sit/hak",start:180457,end:180585},{filename:C+"/sit/my",start:180585,end:180641},{filename:C+"/sit/yue",start:180641,end:180835},{filename:C+"/sit/yue-Latn-jyutping",start:180835,end:181048},{filename:C+"/tai/shn",start:181048,end:181140},{filename:C+"/tai/th",start:181140,end:181177},{filename:C+"/trk/az",start:181177,end:181222},{filename:C+"/trk/ba",start:181222,end:181247},{filename:C+"/trk/cv",start:181247,end:181287},{filename:C+"/trk/kk",start:181287,end:181327},{filename:C+"/trk/ky",start:181327,end:181370},{filename:C+"/trk/nog",start:181370,end:181409},{filename:C+"/trk/tk",start:181409,end:181434},{filename:C+"/trk/tr",start:181434,end:181459},{filename:C+"/trk/tt",start:181459,end:181482},{filename:C+"/trk/ug",start:181482,end:181506},{filename:C+"/trk/uz",start:181506,end:181545},{filename:C+"/urj/et",start:181545,end:181782},{filename:C+"/urj/fi",start:181782,end:182019},{filename:C+"/urj/hu",start:182019,end:182092},{filename:C+"/urj/smj",start:182092,end:182137},{filename:C+"/zle/be",start:182137,end:182189},{filename:C+"/zle/ru",start:182189,end:182246},{filename:C+"/zle/ru-LV",start:182246,end:182526},{filename:C+"/zle/ru-cl",start:182526,end:182617},{filename:C+"/zle/uk",start:182617,end:182714},{filename:C+"/zls/bg",start:182714,end:182825},{filename:C+"/zls/bs",start:182825,end:183055},{filename:C+"/zls/hr",start:183055,end:183317},{filename:C+"/zls/mk",start:183317,end:183345},{filename:C+"/zls/sl",start:183345,end:183388},{filename:C+"/zls/sr",start:183388,end:183638},{filename:C+"/zlw/cs",start:183638,end:183661},{filename:C+"/zlw/pl",start:183661,end:183699},{filename:C+"/zlw/sk",start:183699,end:183723},{filename:x+"/phondata",start:183723,end:734147},{filename:x+"/phonindex",start:734147,end:773403},{filename:x+"/phontab",start:773403,end:829491},{filename:d+"/!v/Alex",start:829491,end:829619},{filename:d+"/!v/Alicia",start:829619,end:830093},{filename:d+"/!v/Andrea",start:830093,end:830450},{filename:d+"/!v/Andy",start:830450,end:830770},{filename:d+"/!v/Annie",start:830770,end:831085},{filename:d+"/!v/AnxiousAndy",start:831085,end:831446},{filename:d+"/!v/Demonic",start:831446,end:835304},{filename:d+"/!v/Denis",start:835304,end:835609},{filename:d+"/!v/Diogo",start:835609,end:835988},{filename:d+"/!v/Gene",start:835988,end:836269},{filename:d+"/!v/Gene2",start:836269,end:836552},{filename:d+"/!v/Henrique",start:836552,end:836933},{filename:d+"/!v/Hugo",start:836933,end:837311},{filename:d+"/!v/Jacky",start:837311,end:837578},{filename:d+"/!v/Lee",start:837578,end:837916},{filename:d+"/!v/Marco",start:837916,end:838383},{filename:d+"/!v/Mario",start:838383,end:838653},{filename:d+"/!v/Michael",start:838653,end:838923},{filename:d+"/!v/Mike",start:838923,end:839035},{filename:d+"/!v/Mr serious",start:839035,end:842228},{filename:d+"/!v/Nguyen",start:842228,end:842508},{filename:d+"/!v/Reed",start:842508,end:842710},{filename:d+"/!v/RicishayMax",start:842710,end:842943},{filename:d+"/!v/RicishayMax2",start:842943,end:843378},{filename:d+"/!v/RicishayMax3",start:843378,end:843813},{filename:d+"/!v/Storm",start:843813,end:844233},{filename:d+"/!v/Tweaky",start:844233,end:847422},{filename:d+"/!v/UniRobot",start:847422,end:847839},{filename:d+"/!v/adam",start:847839,end:847914},{filename:d+"/!v/anika",start:847914,end:848407},{filename:d+"/!v/anikaRobot",start:848407,end:848919},{filename:d+"/!v/announcer",start:848919,end:849219},{filename:d+"/!v/antonio",start:849219,end:849600},{filename:d+"/!v/aunty",start:849600,end:849958},{filename:d+"/!v/belinda",start:849958,end:850298},{filename:d+"/!v/benjamin",start:850298,end:850499},{filename:d+"/!v/boris",start:850499,end:850723},{filename:d+"/!v/caleb",start:850723,end:850780},{filename:d+"/!v/croak",start:850780,end:850873},{filename:d+"/!v/david",start:850873,end:850985},{filename:d+"/!v/ed",start:850985,end:851272},{filename:d+"/!v/edward",start:851272,end:851423},{filename:d+"/!v/edward2",start:851423,end:851575},{filename:d+"/!v/f1",start:851575,end:851899},{filename:d+"/!v/f2",start:851899,end:852256},{filename:d+"/!v/f3",start:852256,end:852631},{filename:d+"/!v/f4",start:852631,end:852981},{filename:d+"/!v/f5",start:852981,end:853413},{filename:d+"/!v/fast",start:853413,end:853562},{filename:d+"/!v/grandma",start:853562,end:853825},{filename:d+"/!v/grandpa",start:853825,end:854081},{filename:d+"/!v/gustave",start:854081,end:854334},{filename:d+"/!v/ian",start:854334,end:857502},{filename:d+"/!v/iven",start:857502,end:857763},{filename:d+"/!v/iven2",start:857763,end:858042},{filename:d+"/!v/iven3",start:858042,end:858304},{filename:d+"/!v/iven4",start:858304,end:858565},{filename:d+"/!v/john",start:858565,end:861751},{filename:d+"/!v/kaukovalta",start:861751,end:862112},{filename:d+"/!v/klatt",start:862112,end:862150},{filename:d+"/!v/klatt2",start:862150,end:862188},{filename:d+"/!v/klatt3",start:862188,end:862227},{filename:d+"/!v/klatt4",start:862227,end:862266},{filename:d+"/!v/klatt5",start:862266,end:862305},{filename:d+"/!v/klatt6",start:862305,end:862344},{filename:d+"/!v/linda",start:862344,end:862694},{filename:d+"/!v/m1",start:862694,end:863029},{filename:d+"/!v/m2",start:863029,end:863293},{filename:d+"/!v/m3",start:863293,end:863593},{filename:d+"/!v/m4",start:863593,end:863883},{filename:d+"/!v/m5",start:863883,end:864145},{filename:d+"/!v/m6",start:864145,end:864333},{filename:d+"/!v/m7",start:864333,end:864587},{filename:d+"/!v/m8",start:864587,end:864871},{filename:d+"/!v/marcelo",start:864871,end:865122},{filename:d+"/!v/max",start:865122,end:865347},{filename:d+"/!v/michel",start:865347,end:865751},{filename:d+"/!v/miguel",start:865751,end:866133},{filename:d+"/!v/mike2",start:866133,end:866321},{filename:d+"/!v/norbert",start:866321,end:869510},{filename:d+"/!v/pablo",start:869510,end:872652},{filename:d+"/!v/paul",start:872652,end:872936},{filename:d+"/!v/pedro",start:872936,end:873288},{filename:d+"/!v/quincy",start:873288,end:873642},{filename:d+"/!v/rob",start:873642,end:873907},{filename:d+"/!v/robert",start:873907,end:874181},{filename:d+"/!v/robosoft",start:874181,end:874632},{filename:d+"/!v/robosoft2",start:874632,end:875086},{filename:d+"/!v/robosoft3",start:875086,end:875541},{filename:d+"/!v/robosoft4",start:875541,end:875988},{filename:d+"/!v/robosoft5",start:875988,end:876433},{filename:d+"/!v/robosoft6",start:876433,end:876720},{filename:d+"/!v/robosoft7",start:876720,end:877130},{filename:d+"/!v/robosoft8",start:877130,end:877373},{filename:d+"/!v/sandro",start:877373,end:877903},{filename:d+"/!v/shelby",start:877903,end:878183},{filename:d+"/!v/steph",start:878183,end:878547},{filename:d+"/!v/steph2",start:878547,end:878914},{filename:d+"/!v/steph3",start:878914,end:879291},{filename:d+"/!v/travis",start:879291,end:879674},{filename:d+"/!v/victor",start:879674,end:879927},{filename:d+"/!v/whisper",start:879927,end:880113},{filename:d+"/!v/whisperf",start:880113,end:880505},{filename:d+"/!v/zac",start:880505,end:880780},{filename:d+"/mb/mb-af1",start:880780,end:880868},{filename:d+"/mb/mb-af1-en",start:880868,end:880951},{filename:d+"/mb/mb-ar1",start:880951,end:881035},{filename:d+"/mb/mb-ar2",start:881035,end:881119},{filename:d+"/mb/mb-br1",start:881119,end:881251},{filename:d+"/mb/mb-br2",start:881251,end:881387},{filename:d+"/mb/mb-br3",start:881387,end:881519},{filename:d+"/mb/mb-br4",start:881519,end:881655},{filename:d+"/mb/mb-ca1",start:881655,end:881760},{filename:d+"/mb/mb-ca2",start:881760,end:881865},{filename:d+"/mb/mb-cn1",start:881865,end:881957},{filename:d+"/mb/mb-cr1",start:881957,end:882068},{filename:d+"/mb/mb-cz1",start:882068,end:882138},{filename:d+"/mb/mb-cz2",start:882138,end:882220},{filename:d+"/mb/mb-de1",start:882220,end:882364},{filename:d+"/mb/mb-de1-en",start:882364,end:882460},{filename:d+"/mb/mb-de2",start:882460,end:882588},{filename:d+"/mb/mb-de2-en",start:882588,end:882668},{filename:d+"/mb/mb-de3",start:882668,end:882767},{filename:d+"/mb/mb-de3-en",start:882767,end:882863},{filename:d+"/mb/mb-de4",start:882863,end:882992},{filename:d+"/mb/mb-de4-en",start:882992,end:883073},{filename:d+"/mb/mb-de5",start:883073,end:883309},{filename:d+"/mb/mb-de5-en",start:883309,end:883399},{filename:d+"/mb/mb-de6",start:883399,end:883521},{filename:d+"/mb/mb-de6-en",start:883521,end:883595},{filename:d+"/mb/mb-de6-grc",start:883595,end:883678},{filename:d+"/mb/mb-de7",start:883678,end:883828},{filename:d+"/mb/mb-de8",start:883828,end:883899},{filename:d+"/mb/mb-ee1",start:883899,end:883996},{filename:d+"/mb/mb-en1",start:883996,end:884127},{filename:d+"/mb/mb-es1",start:884127,end:884241},{filename:d+"/mb/mb-es2",start:884241,end:884349},{filename:d+"/mb/mb-es3",start:884349,end:884453},{filename:d+"/mb/mb-es4",start:884453,end:884541},{filename:d+"/mb/mb-fr1",start:884541,end:884707},{filename:d+"/mb/mb-fr1-en",start:884707,end:884811},{filename:d+"/mb/mb-fr2",start:884811,end:884914},{filename:d+"/mb/mb-fr3",start:884914,end:885014},{filename:d+"/mb/mb-fr4",start:885014,end:885141},{filename:d+"/mb/mb-fr4-en",start:885141,end:885248},{filename:d+"/mb/mb-fr5",start:885248,end:885348},{filename:d+"/mb/mb-fr6",start:885348,end:885448},{filename:d+"/mb/mb-fr7",start:885448,end:885531},{filename:d+"/mb/mb-gr1",start:885531,end:885625},{filename:d+"/mb/mb-gr2",start:885625,end:885719},{filename:d+"/mb/mb-gr2-en",start:885719,end:885807},{filename:d+"/mb/mb-hb1",start:885807,end:885875},{filename:d+"/mb/mb-hb2",start:885875,end:885958},{filename:d+"/mb/mb-hu1",start:885958,end:886060},{filename:d+"/mb/mb-hu1-en",start:886060,end:886157},{filename:d+"/mb/mb-ic1",start:886157,end:886245},{filename:d+"/mb/mb-id1",start:886245,end:886346},{filename:d+"/mb/mb-in1",start:886346,end:886415},{filename:d+"/mb/mb-in2",start:886415,end:886500},{filename:d+"/mb/mb-ir1",start:886500,end:887253},{filename:d+"/mb/mb-it1",start:887253,end:887337},{filename:d+"/mb/mb-it2",start:887337,end:887424},{filename:d+"/mb/mb-it3",start:887424,end:887566},{filename:d+"/mb/mb-it4",start:887566,end:887711},{filename:d+"/mb/mb-jp1",start:887711,end:887782},{filename:d+"/mb/mb-jp2",start:887782,end:887883},{filename:d+"/mb/mb-jp3",start:887883,end:887970},{filename:d+"/mb/mb-la1",start:887970,end:888053},{filename:d+"/mb/mb-lt1",start:888053,end:888140},{filename:d+"/mb/mb-lt2",start:888140,end:888227},{filename:d+"/mb/mb-ma1",start:888227,end:888325},{filename:d+"/mb/mb-mx1",start:888325,end:888445},{filename:d+"/mb/mb-mx2",start:888445,end:888565},{filename:d+"/mb/mb-nl1",start:888565,end:888634},{filename:d+"/mb/mb-nl2",start:888634,end:888730},{filename:d+"/mb/mb-nl2-en",start:888730,end:888821},{filename:d+"/mb/mb-nl3",start:888821,end:888906},{filename:d+"/mb/mb-nz1",start:888906,end:888974},{filename:d+"/mb/mb-pl1",start:888974,end:889073},{filename:d+"/mb/mb-pl1-en",start:889073,end:889155},{filename:d+"/mb/mb-pt1",start:889155,end:889286},{filename:d+"/mb/mb-ro1",start:889286,end:889373},{filename:d+"/mb/mb-ro1-en",start:889373,end:889454},{filename:d+"/mb/mb-sw1",start:889454,end:889552},{filename:d+"/mb/mb-sw1-en",start:889552,end:889645},{filename:d+"/mb/mb-sw2",start:889645,end:889747},{filename:d+"/mb/mb-sw2-en",start:889747,end:889846},{filename:d+"/mb/mb-tl1",start:889846,end:889931},{filename:d+"/mb/mb-tr1",start:889931,end:890016},{filename:d+"/mb/mb-tr2",start:890016,end:890130},{filename:d+"/mb/mb-us1",start:890130,end:890300},{filename:d+"/mb/mb-us2",start:890300,end:890478},{filename:d+"/mb/mb-us3",start:890478,end:890658},{filename:d+"/mb/mb-vz1",start:890658,end:890802}],remote_package_size:890802})}();var Yu=Object.assign({},pA),eg="./this.program",Ac=pA.print||console.log.bind(console),u2=pA.printErr||console.warn.bind(console);Object.assign(pA,Yu),Yu=null,pA.arguments&&pA.arguments,pA.thisProgram&&(eg=pA.thisProgram),pA.quit&&pA.quit,pA.wasmBinary&&pA.wasmBinary,pA.noExitRuntime;var Ag,d2={Memory:function(x){this.buffer=new ArrayBuffer(65536*x.initial)},Module:function(x){},Instance:function(x,C){this.exports=function(d){for(var k,z=new Uint8Array(123),V=25;V>=0;--V)z[48+V]=52+V,z[65+V]=V,z[97+V]=26+V;function L(sA,nA,xA){for(var g,b,A=0,l=nA,M=xA.length,uA=nA+(3*M>>2)-(xA[M-2]=="=")-(xA[M-1]=="=");A<M;A+=4)g=z[xA.charCodeAt(A+1)],b=z[xA.charCodeAt(A+2)],sA[l++]=z[xA.charCodeAt(A)]<<2|g>>4,l<uA&&(sA[l++]=g<<4|b>>2),l<uA&&(sA[l++]=b<<6|z[xA.charCodeAt(A+3)])}z[43]=62,z[47]=63;var U=new ArrayBuffer(16),q=new Int32Array(U),W=new Float32Array(U),S=new Float64Array(U);function X(sA){return q[sA]}function R(sA,nA){q[sA]=nA}function aA(){return S[0]}function CA(sA){S[0]=sA}function kA(){throw new Error("abort")}function EA(sA){W[2]=sA}return function(sA){var nA=sA.a,xA=nA.a.buffer,g=new Int8Array(xA),b=new Int16Array(xA),A=new Int32Array(xA),l=new Uint8Array(xA),M=new Uint16Array(xA),uA=new Uint32Array(xA),D=new Float64Array(xA),P=Math.imul,RA=Math.fround,SA=Math.abs,YA=Math.clz32,qA=Math.min,ee=Math.floor,xe=Math.ceil,Ge=nA.b,GA=nA.c,bA=nA.d,PA=nA.e,UA=nA.f,TA=nA.g,ke=nA.h,ae=nA.i,oe=nA.j,ve=nA.k,ie=nA.l,FA=nA.m,XA=nA.n,me=nA.o,be=nA.p,zA=nA.q,fe=nA.r,Ee=nA.s,Pe=nA.t,Ye=nA.u,J=294656,Oe=0,gA=0,$=0;function IA(e){var t,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0,ft=0,Nt=0,Kt=0,er=0,pr=0,hr=0,yr=0,Er=0,zr=0,Wr=0,oa=0,Xr=0,la=0,va=0,As=0,ns=0,os=0,Us=0,Ei=0,Ms=0,Mi=0,Gi=0,Yn=0,E0=0,M0=0,Hn=0;if(J=t=J-16|0,(0|e)!=2)if(e=A[33283],A[e>>2]!=A[e+4>>2]){if(ia(A[A[32972]+60>>2]),Z=A[47192],la=t+12|0,Us=t+8|0,J=f=J-6832|0,A[f+6816>>2]=0,A[f+6808>>2]=32,A[f+6800>>2]=0,Z){A[47351]=0,A[47350]=0,A[47352]=0,g[189076]=0,e=A[33284],A[47353]=(0|e)>0?e:0,A[47355]=A[47354]+1,je(Me=f+5184|0,0,1600),Wr=f+6800|0,J=o=J-2608|0,A[o+2156>>2]=32,A[o+2148>>2]=0,l[134760]&&(g[190280]=0,g[134760]=0),A[Z+8216>>2]=0,A[Z+8220>>2]=0,A[Z+288>>2]=0,A[f+780>>2]=0,g[189360]=0;A:if(e=A[33691])A[o+2152>>2]=e;else{e:{r:{if(!(r=A[33285])){if(e=A[33283],A[e>>2]==A[e+4>>2]){A[o+2152>>2]=0;break A}if(!(r=A[33285]))break r}A[33285]=0;break e}A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e)}A[o+2152>>2]=r}Gi=Me+2|0,KA=32;A:{for(;;){WA=KA;e:{r:{s:{if(r=A[33691],(s=A[33285])?e=0:(s=A[33285],e=A[33283],e=A[e>>2]==A[e+4>>2]),r|!e|s||!(A[32524]<0)){if(!Ri(A[o+2156>>2])){if((s=(0|(e=A[49828]))>0)&(0|(r=e))<(0|(e=A[33284])))break s;if(!((0|(r=A[49845]))<=0|(0|e)<(0|r))){A[49845]=0,g[134760]=1,A[33285]=A[o+2152>>2],a=16384;break A}}KA=A[o+2156>>2],A[o+2156>>2]=A[o+2152>>2];i:{c:{o:{u:{l:{if((0|(r=A[32524]))>=0){if(l[r+134736|0])break l;A[32524]=-1}if(r=A[33285])break o;if(e=A[33283],A[e>>2]!=A[e+4>>2])break u;r=32;break i}A[33691]|r||(A[o+2156>>2]=g[134736],r=1),A[32524]=r+1,r=g[r+134736|0];break i}if(!(r=A[33285]))break c}A[33285]=0;break i}A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e)}A[o+2152>>2]=r,A[33691]=0;i:if(!(m|!A[47203])){c:{if((0|(e=A[o+2156>>2]))!=60){if((0|r)!=35&r-97>>>0>25|(0|e)!=38)break i;for(s=A[33285],i=0;;){o:{if(A[o+2156>>2]=r,!s){if(e=A[33283],A[e>>2]==A[e+4>>2])break o;r=A[o+2156>>2]}if(!(!((r=!!(0|Ri(r)))|(0|(e=A[o+2156>>2]))==35)|i>>>0>19)){g[(o+112|0)+i|0]=e,i=i+1|0,(r=A[33285])?(A[33285]=0,s=0):(A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e),s=A[33285]);continue}}break}g[(o+112|0)+i|0]=0;o:{u:{if(!(r=A[33285])){if(r=0,e=A[33283],A[e>>2]==A[e+4>>2])break o;if(!(r=A[33285]))break u}A[33285]=0;break o}A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e)}A[o+2152>>2]=r,A[o+100>>2]=A[o+2156>>2],A[o+104>>2]=r,A[o+96>>2]=o+112,De(134736,84252,o+96|0);o:{if(A[o+2156>>2]==59){i=o+2156|0,O=o+2152|0,J=s=J-32|0;u:if(l[0|(r=o+112|0)]!=35)e=-1,(0|(r=ms(130752,r)))!=-1&&(A[i>>2]=r,A[O>>2]||(A[O>>2]=32),e=r);else{if(l[0|(e=r+1|0)]==120){A[s>>2]=i,e=dt(r+2|0,90005,s);break u}A[s+16>>2]=i,e=dt(e,90070,s+16|0)}if(J=s+32|0,(0|e)>0)break o}A[32524]=0,A[o+2156>>2]=38,A[o+2152>>2]=32;break i}if((0|(e=A[o+2156>>2]))>32)break i;if(!(r=A[33692]-20|0)|(0|r)==16)break c;break i}if((0|r)!=47&&!is(r)&&(0|(e=A[o+2152>>2]))!=63&&(0|e)!=33)break i;if((0|(e=A[o+2148>>2]))>780){A[33691]=A[o+2156>>2],g[0|(e=e+189424|0)]=32,g[e+1|0]=0,A[33285]=A[o+2152>>2],a=16384;break A}for(O=A[33285],i=0,r=A[o+2152>>2];A[o+2156>>2]=r,s=0,O||(e=A[33283],s=A[e>>2]==A[e+4>>2],r=A[o+2156>>2]),!((0|r)==62|s|i>>>0>499);)A[(o+144|0)+(i<<2)>>2]=r,i=i+1|0,(r=A[33285])?(O=0,A[33285]=0):(A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e),O=A[33285]);A[(s=o+144|0)+(i<<2)>>2]=0,A[o+2152>>2]=32,re=o+2148|0,WA=A[32525],r=0,J=QA=J-560|0;o:if(wn(s,84333,3)&&wn(s,84477,4)){for(e=(s+(w0(s)<<2)|0)-4|0,(0|(ze=A[e>>2]))==47&&(A[e>>2]=32);;){if(e=A[s+(r<<2)>>2]){if(Or(e))e=r;else if(g[(QA+512|0)+r|0]=Ht(e<<24>>24),e=39,(0|(r=r+1|0))!=39)continue}else e=r;break}if(g[(QA+512|0)+e|0]=0,l[QA+512|0]!=47){if((0|(O=ms(130480,QA+512|0)))!=16&&(r=A[re>>2],A[re>>2]=r+1,g[r+189424|0]=32),(0|ze)==47&&(r=0,!(502241>>>O&1)))break o}else(0|(r=ms(130480,QA+512|1)))!=16&&(i=A[re>>2],A[re>>2]=i+1,g[i+189424|0]=32),O=r+32|0;i=s+(e<<2)|0,e=A[33708],m=P(e,76)+133076|0,r=262174;u:{l:{n:{p:switch(O-1|0){case 33:C:if(!((0|e)<=1)){for(;;){if(A[P(r=e-1|0,76)+133152>>2]==2)break C;if(A[33708]=r,s=e>>>0>2,e=r,!s)break}e=1}r=Ma(i,34,e);break o;case 32:C:if(!((0|e)<=1)){for(;;){if(A[P(r=e-1|0,76)+133152>>2]==1)break C;if(A[33708]=r,s=e>>>0>2,e=r,!s)break}e=1}r=Ma(i,33,e)+524328|0;break o;case 9:(0|(r=A[33709]))<=18&&(A[33709]=r+1),A[(e=134912+(m=r<<6)|0)>>2]=10,A[e+4>>2]=-1,A[e+8>>2]=-1,A[e+52>>2]=-1,A[e+56>>2]=-1,A[e+44>>2]=-1,A[e+48>>2]=-1,A[e+36>>2]=-1,A[e+40>>2]=-1,A[e+28>>2]=-1,A[e+32>>2]=-1,A[e+20>>2]=-1,A[e+24>>2]=-1,A[e+12>>2]=-1,A[e+16>>2]=-1,A[e+60>>2]=-1,e=Ut(i,88301),s=Ut(i,88390),Cn(e,88479)?Cn(e,88528)||(A[28+(134912+(r<<6)|0)>>2]=xa(s,130224)):A[24+(m+134912|0)>>2]=xa(s,130192),qa(re,A[33709]);break n;case 2:for((0|(e=A[33709]))<=18&&(A[33709]=e+1),A[(e=134912+(Ei=e<<6)|0)>>2]=3,A[e+4>>2]=-1,A[e+8>>2]=-1,A[e+52>>2]=-1,A[e+56>>2]=-1,A[e+44>>2]=-1,A[e+48>>2]=-1,A[e+36>>2]=-1,A[e+40>>2]=-1,A[e+28>>2]=-1,A[e+32>>2]=-1,A[e+20>>2]=-1,A[e+24>>2]=-1,A[e+12>>2]=-1,A[e+16>>2]=-1,A[e+60>>2]=-1,er=1;;){if(s=Ut(i,A[130448+(pr=er<<2)>>2])){ze=0,e=A[pr+131072>>2];C:if(O=A[e>>2])for(;;){for(r=0;m=g[r+O|0],(WA=A[(r<<2)+s>>2])&&(r=r+1|0,(0|m)==(0|WA)););switch(WA-34|0){case 0:case 5:if(!m)break C}if(!(O=A[e+((ze=ze+1|0)<<3)>>2]))break}Yn=pr+(Ei+134912|0)|0;C:if((0|(e=A[4+(e+(ze<<3)|0)>>2]))>=0)e=(0|P(e,A[4+(pr+134912|0)>>2]))/100|0;else{for(;s=(e=s)+4|0,Or(A[e>>2]););for(Ms=A[e>>2]==43,s=((Mi=A[(e=e+(Ms<<2)|0)>>2]==45)<<2)+e|0,ze=QA+96|0,J=O=(J=m=J-16|0)-224|0,je(O+16|0,0,144),e=O+160|4,A[O+24>>2]=e,A[O+60>>2]=e,A[O+92>>2]=-1,A[O+64>>2]=60,A[O+20>>2]=e,A[O+48>>2]=19,r=s;r=(e=r)+4|0,WA=(WA=A[e>>2])?Lr(124960,WA):0;);A[O+100>>2]=e,Ja(r=O+16|0,0,0),ye(O,r,1,1),r=A[O+8>>2],E0=A[O+12>>2],WA=A[O>>2],M0=A[O+4>>2],ze&&(Hn=ze,ze=A[O+136>>2]+(A[O+20>>2]-A[O+60>>2]|0)|0,A[Hn>>2]=ze?e+(ze<<2)|0:s),A[(e=m)+8>>2]=r,A[e+12>>2]=E0,A[e>>2]=WA,A[e+4>>2]=M0,J=O+224|0,vA=Bs(A[e>>2],A[e+4>>2],A[e+8>>2],A[e+12>>2]),J=e+16|0;m:{r=100;b:if((0|(e=s))!=(0|(s=A[QA+96>>2]))){r=Mi?-1:Ms;h:{if((0|(e=A[s>>2]))!=115){if((0|e)!=37)break h;if(SA(vA=r?+(0|r)*vA+100:vA)<2147483648){r=~~vA;break b}r=-2147483648;break b}if(A[s+4>>2]==116){CA(+(Nt=vA*+(0|r)/12)),e=0|X(1),X(0);E:{if((r=(e=e>>>20&2047)-969|0)>>>0>=63){if(vA=Nt+1,(0|r)<0)break E;if(CA(+Nt),r=0|X(1),s=0|X(0),!(e>>>0<1033)){if(vA=0,!s&(0|r)==-1048576||(vA=Nt+1,e>>>0>=2047))break E;if((0|r)>0|(0|r)>=0){D[8+(e=J-16|0)>>3]=3105036184601418e216,vA=3105036184601418e216*D[e+8>>3];break E}if(!(r>>>0<3230714880)){D[8+(e=J-16|0)>>3]=12882297539194267e-247,vA=12882297539194267e-247*D[e+8>>3];break E}}m=e,e=!(s<<1)&(0|(e=r<<1|s>>>31))==-2129002496|e>>>0<2165964800?m:0}va=(Nt=(vA=Nt-((oa=(vA=D[14416])+Nt)-vA))*vA)*Nt*(vA*D[14421]+D[14420]),Nt*=vA*D[14419]+D[14418],vA*=D[14417],CA(+oa),X(1),m=0|X(0),vA=va+(Nt+(vA+D[115376+(s=m<<4&2032)>>3])),WA=A[(s=s+115384|0)>>2],O=A[s+4>>2],s=(r=WA)+(WA=0)|0,r=(m<<13)+O|0,r=s>>>0<WA>>>0?r+1|0:r,e?(R(0,0|s),R(1,0|r),vA=(Nt=+aA())*vA+Nt):-2147483648&m?(R(0,0|s),R(1,r+1071644672|0),(vA=(oa=(Nt=+aA())*vA)+Nt)<1&&(A[8+(e=J-16|0)>>2]=0,A[e+12>>2]=1048576,D[e+8>>3]=22250738585072014e-324*D[e+8>>3],vA=(vA=(va=vA+1)+(oa+(Nt-vA)+(vA+(1-va)))+-1)==0?0:vA),vA*=22250738585072014e-324):(R(0,0|s),R(1,r+-1048576|0),vA=(Nt=+aA())*vA+Nt,vA+=vA)}if(SA(vA*=100)<2147483648){r=~~vA;break b}r=-2147483648;break b}}if((0|er)!=1)break m;if(r)r=100+(e=SA(vA=vA*+(0|r)*100)<2147483648?~~vA:-2147483648)|0;else{if(SA(vA*=100)<2147483648){r=~~vA;break b}r=-2147483648}}e=(0|P(r,A[pr+134848>>2]))/100|0;break C}e=SA(vA)<2147483648?~~vA:-2147483648,r&&(e=A[pr+134848>>2]+P(e,r)|0)}A[Yn+4>>2]=e}if((0|(er=er+1|0))==5)break}qa(re,A[33709]);break n;case 11:(0|(r=A[33709]))<=18&&(A[33709]=r+1),A[(e=134912+(r<<6)|0)>>2]=12,A[e+4>>2]=-1,A[e+8>>2]=-1,A[e+52>>2]=-1,A[e+56>>2]=-1,A[e+44>>2]=-1,A[e+48>>2]=-1,A[e+36>>2]=-1,A[e+40>>2]=-1,A[e+28>>2]=-1,A[e+32>>2]=-1,A[e+20>>2]=-1,A[e+24>>2]=-1,A[e+12>>2]=-1,A[e+16>>2]=-1,A[e+60>>2]=-1,e=(e=Ut(i,88658))?xa(e,130400):3,s=134912+(r<<6)|0,A[A[47192]+148>>2]!=1?(A[52+(134912+(r<<6)|0)>>2]=e,e=l[e+102776|0]):(A[20+(134912+(r<<6)|0)>>2]=l[e+102764|0],e=l[e+102770|0]),A[s+12>>2]=e,qa(re,A[33709]);break n;case 34:case 41:case 43:if(!((0|(e=A[33709]))<=0)){if(i=O-32|0,O=0,s=0,r=0,e>>>0>=4)for(m=-4&e,ze=0;er=2|r,pr=1|r,s=(0|i)==A[134912+((WA=3|r)<<6)>>2]?WA:(0|i)==A[134912+(er<<6)>>2]?er:(0|i)==A[134912+(pr<<6)>>2]?pr:(0|i)==A[134912+(r<<6)>>2]?r:s,r=r+4|0,(0|m)!=(0|(ze=ze+4|0)););if(m=3&e)for(;s=(0|i)==A[134912+(r<<6)>>2]?r:s,r=r+1|0,(0|m)!=(0|(O=O+1|0)););(0|s)<=0||(A[33709]=s,e=s)}qa(re,e);break n;case 7:if(e=Ut(i,88741),r=Ut(i,88860),(0|xa(e,130176))!=1)break n;e=A[re>>2],A[re>>2]=e+1,g[e+189424|0]=91,e=A[re>>2],A[re>>2]=e+1,g[e+189424|0]=91,e=Pa((e=A[re>>2])+189424|0,r,800-e|0)+A[re>>2]|0,A[re>>2]=e+1,g[e+189424|0]=93,e=A[re>>2],A[re>>2]=e+1,g[e+189424|0]=93;break n;case 35:A[33692]==36&&(g[A[re>>2]+189424|0]=0,(s=ms(131104,r=(e=A[33707])+189424|0))&&(A[re>>2]=Pr(s,r)+e)),e=A[re>>2],A[re>>2]=e+1,g[e+189424|0]=1,e=A[re>>2],A[re>>2]=e+1,g[e+189424|0]=89,A[33692]=0;break n;case 8:if(!(e=Ut(i,89299)))break n;g[134824]=1,r=A[re>>2],A[re>>2]=Pa(r+189424|0,e,800-r|0)+A[re>>2];break n;case 13:g[134824]=1;break n;case 40:case 45:g[134824]=0;break n;case 4:if(!(e=Ut(i,89360)))break n;if(Pa(QA+352|0,e,160),l[QA+352|0]&&!vr(199328,QA+352|0)){g[134760]=1,g[199328]=0,r=16384;break o}if((0|(e=Yi(QA+352|0)))<0)break n;A[QA+20>>2]=e,A[QA+16>>2]=1,De(e=QA+352|0,89460,QA+16|0),qe(A[re>>2]+189424|0,e),A[re>>2]=A[re>>2]+He(e);break n;case 10:(0|(r=A[33709]))<=18&&(A[33709]=r+1),A[(e=134912+(r<<6)|0)>>2]=11,A[e+4>>2]=-1,A[e+8>>2]=-1,A[e+52>>2]=-1,A[e+56>>2]=-1,A[e+44>>2]=-1,A[e+48>>2]=-1,A[e+36>>2]=-1,A[e+40>>2]=-1,A[e+28>>2]=-1,A[e+32>>2]=-1,A[e+20>>2]=-1,A[e+24>>2]=-1,A[e+12>>2]=-1,A[e+16>>2]=-1,A[e+60>>2]=-1;C:if(e=Ut(i,89514)){if(Pa(QA+352|0,e,160),A[34441]){if((0|(e=Yi(QA+352|0)))<0||0|lt[A[34441]](1,e+A[33282]|0,WA))break C;A[QA+68>>2]=e,A[QA+64>>2]=1,De(QA+352|0,89658,QA- -64|0)}else{if(!WA|l[QA+352|0]==47?e=n0(QA+352|0):(A[QA+48>>2]=WA,A[QA+52>>2]=QA+352,De(e=QA+96|0,89564,QA+48|0),e=n0(e)),(0|e)<0)break C;A[QA+36>>2]=e,A[QA+32>>2]=1,De(QA+352|0,89623,QA+32|0)}e=QA+352|0,qe(A[re>>2]+189424|0,e),A[re>>2]=A[re>>2]+He(e),A[4+(134912+(r<<6)|0)>>2]=1}if(qa(re,A[33709]),(0|ze)==47){e0(11,re),r=16384;break o}g[134772]=1,r=16384;break o;case 42:e0(43,re),g[134772]=0,r=16384;break o;case 12:C:{if(e=Ut(i,89714)){if(r=16384,(m=(0|(e=xa(e,130336)))<0?2:e)>>>0<=2&&(e=A[re>>2],A[QA+84>>2]=m,A[QA+80>>2]=1,De(e+189424|0,89770,QA+80|0),A[re>>2]=A[re>>2]+3,r=0),e=A[102784+(m<<2)>>2],!(s=Ut(i,89907)))break C;break l}if(r=16384,s=Ut(i,89907))break l;e=21;break u}if(m>>>0<3)break n;break u;case 0:(e=Ut(i,89965))&&(Pa(r=QA+352|0,e,160),Yi(r)),r=Ma(i,1,A[33708])?147456:0;break o;case 1:r=Ma(i,2,e)?147456:0;break o;case 5:r=0,A[m>>2]==6&&(r=Ma(i,38,e),e=A[33708]),r=524358+(Ma(i,6,e)|r)|0;break o;case 6:r=0,(0|(s=A[m>>2]))==6&&(r=Ma(i,38,e),s=A[m>>2]),(0|s)==7&&(r=Ma(i,39,A[33708])|r),r=524358+(r|Ma(i,7,A[33708]))|0;break o;case 37:if(r=524328,A[m>>2]!=6)break o;r=Ma(i,38,e)+524328|0;break o;case 38:if(r=524358,(-2&A[m>>2])!=6)break o;r=Ma(i,39,e)+524358|0;break o;case 14:case 46:break o;case 3:break p;default:break n}e=Ut(i,88893),r=Ut(i,88992),s=Ut(i,89153),i=xa(e,130272),r=xa(r,130320),e=f0(s,0),A[QA>>2]=1,s=(0|e)<2?193:e- -64|0,r=(0|(e=(0|r)==1?19:i))==64?s:e,A[QA+4>>2]=r,De(e=QA+352|0,89230,QA),qe(A[re>>2]+189424|0,e),e=A[re>>2]+He(e)|0,A[re>>2]=e,A[33707]=e,A[33692]=r}r=0;break o}e=f0(s,1),s=A[33722],xn(1,A[33713]),(0|(e=(0|(s=(0|P(e,s))/100<<8))/(0|P(A[36429],10))|0))<=199&&(e=(0|s)/(0|P(A[36428],10))|0),r=r||16384}s=e>>>5|0,i=e,r=((e=(0|e)>4095)?s>>>0>=4095?4095:s:i)+(e?8388608|r:r)|0}if(J=QA+560|0,r){if(e=A[o+2148>>2]+189424|0,g[0|e]=32,g[e+1|0]=0,!(131072&r)){a=r;break A}qe(189360,134784),a=r;break A}A[o+2156>>2]=32;o:{u:{if(!(r=A[33285])){if(m=0,e=A[33283],A[e>>2]==A[e+4>>2])continue;if(!(r=A[33285]))break u}A[33285]=0;break o}A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e)}A[o+2152>>2]=r,m=0;continue}A[o+2156>>2]=e+57344}if(l[134824])continue;if(s=A[o+2156>>2],!((0|(e=A[o+2152>>2]))!=10|A[47268]!=-1)){(0|(a=Ss(s)))==16384?(e=A[o+2148>>2],b[Me+(e<<1)>>1]=A[33284]-A[47353],A[Wr>>2]=e,a=524328,e=Pr(A[o+2156>>2],e+189424|0)+A[o+2148>>2]|0):e=A[o+2148>>2],g[0|(e=e+189424|0)]=32,g[e+1|0]=0;break A}i:if((0|s)==1){if((0|e)!=66){if((0|e)!=86)break i;for(e=A[o+2148>>2],A[o+2148>>2]=e+1,g[e+189424|0]=0;;){c:{o:{u:{if(!(r=A[33285])){if(e=A[33283],A[e>>2]==A[e+4>>2])break c;if(!(r=A[33285]))break u}A[33285]=0;break o}A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e)}if(A[o+2156>>2]=r,!(Or(r)||(0|(e=A[o+2148>>2]))>=799)){A[o+2148>>2]=e+1,g[e+189424|0]=A[o+2156>>2];continue}}break}g[A[o+2148>>2]+189424|0]=0,a=147456;break A}r=A[o+2148>>2],g[0|(e=r+189424|0)]=32,g[e+1|0]=32,g[e+2|0]=32,g[e+3|0]=0,A[o+2148>>2]=r+3;c:{o:{u:{l:{n:{p:{if(!(r=A[33285])){if(e=A[33283],A[e>>2]==A[e+4>>2])break l;if(!(r=A[33285]))break p}A[33285]=0;break n}A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e)}if(A[o+2152>>2]=r,s=0,(0|r)!=48)break u;break o}r=A[o+2152>>2]}if(A[47208]=0,A[47201]=1,(0|r)==49)break c;for(s=A[33285],i=0;;){u:{if(!s){if(e=A[33283],A[e>>2]==A[e+4>>2])break u;r=A[o+2152>>2]}if(!(Or(r)|i>>>0>58)){A[188832+(i<<2)>>2]=A[o+2152>>2],(r=A[33285])?(A[33285]=0,s=0):(A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e),s=A[33285]),i=i+1|0,A[o+2152>>2]=r,e=A[o+2148>>2],A[o+2148>>2]=e+1,g[e+189424|0]=32;continue}}break}s=2,A[188832+(i<<2)>>2]=0}A[47201]=s}c:{if(!(r=A[33285])){if(e=A[33283],A[e>>2]==A[e+4>>2])continue;if(!(r=A[33285]))break c}A[33285]=0,A[o+2152>>2]=r;continue}A[33284]=A[33284]+1,e=A[33283],A[o+2152>>2]=lt[A[e+8>>2]](e);continue}yr=yr+1|0,r=0,e=A[Z+340>>2];i:if(i=M[e>>1]){for(;;){if((65535&i)!=(0|s)){if(i=M[e+((r=r+2|0)<<1)>>1])continue;break i}break}switch(0|(e=M[e+(r<<1|2)>>1])){case 1:continue;case 0:break i}A[o+2156>>2]=e,s=e}Ri(s)?(cA=1,r=A[o+2156>>2]):at?(A[33285]=A[o+2152>>2],r=1328,A[o+2156>>2]=1328,A[o+2152>>2]=32,at=0):(0|(r=A[o+2156>>2]))!=3851?(at=0,(0|r)!=3405|A[o+2152>>2]!=8205||(r=3406,A[o+2156>>2]=3406)):(r=32,A[o+2156>>2]=32,at=0);i:if(ps(r)){if(A[Z+8216>>2]=A[Z+8216>>2]+1,A[33692]|A[47200]!=2||ps(KA)||(A[o+2544>>2]=0,A[o+2548>>2]=0,A[o+2304>>2]=84731,!kr(Z,o+2304|0,o+2160|0,o+2544|0,0,0))||($t(Z,e=o+2160|0,o+2544|0,-1,0),Je(r=e,e=o+2336|0),A[o+80>>2]=e,De(r=o+2240|0,85451,o+80|0),e=A[o+2148>>2],(0|(r=He(r)+e|0))>=800))break i;qe(e+189424|0,o+2240|0),A[o+2148>>2]=r}else is(A[o+2156>>2])&&(A[Z+8220>>2]=A[Z+8220>>2]+1);if(r=A[o+2152>>2],e=A[o+2156>>2],A[47204])if((0|m)>0)m=m-1|0;else{if(!((0|e)!=91|(0|r)!=91)){s=0,m=-1;break e}m=(0|e)==93&&(0|r)==93?2:m}if((0|e)==10){for(s=A[33285],i=0;;){i:{if(!s){if(e=A[33283],A[e>>2]==A[e+4>>2])break i;r=A[o+2152>>2]}if(Or(r)){i=(A[o+2152>>2]==10)+i|0,(r=A[33285])?(A[33285]=0,s=0):(A[33284]=A[33284]+1,e=A[33283],r=0|lt[A[e+8>>2]](e),s=A[33285]),A[o+2152>>2]=r;continue}}break}if((0|i)>0){a&&je(e=Er+189424|0,32,Gt(o+2336|0,e)),e=A[o+2148>>2]+189424|0,g[0|e]=32,g[e+1|0]=0,A[33285]=A[o+2152>>2],a=A[47203]?524358:P((0|i)>=3?3:i,30)+524328|0;break A}if(e=A[47268]<(0|yr),yr=0,!e){e=A[o+2148>>2]+189424|0,g[0|e]=32,g[e+1|0]=0,A[33285]=A[o+2152>>2],a=262174;break A}}if(s=0,A[33692]|m)break e;if(e=0,!a)break r;if(Or(A[o+2156>>2])){e=a;break r}if(rr(A[o+2156>>2])&&hs(A[o+2156>>2]))break r;A[33691]=A[o+2156>>2],g[0|(e=Er+189424|0)]=32,g[e+1|0]=0,A[33285]=A[o+2152>>2];break A}at&&(A[o+2148>>2]=Pr(1328,A[o+2148>>2]+189424|0)+A[o+2148>>2]),a&&je(e=Er+189424|0,32,Gt(o+2336|0,e)),e=A[o+2148>>2]+189424|0,g[0|e]=32,g[e+1|0]=0}a=589864;break A}if(!((0|(r=A[o+2156>>2]))!=46|A[o+2152>>2]!=46)){r:{s:{i:{if(!(r=A[33285])){if(r=A[33283],A[r>>2]==A[r+4>>2])break r;if(!(r=A[33285]))break i}A[33285]=0;break s}A[33284]=A[33284]+1,r=A[33283],r=0|lt[A[r+8>>2]](r)}if(c=r,(0|r)==46)for(A[o+2152>>2]=32,A[o+2156>>2]=8230,c=A[33285];;){s:{i:{if(!c){if(r=A[33283],A[r>>2]==A[r+4>>2]){c=46;break r}if(!(c=A[33285]))break i}A[33285]=0,r=0;break s}A[33284]=A[33284]+1,r=A[33283],c=0|lt[A[r+8>>2]](r),r=A[33285]}if((0|c)!=46)break r;A[o+2152>>2]=32,A[o+2156>>2]=8230,c=r}}(0|(r=A[o+2156>>2]))!=8230?A[33285]=c:(A[o+2152>>2]=c,r=8230)}if(ze=0,(0|(O=Ss(r)))!=16384){r:if(536621&O)for(r=A[33285];;){if(!r&&(r=A[33283],A[r>>2]==A[r+4>>2])||!(536621&Ss(A[o+2152>>2])))break r;(c=A[33285])?(A[33285]=0,r=0):(A[33284]=A[33284]+1,r=A[33283],c=0|lt[A[r+8>>2]](r),r=A[33285]),A[o+2152>>2]=c}if(1048576&O){A[f+780>>2]=O>>>12&15,at=1,m=0,a=e;continue}(Or(A[o+2152>>2])|32768&O||ni(A[o+2152>>2])||(0|(r=A[o+2152>>2]))==63||(i=0,A[33285]||(r=A[33283],i=A[r>>2]==A[r+4>>2],r=A[o+2152>>2]),i||(0|r)==1))&&(ze=1)}if((0|(r=A[o+2156>>2]))==57404&&(A[o+2156>>2]=60,r=60),A[47201]){a=0;r:if(!(1<<(i=Wa(r))&1879048255&&i>>>0<=30)){if(!((i=Wa(r))>>>0>27)){if(116672&(m=1<<i))break r;if(134227968&m){a=!(1024&OA(r,i));break r}}a=1}if(!(l[134772]|!a)&&(A[47201]==1||Lr(188832,A[o+2156>>2]))){A[Z+288>>2]=0,s=A[o+2156>>2],g[o+2336|0]=0,m=A[o+2152>>2],r=0;r:{s:if(!((0|(a=A[34064]))<=0))for(;;){if((0|s)==A[136272+(r<<4)>>2]){if(A[136276+(r<<4)>>2])break r;if(Js(0,r))break s;break r}if((0|a)==(0|(r=r+1|0)))break}r=-1}r:if((0|r)>=0)A[o>>2]=r,De(o+2336|0,86007,o),A[33285]=m;else if((i=!ze)|(0|s)!=46|(0|m)==46||(A[o+2600>>2]=0,A[o+2604>>2]=0,A[o+2540>>2]=86036,!kr(Z,o+2540|0,o+2544|0,o+2600|0,0,0))?r=_s(o+2240|0,Z,s,0):($t(Z,r=o+2544|0,o+2600|0,-1,0),Je(a=r,r=o+2160|0),A[o+64>>2]=r,De(r=o+2304|0,85451,o- -64|0)),a=r,i|!A[o+2148>>2]|2&l[Z+76|0]){for(r=A[33285],i=1;;){s:{i:{if(!r){if(r=A[33283],A[r>>2]==A[r+4>>2]|(0|s)==60|(0|s)!=(0|m))break s;if(i=i+1|0,m=A[33285])break i;A[33284]=A[33284]+1,r=A[33283],m=0|lt[A[r+8>>2]](r),r=A[33285];continue}if((0|s)==60|(0|s)!=(0|m))break s;m=r,i=i+1|0}r=0,A[33285]=0;continue}break}if(A[o+2152>>2]=m,ze&&(A[33285]=m),(0|i)==1){A[o+16>>2]=a,De(o+2336|0,86219,o+16|0);break r}if((0|i)<=3){if(g[o+2336|0]=0,(0|(r=A[50786]))<=299&&(A[o+2336>>2]=l[86728]|l[86729]<<8|l[86730]<<16|l[86731]<<24,b[o+2340>>1]=l[86732]|l[86733]<<8),(0|i)>0){for(;A[o+32>>2]=a,De(r=o+2160|0,86219,o+32|0),m=i>>>0>1,na(o+2336|0,r),i=i-1|0,m;);r=A[50786]}if((0|r)>299)break r;A[o+2160>>2]=l[86857]|l[86858]<<8|l[86859]<<16|l[86860]<<24,r=l[86860]|l[86861]<<8|l[86862]<<16|l[86863]<<24,g[o+2163|0]=r,g[o+2164|0]=r>>>8,g[o+2165|0]=r>>>16,g[o+2166|0]=r>>>24,na(o+2336|0,o+2160|0);break r}A[o+56>>2]=a,A[o+52>>2]=i,A[o+48>>2]=a,De(o+2336|0,86932,o+48|0)}else A[33691]=s,A[33285]=m,b[o+2336>>1]=32;if(i=He(a=o+2336|0),qe((r=A[o+2148>>2])+189424|0,a),A[o+2148>>2]=r+i,ze){if((0|s)==45){a=16384;break A}if(a=Ss(s),!(2&l[Z+76|0]|(0|r)<=0)){a=(-32769&a)==266270?262148:(28672&a)==4096?266244:262148;break A}if(!(524288&a)){a=(28672&a)==4096?266244:262148;break A}if((0|a)>=0)break A}s=A[o+2156>>2]}}if(s|!(2097152&O)||(r=qe(A[o+2148>>2]+189424|0,_s(o+2336|0,Z,A[o+2156>>2],1)),l[0|r]?(A[o+2148>>2]=A[o+2148>>2]+He(r),O&=-28673,s=A[o+2156>>2]):s=0),m=0,ze){r:if(Or(c=A[o+2152>>2]))for(i=A[33285],r=0;;){if(!i&&(a=A[33283],A[a>>2]==A[a+4>>2])||!Or(c))break r;r=((0|c)==10)+r|0,(c=A[33285])?(A[33285]=0,i=0):(A[33284]=A[33284]+1,a=A[33283],c=0|lt[A[a+8>>2]](a),i=A[33285])}else r=0;a=(0|(m=A[o+2156>>2]))==46&&(0|r)<2?4194304|O:O;r:{if(!r){i=1,(0|m)!=44|(0|KA)!=46|A[Z+212>>2]!=26741|WA-48>>>0>=10||c-48>>>0>=10&&!hs(c)||(A[o+2156>>2]=1367,i=0),(0|(O=A[o+2156>>2]))!=46|(0|c)!=39||(m=i,O=A[33283],(0|(QA=A[O>>2]))==A[O+4>>2]?i=0:(i=0|lt[A[O+8>>2]](O),A[O>>2]=QA),O=A[o+2156>>2],i=(0|i)!=115&m);s:if((0|O)!=46)i&=cA;else{i:if(1&g[Z+106|0]){if(!(KA-48>>>0<10)&&((m=KA-73|0)>>>0>15|!(1<<m&40969)||!(1<<(m=WA-73|0)&40969&&m>>>0<=15||Or(WA))))break i;i=KA-48>>>0>=10?0:!hs(c)&(0|c)!=45&i}if(hs(c)&&(i=l[Z+208|0]!=0&i),cA){O=A[o+2156>>2];break s}O=32,A[o+2156>>2]=32,i=0}if(!(!i|(0|O)!=46|!A[47203]|(0|c)!=60)){Er=A[o+2148>>2],e=a;break r}if(!i)break r}if(e=A[o+2148>>2]+189424|0,g[0|e]=32,g[e+1|0]=0,A[33285]=c,KA-48>>>0<10&&(a=rr(c)?a:-4194305&a),(0|r)<2)break A;a=(0|a)==536621?536656:(0|a)==532520?532555:524358;break A}(A[33285]||(m=0,r=A[33283],A[r>>2]!=A[r+4>>2]))&&(m=0,Or(A[o+2152>>2])&&(A[33285]=c))}a=e}if(A[33712]!=1){if((0|s)!=(0|(r=A[o+2156>>2])))i=A[o+2148>>2],(0|r)==57404&&(r=60,A[o+2156>>2]=60);else{e:{if(ni(s))r=57384;else{if(r=45,A[o+2156>>2]==45)break e;r=32}A[o+2156>>2]=r}i=A[o+2148>>2]}A[o+2148>>2]=Pr(r,i+189424|0)+A[o+2148>>2],Or(A[o+2156>>2])||ni(A[o+2156>>2])||(e=A[o+2148>>2],b[Me+(e<<1)>>1]=A[33284]-A[47353],(0|e)<=(i+1|0)||je(Gi+(i<<1)|0,255,e+~i<<1)),r=A[o+2148>>2],A[Wr>>2]=r;e:{r:{if((0|r)>725){if(!rr(A[o+2156>>2]))break r;r=A[o+2148>>2]}if((0|r)<796)continue;break e}if(r=A[o+2148>>2],!(A[o+2156>>2]-48>>>0>=10)&&(0|r)<796)continue}break}}g[0|(e=r+189424|0)]=32,g[e+1|0]=0,A[33285]=A[o+2152>>2],a=16384}J=o+2608|0,at=a,la&&(e=A[f+780>>2],A[la>>2]=e||at>>>12&7),e=(f+5184|0)+(A[f+6800>>2]<<1)|0,b[e+6>>1]=0,b[e+2>>1]=0,b[e+4>>1]=32767,O=P(4095&at,8388608&at?320:10),a=189424;A:{e:{r:if(e=l[189424]){for(;;){if(!!(255&(e=e<<24>>24))&e>>>0<33){if(e=l[0|(a=a+1|0)])continue;break r}break}if(l[0|a])break e}O=(0|(r=O-(e=A[47566])|0))>0?r:0,A[47566]=O+e,at=l[190268]?524288|at:at,A[Z+8240>>2]=at;break A}A[47566]=O,e=l[190268],A[Z+8240>>2]=at,e&&(ft=1,A[47568]=A[47568]+1,(0|(e=A[47569]))<=0||(e=e-1|0,A[47569]=e,e||(g[190280]=0)))}A[49572]=1,A[47572]=655360,A[47573]=0,A[Z+8184>>2]=0,A[Z+8188>>2]=0,e=0,A[Z+288>>2]=0,A[(r=Z- -8192|0)>>2]=0,A[r+4>>2]=0,A[Z+8200>>2]=0,A[Z+8224>>2]=0,A[Z+8228>>2]=0,A[(r=Z+8232|0)>>2]=0,A[r+4>>2]=0,g[f+786|0]=32,b[f+784>>1]=8192,A[f+6812>>2]=32,b[f+1588>>1]=3,A[f+1584>>2]=0,a=0;A:if(!((0|(r=A[f+6800>>2]))<=0)){for(;;){if(b[(f+5184|0)+(a<<1)>>1]>0)break A;if((0|r)==(0|(a=a+1|0)))break}a=r}if(r=M[(f+5184|0)+(a<<1)>>1],b[f+1592>>1]=r,r)for(;e=!!(65535&~r)+e|0,r=M[(f+5184|0)+((a=a+1|0)<<1)>>1];);for(g[f+1594|0]=e,i=3,Me=1,a=0;;){WA=A[f+6808>>2],Ga(f+6808|0,(re=(f+784|0)+i|0)-1|0),!l[Z+170|0]|A[f+6808>>2]-48>>>0>=10||rr(WA)&&(A[f+6808>>2]=97),hA?A[f+6812>>2]=hA:I&&Ga(f+6812|0,I+189423|0),r=I;A:{e:if(a||(r=Gt(f+6816|0,I+189424|0)+I|0,a=A[f+6816>>2])){if(cA=Gt(f+6804|0,e=r+189424|0),(0|a)==1){if(s=r-1|0,hA=32,KA=0,A[f+6812>>2]!=32){r=s,e=32;break e}I=0,a=r;r:{s:switch(l[0|e]-43|0){case 0:a=r+1|0,I=64;break r;case 2:break s;default:break r}a=r+1|0,I=96}if(g[0|(e=a+189424|0)]-48>>>0>=10)c=a+1|0,cA=-1;else{for(cA=Hs(e);a=(e=a)+1|0,g[e+189424|0]-48>>>0<10;);c=a,a=e}if((0|(hA=A[47350]))>247)e=0;else if(e=0,!((0|(a=g[a+189424|0]))<0)&&(a=ei(84868,255&a,14))){r=1+(e=a-84868|0)|0,(0|cA)==-1&&(cA=A[105536+(r<<2)>>2],I=0);r:{s:switch(e-8|0){case 0:A[49574]=0,A[49573]=cA;break r;case 4:break s;default:break r}g[199304]=(0|cA)>=3?1:0}e=1,A[47350]=hA+1,A[198304+(hA<<2)>>2]=(r+I|0)+(cA<<8),r=c}hA=A[f+6812>>2],je(s+189424|0,32,r-s|0),Xr=e+Xr|0,a=0;break A}hA=0,(0|a)==32|A[49573]!=36?(KA=0,e=a):(A[f+6812>>2]!=32|A[f+6804>>2]!=32||(A[49573]=20),KA=0,e=xi(a,Z))}else A[f+6804>>2]=32,KA=1,hA=0,cA=0,e=32;e:if(hr){if(hr=1,Me=8,a=0,(0|e)!=93|A[f+6804>>2]!=93)break e;r=r+1|0,e=32,hr=0}else if((240&(a=A[49573]))!=64)if(hr=0,16&a)a=0;else{r:{s:{i:{c:{if(!((0|(c=(0|e)==8242||(0|e)==8217||(0|e)==146||(0|e)==180?39:e))!=8216&(0|c)!=63))if(rr(A[f+6808>>2])){if(c=e,rr(A[f+6804>>2])){c=39;break c}}else c=e;o:{if((0|c)!=1367){if((0|c)==1328){T|=1024,c=32;break c}if((e=c-44032|0)>>>0>11183)break c;if(s=((a=((m=65535&e)>>>0)/28|0)>>>0)%21|0,e=e-P(a,28)&65535,c-50500>>>0>587)break o;a=e?e+4519|0:0,s=s+4449|0;break s}T|=131072,Er=A[f+6804>>2],e=A[f+6812>>2],c=32;break i}a=50500+(e+P(s,28)|0)|0,s=(m>>>0)/588|4352;break s}if(Er=A[f+6804>>2],e=A[f+6812>>2],!((a=c-12592|0)>>>0>51)){s=4352|l[a+103296|0],a=0;break s}}o=r+189424|0;i:if(!((0|(a=A[Z+212>>2]))!=28268&(0|a)!=24934|(0|c)!=39)&&!is(e)&&(Gt(f+6820|0,o+1|0),ii(A[f+6820>>2]))){s=601,a=0;c:switch(Er-110|0){case 6:break s;case 0:break c;default:break i}if(A[Z+212>>2]!=24934)break s;g[0|o]=32;break s}if(A[f+6824>>2]=32,(0|(e=A[49897]))>0)A[49897]=e-1,a=0;else{if(!c){a=0,s=0;break r}i:{c:{o:{u:if((ze=A[Z+180>>2])&&(m=c,(QA=ps(c))&&(m=xi(c,Z)),!Fn(ze)))for(;;){A[f+16>>2]=0,A[f+624>>2]=m,e=Gt(f+16|0,ze)+ze|0;l:if(A[f+624>>2]==A[f+16>>2]){if(l[0|e]){for(s=1,er=0,a=o;pr=Gt(f+16|0,e),yr=Gt(f+624|0,a),Wr=xi(A[f+624>>2],Z),A[f+624>>2]=Wr,a=a+yr|0,er=(yr=(0|Wr)==A[f+16>>2])+er|0,s&=yr,l[0|(e=e+pr|0)];);if(!s)break l;A[49897]=er}if(!(e=e+1|0))break u;if(8&l[188788]&&(A[f>>2]=ze,A[f+4>>2]=e,fr(A[47195],85187,f)),e=Gt(f+6828|0,e)+e|0,l[0|e])break o;a=0;break c}for(;a=e,e=e+1|0,l[0|a];);for(;l[0|(a=(e=a)+1|0)];);if(Fn(ze=e+2|0))break}a=0,s=c;break i}Gt(f+6824|0,e),QA&&ps(Er)&&(A[f+6824>>2]=bn(A[f+6824>>2])),a=A[f+6824>>2]}s=A[f+6828>>2],T|=2097152,QA&&(s=bn(s))}if((0|s)!=8)break s}s=r;break A}a?A[f+6804>>2]=a:a=0}rr(s)||ii(s)||Lr(A[Z+336>>2],s)||!rr(A[f+6808>>2])|!(!l[Z+170|0]|s-48>>>0>=10)&A[f+6804>>2]-48>>>0>=10||(s=32,le=1);r:{s:{i:{c:{o:{if(A[f+6808>>2]-48>>>0<10){if(s-48>>>0<10){e=E;break o}if(1<<(e=s-32|0)&20481&&e>>>0<=14)break c;le=1}else if(e=0,A[f+6812>>2]!=44||(e=E,(0|s)!=44))break o;s=32;break c}if((0|s)==91&&((0|(c=A[f+6804>>2]))==2||(s=91,(0|c)==91&&A[47204])))break i;E=e}if(rr(s)){c:{o:{u:{if(rr(A[f+6808>>2])){if(!l[Z+171|0]||(e=A[f+6808>>2],!((0|s)>12352)&&(0|e)<12353))break u}else e=A[f+6808>>2];if(zr=Lr(A[Z+336>>2],e)?zr:0,(0|(e=A[f+6808>>2]))!=32&&!Lr(A[Z+336>>2],e)){e=32,AA=ni(A[f+6808>>2])?AA:256|AA;break o}T=ps(s)?2|T:T,A[f+6808>>2]!=32|g[re-2|0]-48>>>0>=10|A[f+6812>>2]-48>>>0<10||(g[(f+784|0)+i|0]=32,e=1588+(P(At,12)+f|0)|0,b[e>>1]=M[e>>1]+1,i=i+1|0)}if(e=32,(0|s)==32)break c;if(zr=zr+1|0,(0|(c=A[Z+600>>2]))<=0){e=s;break c}if(!((0|s)<=591&(0|(m=A[f+6808>>2]))>=(0|c))){if((0|s)<(0|c)){e=s;break c}if((0|zr)<2){e=s;break c}if(!((0|m)<=591)){e=s;break c}}if(!rr(m)){e=s;break c}T|=16384,AA|=128}le=1}if(As=As+1|0,ps(e)){if(c=xi(e,Z),A[Z- -64>>2]){e=ns?c:712,a=ns?a:c,ns=1;break e}if(hs(A[f+6812>>2])){if(A[f+6808>>2]==32){e=c;break e}if(e=32,A[Z+212>>2]!=26465)break r;for(s=85240,m=(f+784|0)+i|0,cA=0;;){if(o=He(s),l[0|(WA=m-o|0)]==32&&!Ba(WA+1|0,s,o=o-1|0)){if((0|(s=g[s+o|0]))==(0|c)){e=c;break e}if((0|s)==65&&l0(Z,c)){e=c;break e}}if(s=A[131184+((cA=cA+1|0)<<2)>>2],(0|cA)==11)break}break r}if(e=32,(0|c)==32)break e;if(!ps(A[f+6812>>2])){e=c;break e}if(!hs(A[f+6804>>2])){e=c;break e}if(Gt(f+16|0,189424+(r+cA|0)|0),!(A[Z+212>>2]!=28268|(0|zr)!=2|(0|c)!=106|A[f+6812>>2]!=73)){e=c;break e}if(A[f+6808>>2]==32){e=c;break e}if(!rr(A[f+16>>2])){e=c;break e}AA|=256,hA=32,le=1;break e}if(!Me){Me=0;break e}if((0|zr)<3){Me=0;break e}if((0|e)!=115){Me=0;break e}if(A[Z+212>>2]!=25966){Me=0;break e}if(A[f+6804>>2]!=32){Me=0;break e}if(Me|=4,e=32,l[783+(s=i+f|0)|0]!=39)break e;g[s+783|0]=32;break e}e=32;c:{o:{u:{l:{switch(s-39|0){default:if((0|s)==95)break e;case 1:case 2:case 3:case 4:case 5:if(s-48>>>0>=10||l[Z+170|0]&&rr(A[f+6808>>2])&&!((c=A[f+6804>>2])-48>>>0<10|c-2406>>>0<10))break c;if((0|(m=A[f+6808>>2]))==32)break o;if(c=A[f+6808>>2],m-48>>>0<10)break u;if((0|(m=c))==(0|(c=A[Z+128>>2])))break l;le=1;break e;case 6:if(!ii(A[f+6812>>2])&&rr(A[f+6804>>2])){if(A[f+6808>>2]!=32){le=1;break e}if(T|=128,(0|At)<=0)break e;s=1572+(P(At,12)+f|0)|0,A[s>>2]=16384|A[s>>2];break e}if(s=A[f+6804>>2],!(A[f+6812>>2]!=32|(0|s)!=32)){Kt=4;break e}if((0|s)==45){r=r+1|0,Kt=4;break e}if(e=45,A[f+6808>>2]!=32||!rr(WA)||rr(A[f+6812>>2]))break e;g[(f+784|0)+i|0]=32,s=1588+(P(At,12)+f|0)|0,b[s>>1]=M[s>>1]+1,i=i+1|0;break e;case 7:if(A[f+6808>>2]==46){le=1;break e}if(e=46,(0|At)<=0||(s=1572+(P(At,12)+f|0)|0,1&g[s+1|0])||!rr(A[f+6812>>2]))break e;A[s>>2]=65536|A[s>>2],e=(e=ii(A[f+6804>>2]))||A[f+6804>>2]==45?32:46;break e;case 0:}n:{if((0|(c=A[f+6812>>2]))!=46||(s=115,A[f+6804>>2]!=115)){if(!Ri(c))break n;s=A[f+6804>>2]}if(rr(s))break s}if(1&(s=A[Z+88>>2])){if(rr(A[f+6804>>2]))break s;s=A[Z+88>>2]}if(2&s&&rr(A[f+6812>>2]))break s;if(!(!Lr(A[Z+332>>2],A[f+6812>>2])|(0|WA)!=32)){r=(A[f+6804>>2]==32)+r|0;break s}if(c=(0|(s=A[f+6808>>2]))!=115|os,os=0,!(1&c))break e;os=!!(0|ii(s)),Kt=4;break e}if((0|c)==44&E){le=1;break e}E=1;break c}if((0|c)!=32)break c}rr(WA)&&(rr(A[f+6812>>2])||(g[(f+784|0)+i|0]=32,e=1588+(P(At,12)+f|0)|0,b[e>>1]=M[e>>1]+1,i=i+1|0))}e=s;break e}hr=1,s=r+1|0,E=e;break A}e=39,os=0;break e}le=1,hA=32}else{if(e-48>>>0<10){a=0,s=(0|(c=A[49574]+1|0))>(15&A[49573]),A[49574]=s?0:c,e=s?32:e,le|=s,hr=0;break e}a=0,A[49574]=0,e=(s=A[f+6808>>2]-48>>>0<10)?32:e,le|=s,hr=0}if(ii(e)){if(A[f+6808>>2]==32){T|=262144,s=r;break A}if(s=A[f+6816>>2]-9>>>0<2,m=1&le){cA=0;e:if(!((0|p)>(0|(e=r-1|0))))for(;;){if(!(c=b[(f+5184|0)+(e<<1)>>1]))break e;if(cA=((0|c)>0)+cA|0,!((0|p)<=(0|(e=e-1|0))))break}g[1594+(P(At,12)+f|0)|0]=cA}if(AA=s?262144|AA:AA,g[(f+784|0)+i|0]=32,e=i+1|0,!((0|At)>298||(s=(f+1584|0)+P(At,12)|0,(0|(c=M[s+4>>1]))>=(0|e)))){if((0|Xr)<=0?p=A[s>>2]:(p=198300+(A[47350]<<2)|0,A[p>>2]=128|A[p>>2],Xr=0,p=64|A[s>>2]),o=A[47352],g[s+6|0]=o,A[s>>2]=p|(As?Me:-2&Me)|(l[199304]?2048:0)|T,(0|o)>0){for(;T=(p=f+784|0)+e|0,p=p+(e=e-1|0)|0,g[0|T]=l[0|p],(0|e)>(0|c););g[0|p]=32,b[s+4>>1]=c+1,e=i+2|0}c=(f+1584|0)+P(At=At+1|0,12)|0,A[c>>2]=0,b[c+4>>1]=e,i=r;e:if(!((0|(s=A[f+6800>>2]))<=(0|r))){for(;;){if(b[(f+5184|0)+(i<<1)>>1]>0)break e;if((0|s)==(0|(i=i+1|0)))break}i=s}if(cA=M[(f+5184|0)+(i<<1)>>1],b[c+8>>1]=cA,As=0,s=0,cA)for(;s=!!(65535&~cA)+s|0,cA=M[(f+5184|0)+((i=i+1|0)<<1)>>1];);g[c+10|0]=s,A[47352]=0,Me=1,T=AA,AA=0,ns=0}le=0,a=m?0:a,s=m?I:r}else(0|i)>795?(s=r,r=p,e=i):(e=Pr(e,(f+784|0)+i|0)+i|0,s=r,r=p);A[47352]<(0|Kt)&&(A[47352]=Kt),Kt=0,p=r,i=e}if(KA||(I=s,!((0|i)<799)))break}(0|Xr)<=0|At||(e=198300+(A[47350]<<2)|0,A[e>>2]=128|A[e>>2],A[f+1584>>2]=64|A[f+1584>>2],At=1),e=(f+784|0)+i|0,A[Z+8204>>2]=e-1,r=0,g[0|e]=0,g[f+1590|0]=0,g[1590+(P(At,12)+f|0)|0]=8;A:if((0|At)<=0)A[f+1584>>2]=512|A[f+1584>>2],i=A[49572];else{e=At-1|0;e:if((0|At)!=1)for(a=e;;){if(!ni(g[M[1588+(P(a,12)+f|0)>>1]+(f+784|0)|0])){r=a;break e}if(c=(0|a)>1,a=a-1|0,!c)break}if(r=(f+1584|0)+P(r,12)|0,A[r>>2]=16|A[r>>2],4194304&at&&(e=(f+1584|0)+P(e,12)|0,256&(r=A[e>>2])||(A[e>>2]=65536|r)),A[f+1584>>2]=512|A[f+1584>>2],!((0|At)<=0|(0|(i=A[49572]))>990))for(c=3|(e=f+624|0),m=2|e,hA=f+754|0,KA=!(4194304&at),I=0,p=0;;){A[47354]=A[47354]+1;e:{if((0|(e=A[49827]))<=0||(e=e-1|0,A[49827]=e,e)){if(l[190280])break e}else g[190280]=0;e=M[1588+(P(I,12)+f|0)>>1]+(f+784|0)|0;r:if(!(g[0|e]-48>>>0>=10)&&(r=f+624|0,a=e,A[Z+112>>2]!=1227133512)){for(;;){s:{if(g[0|a]-48>>>0<10)g[0|r]=l[0|a],r=r+1|0,a=a+1|0;else{if(A[Z+124>>2]!=g[0|a]|l[a+1|0]!=32||(i=a+2|0,l[a+3|0]==32|g[0|i]-48>>>0>=10|l[a+4|0]==32))break s;I=I+1|0,a=i}if(r>>>0<hA>>>0)continue;break r}break}je(e+(r=r-(E=f+624|0)|0)|0,32,(a=(i=a-e|0)-r|0)>>>0<=i>>>0?a:0),wt(e,E,r)}for(r=0;a=r,r=r+1|0,g[e+a|0]-48>>>0<10;);r:if(a-5>>>0<=27){for(g[f+626|0]=32,b[f+624>>1]=8224,l[0|e]!=48&A[Z+132>>2]>=(0|a)||(r=(f+1584|0)+P(I,12)|0,A[r>>2]=524288|A[r>>2]),AA=(f+1584|0)+P(I,12)|0,cA=0,i=c;r=e,!((e=g[0|e])-48>>>0>=10&(0|e)!=A[Z+128>>2])&&(g[0|i]=e,e=i+1|0,E=a,(0|(a=a-1|0))<=0?i=e:A[Z+112>>2]>>>a&1?(o=A[AA+4>>2],T=(f+16|0)+P(cA,12)|0,A[T>>2]=A[AA>>2],A[T+4>>2]=o,A[T+8>>2]=A[AA+8>>2],cA=cA+1|0,(0|(T=A[Z+124>>2]))!=32&&(g[i+1|0]=T,e=i+2|0),g[0|e]=32,i=e+1|0,8&l[AA+2|0]||((Kt=A[Z+112>>2])>>>E-2&1&&(g[e+1|0]=48,g[e+2|0]=48,Kt=A[Z+112>>2],i=e+3|0),Kt>>>E-3&1&&(g[0|i]=48,i=i+1|0))):i=e,e=r+1|0,i>>>0<hA>>>0););if(a=A[AA+4>>2],e=(f+16|0)+P(cA,12)|0,A[e>>2]=A[AA>>2],A[e+4>>2]=a,a=A[AA+20>>2],A[e+16>>2]=A[AA+16>>2],A[e+20>>2]=a,a=A[AA+12>>2],A[e+8>>2]=A[AA+8>>2],A[e+12>>2]=a,a=1,(0|cA)>0)for(;e=(f+16|0)+P(a,12)|0,A[e>>2]=-262209&A[e>>2],(0|cA)>=(0|(a=a+1|0)););if(e=l[r+4|0]|l[r+5|0]<<8|l[r+6|0]<<16|l[r+7|0]<<24,a=l[0|r]|l[r+1|0]<<8|l[r+2|0]<<16|l[r+3|0]<<24,g[0|i]=a,g[i+1|0]=a>>>8,g[i+2|0]=a>>>16,g[i+3|0]=a>>>24,g[i+4|0]=e,g[i+5|0]=e>>>8,g[i+6|0]=e>>>16,g[i+7|0]=e>>>24,e=l[r+12|0]|l[r+13|0]<<8|l[r+14|0]<<16|l[r+15|0]<<24,r=l[r+8|0]|l[r+9|0]<<8|l[r+10|0]<<16|l[r+11|0]<<24,g[i+8|0]=r,g[i+9|0]=r>>>8,g[i+10|0]=r>>>16,g[i+11|0]=r>>>24,g[i+12|0]=e,g[i+13|0]=e>>>8,g[i+14|0]=e>>>16,g[i+15|0]=e>>>24,g[i+16|0]=0,i>>>0<=c>>>0)break r;for(e=l[AA+6|0],cA=0,a=c;;){for(p=It(Z,a,(f+16|0)+P(cA,12)|0,255&e);e=l[0|a],a=a+1|0,(0|e)!=32;);if(e=0,g[AA+6|0]=0,cA=cA+1|0,!(a>>>0<i>>>0))break}}else{if(A[47352]=0,p=It(Z,e,r=(f+1584|0)+P(I,12)|0,l[r+6|0]),(0|(a=A[47352]))>l[r+18|0]&&(g[r+18|0]=a,A[47352]=0),!(!(4096&p)|l[0|e]==32))for(;je(f+624|0,0,150),A[f+624>>2]=538976288,A[f+628>>2]=538976288,g[f+632|0]=32,It(Z,wt(m,e,a=Gt(f+16|0,e)),r,0),l[0|(e=e+a|0)]!=32;);50331648&p&&(O=(e=KA|(~A[33264]+At|0)!=(0|I))?O:10,e|!la||(A[la>>2]=4,O=10))}if(128&p&&!((0|(r=A[33264]))<=0)){if(e=0,a=r,i=3&r)for(;E=(f+1584|0)+P(a+I|0,12)|0,A[E>>2]=1048576|A[E>>2],a=a-1|0,(0|i)!=(0|(e=e+1|0)););if(r>>>0>=4)for(;e=(f+1584|0)+P(a+I|0,12)|0,A[e>>2]=1048576|A[e>>2],A[(r=e-12|0)>>2]=1048576|A[r>>2],A[(r=e-24|0)>>2]=1048576|A[r>>2],A[(e=e-36|0)>>2]=1048576|A[e>>2],a=a-4|0;);A[33264]=a}}if(i=A[49572],(0|At)<=(0|(I=I+1|0)))break A;if(!((0|i)<991))break}}if((0|(a=A[47351]))<(0|(c=A[47350]))){for(hA=A[47202],KA=A[49846],cA=A[47352];;){e=(r=A[198304+(a<<2)>>2])>>8;A:{e:switch((31&r)-9|0){case 0:hA=e;break A;case 4:KA=e;break A;case 3:break e;default:break A}cA=r>>>0>=256?e+cA|0:0}if(!(!(128&r)&(0|c)>(0|(a=a+1|0))))break}A[47352]=cA,A[47351]=a,A[49846]=KA,A[47202]=hA}A[49572]=i+2,A[(e=190288+(i<<3)|0)>>2]=589824,b[e+4>>1]=s,A[e+8>>2]=589824,b[e+12>>1]=s,r=At&&A[47199]?O:10,A[33285]?e=0:(e=A[33283],e=A[e>>2]==A[e+4>>2]),O=e?r:O,I=ft,c=0,At=0,J=m=J-32192|0,A[m+24>>2]=0,A[m+28>>2]=0,A[m+16>>2]=0,A[m+20>>2]=0,A[m+8>>2]=0,A[m+12>>2]=0,A[m>>2]=0,A[m+4>>2]=0,s=A[49572],o=M[190284+(s<<3)>>1];A:{if((0|(a=s-3|0))<0)e=a;else{for(;;){if(c=(0|(r=127&l[3+(e=190288+(a<<3)|0)|0]))<(0|c)?c:r,M[e+4>>1])e=a;else if(e=-1,r=(0|a)>0,a=a-1|0,r)continue;break}if(c>>>0>3)break A}for(;;){if((0|(e=e-1|0))<0)break A;if(64&l[0|(r=190288+(e<<3)|0)]){g[r+3|0]=4;break A}if(!(l[r+3|0]<4))break}}if(e=A[Z+292>>2],a=0,(0|s)<=0)c=0;else for(E=-1,c=0;;){r=e,A[Z+292>>2]!=(0|e)&&(b[(e=190288+(a<<3)|0)>>1]=32|M[e>>1]),(0|c)>0&&(AA=A[4+(p=190288+(a<<3)|0)>>2],A[(i=190288+(e=a-c<<3)|0)>>2]=A[p>>2],A[i+4>>2]=AA,(0|E)!=-1&&(b[4+(e+190288|0)>>1]=E),E=-1);A:{if(l[2+(190288+(i=a<<3)|0)|0]==21){if(e=l[7+(p=i+190288|0)|0],2&l[0|p])break A;e:if((0|e)!=(0|r)){if(p=l[10+(i+190288|0)|0]-9|0){if((0|p)==12)break e;break A}if(l[18+(i+190288|0)|0]!=21)break A}(0|E)==-1&&(E=(e=M[4+(i+190288|0)>>1])||-1),c=c+1|0}e=r}if((0|s)==(0|(a=a+1|0)))break}if(A[49572]=s-c,ia(e),(r=A[Z+36>>2])&&!((0|(e=(c=A[49572])-1|0))<0))for(hA=256&r,T=4&r,KA=8&r,AA=15&r,le=16&r,ft=2&r,r=r>>>8&1,a=0;;){if(i=c,s=a,c=e,(0|(e=l[2+(p=190288+(Me=e<<3)|0)|0]))==21){A:{e:{if((0|(a=i-2|0))>=0)for(;;){if(l[2+(190288+(e=a<<3)|0)|0]==21)break e;if(e=(0|a)>0,a=a-1|0,!e)break}e=A[Z+292>>2];break A}e=l[7+(e+190288|0)|0]}ia(e),e=l[p+2|0]}if(a=s,(e=A[144464+((255&e)<<2)>>2])&&(a=r,!(32&l[0|p]))){a=l[e+11|0],E=0,ft&&((0|(i=l[0|e]))!=118&(0|i)!=82||(s=le?0:s,E=1));A:{e:{r:{s:switch((i=253&a)-4|0){case 1:break r;case 0:break s;default:break e}if(AA&&(a=1,!s)||(0|(a=s))!=2||(a=2,!(e=l[e+13|0])))break A;g[p+2|0]=e;break A}if(AA&&(a=2,!s)||(0|(a=s))!=1||(a=1,!(e=l[e+13|0])))break A;g[p+2|0]=e;break A}a=0,KA&&(a=i?s:0)}a=e=E?0:a,M[4+(Me+190288|0)>>1]&&(a=e=T?0:e,hA&&(a=e||1))}if(!((0|(e=c-1|0))>=0))break}if(ia(A[Z+292>>2]),A[49572]<=0)le=-2,a=0;else{for(a=-1,s=0,p=0,KA=0;;){e=p<<3,(0|a)!=-1&&(b[4+(e+190288|0)>>1]=a),l[2+(E=e+190288|0)|0]==21&&ia(l[7+(e+190288|0)|0]),AA=A[49572];A:{if(!(32&l[0|(i=e+190288|0)])){s=(0|(r=AA-1|0))>(0|p)?A[144464+(l[10+(e+190288|0)|0]<<2)>>2]:s,!(M[i+12>>1]|(0|r)==(0|p))&&(cA=0,l[s+11|0]|!s)||(cA=1),c=l[E+2|0];e:if(!((0|(le=A[49848]))<=0))for(r=e+190288|0,a=0;;){if(hA=P(a,3),l[hA+199408|0]==(255&c)&&!((T=l[2+(hA+199408|0)|0])&(1^cA)|(4&l[r+3|0]?2&T:0)|(M[r+4>>1]?0:4&T))){if(c=l[1+(hA+199408|0)|0],g[E+2|0]=c,!(2&l[A[144464+(c<<2)>>2]+4|0])|l[r+3|0]<2)break e;g[r+3|0]=0;break e}if((0|le)==(0|(a=a+1|0)))break}if(!(255&c)){a=M[4+(e+190288|0)>>1];break A}}a=A[i+4>>2],e=(m+32|0)+(KA<<5)|0,r=A[i>>2],A[e>>2]=r,A[e+4>>2]=a,r=A[144464+(r>>>14&1020)>>2],A[e+8>>2]=r,g[e+17|0]=l[r+11|0],KA=KA+1|0,a=-1}if(!((0|KA)<1e3&(0|AA)>(0|(p=p+1|0))))break}if(c=0,a=0,!((0|(le=KA-2|0))<=0))for(;;){A:if(M[4+((m+32|0)+(c<<5)|0)>>1]){for(r=(0|c)>(0|le)?c:le,a=0,e=c;;){if((0|e)!=(0|r)){if(a=(0|a)>(0|(i=l[3+((s=m+32|0)+(e<<5)|0)|0]))?a:i,!M[4+(s+((e=e+1|0)<<5)|0)>>1])continue}else e=r;break}if((0|e)<=(0|c))break A;if(r=~c+e|0,s=0,i=e-c&7)for(;g[6+((m+32|0)+(c<<5)|0)|0]=a,c=c+1|0,(0|i)!=(0|(s=s+1|0)););if(r>>>0<7)break A;for(;g[6+(r=(m+32|0)+(c<<5)|0)|0]=a,g[r+38|0]=a,g[r+70|0]=a,g[r+102|0]=a,g[r+134|0]=a,g[r+166|0]=a,g[r+198|0]=a,g[r+230|0]=a,(0|(c=c+8|0))!=(0|e););}else e=c+1|0;if(c=e,!((0|le)>(0|e)))break}}for(A[m+40>>2]=A[36125],ia(A[Z+292>>2]),WA=(0|a)<4,p=1,hA=1,AA=0,r=0,a=0,ft=0;;){A:{e:{r:{s:{if(r){if(s=(e=m+32|0)+((E=a-1|0)<<5)|0,AA=l[2+(e+(a<<5)|0)|0],(0|E)>0){if(e=p-(a=(0|p)>0)|0,E>>>0>=(c=a?p:2)>>>0)for(;i=(a=(m+32|0)+(c<<5)|0)-32|0,p=A[a+12>>2],A[i+8>>2]=A[a+8>>2],A[i+12>>2]=p,p=A[a+4>>2],A[i>>2]=A[a>>2],A[i+4>>2]=p,p=A[a+28>>2],A[i+24>>2]=A[a+24>>2],A[i+28>>2]=p,p=A[a+20>>2],A[i+16>>2]=A[a+16>>2],A[i+20>>2]=p,(0|E)>=(0|(c=c+1|0)););p=e}cA=A[144464+(AA<<2)>>2],A[s>>2]=0,A[s+4>>2]=0,A[s+24>>2]=0,A[s+28>>2]=0,A[s+16>>2]=0,A[s+20>>2]=0,A[s+8>>2]=0,A[s+12>>2]=0,g[s+2|0]=r,e=A[144464+(r<<2)>>2],A[s+8>>2]=e,AA=s}else{if((0|a)>=(0|le)|(0|ft)>=997)break s;i=l[2+(s=(c=a<<5)+(m+32|0)|0)|0],e=A[144464+(i<<2)>>2],A[s+8>>2]=e,E=M[s+4>>1],(0|i)==21&&ia(l[7+(c+(m+32|0)|0)|0]),p=E?a:p,cA=A[144464+(l[s+34|0]<<2)>>2],A[s+40>>2]=cA,E=a}if(!e){r=0,a=E+1|0;continue}if(Ar(Z,256,s,m+32040|0,m),(0|(a=A[m+32052>>2]))>0&&(c=(m+32|0)+(E<<5)|0,cA=A[144464+(a<<2)>>2],A[c+40>>2]=cA,g[c+34|0]=a,g[c+49|0]=l[cA+11|0]),a=0,r)r=e;else if((0|(c=A[m+32056>>2]))<=0)r=e;else{r=A[144464+(c<<2)>>2],A[s+8>>2]=r,a=l[s+2|0],g[s+2|0]=c,c=M[s>>1];i:if(l[r+11|0]!=2)b[s>>1]=65531&c;else{if(b[s>>1]=4|c,l[e+11|0]==2)break i;g[s+3|0]=0}Ar(Z,256,s,m+32040|0,m)}if((0|(i=A[m+32048>>2]))<=0)c=r;else{if(c=A[144464+(i<<2)>>2],g[s+2|0]=i,A[s+8>>2]=c,e=l[c+11|0],KA=1,(0|i)==1){Me=(0|e)==2;break e}i=M[s>>1];i:if((0|e)!=2)b[s>>1]=65531&i;else{if(b[s>>1]=4|i,l[r+11|0]==2)break i;g[s+3|0]=0}Ar(Z,256,s,m+32040|0,m)}if(Me=0,(0|(e=l[c+11|0]))!=2){KA=0;break e}if(Me=1,KA=0,e=2,l[s+3|0]>1){At=0;break e}i=s+3|0,At=At+1|0,r=s;i:{if(8&(T=A[Z+12>>2])){for(;;){c:switch(T=r,r=r+32|0,l[T+49|0]){case 0:break e;case 2:break c;default:continue}break}if(l[0|(r=T+35|0)]>1)break e;if(l[s+6|0]<=3&&(g[0|i]=0),l[T+38|0]<4)break i;break e}if(1&At|(0|At)<2)break e;if(2&T)break r;if(WA)r=i;else if(r=i,M[s+36>>1])break r}g[0|r]=0;break e}A[36423]=ft+2,b[(e=145840+(ft<<5)|0)>>1]=0,g[e+2|0]=9,g[e+20|0]=2,A[e+12>>2]=O,b[e+4>>1]=o,g[e+17|0]=0,g[e+18|0]=0,A[e+8>>2]=A[36125],b[e+32>>1]=0,g[e+34|0]=9,g[e+52|0]=0,A[e+44>>2]=0,b[e+36>>1]=0,g[e+49|0]=0,g[e+50|0]=0,A[e+40>>2]=A[36126],ia(A[Z+292>>2]),J=m+32192|0;break A}At=1}if(!(8&(r=M[s+32>>1]))|(0|E)<=0||(i=l[cA+11|0])>>>0>15|!(1<<i&457)||(a=l[cA+10|0],b[s+32>>1]=8^r),QA=M[s+36>>1]){e:if(r=A[Z+4>>2]){switch(0|e){default:a=512&r?11:a;break;case 0:break e;case 2:}if(l[cA+11|0]==2){(i=12&r)&&(a=(0|i)!=12?23:11);r:if(Me){switch(3&r){case 2:a=10;break r;case 0:break r}a=23}l[s+35|0]<4||(a=256&r?10:a)}}if(!((0|s)==(0|AA)|(0|ft)<=0)){e:{r:{s:switch(0|(r=7&A[Z>>2])){case 0:break e;case 1:break s;default:break r}if(a-12>>>0>4294967293)break e}a=l[r+101916|0]}a=A[47205]>0?24:a}}if(A[s+72>>2]=A[144464+(l[s+66|0]<<2)>>2],r=A[m+32060>>2],r=a||r||a,!KA){g[17+(i=145840+(T=ft<<5)|0)|0]=e,A[i+8>>2]=c,g[i+16|0]=0,b[i>>1]=M[s>>1],g[i+3|0]=15&l[s+3|0],g[i+6|0]=l[s+6|0],a=l[s+7|0],b[i+4>>1]=0,g[i+7|0]=a,KA=l[c+10|0],g[i+2|0]=KA;e:if(a=M[s+4>>1]){if(b[i+4>>1]=a,I=1&I?5:1,g[20+(s=T+145840|0)|0]=I,a=hA,hA=0,!a){I=0;break e}g[s+20|0]=8|I,I=0}else g[20+(T+145840|0)|0]=0;A[12+(a=T+145840|0)>>2]=A[m+32084>>2]<<1,!QA|(0|KA)!=24||(0|(s=A[47205]))<=0||(A[i+8>>2]=A[36126],A[a+12>>2]=P(s,14)),(1<<e&428?e>>>0<=8:0)|2&l[c+7|0]&&(A[a+12>>2]=128,g[i+16|0]=0),g[21+(e=T+145840|0)|0]=255,g[e+22|0]=255,b[e+18>>1]=5120,ft=ft+1|0}a=E+1|0;continue}break}b[88922]=1,A[44462]=0,Xr&&(b[145776+(A[36423]<<5)>>1]=2,e=198304+(A[47350]<<2)|0,A[e>>2]=128,A[(e=e-4|0)>>2]=128|A[e>>2]),g[190268]=at>>>19&1,Us&&(A[Us>>2]=at<<14>>31&189360)}J=f+6832|0,le=A[47192],Me=A[t+12>>2],r=0,i=0,p=0,T=0,AA=0,Kt=0,O=0,J=o=J-6e3|0;A:if(!((0|(s=(ft=A[36423])-1|0))<=0)){for(;g[2+(o+P(r,6)|0)|0]=0,4&l[145840+(e=r<<5)|0]?(a=o+P(T,6)|0,g[a+1|0]=0,e=e+145840|0,g[a+3|0]=l[e+49|0],e=l[e+3|0],g[0|a]=e,T=T+1|0,Kt=(e>>>0>3)+Kt|0):l[A[8+(e+145840|0)>>2]+10|0]!=27|(0|T)<=0||(e=(o+P(T,6)|0)-4|0,g[0|e]=4|l[0|e]),(0|s)!=(0|(r=r+1|0)););if(g[o+P(T,6)|0]=0,T)if(A[le+148>>2]==1){if(!((0|ft)<=0)){for(e=-2&ft,a=1&ft,r=145840;p=l[r+17|0]==2&&l[r+3|0]>3?i:p,p=l[r+49|0]==2&&l[r+35|0]>3?1|i:p,r=r- -64|0,i=i+2|0,(0|e)!=(0|(AA=AA+2|0)););!a|l[r+17|0]!=2||(p=l[r+3|0]>3?i:p)}if(g[3+(c=145840+(e=p<<5)|0)|0]=7,A[le+212>>2]==30313&&(l[7+(e=e+145840|0)|0]||(g[e+7|0]=sa(55),ft=A[36423])),!((0|ft)<=0)){for(AA=0,r=145840,e=145840,i=E=A[36125],s=0,hA=1;;){if(l[r+17|0]?I=A[36125]:(I=A[36125],E=(a=l[A[r+8>>2]+14|0]>50)?I:E,hA|=a),a=l[r+20|0]?I:i,4&l[0|r]){I=l[r+7|0],i=A[144464+(I<<2)>>2];e:{if((0|(T=A[le+212>>2]))==6840683){if(A[a>>2]!=49||(T=A[i>>2]-49|0)>>>0>5|!(1<<T&41))break e;g[e+7|0]=sa(50),T=A[le+212>>2]}if(!((0|T)!=6516078&(0|T)!=31336)){T=0,I||(s=sa(1&(T=s|hA)?13621:12593),g[r+7|0]=s,i=A[144464+(s<<2)>>2]),(0|p)!=(0|AA)|(1024|A[i>>2])!=13621||(g[c+3|0]=6),A[E>>2]==3420466&&(g[e+7|0]=sa(A[i>>2]==3420466?13619:12594));r:{if(A[a>>2]==12597){if((0|(I=A[i>>2]))!=12597)break r;g[e+7|0]=sa(13109)}I=A[i>>2]}s=T,(0|I)==12593&&((0|(I=A[E>>2]))==13621&&(g[r+7|0]=sa(12850),I=A[E>>2]),(0|I)==13619&&(g[r+7|0]=sa(13107),I=A[E>>2]),(0|I)==3420466&&(g[r+7|0]=sa(13364)),g[r+3|0]=0)}}hA=0,E=i,e=r}else i=a;if(r=r+32|0,!((0|(AA=AA+1|0))<(0|(a=A[36423]))))break}if(i=0,r=145840,!((0|a)<=0))for(;4&l[0|r]&&((e=l[r+7|0])||(g[r+7|0]=17,e=17),e=A[144464+(e<<2)>>2],g[r+21|0]=l[e+12|0],g[r+22|0]=l[e+13|0]),r=r+32|0,(0|a)!=(0|(i=i+1|0)););}}else{if(e=A[le+152>>2],e=le+P(WA=(0|e)>7?1:e,6)|0,Z=l[0|(WA?e+637:le+157)],at=l[0|(WA?636+(e+Me|0):156+(le+Me|0))],g[133068]=(0|Me)==4,!((0|T)<=0)){for(KA=T-1|0,cA=Me-1>>>0>1,a=0,s=0;;){f=o+P(s,6)|0,O=((e=l[0|f])<<24>>24>3)+O|0;e:if((0|e)==6){e=s-3|0,r=s;r:{for(;;){if((0|r)<=(0|a)|(0|e)>=(0|r))break r;s:switch(c=o+P(r=r-1|0,6)|0,l[0|c]-4|0){case 2:break r;case 0:break s;default:continue}break}g[0|c]=3}r=s;r:{for(;;){if((0|T)<=(0|(r=r+1|0)))break r;s:switch(l[o+P(r,6)|0]-4|0){case 0:break r;case 2:break s;default:continue}break}g[f+2|0]=2,g[0|f]=5,e=a;break e}if(l[0|f]==6){g[f+2|0]=2,m=0;r:if((0|T)<=(0|(e=s+1|0)))c=s,hr=0;else if(hr=1,(0|(i=g[o+P(e,6)|0]))>4)c=s;else{for(p=(Kt-O|0)>1,c=s;;){if(r=e,(255&i)==4&&(e=p+1|0,p=1,!((0|e)<=1))){e=r;break r}if(hr=(0|T)>(0|(e=r+1|0)),(0|e)==(0|T))break;if(c=r,(0|(i=g[o+P(e,6)|0]))>4)break r}c=KA,e=T}i=-1,I=0,p=0,hA=-1,AA=0,E=-1;r:{if((0|(r=a))<(0|e)){for(;i=(QA=(0|(E=g[o+P(r,6)|0]))>3)&&(0|i)<0?r-a|0:i,m=(AA=(0|p)>(0|E))?m:(0|p)<(0|E)?r:I,hA=QA?r:hA,I=AA?I:r,QA=(0|r)!=(0|c),p=AA?p:E,r=r+1|0,QA;);if(AA=I,E=hA,(0|i)>=0)break r}i=e,I=AA,hA=E}A[33269]=c-I,A[33268]=i,A[33270]=I,A[33271]=m;r:if(l[133068])A[33270]=e,A[33271]=e;else if((0|hA)>=0){if((0|e)!=(0|T))break r;g[o+P(hA,6)|0]=7}else g[o+P(I,6)|0]=7;Ka(o,WA,a,e,at),!hr&!!(0|Me)||(at=cA?l[le+156|0]:l[le+157|0])}else e=a}else e=a;if((0|e)>=(0|s))a=e;else if(4&l[f+2|0]){for(a=s+1|0,i=-1,hA=0,I=0,p=0,r=e,m=-1;i=(AA=(0|(c=g[o+P(r,6)|0]))>3)&&(0|i)<0?r-e|0:i,hA=(E=(0|c)<(0|p))?hA:(0|c)>(0|p)?r:I,m=AA?r:m,I=E?I:r,AA=(0|r)!=(0|s),p=E?p:c,r=r+1|0,AA;);A[33269]=s-I,A[33270]=I,A[33271]=hA,A[33268]=(0|i)<0?a:i,l[133068]?(A[33270]=a,A[33271]=a):(0|m)>=0?g[o+P(m,6)|0]=7:g[o+P(I,6)|0]=7,Ka(o,WA,e,a,Z)}else a=e;if((0|T)==(0|(s=s+1|0)))break}if(!((0|a)>=(0|T))){for(i=-1,hA=0,I=0,p=0,r=a,m=-1;i=(c=(0|(e=g[o+P(r,6)|0]))>3)&&(0|i)<0?r-a|0:i,hA=(s=(0|e)<(0|p))?hA:(0|e)>(0|p)?r:I,m=c?r:m,I=s?I:r,p=s?p:e,(0|T)!=(0|(r=r+1|0)););A[33270]=I,A[33271]=hA,A[33269]=~I+T,A[33268]=(0|i)<0?T:i,l[133068]?(A[33270]=T,A[33271]=T):(0|m)>=0?g[o+P(m,6)|0]=7:g[o+P(I,6)|0]=7,Ka(o,WA,a,T,at)}}if((0|ft)<=0)break A;for(r=0,AA=0;;){if(E=a=145840+(c=r<<5)|0,e=o+P(AA,6)|0,i=l[0|e],g[a+3|0]=i,4&l[0|a]){s=c+145840|0,a=l[e+4|0],g[s+21|0]=a,p=l[e+5|0],g[s+16|0]=0,g[s+22|0]=p;e:{if(1&(I=l[e+2|0]))e=2;else{if(i>>>0<6)break e;e=l[e+1|0]}g[s+16|0]=e}a>>>0<=(255&p)>>>0?(e=p,p=a):(g[s+21|0]=p,g[s+22|0]=a,e=a),(a=l[7+(c+145840|0)|0])&&(e=(255&e)+(255&p)>>>1|0,a=A[144464+(a<<2)>>2],g[s+22|0]=e+l[a+13|0],g[s+21|0]=e+l[a+12|0]),2&I&&(g[E+3|0]=8|i),AA=AA+1|0}if((0|ft)==(0|(r=r+1|0)))break}}}if(J=o+6e3|0,AA=A[47192],r=0,cA=0,m=0,O=0,J=o=J-160|0,A[36423]>=2)for(Me=A[30450],i=1;;){if(i=(e=i)+1|0,T=l[3+(s=145840+(p=e<<5)|0)|0],2&(I=M[s>>1])){for(;(31&(c=A[198304+(O<<2)>>2]))==2&&(Ps(127&c,c>>>8|0),A[36432]=110,A[36433]=100,A[36434]=450,A[36430]=5,I=A[50786],E=A[32972],(0|(a=A[E+84>>2]))>0&&(I=(0|P(a,I))/100|0),hA=l[((0|(a=(0|I)>=359?359:I))<=80?80:a)+101856|0],a=(0|(a=(0|I)>=450?450:I))>399?6:(0|a)>379?7:hA,A[32526]=(0|P(a,A[E+72>>2]))/256,A[32527]=(0|P(a,A[E+76>>2]))/256,A[32528]=(0|P(a,A[E+80>>2]))/256,a>>>0>7||(E=a-1|0,A[32528]=E,A[32526]=a,A[32527]=E)),O=O+1|0,!(128&c););I=M[s>>1]}E=i<<5,hA=e-1|0,a=7&T;A:{e:{r:{s:{i:{c:{o:{u:{l:{n:switch(at=l[17+(p+145840|0)|0],0|(c=4&I?2:at)){case 2:break i;case 3:case 8:break c;case 5:break o;case 6:case 7:break u;case 4:break l;case 0:break n;default:break A}r=0;break A}if((0|(e=l[17+(145840+(hA<<5)|0)|0]))!=6?(a=(0|e)==4?60:A[34063]>0||a>>>0<4?48:60,g[18+(p+145840|0)|0]=a):(a=25,g[18+(p+145840|0)|0]=25),!(16&l[0|AA])|!l[20+(p+145840|0)|0]||(g[18+(p+145840|0)|0]=60,a=60),64&l[A[8+(p+145840|0)>>2]+6|0]&&(a=a+30|0,g[18+(p+145840|0)|0]=a),r=0,!(8&I))break A;g[18+(p+145840|0)|0]=l[AA+164|0]+a;break A}!(s=l[20+(e=p+145840|0)|0])|1&g[A[e+8>>2]+7|0]&l[17+(145840+(hA<<5)|0)|0]==2||(g[18+(p+145840|0)|0]=15),a=l[17+(E+145840|0)|0],8&l[A[8+(p+145840|0)>>2]+4|0]|a|l[17+(145840+(hA<<5)|0)|0]!=8||(g[18+(p+145840|0)|0]=25),64&l[A[8+(145840+(e=hA<<5)|0)>>2]+5|0]&&(g[18+(p+145840|0)|0]=30),!s|!(16&A[AA>>2])||(g[18+(p+145840|0)|0]=30);u:if(l[20+(E+145840|0)|0]|!(32&l[A[8+(p+145840|0)>>2]+4|0])|(0|a)!=4)A[12+(p+145840|0)>>2]=256;else{if(s=p+145840|0,l[17+(e+145840|0)|0]==2){A[s+12>>2]=200;break u}A[s+12>>2]=150}if((0|c)!=7||(cA|=(0|a)==2,(254&l[17+(e+145840|0)|0])!=2))break A;A[12+(p+145840|0)>>2]=A[12+(e+145840|0)>>2]+255>>>1;break A}(254&(a=l[17+(145840+(e=hA<<5)|0)|0]))==6|(0|a)==3|32&A[A[8+(e+145840|0)>>2]+4>>2]&&(g[18+(p+145840|0)|0]=30);o:if((254&(s=l[17+(E+145840|0)|0]))==2){cA=l[20+(E+145840|0)|0]&&(0|s)!=2?cA:1,g[18+(s=p+145840|0)|0]=40,T=0;u:{switch(0|a){case 0:if((e=A[12+(e+145840|0)>>2])>>>0>39)break u;T=40-e|0;break u;case 2:break u}if(l[20+(p+145840|0)|0])break o;T=20;l:switch(a-3|0){case 1:if(T=0,!(8&l[A[8+(e+145840|0)>>2]+4|0]))break u;break o;case 0:break u;case 5:break l;default:break o}T=12}g[s+18|0]=T}if(!(16&l[0|AA])|!l[20+(p+145840|0)|0]||l[18+(e=p+145840|0)|0]>19)break A;g[e+18|0]=20;break A}s=l[AA+296|0],c=a=p+145840|0,A[a+12>>2]=256,g[a+19|0]=s;c:if(l[a+20|0]){I=25;o:switch(l[17+(145840+(hA<<5)|0)|0]-2|0){case 0:if(I=12,1&g[A[8+(p+145840|0)>>2]+7|0])break c;break;case 1:break o;default:break c}g[18+(p+145840|0)|0]=I}if((0|(E=l[17+(E+145840|0)|0]))==2){m=1;break A}if(g[22+(s=p+145840|0)|0]=r,(254&l[17+(145840+(a=hA<<5)|0)|0])==2)break s;if(a=r,(0|(c=A[36423]))<=(0|e))break e;for(;;){if(l[17+(145840+(a=e<<5)|0)|0]==2){a=l[22+(a+145840|0)|0],g[s+22|0]=a;break e}if((0|c)==(0|(e=e+1|0)))break}break r}if(le=p+145840|0,KA=a^a>>>0<2,a=(ft=8&T)?25:l[296+(KA+AA|0)|0]-m|0,g[le+19|0]=a,(A[36423]-3|0)>(0|e)||(0|(c=255&a))<=(0|(a=A[AA+52>>2]))||(g[le+19|0]=a),a=0,T=0,!(I=l[s+52|0]))for(;c=A[s+40>>2],T=l[s+49|0]==2?(~A[c+4>>2]>>>20&1)+T|0:T,a=l[c+10|0]==27?2:a,c=s,s=s+32|0,!(I=l[c+84|0]););c=le+96|0,e=145840+(WA=e+2<<5)|0,A[34063]=T,f=l[A[s+40>>2]+10|0],E=E+145840|0,l[17+(WA+145840|0)|0]|l[A[E+8>>2]+10|0]!=23?(s=c,c=e,e=E):s=p+145968|0,E=l[A[c+8>>2]+15|0];i:if(T)E=l[A[AA+96>>2]+(l[A[e+8>>2]+15|0]+P(E,10)|0)|0],l[e+17|0]!=8|(254&l[c+17|0])!=4||(E=8&l[A[s+8>>2]+4|0]?E-15|0:E);else{if(Z=A[AA+100>>2],WA=l[A[e+8>>2]+15|0],s=l[e+20|0],E=l[Z+(WA+P(s|l[c+20|0]?(0|E)==1:E,10)|0)|0],!s|!(32&l[0|AA]))break i;E=l[1+(Z+P(WA,10)|0)|0]+E>>>1|0}s=I>>>1|0,WA=!T,I=(0|(E=(0|P(A[130104+(T?(0|T)==1?4:8:0)>>2],E))/128|0))<=8?8:E;i:if((0|KA)!=7)ft&&(I=A[AA+200>>2]+I|0);else{if(I=(E=A[AA+200>>2])+I|0,!ft)break i;I=((0|E)/2|0)+I|0}E=s&WA|(0|f)==27,(s=M[304+(AA+(KA<<1)|0)>>1])||(s=M[AA+316>>1]),I=P(s<<16>>16,I),(T=l[7+(s=p+145840|0)|0])&&(KA=l[A[144464+(T<<2)>>2]+14|0])&&(I=(0|P(I,KA))/100|0),(E|(0|a)==2)==1&&(2097152&(a=A[AA+12>>2])||(I=(0|P(262144&a?282:256+((280-(l[A[8+(p+145840|0)>>2]+14|0]<<1)|0)/3|0)&65535,I))/256|0)),KA=p+145840|0,a=P(A[32526],A[AA+196>>2]),ft=(0|at)!=2?256:(0|((0|a)>(0|I)?I:a))/128|0,A[KA+12>>2]=ft,(a=l[KA+16|0])>>>0>=19&&(Pn(84371,28,Me),g[KA+16|0]=0,T=l[s+7|0],a=0),I=a+1|0,(a=255&T)?(Li(a,o+8|0),a=Tn(A[o+132>>2])):a=A[129280+((255&I)<<2)>>2],E=p+145840|0,1&(m|cA)&&(s=145840+(p=hA<<5)|0,m=l[0|a],a=l[E+21|0],a=((0|P(m,l[E+22|0]-a|0))/256|0)+a|0,g[s+22|0]=a,r=(a-(r=(0|a)==255?255:r)|0)>16?a-16|0:r,g[s+21|0]=r,s=0,(0|r)<(0|a)&&(g[KA+16|0]=I,s=2),A[12+(r=p+145840|0)>>2]=ft,g[r+16|0]=s,a=l[le+19|0],g[r+19|0]=l[r+17|0]!=3&&a>>>0>18?18:a),r=(0|at)!=2,s=-2&(a=M[e>>1]),b[e>>1]=s;i:{c:{o:switch(l[e+17|0]-3|0){case 5:if(l[c+17|0]==2)break i;s=1|a;break c;case 0:break o;default:break i}if(b[e>>1]=1|a,l[c+17|0]!=2&&A[A[e+8>>2]>>2]!=12146)break i}b[e>>1]=s}r?(0|(e=r<<4))<=((a=l[E+22|0])-(s=l[E+21|0])|0)||(s=(0|(e=a-e|0))>0?e:0,g[E+21|0]=s):(a=l[E+22|0],s=l[E+21|0]),e=255&s,r=((0|P(l[A[129280+(l[KA+16|0]<<2)>>2]+127|0],a-e|0))/256|0)+e|0,m=0,cA=0;break A}s=A[12+(a+145840|0)>>2],A[c+12>>2]=s,(0|at)==3&&(s=A[32526],A[c+12>>2]=s),a=r;s:switch(E-5|0){case 0:A[c+12>>2]=(P(s,160)>>>0)/100;break r;case 2:break s;default:break e}A[c+12>>2]=(P(s,120)>>>0)/100}a=r}cA=0,g[16+(e=p+145840|0)|0]=0,s=e,a=(e=255&a)-16|0,g[s+21|0]=e>>>0>=a>>>0?a:0}if(!(A[36423]>(0|i)))break}if(J=o+160|0,15&(s=A[47197])|A[36456]){e=0,c=0,J=a=J-80|0;A:if((r=A[33222])||(A[33223]=500,r=Ct(500),A[33222]=r,r)){if(!((A[36423]-2|0)<2)){for(e=s>>8,AA=128&s?0:e,T=e&s<<24>>31,E=2&s,s=a+32|1,p=1;;){if(rs(a,A[8+(i=145840+(hA=p<<5)|0)>>2],i,E,a+72|0),e=a+32|0,(13&(r=l[i+20|0]))==1&&(g[a+32|0]=32,e=s),!AA|(0|AA)!=32&!!(0|r)|p>>>0<2||(Gt(a+76|0,a),A[a+76>>2]-880>>>0>4294967103||(e=Pr(AA,e)+e|0)),4&l[0|i]&&((r=l[3+(hA+145840|0)|0])>>>0<2||(r=r>>>0>=5?5:r,r=E?r>>>0>3?712:716:g[r+94144|0],A[a+76>>2]=r,e=Pr(r,e)+e|0)),I=0,A[a+72>>2]=0,l[0|(r=a)])for(;r=Gt(a+76|0,r)+r|0,A[a+72>>2]>>>I-1&1|!T|(0|I)<=0||(m=A[a+76>>2])-880>>>0>4294967103||ki(m)&&(e=Pr(T,e)+e|0),I=I+1|0,e=Pr(A[a+76>>2],e)+e|0,l[0|r];);if(l[A[i+8>>2]+10|0]!=21&&(8&(r=M[i>>1])&&(e=rs(e,A[36128],i,E,0),r=M[i>>1]),!(4&r)|l[17+(hA+145840|0)|0]==2||(e=rs(e,A[36136],i,E,0)),(r=l[7+(hA+145840|0)|0])&&(e=rs(e,A[144464+(r<<2)>>2],i,E,0))),(e=(i=e-(a+32|0)|0)+c|0)>>>0<uA[33223])r=A[33222];else{if(r=e+500|0,A[33223]=r,!(r=Ur(A[33222],r))){A[33223]=0,r=86135;break A}A[33222]=r}if(g[(I=i)+(i=a+32|0)|0]=0,qe(r+c|0,i),c=e,!((0|(p=p+1|0))<(A[36423]-2|0)))break}if(!r){r=86135;break A}}g[e+r|0]=0}else A[33223]=0,r=86135;J=a+80|0,15&l[188788]&&(A[t>>2]=r,fr(A[47195],84367,t)),(e=A[36456])&&lt[0|e](r)}l[190280]?(A[36423]=0,e=1):(ce(0),(e=A[t+8>>2])?(J=r=J+-64|0,ar(r,e,60),Fi(r,1),a=0,(e=Tt(r,0))&&(a=e,l[202976]&&(a=Tt(202976,2))),J=r- -64|0,A[44468]=a):a=A[44468],e=1,a&&(r=A[32972],(a=Ct(1344))&&(r=wt(a,r,1344),a=216192+(A[50758]<<4)|0,A[a>>2]=11,A[a+8>>2]=r,r=A[50758]+1|0,A[50758]=(0|r)<=169?r:0),A[44468]=0))}else e=0,g[190280]=0;else e=0,A[36423]=0,A[50758]=0,A[50757]=0;return J=t+16|0,e}function OA(e,t){var r=0,a=0,s=0,i=0;r=1073741825;A:{e:{r:{s:{i:{c:{o:{u:{l:{n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{W:{V:{M:{B:{D:{F:{q:{Y:{Z:{S:{sA:{H:{yA:{U:{d:{f:{$:{k:{AA:{I:{a:{WA:{J:{t:{fA:{R:{pA:{hA:{VA:{lA:{N:{EA:{v:{MA:{_:{mA:{GA:{jA:{DA:{QA:{TA:{PA:{zA:{FA:{CA:{UA:{eA:{SA:{KA:{NA:{OA:{G:{bA:{ZA:{he:{me:{Ce:{be:{Ie:{we:{ke:{xe:{Be:{ve:{ye:{Ee:{Me:{Ge:{De:{Qe:{Te:{Pe:{ze:{Fe:{Se:{Ne:{Oe:{Le:{Ye:{He:{Re:{We:{Ve:{je:switch(0|t){case 0:t=e-9>>>0<5?1073741825:0,t=(e=(0|e)==133)?1073741825:t;break F;case 1:g:{Q:{T:{P:{z:{O:{X:{j:{tA:{iA:{rA:{nA:{cA:{gA:{if((0|(t=-256&e))<=2047){if(!t)break gA;if((0|t)==1536)break cA;if((0|t)!=1792||(r=0,a=1,(0|e)!=1807))break g;break t}if((0|t)<=69631){if((0|t)==2048)break nA;if((0|t)!=8192)break g;switch(r=131076,e-8204|0){case 1:break rA;case 0:break t;default:break iA}}if((0|t)==69632)break tA;if((0|t)!=917504)break g;switch(r=8388608,e-917505|0){case 62:break T;case 58:break P;case 57:break z;case 45:break O;case 43:break X;case 32:break j;case 0:break t;default:break Q}}if(r=16,(0|e)!=173)break g;break t}if(r=0,a=1,e-1536>>>0<6)break t;a=(0|e)==1757,t=(e=(0|e)==1564)?2:0;break D}if(r=0,a=1,(0|e)!=2274)break g;break t}return $=64,4}if(r=1073741826,(-2&e)==8206)break t;if(e-8234>>>0<5)return $=0,2;if(r=128,e-8289>>>0<4||(r=2,e-8294>>>0<4))break t;if(r=8388608,e-8298>>>0>=6)break g;break t}t=!(e-69821&-17),e=0;break B}$=536870976;break M}$=268435520;break M}$=-2147483584;break M}$=134217792;break M}$=67108928;break M}$=1073741888;break M}if(r=131072,a=64,e-917536>>>0<96)break t}break a;case 2:g:{Q:{T:{P:{z:{O:{X:{if((0|(t=-256&e))<=130303){if((0|t)<=127743){if((0|t)<=64767){if((0|t)<=11007){if((0|t)==8192)break X;if((0|t)!=9216)break g;if(e-9255>>>0>=25)break O;break I}if((0|t)==11008)break z;if((0|t)!=11776||(r=-2147483648,e-11845>>>0>=59))break g;break t}if((0|t)<=126975){if((0|t)==64768)break P;if((0|t)!=65280||(r=4194304,e-65520>>>0>=9))break g;break t}if((0|t)==126976|(0|t)==127232|(0|t)==127488)break J;break g}if((0|t)<=129023){if((0|t)<=128255){if((0|t)==127744|(0|t)==128e3)break J;break g}if((0|t)==128256|(0|t)==128512|(0|t)==128768)break J;break g}if((0|t)<=129535){if((0|t)==129024|(0|t)==129280)break J;break g}if((0|t)==129536|(0|t)==129792|(0|t)==130048)break J;break g}if((0|t)<=919039){if((0|t)<=917759){if((0|t)<=130815){if((0|t)==130304)break J;if((0|t)!=130560)break g;break J}if((0|t)==130816)break J;if((0|t)!=917504)break g;if((-128&e)!=917632)break T;break AA}if((0|t)<=918271){if((0|t)==917760)break Q;if(r=4194304,(0|t)!=918016)break g;break t}if((0|t)==918272|(0|t)==918528)break AA;if(r=4194304,(0|t)!=918784)break g;break t}if((0|t)<=920319){if((0|t)<=919551){if((0|t)==919040)break AA;if(r=4194304,(0|t)!=919296)break g;break t}if((0|t)==919552|(0|t)==919808)break AA;if(r=4194304,(0|t)!=920064)break g;break t}if((0|t)<=920831){if((0|t)==920320)break AA;if(r=4194304,(0|t)!=920576)break g;break t}if((0|t)==920832|(0|t)==921088)break AA;if(r=4194304,(0|t)!=921344)break g;break t}if(r=4194304,(0|e)!=8293)break g;break t}if(r=-2147483648,e-9291>>>0>=21)break g;break t}if((-16&e)==11248|e-11219>>>0<25|(0|e)==11209|e-11194>>>0<3||(0|(t=-2&e))==11124)break I;if(r=-2147483648,(0|t)!=11158)break g;break t}if(r=65536,e-64976>>>0>=32)break g;break t}if((0|e)==917504)break AA;if(r=4194304,e-917506>>>0>=30)break g;break t}if(r=4194304,e>>>0>917999)break t}t=(e=!(65534&~e))>>>16|0,e<<=16;break B;case 6:g:{Q:{T:{P:{z:{O:{X:{j:{tA:{iA:{rA:{nA:{if((0|(t=-256&e))<=7679){if((0|t)<=767){if(!t)break nA;if((0|t)==256)break rA;if((0|t)!=512)break a;if((0|e)!=585)break iA;break V}if((0|t)==768)break tA;if((0|t)==1024)break j;if((0|t)!=7424||(r=16777216,(0|e)!=7574))break a;break t}if((0|t)<=119807){if((0|t)==7680)break X;if((0|t)==8448)break O;if((0|t)!=65280||(r=256,e-65345>>>0>=6))break a;break t}if((0|t)<=120319){if((0|t)==119808)break z;if((0|t)!=120064)break a;if(e>>>0>=120070)break P;break k}if((0|t)==120320)break T;if((0|t)!=120576)break a;if(e>>>0>=120597)break Q;break k}if(r=768,e-97>>>0<6)break t;if(r=16777216,e-105>>>0>=2)break a;break t}r=(t=(0|e)==329)>>>9|0,t=(e=(0|e)==303)?16777216:t<<23;break W}if((0|e)==616)break V;if(r=16777216,(0|e)!=669)break a;break t}switch(r=128,e-976|0){case 35:break g;case 0:case 1:case 2:case 5:case 32:case 33:break t}if((-2&e)!=1012)break a;break t}a=(e=!(e-1110&-3))>>>8|0,e<<=24;break L}a=(t=(0|e)==7883)>>>8|0,t=(e=(0|e)==7725)?16777216:t<<24;break D}if(e-8458>>>0<10)break k;if((t=e-8495|0)>>>0<11)break Ve;break fA}if((0|(t=-2&e))==119842)break $;if(e-119808>>>0<85)break k;if(e-119894>>>0<2|e-119946>>>0<2)break $;if((0|e)==119995|e-119896>>>0<69|e-119982>>>0<12)break k;if((0|t)==119998)break $;if(e-119997>>>0<7)break k;if(r=16777344,(0|t)==120050)break t;if(r=128,e>>>0<=120004)break a;break t}if((-2&e)==120102)break $;if(e-120094>>>0<28)break k;P:{if((0|e)<=120257){if(e-120154>>>0<2)break $;if(r=16777344,e-120206>>>0>=2)break P;break t}if(e-120258>>>0<2)break $;if(r=16777344,e-120310>>>0<2)break t}if(r=128,e>>>0<=120145)break a;break t}if(e-120362>>>0<2|e-120414>>>0<2)break $;if(r=16777344,e-120466>>>0<2)break t;if(e-120540>>>0<31|e>>>0>120571|e>>>0<120486)break k;if(r=128,e-120514>>>0>=25)break a;break t}if(e-120772>>>0<8|e-120746>>>0<25|e-120714>>>0<31|e-120688>>>0<25||(0|e)!=120597&e>>>0<120629|e-120656>>>0<31)break k;if(r=128,e-120630>>>0<25)break t;break a}break V;case 7:g:{Q:{T:{P:{z:{O:{X:{j:{tA:{iA:{rA:{nA:{cA:{gA:{x:{oA:{aA:{K:{uA:{dA:{IA:{wA:{if((0|(t=-256&e))<=11263){if((0|t)<=3583){if((0|t)<=1535){if((0|t)==512)break wA;if((0|t)==768)break IA;if((0|t)!=1280||(r=4096,(0|e)!=1369))break a;break t}if((0|t)==1536)break dA;if((0|t)==1792)break uA;if((0|t)!=2304||(r=4096,(0|e)!=2417))break a;break t}if((0|t)<=7167){if((0|t)==3584)break K;if((0|t)==6144)break aA;if((0|t)!=6656||(r=8192,(0|e)!=6823))break a;break t}if((0|t)==7168)break oA;if((0|t)==7424)break x;if((0|t)!=8192)break a;if(r=16793600,!(t=e-8305|0))break t;if((0|t)==14)break gA;break cA}if((0|t)<=43263){if((0|t)<=40959){if((0|t)==11264)break nA;if((0|t)==11776)break rA;if((0|t)!=12288)break a;switch(r=8192,e-12293|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:break tA;case 0:case 44:case 45:case 46:case 47:case 48:break t;default:break iA}}if((0|t)==40960)break j;if((0|t)==42496)break X;if((0|t)!=42752)break a;if(e-42775>>>0>=9)break O;break f}if((0|t)<=65279){if((0|t)==43264)break z;if((0|t)==43520)break P;if((0|t)!=43776||(r=20480,(-4&e)!=43868))break a;break t}if((0|t)==65280)break T;if((0|t)==92928)break Q;if((0|t)!=93952)break a;if(r=4096,e-94099>>>0<13)break t;if(r=8192,(-2&e)!=94176)break a;break t}if(r=16797696,(0|e)==690)break t;if(e-688>>>0<9)return $=0,20480;if(e-697>>>0<7)break f;if((0|(t=-2&e))==704)return $=0,20480;if(r=4096,e-710>>>0<10||(r=12288,(0|t)==720)||(r=20480,e-736>>>0<5))break t;r=(e=(-3&e)==748)>>>20|0,e<<=12;break y}t=(0|e)==890?20480:0,t=(e=(0|e)==884)?4096:t;break F}if(r=8192,(0|e)==1600)break t;if(r=4096,e-1765>>>0>=2)break a;break t}if(r=4096,(-2&e)==2036)break t;if(r=8192,(0|e)!=2042)break a;break t}t=(e=!(e-3654&-129))>>>19|0,e<<=13;break B}if(r=8192,(0|e)!=6211)break a;break t}if(r=12288,(0|e)==7291)break t;if(r=4096,e-7288>>>0>=6)break a;break t}if(r=16797696,(0|e)==7522||(r=20480,e-7468>>>0<63))break t;switch(r=16384,e-7588|0){default:if((0|e)==7544)break t;case 1:case 2:case 3:if(e-7579>>>0>=37)break a;break t;case 0:case 4:}return $=0,16793600}return $=0,16384}if(r=16384,e-8336>>>0>=13)break a;break t}t=(r=(0|e)==11389)>>>18|0,r=(e=(0|e)==11388)?16793600:r<<14;break w}if(r=-2147479552,(0|e)!=11823)break a;break t}if(e-12445>>>0<2)break t;if((0|e)==12540)break g}if(e-12541>>>0>=2)break a;break t}if(r=8192,(0|e)!=40981)break a;break t}if((0|e)==42508)break E;if((0|e)==42623)break f;if(r=20480,(-2&e)!=42652)break a;break t}if((0|e)==42864)return $=0,16384;if((0|e)==42888)break f;if(r=20480,(-2&e)!=43e3)break a;break t}r=(t=(0|e)==43494)>>>19|0,t=(e=(0|e)==43471)?8192:t<<13;break W}if((0|e)==43632||(0|e)==43741)break E;if(r=8192,e-43763>>>0>=2)break a;break t}if(r=12288,(0|e)==65392)break t;if(r=135168,(-2&e)!=65438)break a;break t}if(r=8192,(-2&e)==92994)break t;break a}return $=0,12288;case 8:r=128;g:{Q:{T:{P:{z:{O:{X:{j:{tA:{if((0|(t=-256&e))<=12543){if((0|t)<=5887){if((0|t)<=3583){if(!t)break tA;if((0|t)!=1536||(t=8388608,(0|e)!=1651))break v;break lA}if((0|t)==3584)break j;if((0|t)!=4352||(r=4194304,e-4447>>>0>=2))break v;break N}if((0|t)<=8447){if((0|t)==5888)break X;if((0|t)!=6400||(t=e-6581|0)>>>0>=6)break v;r=A[(t=81432+(t<<3)|0)>>2],a=A[t+4>>2];break N}if((0|t)==8448)break O;if((0|t)!=12288||(t=2048,(0|e)!=12294))break v;break lA}if((0|t)<=68863){if((0|t)<=63999){if((0|t)==12544)break z;if((0|t)!=43520)break v;if((t=e-43701|0)>>>0<8)break Q;break EA}if((0|t)==64e3)break g;if((0|t)!=65280||(t=4194304,(0|e)!=65440))break v;break lA}if((0|t)<=100095){if((0|t)==68864)break P;if((0|t)!=70400||(r=8192,(0|e)!=70493))break v;break hA}if((0|t)==100096)break T;if((0|t)!=126464)break v;break N}a=(t=!(e-170&-17))>>>18|0,r=t<<14;break N}if(r=33554432,e-3648>>>0<5)break N;if(t=0,i=33554432,(0|e)==3759)break lA;if(e-3776>>>0>=5)break v;break N}if(r=8388608,e-6051>>>0>=2)break v;break N}if(e-8501>>>0>=4)break v;break N}if(t=4194304,(0|e)!=12644)break v;break lA}if(r=4096,(-2&e)!=68898)break v;break N}if(r=2048,e-100333>>>0<5)break N;break v}if(r=33554432,!(211>>>t&1))break EA;break N}if((t=e-64014|0)>>>0>=28)break v;r=A[(t=81480+(t<<3)|0)>>2],a=A[t+4>>2];break N;case 10:g:{Q:{T:{P:{z:{O:{if((0|(t=-256&e))<=119807){if((0|t)<=8447){if(!t)break O;if((0|t)!=768)break a;switch(r=128,e-976|0){case 0:case 1:case 2:case 36:case 37:break t;default:break a}}if((0|t)==8448)break z;if((0|t)!=65280||(r=256,e-65313>>>0>=6))break a;break t}if((0|t)<=120319){if((0|t)==119808)break P;if((0|t)!=120064)break a;if(e>>>0>=120070)break T;break k}if((0|t)==120320)break Q;if((0|t)!=120576)break a;if(e-120772>>>0>=8)break g;break k}if(r=768,e-65>>>0>=6)break a;break t}switch(r=128,e-8450|0){case 0:case 5:break t}if(e-8458>>>0<10)break k;if((t=e-8469|0)>>>0<20)break We;if((-4&e)==8508)break t;break MA}if(e-119982>>>0<12|e>>>0>120004|e-119977>>>0<4|e-119973>>>0<2||(0|e)==119970|(-2&e)==119966|e-119808>>>0<85)break k;if(r=128,e-119894>>>0>=71)break a;break t}if(e-120138>>>0<7|e>>>0>120145|(0|e)==120134|e-120128>>>0<5||e-120123>>>0<4|e-120094>>>0<28|(0|e)!=120070&e>>>0<120075|e-120086>>>0<7)break k;if(r=128,e-120077>>>0>=8)break a;break t}if(e-120540>>>0<31|e>>>0<120486)break k;if(r=128,e-120488>>>0>=25)break a;break t}if(e-120714>>>0<31|e-120598>>>0<31)break k;if(r=128,e-120656>>>0<31)break t;break a;case 11:g:{Q:{T:{P:{z:{O:{X:{j:{tA:{iA:{rA:{nA:{cA:{gA:{x:{oA:{aA:{if((0|(t=-256&e))<=43263){if((0|t)<=3839){if((0|t)<=3071){if((0|t)==2304)break aA;if((0|t)!=2816)break d;if((0|e)>3005)break x;if((0|e)!=2878)break oA;return $=0,132096}if((0|t)==3072)break gA;if((0|t)!=3328)break d;switch(r=132096,e-3535|0){case 0:case 16:break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break d;default:break cA}}if((0|t)<=6911){if((0|t)==3840)break nA;if((0|t)!=4096)break d;if(r=1024,e-4139>>>0<2)break t;switch(e-4145|0){case 0:case 7:case 10:case 11:case 37:case 38:case 49:case 54:case 55:case 82:case 83:break t;case 86:case 87:case 88:case 89:case 90:case 91:case 94:case 105:case 106:break g;default:break rA}}if((0|t)==6912)break iA;if((0|t)==7168)break tA;if((0|t)!=12288||(r=135168,(-2&e)!=12334))break d;break t}if((0|t)<=70399){if((0|t)<=43775){if((0|t)==43264)break j;if((0|t)!=43520)break d;return $=0,e-43643&-3?1024:4096}if((0|t)==43776)break X;if((0|t)==69888)break O;if((0|t)!=70144||(r=4096,(0|e)!=70197))break d;break t}if((0|t)<=70911){if((0|t)==70400)break z;if((0|t)!=70656)break d;t=(0|e)==70845?132096:1024,t=(e=(0|e)==70832)?132096:t;break F}if((0|t)==70912)break P;if((0|t)==71168)break T;if((0|t)!=119040)break d;switch(r=131072,e-119141|0){case 8:break f;case 1:break a;case 0:break t;default:break Q}}t=(0|e)==2519?132096:1024,t=(e=(0|e)==2494)?132096:t;break F}if(r=132096,(0|e)!=2903)break d;break t}if((0|e)==3006)return $=0,132096;if(r=132096,(0|e)!=3031)break d;break t}if((e=e-3266|0)>>>0>20||(r=132096,!(1<<e&1572865)))break d;break t}if((0|e)==3390)break t;if((0|e)!=3415)break d;break t}if(r=4096,(-2&e)!=3902)break d;break t}r=(e=(0|e)==4252)>>>22|0,e<<=10;break y}switch(r=1024,e-6965|0){default:if((0|e)==6916)break t;break;case 0:case 6:break t;case 1:case 2:case 3:case 4:case 5:}if(e-6973>>>0<5)break t;switch(e-6979|0){case 1:break f;case 0:break t}if((0|e)==7042|(0|e)==7073|(-2&e)==7078)break t;if((0|e)==7082)break f;if((0|e)==7143|e-7146>>>0<3)break t;r=(e=(0|e)==7150)>>>22|0,e<<=10;break y}t=(0|e)==7415?4096:1024,t=(e=(0|e)==7393)?4096:t;break F}t=(0|e)==43456?4096:1024,t=(e=(0|e)==43347)?4096:t;break F}if(r=4096,(0|e)!=44012)break d;break t}if(r=4096,(0|e)!=70080)break d;break t}r=132096;z:switch(e-70462|0){case 0:case 25:break t;case 15:break z;default:break d}break f}if(r=132096,(0|e)!=71087)break d;break t}if(r=4096,(0|e)!=71350)break d;break t}if(r=135168,e-119150>>>0<5)break t;break d}break f;case 12:t=((0|e)==8419)<<6,e=0;break B;case 13:g:{Q:{T:{P:{z:{O:{X:{j:{tA:{iA:{rA:{nA:{cA:{gA:{x:{oA:{aA:{K:{uA:{dA:{IA:{wA:{LA:{kA:{YA:{XA:{qA:{JA:{_A:{$A:{Ae:{ee:{te:{re:{ae:{xA:{se:{ie:{ne:{oe:{le:{HA:{BA:{RA:{ce:{ge:{ue:{vA:{de:{fe:{pe:{if((0|(t=-256&e))<=43775){if((0|t)<=5887){if((0|t)<=2559){if((0|t)<=1535){if((0|t)==768)break pe;if((0|t)==1024)break fe;if((0|t)!=1280)break a;if(e-1425>>>0>=17)break de;break f}if((0|t)<=2047){if((0|t)==1536)break vA;if((0|t)!=1792)break a;if(r=1024,(0|e)==1809)break t;if((-16&e)!=1840)break ue;return $=0,5120}if((0|t)==2048)break ge;if((0|t)!=2304)break a;if(e>>>0>=2307)break ce;break d}if((0|t)<=3583){if((0|t)<=3071){if((0|t)==2560)break RA;if((0|t)!=2816)break a;switch(r=1024,e-2876|0){case 0:break f;case 3:break t;case 1:case 2:break HA;default:break BA}}if((0|t)==3072)break le;if((0|t)!=3328)break a;if((0|(t=-2&e))!=3328)break oe;break d}if((0|t)<=4095){if((0|t)==3584)break ne;if((0|t)!=3840)break a;if((0|(t=-2&e))!=3864)break ie;break f}if((0|t)==4096)break se;if((0|t)!=4864||(r=1024,(0|e)!=4959))break a;break t}if((0|t)<=8191){if((0|t)<=6655){if((0|t)==5888)break xA;if((0|t)==6144)break ae;if((0|t)!=6400)break a;if((t=e-6432|0)>>>0<=18&&(r=1024,1<<t&262535))break t;if(r=4096,e-6457>>>0>=3)break a;break t}if((0|t)<=7167){if((0|t)==6656)break re;if((0|t)!=6912)break a;if(r=1024,(-4&e)==6912)break t;if((0|e)!=6964)break te;break f}if((0|t)==7168)break ee;if((0|t)!=7424)break a;if(r=4096,e-7620>>>0<12||(r=1024,e-7655>>>0<14))break t;if((e=e-7669|0)>>>0>=11)break a;t=A[(e=82104+(e<<3)|0)>>2];break h}if((0|t)<=42495){if((0|t)<=11519){if((0|t)==8192)break Ae;if((0|t)!=11264||(r=4096,e-11503>>>0>=3))break a;break t}if((0|t)==11520)break $A;if((0|t)!=12288)break a;if(e-12330>>>0>=4)break _A;break f}if((0|t)<=43263){if((0|t)==42496)break JA;if((0|t)!=43008)break a;if(e-43045>>>0>=2)break qA;break d}if((0|t)==43264)break XA;if((0|t)!=43520)break a;switch(r=1024,e-43561|0){case 83:case 150:case 152:break f;case 0:case 1:case 2:case 3:case 4:case 5:case 8:case 9:case 12:case 13:case 26:case 35:case 135:case 137:case 138:case 139:case 142:case 143:case 149:break t;default:break YA}}if((0|t)<=71423){if((0|t)<=69375){if((0|t)<=66047){if((0|t)==43776)break kA;if((0|t)==64256)break LA;if((0|t)!=65024)break a;if(r=536870912,e-65024>>>0<15||(a=64,(0|e)==65039))break t;if(r=4096,a=0,(-16&e)!=65056)break a;break t}if((0|t)<=68095){if((0|t)==66048)break wA;if((0|t)!=66304||(r=1024,e-66422>>>0>=5))break a;break t}if((0|t)==68096)break IA;if((0|t)!=68864||(r=5120,(-4&e)!=68900))break a;break t}if((0|t)<=70399){if((0|t)<=69887){if((0|t)==69376)break dA;if((0|t)!=69632)break a;if(e-69688>>>0>=14)break uA;break d}if((0|t)==69888)break K;if((0|t)!=70144)break a;if(r=1024,e-70191>>>0<3)break t;switch(e-70196|0){case 2:break f;case 0:case 3:case 10:break t;case 1:case 4:case 5:case 6:case 7:case 8:case 9:break oA;default:break aA}}if((0|t)<=70911){if((0|t)==70400)break x;if((0|t)!=70656)break a;if((-8&e)!=70712)break gA;break d}if((0|t)==70912)break cA;if((0|t)!=71168)break a;if(r=1024,e-71219>>>0<8)break t;switch(e-71229|0){case 2:break f;case 0:case 3:break t;case 1:break rA;default:break nA}}if((0|t)<=92927){if((0|t)<=72703){if((0|t)==71424)break Ne;if((0|t)==71680)break iA;if((0|t)!=72192)break a;if(e-72193>>>0>=10)break tA;break d}if((0|t)<=73215){if((0|t)==72704)break j;if((0|t)!=72960)break a;if((t=e-73009|0)>>>0<19)break Fe;break _}if((0|t)==73216)break X;if((0|t)!=92672||(r=4096,e-92912>>>0>=5))break a;break t}if((0|t)<=122879){if((0|t)<=113663){if((0|t)==92928)break O;if((0|t)!=93952||(r=4096,e-94095>>>0>=4))break a;break t}if((0|t)==113664)break z;if((0|t)!=119040)break a;switch(r=4096,e-119143|0){case 0:case 1:case 2:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 67:case 68:case 69:case 70:break t;default:break a}}if((0|t)<=125183){if((0|t)==122880)break P;if((0|t)!=124928||(r=4096,e-125136>>>0>=7))break a;break t}if((0|t)==125184)break T;if((0|t)!=917760||(r=536870912,e-917760>>>0>=240))break a;break t}if(e-768>>>0<69)break f;if(r=21504,(0|e)==837)break t;if(e-838>>>0<9)break f;if(r=4194304,(0|e)==847)break t;if((-8&e)==848)break f;if(r=4096,e-861>>>0>=6)break a;break t}if(r=4096,e-1155>>>0>=5)break a;break t}if(r=4096,e-1443>>>0<13||(r=5120,e-1456>>>0<14))break t;if((e=e-1471|0)>>>0>=9)break a;t=A[(e=81944+(e<<3)|0)>>2];break h}if(e-1552>>>0<11)break d;if(r=5120,e-1611>>>0<8)break t;if(e-1619>>>0<4)break d;switch(e-1623|0){case 1:break f;case 0:break t;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 25:case 127:case 128:case 129:case 130:case 131:case 132:case 133:break d}if(r=4096,e-1759>>>0<2)break t;if((t=e-1761|0)>>>0<8)break Re;break mA}if(e-1856>>>0<11)break f;if(r=5120,e-1958>>>0<11)break t;if(r=4096,e-2027>>>0>=9)break a;break t}switch(r=1024,(-2&e)-2070|0){case 2:break f;case 0:break t}if(e-2260>>>0<12|e-2089>>>0<4|e-2075>>>0<9|e-2085>>>0<3)break d;if(e-2275>>>0<7)return $=0,5120;if(r=4096,e-2282>>>0<6||(r=5120,e-2288>>>0<15))break t;if(r=1024,(0|e)!=2303)break a;break t}switch(r=1024,e-2362|0){case 2:break f;case 0:break t}if(e-2369>>>0<8)break d;switch(r=4096,e-2381|0){case 0:case 4:case 5:case 6:case 7:case 111:break t;case 8:case 9:case 10:case 21:case 22:case 52:break d}if(e-2497>>>0<4)break d;if((0|e)==2509)break t;if(r=1024,(-2&e)!=2530)break a;break t}if(e-2561>>>0<2)break d;switch(r=4096,e-2620|0){case 0:case 17:case 128:case 145:break t;case 5:case 6:case 11:case 12:case 15:case 16:case 21:case 52:case 53:case 57:case 69:case 70:case 133:case 134:case 135:case 136:case 137:case 139:case 140:case 166:case 167:case 190:case 191:case 192:break d}if(e-2813>>>0>=3)break a;break t}if((0|e)==2817)break d}if(e-2881>>>0<4)break d;switch(r=4096,e-2893|0){case 0:break t;case 9:break d}if((-2&e)==2914)break d;switch(r=1024,e-3008|0){default:if((0|e)!=2946)break a;break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:break a;case 0:break t;case 13:}break f}switch(r=1024,e-3072|0){case 77:case 188:case 205:break f;case 0:case 62:case 63:case 64:case 70:case 71:case 72:case 74:case 75:case 76:case 85:case 86:case 98:case 99:case 129:case 191:case 198:case 204:break t}if((-2&e)!=3298)break a;break t}if(r=4096,e-3387>>>0<2)break t;if(e-3393>>>0<4)break d;if((0|e)==3405)break t;if((0|t)==3426)break d;switch(e-3530|0){case 0:break t;case 8:case 9:case 10:case 12:break d;default:break a}}if((t=e-3633|0)>>>0<10)break He;break GA}if((r=e-3893|0)>>>0>4|!(1<<r&21))break jA;break f}switch(r=1024,e-4141|0){case 10:case 12:case 13:break f;case 0:case 1:case 2:case 3:case 5:case 6:case 7:case 8:case 9:case 16:case 17:case 43:case 44:case 49:case 50:case 51:case 68:case 69:case 70:case 71:case 85:case 88:case 89:break t}t=(r=(0|e)==4253)>>>22|0,r=(e=(0|e)==4237)?4096:r<<10;break w}r=1024;xA:{switch(e-5906|0){case 0:case 1:case 32:case 33:break t;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:break xA}switch(e-5970|0){case 0:case 1:case 32:case 33:break t;default:break xA}}if(r=4194304,(-2&e)==6068)break t;if((t=e-6071|0)>>>0<16)break Ye;break DA}if(r=536870912,e-6155>>>0<3||(r=67109888,e-6277>>>0<2))break t;if(r=1024,(0|e)!=6313)break a;break t}if(e-6679>>>0<2)break d;switch(r=1024,e-6683|0){case 0:case 59:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 71:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 88:case 89:break t}if(r=4096,e-6832>>>0<14)break t;if((e=e-6773|0)>>>0>=11)break a;t=A[(e=82016+(e<<3)|0)>>2];break h}if(e-6966>>>0<5)break t;switch(e-6972|0){case 0:case 6:break t}if(e-7019>>>0<9)break f;switch(e-7040|0){case 43:break f;case 0:case 1:case 34:case 35:case 36:case 37:case 40:case 41:case 44:case 45:case 104:case 105:case 109:case 111:case 112:case 113:break t;default:break a}}if(r=1024,e-7212>>>0<8)break t;switch(r=12288,e-7222|0){case 1:break f;case 0:break t}if(e-7380>>>0<13)break f;switch(r=4096,e-7376|0){case 0:case 1:case 2:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 29:case 36:break t}if((-2&e)!=7416)break a;break t}if(r=128,e-8400>>>0<13)break t;if((e=e-8417|0)>>>0>=15)break a;t=A[(e=82192+(e<<3)|0)>>2];break h}if(r=1024,(-32&e)!=11744)break a;break t}if(r=4096,e-12441>>>0>=2)break a;break t}if((0|e)==42607)break f;if(e-42612>>>0<8)break d;if((0|(e&=-2))==42620)break f;if((0|e)==42654)break g;if(r=4096,(0|e)!=42736)break a;break t}switch(r=4096,e-43204|0){case 0:break t;case 1:break d}if(e-43232>>>0>=18)break a;break t}if(e-43302>>>0<5)break d;if(e-43307>>>0<3)break f;if(e-43335>>>0<11|e-43392>>>0<3)break d;if(r=4096,(0|e)==43443||(r=1024,e-43446>>>0<4))break t;a=(t=(0|e)==43493)>>>20|0,t=(e=(0|e)==43452)?1024:t<<12;break D}if((-2&e)==43756)break t;if(r=4096,(0|e)!=43766)break a;break t}r=1024;kA:switch(e-44005|0){case 0:case 3:break t;case 8:break kA;default:break a}break f}if(r=5120,(0|e)!=64286)break a;break t}if(r=4096,(0|e)!=66272)break a;break t}if((-4&e)==68108)break d;if((t=e-68097|0)>>>0<6)break Le;break QA}if(r=4096,e-69446>>>0>=11)break a;break t}if(e-69811>>>0<4)break d;if(r=1024,(0|e)==69633)break t;if(r=4096,e-69817>>>0>=2)break a;break t}switch(r=1024,e-69888|0){case 51:case 52:case 115:break f;case 0:case 1:case 2:case 39:case 40:case 41:case 42:case 43:case 45:case 46:case 47:case 48:case 49:case 50:break t}if((-2&e)==70016|e-70070>>>0<9)break t;if(r=4096,e-70090>>>0>=3)break a;break t}if((0|e)==70367)break t}if(e-70371>>>0<6)break t;if(r=4096,e-70377>>>0>=2)break a;break t}if((-2&e)==70400)break d;r=4096;x:switch(e-70460|0){case 0:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 52:case 53:case 54:case 55:case 56:break t;case 4:break x;default:break a}break d}if((0|e)==70722)break f;if(e-70723>>>0<2)break d;if((t=e-70835|0)>>>0<=13)break Q;break TA}if((t=e-71090|0)>>>0<12)break Oe;break PA}switch(e-71339|0){case 0:case 2:break t;default:break rA}}if(e-71344>>>0<6)break t;if(r=4096,(0|e)!=71351)break a;break t}if(r=1024,e-71727>>>0<10)break t;if(r=4096,e-71737>>>0>=2)break a;break t}if((0|e)==72244)break f;if(e-72245>>>0<10)break d;if(r=4096,(0|e)==72263)break t;if(e-72273>>>0<11)break d;if(r=1024,e-72330>>>0<13)break t;r=(t=(0|e)==72345)>>>20|0,t=(e=(0|e)==72344)?8192:t<<12;break W}if((t=e-72752|0)>>>0<16)break Se;break zA}if(r=1024,e-73459>>>0>=2)break a;break t}if(r=1024,e-92976>>>0>=7)break a;break t}if(r=1024,(0|e)!=113822)break a;break t}if(r=1024,e-122888>>>0<17)break t;if((e=e-122880|0)>>>0>=43)break a;t=A[(e=82816+(e<<3)|0)>>2];break h}if(r=12288,e-125252>>>0<3||(r=1024,(0|e)==125255)||(r=4096,e-125256>>>0<3))break t;break a}if(!(1<<t&12479))break TA;break d}break d;case 14:g:{if((0|(t=-256&e))!=120576){if((0|t)!=65280){if(t||(r=768,a=66,e-48>>>0>=10))break g;break t}if(r=256,e-65296>>>0>=10)break g;break t}if(r=128,e-120782>>>0<50)break t}break a;case 15:g:{if((0|(t=-256&e))!=12288){if((0|t)!=8448)break g;t=(e=(0|(r=-16&e))==8560)>>>18|0,a=e<<14,r=(e=(0|r)==8544)?32768:a;break w}if(e-12321>>>0<9||e-12344>>>0<3)return $=0,2048;if(r=2048,(0|e)==12295)break t}break a;case 16:g:{Q:{T:{if((0|(t=-256&e))<=9215){if((0|t)==4864)break T;if((0|t)!=6400||(r=134217728,(0|e)!=6618))break g;break t}if((0|t)==9216)break Q;if((0|t)!=127232)break g;if(r=0,a=-2147483648,(0|e)==127232)break t;if(a=268435456,e-127233>>>0>=10)break g;break t}if(r=134217728,e-4969>>>0>=9)break g;break t}if(r=0,a=-2147483648,e-9352>>>0<20)break t}break a;case 17:a=(e=(0|e)==8256)>>>25|0,e<<=7;break L;case 18:g:{Q:{T:{P:{if((0|(t=-256&e))<=11775){if((0|t)<=6143){if(r=-2147483624,!t)break t;if((0|t)!=1280||(r=24,(0|e)!=1418))break g;break t}if((0|t)==6144)break P;if((0|t)!=8192)break g;if(r=-2147483624,(-2&e)==8208)break t;e=e-8211>>>0<2,t=-2147483640;break b}if((0|t)<=65023){if((0|t)==11776)break T;if((0|t)!=12288)break g;t=(0|e)==12336,r=(e=(0|e)==12316)||t?-2147483640:8,$=e?0:t?130:0;break m}if((0|t)==65024)break Q;if((0|t)!=65280||(r=24,(0|e)!=65293))break g;break t}if(r=24,(0|e)!=6150)break g;break t}if(r=-2147483624,(0|e)==11799)break t;e=(-2&e)==11834,t=-2147483640;break b}if(r=8,a=8388608,e-65073>>>0<2||(r=152,a=0,(0|e)==65123))break t}return $=0,8;case 19:g:{Q:{T:{P:{z:{O:{if((0|(t=-256&e))<=11775){if((0|t)<=8959){if(t)break O;break I}if((0|t)==8960)break z;if((0|t)==9984)break P;if((0|t)!=10496)break a;break U}if((0|t)<=64767){if(r=-2147483648,(0|t)==11776)break t;if((0|t)!=12288)break a;switch(r=-2147483616,e-12301|0){case 0:case 2:break t;default:break T}}if((0|t)==64768)break Q;if((0|t)==65024)break g;if((0|t)!=65280)break a;if(r=32,(0|e)==65379)break t;break a}if((0|t)!=8192)break a;switch(e-8318|0){default:if(r=-2147483648,(0|e)!=8262)break a;break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break a;case 0:case 16:}break k}switch(r=-2147483520,e-8969|0){case 1:break a;case 0:case 2:break t}if((0|e)!=9002)break a;return $=0,-2139095040}if(r=-2147483520,(0|e)==10182)break t;break yA}return $=0,(-2&e)==12318?-2147483616:-2147483648}if(r=-2147483648,(0|e)!=64830)break a;break t}a=(e=!(e-65090&-3))>>>27|0,e<<=5;break L;case 20:case 21:if(!(e&=-256))break C;if(r=-2147483616,(0|e)==8192)break t;break WA;case 22:g:{Q:{T:{P:{z:{O:{X:{j:{tA:{iA:{rA:{nA:{cA:{gA:{x:{oA:{aA:{K:{uA:{dA:{IA:{wA:{LA:{kA:{YA:{XA:{qA:{JA:{_A:{$A:{Ae:{ee:{te:{re:{ae:{xA:{se:{ie:{ne:{oe:{le:{HA:{BA:{RA:{ce:{ge:{ue:{vA:{if((0|(t=-256&e))<=43519){if((0|t)<=5887){if((0|t)<=2303){if((0|t)<=1535){if(!t)break vA;if((0|t)==768)break ue;if((0|t)!=1280)break a;if(r=0,a=538968064,e-1371>>>0<2)break t;switch(a=268435456,e-1373|0){case 0:break t;case 1:break ce;default:break ge}}if((0|t)==1536)break BA;if((0|t)==1792)break HA;if((0|t)!=2048)break a;if((t=e-2103|0)>>>0<8)break Pe;break FA}if((0|t)<=3839){if((0|t)==2304)break le;if((0|t)==3328)break oe;if((0|t)!=3584||(r=64,(-2&e)!=3674))break a;break t}if((0|t)<=4863){if((0|t)==3840)break ne;if((0|t)!=4096)break a;if(r=268435520,(-2&e)==4170)break t;if(r=0,a=16777216,(0|e)!=4347)break a;break t}if((0|t)==4864)break ie;if((0|t)!=5632)break a;switch(r=64,e-5741|0){case 1:break i;case 0:break t;default:break se}}if((0|t)<=11263){if((0|t)<=6655){if((0|t)==5888)break xA;if((0|t)==6144)break Qe;if((0|t)!=6400)break a;t=(0|e)==6469,r=(e=(0|e)==6468)||t?268435520:0,$=e?536870912:t?1073741824:0;break m}if((0|t)<=7167){if((0|t)==6656)break ae;if((0|t)!=6912)break a;if((0|(t=-2&e))!=7002)break re;break H}if((0|t)==7168)break te;if((0|t)!=8192)break a;switch(r=-2147483520,e-8214|0){case 1:break I;case 0:break t;case 16:break ee;default:break Ae}}if((0|t)<=41983){if((0|t)==11264)break $A;if((0|t)==11776)break _A;if((0|t)!=12288)break a;switch(r=-2147483584,a=272629760,e-12289|0){case 2:break I;case 0:break t;case 1:break qA;default:break JA}}if((0|t)<=43007){if((0|t)==41984)break XA;if((0|t)!=42496)break a;switch(r=64,a=268435456,e-42739|0){case 4:break c;case 0:break i;case 3:break r;case 2:break t;case 1:break kA;default:break YA}}if((0|t)==43008)break LA;if((0|t)!=43264)break a;switch(r=4096,e-43310|0){case 0:break t;case 1:break H;default:break wA}}if((0|t)<=70655){if((0|t)<=67839){if((0|t)<=65279){if((0|t)==43520)break IA;if((0|t)==43776)break dA;if((0|t)!=65024)break a;if(r=0,a=268435456,(0|(i=-2&e))==65040)break t;if((t=e-65042|0)>>>0<8)break Ge;break CA}if((0|t)==65280)break uA;if((0|t)==66304)break K;if((0|t)!=67584||(r=64,(0|e)!=67671))break a;break t}if((0|t)<=69375){if((0|t)==67840)break aA;if((0|t)==68096)break oA;if((0|t)!=68352)break a;switch(r=64,e-68410|0){case 0:case 1:case 2:case 3:case 4:case 5:case 95:case 96:case 97:case 98:break t;default:break a}}if((0|t)<=69887){if((0|t)==69376)break x;if((0|t)!=69632)break a;if(e-69703>>>0>=2)break gA;break H}if((0|t)==69888)break cA;if((0|t)!=70144)break a;if((t=e-70200|0)>>>0<=4)break nA;if((0|e)!=70313)break a;break H}if((0|t)<=74751){if((0|t)<=71423){if((0|t)==70656)break rA;if((0|t)==70912)break iA;if((0|t)!=71168||(r=268435520,e-71233>>>0>=2))break a;break t}if((0|t)<=72703){if((0|t)==71424)break tA;if((0|t)!=72192)break a;if(e-72258>>>0>=2)break j;break H}if((0|t)==72704)break X;if((0|t)!=73216||(r=268435520,e-73463>>>0>=2))break a;break t}if((0|t)<=93695){if((0|t)==74752)break O;if((0|t)==92672)break P;if((0|t)!=92928)break a;if(r=268435520,e-92983>>>0<2)break t;t=(0|e)==92996?268435520:0,t=(e=(0|e)==92985)?64:t;break F}if((0|t)<=121343){if((0|t)==93696)break z;if((0|t)!=113664||(r=268435520,a=-2147483648,(0|e)!=113823))break a;break t}if((0|t)==121344)break Me;if((0|t)!=125184)break a;r=((0|e)==125279)<<30,t=0,$=(e=(0|e)==125278)?536870912:r;break n}r=-1879048128,a=536870912;vA:{de:{fe:{pe:{switch(e-33|0){default:switch(e-183|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:break vA;case 8:break fe;case 0:break pe;default:break de}case 2:case 9:$=66;break u;case 11:return $=268435456,-2147483584;case 13:return $=-2147483648,-1879048128;case 25:return $=134217728,-2147483584;case 26:return $=67108864,-2147483584;case 1:case 6:break C;case 0:break t;case 3:case 4:case 5:case 7:case 8:case 10:case 12:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 27:case 28:case 29:break vA;case 30:}return $=1073741824,-1879048128}return $=0,134230016}$=1078984704;break u}if((0|e)==161)break UA}break I}t=(0|e)==903,r=(e=(0|e)==894)?64:t?134217792:0,$=e?1073741824:t?67108864:0;break m}if((0|e)==1417)break RA;if((0|e)!=1475)break a;break sA}$=1075838976;break o}$=-2143289344;break s}r=64,a=268435456;BA:switch(e-1548|0){case 15:break r;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 16:case 17:break a;case 0:break t;case 19:break BA;case 18:break H;default:break T}break c}if((t=e-1792|0)>>>0<6)break ze;if(r=64,a=134217728,(-2&e)==1798)break t;a=67108864;HA:{BA:{RA:switch(e-1800|0){default:switch(e-2040|0){case 1:break HA;case 0:break BA;default:break a}case 3:break a;case 0:break t;case 1:break RA;case 2:case 4:break sA}$=1073741824;break e}$=268435456;break e}$=536870912;break s}t=(0|e)==2405,r=(e=(0|e)==2404)||t?268435520:0,$=e?-2143289344:t?16777216:0;break m}if(r=0,a=-2143289344,(0|e)!=3572)break a;break t}switch(r=64,e-3848|0){case 5:$=-2143289344;break e;case 6:$=16777216;break e;case 0:break t}if(e-3854>>>0<5)break t;if(r=0,a=268435456,(0|e)!=3860)break a;break t}if((t=e-4961|0)>>>0<4)break Te;if(r=64,a=134217728,e-4965>>>0<2)break t;t=(0|e)==4968,r=(e=(0|e)==4967)||t?268435520:0,$=e?1073741824:t?16777216:0;break m}if(e-5867>>>0>=3)break a;break t}if(r=268435520,e-5941>>>0<2)break t;if((e=e-6100|0)>>>0>=7)break a;t=A[(e=83240+(e<<3)|0)>>2];break h}if(r=268435520,(-4&e)!=6824)break a;break t}if(r=64,(0|e)==7005)break t;if(r=268435520,(0|t)!=7006)break a;break t}if(e-7227>>>0<2)break H;if(r=64,e-7229>>>0<3||(r=268435520,(-2&e)==7294))break t;if(r=4096,(0|e)!=7379)break a;break t}$=33554432;break u}if((-8&e)==8224)break I;if(e-8242>>>0<3)break t;if(e-8240>>>0<9)break I;if((t=e-8251|0)>>>0<21)break De;break eA}if((0|e)==11513){$=-2147483648;break o}if(r=0,a=1073741824,(-2&e)==11514)break t;if(a=-2147483648,(0|e)!=11518)break a;break t}switch(r=-1879048128,e-11822|0){case 4:case 6:$=268435456;break u;case 5:$=-2147483648;break u;case 7:$=67108864;break u;case 14:return $=-2147483648,-1879048128;case 19:return $=268435456,-2147483584;case 30:case 32:return $=0,-2147483584;case 0:break t}break I}if((0|e)==12349)break S;if((0|e)!=12539)break a;return $=0,16}return $=-2143289344,-1879048128}t=(0|e)==42239,r=(e=(0|e)==42238)?64:t?268435520:0,$=e?268435456:t?-2147483648:0;break m}YA:switch(e-42509|0){case 1:break i;case 0:break t;case 2:break YA;default:break a}break c}$=134217728;break e}if(e-43126>>>0<2)break H;if(r=268435520,e-43214>>>0>=2)break a;break t}if((0|e)==43463)break sA;if(r=268435520,(-2&e)!=43464)break a;break t}if(e-43613>>>0<3)break H;if(r=64,(0|e)==43743)break t;if(r=268435520,(-2&e)!=43760)break a;break t}if(r=268435520,(0|e)!=44011)break a;break t}r=268435520,a=541065216;uA:switch(e-65281|0){case 1:case 6:return $=0,32;case 11:$=272629760;break e;case 13:$=-2143289344;break s;case 100:return $=0,16;case 25:$=138412032;break e;case 26:$=71303168;break e;case 30:$=1077936128;break s;case 96:break i;case 59:break k;case 0:break t;case 99:break uA;default:break a}$=268435456;break e}r=(t=(0|e)==66512)>>>26|0,t=(e=(0|e)==66463)?64:t<<6;break W}if(r=64,(0|e)!=67871)break a;break t}if(r=268435520,(-2&e)==68182)break t;if(r=64,e-68336>>>0>=6)break a;break t}if(r=268435520,e-69461>>>0>=5)break a;break t}if(r=64,e-69705>>>0<5)break t;if(r=268435520,e-69822>>>0>=4)break a;break t}if(e-69953>>>0<2)break H;if((t=e-70085|0)>>>0<=26)break Q;break SA}if((0|t)!=2)break H;break sA}if(r=268435520,e-70731>>>0<2)break t;a=(t=(0|e)==70747)>>>26|0,t=(e=(0|e)==70733)?64:t<<6,$=e?268435456:a;break n}switch(r=268435520,(-2&e)-71106|0){case 0:break t;case 2:break g}if(r=8192,e-71110>>>0<3)break t;if(r=268435520,e-71113>>>0>=15)break a;break t}if(r=268435520,e-71484>>>0>=3)break a;break t}if(r=268435520,e-72347>>>0<2)break t;if(r=64,e-72353>>>0>=2)break a;break t}if(r=268435520,e-72769>>>0<2)break t;r=(t=(0|e)==72817)>>>26|0,t=(e=(0|e)==72771)?64:t<<6;break W}if(r=64,a=134217728,e-74865>>>0<2)break t;if(a=0,e-74864>>>0>=5)break a;break t}t=(0|e)==93848?268435520:0,t=(e=(0|e)==93847)?64:t;break F}if(r=268435520,(-2&e)==92782)break t;if(a=-2147483648,(0|e)!=92917)break a;break t}if((0|e)==1748)break i;break a}if(!(1<<t&100663555))break SA;break H}break sA;case 23:g:{Q:{T:{P:{z:{O:{if((0|(t=-256&e))<=11775){if((0|t)<=8959){if(t)break O;break I}if((0|t)==8960)break z;if((0|t)==9984)break P;if((0|t)!=10496)break a;break U}if((0|t)<=64767){if((0|t)==11776)break T;if((0|t)!=12288)break a;if((e=e-12300|0)>>>0<=17&&(r=-2147483616,1<<e&131077))break t;break I}if((0|t)==64768)break Q;if((0|t)==65024)break g;if((0|t)!=65280)break a;if(r=32,(0|e)==65378)break t;break a}if((0|t)!=8192)break a;switch(r=-2147483616,e-8218|0){case 1:case 2:case 3:break a;case 0:case 4:break t}switch(e-8317|0){default:if((0|e)!=8261)break a;break I;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break a;case 0:case 16:}break k}switch(r=-2147483520,e-8968|0){case 1:break a;case 0:case 2:break t}if((0|e)!=9001)break a;return $=0,-2139095040}if(r=-2147483520,(0|e)==10181)break t;break yA}return $=0,(0|e)==11842?-2147483616:-2147483648}if(r=-2147483648,(0|e)!=64831)break a;break t}r=(e=!(e-65089&-3))>>>27|0,e<<=5;break y;case 24:r=(e=e>>>0<256)>>>1|0,e<<=31;break y;case 25:g:{Q:{T:{P:{z:{O:{X:{j:{if((0|(t=-256&e))<=12287){if((0|t)<=767){if(!t)break j;if((0|t)!=512)break g;if(e-751>>>0>=17)break X;break f}if((0|t)==768)break O;if((0|t)!=7936)break g;switch(r=4096,e-8125|0){case 0:case 2:case 3:case 4:case 16:case 17:case 18:case 32:case 33:case 34:case 48:case 49:case 50:case 64:case 65:break t;default:break g}}if((0|t)<=43775){if((0|t)==12288)break z;if((0|t)!=42752||(r=4096,(-2&e)!=42784))break g;break t}if((0|t)==43776)break P;if((0|t)==65280)break T;if(r=0,a=78,(0|t)!=127744)break g;break t}switch(e-168|0){default:r=-2147479424;j:switch(e-94|0){case 0:break t;case 2:break j;default:break g}return $=0,-2147479552;case 0:case 7:break f;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:case 13:case 14:case 15:break g;case 12:case 16:}break f}if((0|e)==749|e-741>>>0<7)break f;if(e-706>>>0>=4)break Q;break f}if((e=e-885|0)>>>0>16||(r=4096,!(1<<e&98305)))break g;break t}if(r=67112960,e-12443>>>0>=2)break g;break t}if(r=4096,(0|e)!=43867)break g;break t}switch(r=4224,e-65342|0){default:if((0|e)!=65507)break g;break;case 0:break t;case 1:break g;case 2:}break f}if(r=4096,e-722>>>0<14)break t}break a;case 26:g:{Q:{T:{P:{z:{O:{if((0|(t=-256&e))<=9471){if((0|t)<=8447){if(t)break g;break I}if((0|t)==8448)break O;if((0|t)==8704)break z;if(r=-2147483648,(0|t)!=8960)break a;break t}if((0|t)<=10495){if((0|t)==9472)break P;if((0|t)==9728)break T;if((0|t)==9984)break I;break a}if((0|t)==10496)break Q;if((0|t)==10752)break I;if(r=-2147483648,(0|t)!=11008)break a;break t}if((0|e)==8472)return $=0,67108864;if((0|e)==8596)break Z;if(r=-2147483648,e>>>0<=8591)break a;break t}if(r=-2147483640,(0|e)==8722)break t;t=-2147483648,$=(e=e-8942>>>0<4)?33554432:0;break n}if(r=-2147483648,a=130,e-9723>>>0<2)break t;t=-2147483648,$=(e=e-9725>>>0<2)?134:0;break n}if(r=-2147483648,a=128,(0|e)==9839)break t;break I}if(r=-2147483648,a=130,(-2&e)==10548)break t;t=-2147483648,$=(e=(0|e)==10626)?134217728:0;break n}if((0|t)==8192)break KA;break a;case 27:g:{Q:{T:{P:{z:{O:{X:{j:{tA:{iA:{rA:{nA:{cA:{gA:{x:{oA:{aA:{K:{uA:{dA:{IA:{wA:{LA:{kA:{if((0|(t=-256&e))<=12287){if((0|t)<=9727){if((0|t)<=8959){if(!t)break kA;if((0|t)!=8448)break a;switch(r=0,a=130,e-8482|0){case 7:break k;case 0:break t;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:break dA;case 12:break wA;default:break LA}}if((0|t)==8960)break uA;if((0|t)==9216)break K;if((0|t)!=9472)break a;switch(r=-2147483520,(-2&e)-9632|0){case 0:break t;case 10:break Z;default:break aA}}if((0|t)<=11007){if((0|t)==9728)break oA;if((0|t)==9984)break x;if(r=-2147483648,(0|t)!=10240)break a;break t}if((0|t)==11008)break gA;if((0|t)==11776)break cA;if((0|t)!=12032)break a;if(r=1048576,e>>>0<12246)break t;switch(r=262144,(-2&e)-12272|0){case 0:break t;case 2:break g;default:break nA}}if((0|t)<=127999){if((0|t)<=127231){if((0|t)==12288)break rA;if((0|t)==12800)break iA;if((0|t)!=126976)break a;t=(0|e)==127183,r=0,$=(e=(0|e)==126980)||t?134:128;break m}if((0|t)==127232)break tA;if((0|t)==127488)break j;if((0|t)!=127744)break a;if(e>>>0>=127777)break X;break Y}if((0|t)<=128767){if((0|t)==128e3)break O;if((0|t)==128256)break z;if((0|t)!=128512)break a;if((t=e-128581|0)>>>0<11)break Ce;break NA}if((0|t)==128768)break P;if((0|t)==129280)break T;if((0|t)!=129536)break a;$=128;break o}t=(0|e)==174,r=-2147483648,$=(e=(0|e)==169)||t?130:0;break m}switch(e-8616|0){case 0:break I;case 1:case 2:break IA;default:break dA}}return $=0,67108864}return $=130,-2147483520}if(r=-2147483520,e-8597>>>0<5)break t;if(e-8604>>>0<18)break U;if((t=e-8624|0)>>>0<8)break Ee;break OA}if(e>>>0<8968)break I;if((0|(t=-2&e))==8986)break l;if(e-8972>>>0<20|e-8994>>>0<6)break I;if((0|e)==9e3)break Z;if(e-9003>>>0<81)break I;if(r=-2147483648,a=128,(0|e)==9096)break t;if(e-9085>>>0<30)break I;if(r=-2147483520,a=0,(0|t)==9140)break t;switch(e-9143|0){case 0:case 25:break t;case 24:break Z}if(e-9140>>>0<40)break I;if((0|e)==9186)break t;if((t=e-9193|0)>>>0<4)break l;switch(r=-2147483648,a=134,e-9200|0){case 0:case 3:break t}if(t>>>0<11)break Z;if(a=130,e-9208>>>0<3)break t;if(a=0,e>>>0<=9186)break a;break t}if(r=-2147483648,e-9216>>>0<75||(r=33792,a=130,(0|e)==9410)||(a=0,e-9398>>>0<26))break t;if(r=17408,e-9424>>>0>=26)break a;break t}if(e-9646>>>0<8)break U;if(a=130,(0|e)==9654)break t;if((-4&e)==9660)break U;switch(e-9664|0){case 0:break t;case 6:case 7:case 10:case 11:case 15:case 16:case 17:case 18:case 19:case 34:case 36:break U}return $=0,e-9703>>>0<6?-2147483520:-2147483648}oA:switch((-16&e)-9728>>>4|0){case 0:if(e>>>0<9733)break Z;r=-2147483520,a=128;aA:switch(e-9733|0){case 0:break t;case 9:break aA;case 1:break U;default:break G}break Z;case 2:if((t=e-9760|0)>>>0<11)break ve;if(r=-2147483648,a=130,e>>>0<=9773)break G;break t;case 3:if(r=-2147483648,a=130,e-9784>>>0>=3)break G;break t;case 4:switch(r=-2147483520,a=130,e-9792|0){case 0:case 2:break t}if(r=-2147483648,a=134,e>>>0<=9799)break G;break t;case 5:if(r=-2147483648,a=134,e>>>0<9812)break t;if(a=130,(0|e)!=9823)break G;break t;case 6:if((0|e)==9734)break U;if((0|e)==9824)return $=130,-2147483520;if(r=-2147483520,a=128,e-9825>>>0<2)break t;if((t=e-9827|0)>>>0<6)break Be;break bA;case 8:if(r=-2147483648,e>>>0<=9861)break G;break t;case 10:switch(r=-2147483648,a=130,e-9888|0){case 1:break l;case 0:break t}if(a=134,(-2&e)!=9898)break G;break t;case 11:if(r=-2147483648,a=130,(-2&e)==9904)break t;if(a=134,e-9917>>>0>=2)break G;break t;case 12:if((-2&e)==9924)break l;r=-2147483648,a=130;aA:switch(e-9928|0){case 0:case 7:break t;case 6:break aA;default:break G}break l;case 14:t=(0|e)==9962,r=-2147483648,$=(e=(0|e)==9961)?130:t?134:128;break m;case 13:break we;case 9:break ke;case 15:break oA;case 7:break xe;case 1:break ye;default:break G}if((0|e)==9972|e>>>0<9970)break Z;if(r=-2147483648,a=134,e>>>0<9974||(0|e)!=9974&&(a=130,e>>>0<9977))break t;if((e=e-9977|0)>>>0<5)break Ie;break G}x:{oA:{aA:{K:{uA:switch((-16&e)-9984>>>4|0){case 0:if(r=0,a=130,(0|e)==9986||(a=128,e>>>0<9989)||(a=134,(0|e)==9989))break x;switch(a=150,(-2&e)-9994|0){case 0:break x;case 2:break aA}if(a=130,e-9992>>>0<6)break x;t=(0|e)==9999,r=0,a=(e=(0|e)==9998)?128:t?130:0;break x;case 1:if(r=0,a=128,e>>>0<10002)break x;if((e=e-10002|0)>>>0>11||(a=130,!(1<<e&2069)))break K;break x;case 2:t=(0|e)==10024,r=0,a=(e=(0|e)==10017)?130:t?134:0;break x;case 4:r=0,a=130;dA:switch(e-10052|0){case 0:case 3:break x;case 8:case 10:break dA;default:break K}a=134;break x;case 5:if(r=0,a=1073741958,e-10067>>>0<2)break x;a=(e=e-10069&-3)?0:536871046;break x;case 6:if((t=e-10082|0)>>>0<3)break oA;if(r=0,a=128,e>>>0<=10084)break K;break x;case 9:if(r=0,a=134,e-10133>>>0>=3)break K;break x;case 10:if(r=0,a=130,(0|e)!=10145)break K;break x;case 11:t=(0|e)==10175,r=0,a=(e=(0|e)==10160)||t?134:0;break x;case 3:break uA;default:break K}if(r=0,a=130,e-10035>>>0<2)break x}r=0,a=0;break x}a=146;break x}r=A[(e=83992+(t<<3)|0)>>2],a=A[e+4>>2]}return $=a,-2147483648|r}if(r=-2147483648,a=130,e-11013>>>0<3||(a=134,e-11035>>>0<2))break t;t=(0|e)==11093,r=-2147483648,$=(e=(0|e)==11088)||t?134:0;break m}if(e-11904>>>0>=26)break Q;return $=0,1048576}if(e-12276>>>0>=8)break a;break t}if((e=e-12306|0)>>>0>14||(r=-2147483648,!(1<<e&16387)))break a;break t}t=0,$=(e=e-12951&-3)?0:130;break n}if(r=0,a=128,(0|e)==127279)break t;if(e-127280>>>0<26||e-127312>>>0<26)return $=0,33792;if((t=e-127344|0)>>>0<=15&&(r=33792,a=130,1<<t&49155)||(r=33792,a=0,t>>>0<26))break t;if((0|e)==127374)break Y;if(r=0,a=134,e-127377>>>0<10)break t;if(a=102,e>>>0<=127461)break a;break t}r=0,a=134;j:{switch(e-127489|0){case 0:case 25:break t;case 1:break S;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:break j}switch(e-127535|0){case 0:break t;case 8:break S;default:break j}}if((-2&e)==127568|e-127538>>>0<9)break t;if(a=128,e>>>0<=127583)break a;break t}if((0|e)==127777)break S;if(e-127789>>>0<9|e-127799>>>0<70)break Y;if((0|e)==127877)break q;if(e-127870>>>0<22)break Y;if(e-127780>>>0<112)break S;switch(r=0,a=130,e-127894|0){case 44:case 45:case 46:case 49:break q;case 0:case 1:case 3:case 4:case 5:break t}if(e-127904>>>0<42)break Y;if(a=150,(0|e)==127946||(a=146,e-127947>>>0<2))break t;if(e-127951>>>0<5)break Y;if(a=134,e-127968>>>0<17||(a=130,e-127902>>>0<83))break t;if((t=e-127987|0)>>>0<5)break be;break ZA}switch(r=0,a=130,e-128063|0){case 0:case 2:break t}if((0|e)==128124|(-5&e)-128129>>>0<3|(0|e)==128110|e-128112>>>0<9||(-2&e)==128066|e-128102>>>0<4|e-128070>>>0<11)break q;switch(e-128253|0){case 1:$=128;break o;case 0:break S}if(a=150,(0|e)==128170)break t;break Y}if(e>>>0<128318)break Y;if(r=0,e>>>0<128326)break t;if(e-128329>>>0<2)break S;if(e-128331>>>0<4|e-128336>>>0<24)break Y;if(e-128367>>>0<2)break S;if((-2&e)==128372){$=146;break o}if(e-128371>>>0<7)break S;if(a=150,!(t=e-128378|0))break t;if((0|t)==13|e-128394>>>0<4)break S;if(a=146,(0|e)==128400||(a=150,e-128405>>>0<2))break t;switch(a=134,e-128420|0){case 0:break t;case 1:case 4:case 13:case 14:case 24:case 30:case 31:case 32:case 45:case 46:case 47:case 56:case 57:case 58:case 61:case 63:case 68:case 75:case 79:case 86:break S}e=e>>>0>128506,t=0;break p}if(r=0,a=128,e-128981>>>0>=4)break a;break t}if(e>>>0<129292)break a;if(e-129328>>>0<10)break q;switch(r=0,a=150,e-129304|0){case 35:break a;case 0:case 1:case 2:case 3:case 4:case 6:case 7:case 14:break t}if(e-129341>>>0<2)break q;if(a=0,(0|e)==129350||(a=198,(-4&e)==129456))break t;if((t=e-129461|0)>>>0<5)break me;break he}if(r=1048576,e-11931>>>0<89)break t;break a}return $=0,524288;case 29:return $=16777216,1073741825;case 28:break t;case 30:break je;default:break a}return $=0,(0|e)==32?1073741825:1}if(!(1079>>>t&1))break fA;t=A[(e=81344+(t<<3)|0)>>2];break h}if(557553>>>t&1)break k;if((-4&e)!=8508)break MA;break t}if(!(207>>>t&1))break mA;break d}if(r=1024,!(1017>>>t&1))break GA;break t}if(r=1024,!(32895>>>t&1))break DA;break t}if(r=1024,!(55>>>t&1))break QA;break t}if(r=1024,!(3087>>>t&1))break PA;break t}if((e=e-71453|0)>>>0>=15)break a;t=A[(e=82312+(e<<3)|0)>>2];break h}if(!(49023>>>t&1))break zA;t=A[(e=82432+(t<<3)|0)>>2];break h}if(!(514623>>>t&1))break _;t=A[(e=82664+(t<<3)|0)>>2];break h}t=A[(e=83160+(t<<3)|0)>>2];break h}if(r=268435520,!(197>>>t&1))break FA;break t}t=A[(e=83208+(t<<3)|0)>>2];break h}if((e=e-6145|0)>>>0>=10)break a;t=A[(e=83296+(e<<3)|0)>>2];break h}if(!(1077711>>>t&1))break eA;t=A[(e=83376+(t<<3)|0)>>2];break h}if(!(159>>>t&1))break CA;t=A[(e=83544+(t<<3)|0)>>2];break h}if((e=e-121479|0)>>>0>=4)break a;t=A[(e=83608+(e<<3)|0)>>2];break h}if(!(195>>>t&1))break OA;break U}if((e=e-9745|0)>>>0>=13)break G;t=A[(e=83640+(e<<3)|0)>>2];break h}if(1101>>>t&1)break Z;if(r=-2147483648,a=130,e>>>0<=9773)break G;break t}if(!(45>>>t&1))break bA;t=A[(e=83744+(t<<3)|0)>>2];break h}if((e=e-9851|0)>>>0>=5)break G;t=A[(e=83792+(e<<3)|0)>>2];break h}if((e=e-9874|0)>>>0>=11)break G;t=A[(e=83832+(e<<3)|0)>>2];break h}if((e=e-9937|0)>>>0>=4)break G;t=A[(e=83920+(e<<3)|0)>>2];break h}t=A[(e=83952+(e<<3)|0)>>2];break h}if(!(23>>>t&1))break ZA;t=A[(e=84016+(t<<3)|0)>>2];break h}if(r=0,a=150,!(1991>>>t&1))break NA;break t}if(a=150,27>>>t&1)break t}t=0,$=(e=e-129489>>>0<13)?150:134;break n}e=e-127992>>>0<3,t=0;break p}if(e-9837>>>0<2)break t}$=128;break u}if(e-8623>>>0<13)break I;if(e-8636>>>0<18)break U;if((t=e-8656|0)>>>0<22&&(a=0,3157995>>>t&1)||(r=-2147483648,a=0,e-8661>>>0<31))break t;break a}if(e>>>0<128592)break Y;if(r=0,a=0,e>>>0<128640)break t;if(!((t=e-128675|0)>>>0>29|!(1<<t&537788417)))break q;if(e>>>0<128710)break Y;if(a=150,(0|e)==128716)break t;if(e-128715>>>0<5)break S;if(e-128720>>>0<3)break Y;if(!((t=e-128736|0)>>>0>=10|!(575>>>t&1)))break S;if(a=134,e-128747>>>0<2)break t;switch(a=130,e-128752|0){case 0:case 3:break t}e=e-128756>>>0<6,t=0;break p}switch(r=-2147483648,e-8260|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:break a;case 0:case 14:break t}if((0|(e=e-8315|0))!=16&&e)break a;return $=0,8}if(r=268435520,a=1073741824,(0|e)!=69955)break a;break t}if(e-8266>>>0<8)break I;if(r=-2147483640,(0|e)==8275)break t;if(r=-2147483648,e-8277>>>0>=10)break a;break t}$=542113792;break u}if(r=-2147483648,a=0,e-65093>>>0<2||(r=64,a=268435456,(0|i)==65104))break t;r=268435520,a=-2147483648;CA:switch(e-65106|0){case 3:$=134217728;break e;case 5:$=536870912;break s;case 4:break c;case 2:break r;case 0:break t;case 15:case 22:break CA;default:break a}break k}if((0|e)==2142)break sA;if(r=64,e-2096>>>0<15)break t;break a}if(r=1024,e-72850>>>0<22)break t;if((e=e-72874|0)>>>0>=13)break a;t=A[(e=82560+(e<<3)|0)>>2];break h}if(r=4096,e-71103>>>0<2)break t;if(r=1024,(-2&e)!=71132)break a;break t}if((0|e)==70726)break f;if(r=4096,(-2&e)!=70850)break a;break t}if(r=4096,e-68325>>>0>=2)break a;break t}if((0|e)==6109)break f;if(r=4096,e-6089>>>0>=11)break a;break t}switch(e-3959|0){case 0:case 2:return $=0,8389632}if((0|t)==3968|e-3953>>>0<14)break d;if(!((t=e-3970|0)>>>0>=6|!(55>>>t&1)))break f;if(e-3981>>>0<11)break d;if(r=1024,e-3993>>>0<36)break t;if(r=4096,(0|e)!=4038)break a;break t}if(e-3655>>>0<6)break f;if(!((t=e-3761|0)>>>0>11|!(1<<t&3577)))break d;switch(r=1024,e-3661|0){case 1:break f;case 0:break t}if(r=4096,e-3784>>>0<5)break t;if(r=1024,(0|e)!=3789)break a;break t}if(e-1770>>>0<3)break t;if(r=1024,(0|e)!=1773)break a;break t}if((-2&e)==73028)break f;switch(r=1024,e-73104|0){default:if((0|e)!=73031)break a;break t;case 2:case 3:case 4:case 6:break a;case 0:case 1:case 5:break t;case 7:}break f}if((e=e-8492|0)>>>0>=30)break a;t=A[(e=81704+(e<<3)|0)>>2];break h}r=0;break N}a=(t=(-3&e)==43712)>>>20|0,r=t<<12}if((0|(s=-65536&e))==131072)break VA;if((0|s)==65536)break hA;if(t=r,i=a,s)break pA}if(e-13312>>>0<6582||e-19968>>>0<20976)break A;if(s=2048,e-63744>>>0<366)return $=i,2048|t;if(r=t,a=i,e-64112>>>0>=106)break pA;break R}if(s=2099200,e-183984>>>0<7473|e-178208>>>0<5762|e-177984>>>0<222|e-131072>>>0<42711||e-173824>>>0<4149||(s=2048,e-194560>>>0<542))break R;break pA}if(s=2048,e-110960>>>0<396|e-94208>>>0<6125|e-100352>>>0<755)break R}s=0}return $=a,r|s}if((-4&e)==8508)break k;if(r=128,!(e-8517>>>0<3)&&(r=16777344,(-2&e)!=8520))break a}$=a;break m}t=(e=e>>>0>131069)?65536:0,$=e?0:128;break n}if((0|e)==11776)break I}$=0;break o}$=0;break u}return $=0,4194304}return $=0,128}return $=0,16777344}return $=0,4096}return $=0,1024}return $=0,-2147483520}return $=0,e-10214>>>0<10?-2147483520:-2147483648}$=0;break s}$=0;break e}$=130;break o}$=130;break u}$=134;break o}return $=150,0}$=0;break n}$=e?0:a;break n}return $=t,e}return 131072}return $=0,16777216}$=e?0:r;break n}return $=a,e}return $=r,e}$=e?0:t;break m}return $=0,8192}$=A[e+4>>2];break n}$=e?8388608:0;break n}return r}return $=0,-2147483616}$=e?134:128}return t}$=134}return-2147483648}return 0}$=1073741824;break s}$=-2147483648}return 268435520}$=67108864}return 64}return $=i,2099200|t}function _A(e){var t,r=0,a=0,s=0,i=0,o=0;(t=Ct(8244))&&(A[t+328>>2]=2,g[132848]=0,A[t+684>>2]=0,A[t+688>>2]=0,A[t+320>>2]=0,A[t+324>>2]=0,g[t+268|0]=0,g[t+228|0]=0,A[t+8216>>2]=0,A[t+8220>>2]=0,A[t+224>>2]=104944,A[t+216>>2]=383,A[t+220>>2]=96,je(t+344|0,0,292),A[t+8196>>2]=0,A[(r=t+8188|0)>>2]=0,A[r+4>>2]=0,A[t+8180>>2]=0,A[t+8184>>2]=0,g[t+460|0]=22,g[t+461|0]=129,g[t+466|0]=38,g[t+462|0]=38,g[t+463|0]=36,g[t+464|0]=22,g[t+465|0]=224,g[t+456|0]=22,g[t+457|0]=22,g[t+458|0]=44,g[t+459|0]=22,g[t+454|0]=46,g[t+455|0]=129,g[t+446|0]=22,g[t+447|0]=38,g[t+448|0]=28,g[t+449|0]=193,g[t+450|0]=38,g[t+451|0]=22,g[t+452|0]=46,g[t+453|0]=46,g[t+441|0]=129,g[t+442|0]=38,g[t+443|0]=22,g[t+444|0]=38,g[t+445|0]=193,A[t+332>>2]=104912,A[t+336>>2]=104916,A[t+340>>2]=105232,g[t+296|0]=18,g[t+297|0]=18,b[t+304>>1]=182,b[t+306>>1]=140,g[t+298|0]=20,b[t+308>>1]=220,b[t+310>>1]=220,b[t+312>>1]=220,g[t+299|0]=20,g[t+300|0]=20,b[t+314>>1]=240,g[t+301|0]=22,b[t+316>>1]=260,b[t+318>>1]=280,g[t+302|0]=22,g[t+303|0]=20,r=je(t,0,212),A[r+200>>2]=20,A[r+192>>2]=25966,A[r+196>>2]=500,A[r+80>>2]=95,A[r+16>>2]=1,A[r+20>>2]=3,A[r+8>>2]=2,A[r+52>>2]=19,g[r+168|0]=3,A[r+92>>2]=2,A[r+72>>2]=4,A[r+40>>2]=115,A[r+44>>2]=95,A[r+140>>2]=105244,vn(r,201),A[r+120>>2]=2,A[r+124>>2]=44,A[r+164>>2]=100,A[r+128>>2]=46,A[r+132>>2]=14,A[r+112>>2]=1227133512,A[r+116>>2]=49,A[r+104>>2]=1,a=A[26313],A[r+636>>2]=A[26312],A[r+640>>2]=a,a=A[26315],A[r+644>>2]=A[26314],A[r+648>>2]=a,a=A[26317],A[r+652>>2]=A[26316],A[r+656>>2]=a,a=A[26319],A[r+660>>2]=A[26318],A[r+664>>2]=a,a=A[26321],A[r+668>>2]=A[26320],A[r+672>>2]=a,a=A[26323],A[r+676>>2]=A[26322],A[r+680>>2]=a,a=l[104928]|l[104929]<<8,g[r+160|0]=a,g[r+161|0]=a>>>8,a=l[104924]|l[104925]<<8|l[104926]<<16|l[104927]<<24,g[r+156|0]=a,g[r+157|0]=a>>>8,g[r+158|0]=a>>>16,g[r+159|0]=a>>>24),s=qe(t+228|0,e),r=0;A:{e:if(a=l[0|e]){for(;r=(a<<24>>24)+(r<<8)|0,a=l[0|(e=e+1|0)];);r:{s:{i:{c:{o:{u:{l:{n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{W:{V:{M:{B:{D:{F:{q:{Y:{Z:{S:{sA:{H:{yA:{U:{d:{f:{$:{k:{AA:{I:{a:{WA:{J:{t:{fA:{R:{pA:{hA:{VA:{lA:{N:{EA:{v:{MA:{_:{mA:{GA:{jA:{DA:{QA:{TA:{PA:{zA:{FA:{CA:{UA:{eA:{SA:{KA:{NA:{OA:{G:{bA:{if((0|r)<=28008){if((0|r)<=26464){if((0|r)<=25696){switch(r-24934|0){case 20:break n;case 1:case 2:case 3:case 4:case 5:case 6:case 9:case 10:case 11:case 14:case 15:case 16:case 17:case 18:case 19:break e;case 8:break _;case 12:break FA;case 7:break CA;case 0:break UA;case 13:break bA}switch(r-25189|0){case 1:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 11:case 12:case 13:break e;case 14:break fA;case 2:break PA;case 0:break zA;case 9:break bA}switch(r-25441|0){case 18:break y;case 0:break _;case 24:break QA;default:break e}}switch(r-25964|0){case 1:case 4:case 5:case 6:break e;case 8:break EA;case 9:break MA;case 7:break _;case 3:break mA;case 2:break GA;case 0:break OA}switch(r-26209|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:break e;case 17:break lA;case 8:break N;case 0:break v}switch(r-25697|0){case 4:break jA;case 0:break DA;default:break e}}if((0|r)<=27488){switch(r-26729|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 13:case 14:case 15:break e;case 16:break WA;case 12:break J;case 11:break t;case 9:break fA;case 0:break R}switch(r-26977|0){case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 15:case 16:case 17:break e;case 19:break k;case 18:break AA;case 3:break I;case 14:break a;case 0:break _}switch(r-26465|0){case 20:break R;case 13:break pA;case 0:case 3:break hA;default:break e}}switch(r-27489|0){case 13:break p;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 12:case 15:case 16:case 17:case 18:case 19:case 21:case 22:case 23:break e;case 24:break sA;case 20:break H;case 14:break yA;case 11:break U;case 10:break d;case 0:break f}switch(r-27745|0){case 19:break Z;case 0:break S;case 21:break KA;default:break e}}if((0|r)<=29792){if((0|r)<=28768){switch(r-28009|0){case 3:break p;case 11:break q;case 2:break Y;case 1:case 4:case 5:case 6:case 7:case 8:case 12:case 13:case 14:case 15:break e;case 10:break I;case 9:break R;case 0:case 16:break eA}switch(r-28258|0){case 0:break D;case 10:break F;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:break e;case 3:break R}switch(r-28525|0){case 0:break B;case 5:break R;default:break e}}if((0|r)<=29539){switch(r-28769|0){case 19:break V;case 11:break M;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 20:case 21:case 22:case 23:break e;case 0:break R;case 24:break eA}switch(r-29295|0){case 6:break L;case 0:break W;case 1:case 2:case 3:case 4:case 5:break e}if((0|r)==29045)break eA;break e}switch(r-29540|0){case 19:break C;case 18:break m;case 13:break b;case 8:break E;case 5:break w;case 7:break y;case 14:break fA;case 0:break o;default:break e}}if((0|r)>6514801)break G;if((0|r)<=30058)switch(r-29793|0){case 19:break l;case 17:break n;case 0:case 4:break p;case 13:break C;case 7:break eA;default:break e}if((0|r)<=30312)switch(r-30059|0){case 0:break u;case 15:break eA;case 7:break o;default:break e}if((0|r)==30313)break c;if((0|r)==31336)break i;if((0|r)!=6451321)break e}if(A[t+296>>2]=303174162,A[t+300>>2]=370545684,A[t+600>>2]=2432,A[t+8>>2]=0,A[t+12>>2]=65540,A[t+100>>2]=A[t+96>>2],e=A[25889],A[t+304>>2]=A[25888],A[t+308>>2]=e,e=A[25891],A[t+312>>2]=A[25890],A[t+316>>2]=e,gs(t),g[t+345|0]=2|l[t+345|0],g[t+406|0]=16|l[t+406|0],g[t+407|0]=16|l[t+407|0],g[t+408|0]=16|l[t+408|0],g[t+409|0]=16|l[t+409|0],g[t+410|0]=16|l[t+410|0],g[t+411|0]=16|l[t+411|0],g[t+412|0]=16|l[t+412|0],g[t+413|0]=16|l[t+413|0],g[t+414|0]=16|l[t+414|0],g[t+415|0]=16|l[t+415|0],g[t+416|0]=16|l[t+416|0],g[t+417|0]=16|l[t+417|0],g[t+418|0]=16|l[t+418|0],g[t+419|0]=16|l[t+419|0],g[t+420|0]=16|l[t+420|0],g[t+456|0]=4|l[t+456|0],g[t+457|0]=4|l[t+457|0],A[t+112>>2]=613567144,A[t+104>>2]=16,(0|r)!=6451321)break A;A[t+104>>2]=1,A[t+108>>2]=512,r=6451321;break A}if((0|r)>7364975)break SA;if((0|r)>6840682)break NA;if((0|r)==6514802)break TA;if((0|r)==6516078)break i;if((0|r)!=6779491)break e}if(A[t+600>>2]=896,A[t+328>>2]=8,A[t+296>>2]=336858127,A[t+300>>2]=353768980,A[t+332>>2]=103632,e=A[25905],A[t+304>>2]=A[25904],A[t+308>>2]=e,e=A[25907],A[t+312>>2]=A[25906],A[t+316>>2]=e,je(t+344|0,0,256),g[t+388|0]=129,g[t+389|0]=129,g[t+390|0]=129,g[t+391|0]=129,g[t+420|0]=129,g[t+421|0]=129,g[t+422|0]=129,g[t+423|0]=129,g[t+360|0]=129,g[t+392|0]=129,g[t+393|0]=129,g[t+417|0]=129,g[t+418|0]=129,g[t+419|0]=129,g[t+420|0]=129,g[t+408|0]=6,g[t+409|0]=4,g[t+410|0]=6,g[t+411|0]=6,g[t+412|0]=6,g[t+413|0]=193,g[t+414|0]=6,g[t+415|0]=6,g[t+406|0]=6,g[t+407|0]=129,g[t+398|0]=4,g[t+399|0]=193,g[t+400|0]=6,g[t+401|0]=193,g[t+402|0]=6,g[t+403|0]=4,g[t+404|0]=4,g[t+405|0]=4,g[t+394|0]=4,g[t+395|0]=4,g[t+396|0]=4,g[t+397|0]=193,A[t+44>>2]=130,A[t+8>>2]=2,A[t+12>>2]=6,A[t+16>>2]=0,A[t+20>>2]=2,A[t+104>>2]=264,A[t+108>>2]=6146,g[t+391|0]=193,g[t+389|0]=193,g[t+390|0]=193,g[t+421|0]=193,A[t+100>>2]=A[t+96>>2],g[t+416|0]=4|l[t+416|0],(0|r)!=6779491)break A;A[t+40>>2]=1,r=6779491;break A}if((0|r)==6840683)break VA;if((0|r)==6972015)break $;if((0|r)!=7107687)break e}A[t+296>>2]=134875662,A[t+300>>2]=252968960,A[t+328>>2]=5,g[t+169|0]=1,A[t+132>>2]=33,A[t+104>>2]=99336,A[t+8>>2]=0,A[t+12>>2]=262182,e=A[26069],A[t+304>>2]=A[26068],A[t+308>>2]=e,e=A[26071],A[t+312>>2]=A[26070],A[t+316>>2]=e;break A}if((0|r)<=7564649){if((0|r)==7364976)break _;if((0|r)==7435619)break eA;if((0|r)!=7563374)break e;A[t+148>>2]=1,A[t+112>>2]=24,A[t+104>>2]=1,A[t+100>>2]=A[t+96>>2],r=7563374;break A}if((0|r)==7564650)break h;if((0|r)==7959909)break i;if((0|r)!=1885958500)break e}A[t+104>>2]=0;break A}A[t+4>>2]=48,A[t+8>>2]=0,A[t+144>>2]=1,A[t+104>>2]=16779472,A[t+32>>2]=1,A[t+24>>2]=1,e=A[25881],A[t+304>>2]=A[25880],A[t+308>>2]=e,e=A[25883],A[t+312>>2]=A[25882],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=24934;break A}A[t+600>>2]=4608,A[t+296>>2]=303173650,A[t+300>>2]=303174162,A[t+8>>2]=0,A[t+12>>2]=36,A[t+104>>2]=1024,A[t+100>>2]=A[t+96>>2],A[t+40>>2]=1,e=A[25865],A[t+304>>2]=A[25864],A[t+308>>2]=e,e=A[25867],A[t+312>>2]=A[25866],A[t+316>>2]=e,r=24941;break A}for(A[t+600>>2]=1536,A[t+224>>2]=0,A[t+216>>2]=1631,A[t+220>>2]=1536,A[t+104>>2]=2884720,A[t+328>>2]=7,A[t+40>>2]=1,J=r=J-16|0,A[r+12>>2]=-1,e=89684;s=Gt(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=1|l[0|i]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=89743;s=Gt(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=2|l[0|i]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=89795;s=Gt(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=4|l[0|i]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=89941;s=Gt(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=16|l[0|i]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=90045;s=Gt(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=32|l[0|i]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=90045;s=Gt(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=8|l[0|i]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=90045;s=Gt(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(g[0|(i=(t+a|0)-1192|0)]=64|l[0|i]),e=e+s|0,a;);J=r+16|0,r=24946;break A}A[t+600>>2]=1056,A[t+12>>2]=34,A[t+216>>2]=1118,A[t+220>>2]=1072,je(t+344|0,0,256),g[t+406|0]=4,g[t+366|0]=4,g[t+367|0]=4,g[t+369|0]=4,g[t+370|0]=4,g[t+371|0]=4,g[t+372|0]=4,g[t+361|0]=4,g[t+362|0]=4,g[t+363|0]=4,g[t+364|0]=4,g[t+373|0]=4,g[t+380|0]=4,g[t+381|0]=4,g[t+382|0]=4,g[t+383|0]=4,g[t+375|0]=4,g[t+376|0]=4,g[t+377|0]=4,g[t+378|0]=4,g[t+384|0]=4,g[t+360|0]=129,A[t+328>>2]=6,A[t+296>>2]=134744588,A[t+300>>2]=286261248,A[t+40>>2]=1,A[t+8>>2]=0,A[t+104>>2]=1032,A[t+108>>2]=66,e=A[25885],A[t+304>>2]=A[25884],A[t+308>>2]=e,e=A[25887],A[t+312>>2]=A[25886],A[t+316>>2]=e,r=25189;break A}ws(t),A[t+328>>2]=6,A[t+56>>2]=2,A[t+36>>2]=263,A[t+40>>2]=1074,A[t+124>>2]=32,A[t+104>>2]=184554728,A[t+8>>2]=2,g[t+386|0]=64&l[t+386|0]|129,r=25191;break A}A[t+12>>2]=262182,A[t+40>>2]=1,r=6514802;break A}A[t+328>>2]=14,A[t+296>>2]=303173393,A[t+300>>2]=336986112,A[t+104>>2]=1024,A[t+16>>2]=0,A[t+20>>2]=2,A[t+8>>2]=2,A[t+12>>2]=22,A[t+44>>2]=120,e=A[25893],A[t+304>>2]=A[25892],A[t+308>>2]=e,e=A[25895],A[t+312>>2]=A[25894],A[t+316>>2]=e,g[t+463|0]=64&l[t+463|0]|129,g[t+465|0]=64&l[t+465|0]|129,r=25465;break A}A[t+8>>2]=0,A[t+104>>2]=184618072,A[t+32>>2]=1,e=A[26101],A[t+304>>2]=A[26100],A[t+308>>2]=e,e=A[26103],A[t+312>>2]=A[26102],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=25697;break A}A[t+296>>2]=336860180,A[t+300>>2]=336991764,A[t+8>>2]=0,A[t+104>>2]=16846872,A[t>>2]=8,A[t+4>>2]=48,A[t+80>>2]=87,A[t+32>>2]=1,A[t+36>>2]=256,A[t+40>>2]=2,e=A[25897],A[t+304>>2]=A[25896],A[t+308>>2]=e,e=A[25899],A[t+312>>2]=A[25898],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=25701;break A}A[t+132>>2]=33,A[t+104>>2]=16779328,A[t+8>>2]=0,A[t+12>>2]=8,A[t+204>>2]=101,A[t+60>>2]=2,A[t+40>>2]=2,e=A[25901],A[t+304>>2]=A[25900],A[t+308>>2]=e,e=A[25903],A[t+312>>2]=A[25902],A[t+316>>2]=e,g[t+441|0]=64|l[t+441|0],g[t+445|0]=64|l[t+445|0],g[t+449|0]=64|l[t+449|0],g[t+455|0]=64|l[t+455|0],g[t+461|0]=64|l[t+461|0],g[t+465|0]=64|l[t+465|0],r=25966;break A}A[t+328>>2]=4,A[t+296>>2]=336858640,A[t+300>>2]=353768980,A[t+104>>2]=16782344,A[t+20>>2]=2,A[t+12>>2]=22,A[t+4>>2]=2,A[t+8>>2]=2,A[t+332>>2]=103640,e=A[25997],A[t+304>>2]=A[25996],A[t+308>>2]=e,e=A[25999],A[t+312>>2]=A[25998],A[t+316>>2]=e,r=25967;break A}A[t+296>>2]=269422096,A[t+300>>2]=370545684,A[t+104>>2]=86017320,A[t+108>>2]=6144,A[t+16>>2]=0,A[t+20>>2]=2,A[t+8>>2]=2,A[t+12>>2]=534,A[t+100>>2]=A[t+96>>2],A[t+44>>2]=120,e=A[25913],A[t+304>>2]=A[25912],A[t+308>>2]=e,e=A[25915],A[t+312>>2]=A[25914],A[t+316>>2]=e;_:{mA:{if((0|r)<=26976){if((0|r)==24942)break mA;if((0|r)!=25441)break _;A[t+12>>2]=566,A[t+336>>2]=103664,r=25441;break A}if((0|r)!=26977){if((0|r)!=7364976)break _;A[t+8>>2]=3,A[t+12>>2]=310,r=7364976;break A}A[t+104>>2]=85984264,r=26977;break A}A[t+104>>2]=153093416,A[t+108>>2]=2048,A[t+140>>2]=103676,r=24942;break A}A[t+40>>2]=2;break A}A[t+296>>2]=303173648,A[t+300>>2]=303174162,A[t+104>>2]=3147080,A[t+12>>2]=65792,A[t+84>>2]=1,e=A[25921],A[t+304>>2]=A[25920],A[t+308>>2]=e,e=A[25923],A[t+312>>2]=A[25922],A[t+316>>2]=e,r=25973;break A}A[t+600>>2]=1536,A[t+216>>2]=1740,A[t+220>>2]=1568,A[t+104>>2]=96,A[t+224>>2]=103696,A[t+340>>2]=103872,A[t+40>>2]=1,r=26209;break A}A[t+328>>2]=5}A[t+104>>2]=86024,A[t+164>>2]=130,g[t+465|0]=64&l[t+465|0]|129;break A}A[t+296>>2]=303173650,A[t+300>>2]=303174162,A[t+8>>2]=3,A[t+12>>2]=36,A[t+144>>2]=2,A[t+104>>2]=118658312,A[t+28>>2]=1,A[t+100>>2]=A[t+96>>2],e=A[25865],A[t+304>>2]=A[25864],A[t+308>>2]=e,e=A[25867],A[t+312>>2]=A[25866],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=26226;break A}b[t+170>>1]=257,A[t+148>>2]=1,A[t+12>>2]=2,r=6840683;break A}A[t+144>>2]=2,A[t+104>>2]=2098176,A[t+8>>2]=0,A[t+12>>2]=32,A[t+40>>2]=3,A[t+28>>2]=1;break A}A[t+8>>2]=3,A[t+100>>2]=A[t+96>>2],r=26478;break A}A[t+328>>2]=18,A[t+296>>2]=320081425,A[t+300>>2]=353768980,A[t+600>>2]=2304,A[t+112>>2]=84648,A[t+104>>2]=16,A[t+8>>2]=6,A[t+12>>2]=65540,A[t+100>>2]=A[t+96>>2],e=A[25973],A[t+304>>2]=A[25972],A[t+308>>2]=e,e=A[25975],A[t+312>>2]=A[25974],A[t+316>>2]=e;R:{pA:{hA:{if((0|r)<=28529){if((0|r)==26485)break hA;if((0|r)!=28261)break R;e=A[25861],A[t+304>>2]=A[25860],A[t+308>>2]=e,e=A[25863],A[t+312>>2]=A[25862],A[t+316>>2]=e,A[t+296>>2]=320017171,A[t+300>>2]=320017171,A[t+132>>2]=22,A[t+112>>2]=-1431655768,A[t+108>>2]=32768|A[t+108>>2],gs(t);break A}if((0|r)==28530)break pA;if((0|r)!=28769)break R;A[t+600>>2]=2560,gs(t);break A}e=A[25861],A[t+304>>2]=A[25860],A[t+308>>2]=e,e=A[25863],A[t+312>>2]=A[25862],A[t+316>>2]=e,A[t+600>>2]=2688,A[t+296>>2]=320017171,A[t+300>>2]=320017171,A[t+8>>2]=2,gs(t);break A}A[t+600>>2]=2816}gs(t);break A}g[0|s]=104,g[s+1|0]=98,g[s+2|0]=115,g[s+3|0]=0,(0|r)!=29554?(e=A[26093],A[t+304>>2]=A[26092],A[t+308>>2]=e,e=A[26095],A[t+312>>2]=A[26094],A[t+316>>2]=e):(e=A[25977],A[t+304>>2]=A[25976],A[t+308>>2]=e,e=A[25979],A[t+312>>2]=A[25978],A[t+316>>2]=e),A[t+328>>2]=3,A[t+296>>2]=336859409,A[t+300>>2]=353768980,b[t+168>>1]=261,A[t+8>>2]=0,A[t+12>>2]=16,A[t+144>>2]=1,A[t+184>>2]=1056,A[t+104>>2]=33572172,A[t+108>>2]=330,A[t+36>>2]=3,g[t+465|0]=64&l[t+465|0]|129,g[t+458|0]=64&l[t+458|0]|129;break A}A[t+104>>2]=17990912,A[t+8>>2]=3,A[t+12>>2]=36,r=26740;break A}A[t+328>>2]=3,A[t+296>>2]=320016657,A[t+300>>2]=353768980,A[t+124>>2]=32,A[t+128>>2]=44,A[t+104>>2]=186758144,A[t+12>>2]=1081398,A[t+16>>2]=2,A[t+4>>2]=32,A[t+8>>2]=0,A[t+116>>2]=899,A[t+120>>2]=1,g[t+169|0]=1,A[t+76>>2]=2,e=A[25981],A[t+304>>2]=A[25980],A[t+308>>2]=e,e=A[25983],A[t+312>>2]=A[25982],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,vn(t,3),r=26741;break A}for(A[t+600>>2]=1328,A[t+8>>2]=3,e=A[25985],A[t+304>>2]=A[25984],A[t+308>>2]=e,e=A[25987],A[t+312>>2]=A[25986],A[t+316>>2]=e,s=je(t+344|0,0,256),g[t+429|0]=129,g[t+416|0]=129,g[t+403|0]=129,g[t+399|0]=129,g[t+400|0]=129,g[t+397|0]=129,g[t+393|0]=129,a=103952,i=50,o=50;g[0|(e=s+o|0)]=2|l[0|e],e=s+l[a+1|0]|0,g[0|e]=2|l[0|e],e=s+l[a+2|0]|0,g[0|e]=2|l[0|e],o=l[0|(a=a+3|0)],e=103952,(0|a)!=103982;);for(a=t+344|0;g[0|(s=a+i|0)]=4|l[0|s],s=a+l[e+1|0]|0,g[0|s]=4|l[0|s],s=a+l[e+2|0]|0,g[0|s]=4|l[0|s],i=l[0|(e=e+3|0)],(0|e)!=103982;);g[t+168|0]=6,A[t+104>>2]=5128,g[t+413|0]=4|l[t+413|0];break A}A[t+328>>2]=4,A[t+296>>2]=336858640,A[t+300>>2]=353768980,A[t+104>>2]=16782440,A[t+20>>2]=2,A[t+12>>2]=22,A[t+4>>2]=2,A[t+8>>2]=2,A[t+332>>2]=104e3,e=A[25997],A[t+304>>2]=A[25996],A[t+308>>2]=e,e=A[25999],A[t+312>>2]=A[25998],A[t+316>>2]=e,r=26991;break A}A[t+296>>2]=303174160,A[t+300>>2]=353768980,A[t+104>>2]=16781320,A[t+144>>2]=2,A[t+8>>2]=2,A[t+12>>2]=22,e=A[26005],A[t+304>>2]=A[26004],A[t+308>>2]=e,e=A[26007],A[t+312>>2]=A[26006],A[t+316>>2]=e;break A}for(A[t+8>>2]=0,A[t+12>>2]=16,A[t+56>>2]=2,A[t+28>>2]=17,e=A[26009],A[t+304>>2]=A[26008],A[t+308>>2]=e,e=A[26011],A[t+312>>2]=A[26010],A[t+316>>2]=e,e=0,a=t+344|0;g[0|(s=e+a|0)]=231&l[0|s],g[0|(s=a+(1|e)|0)]=231&l[0|s],g[0|(s=a+(2|e)|0)]=231&l[0|s],g[0|(s=a+(3|e)|0)]=231&l[0|s],(0|(e=e+4|0))!=256;);A[t+104>>2]=2280,A[t+108>>2]=2,A[t+608>>2]=104048,g[t+451|0]=16|l[t+451|0],g[t+456|0]=16|l[t+456|0],g[t+459|0]=16|l[t+459|0],g[t+460|0]=16|l[t+460|0],g[t+450|0]=8|l[t+450|0],g[t+462|0]=8|l[t+462|0],g[t+458|0]=8|l[t+458|0],g[t+465|0]=64&l[t+465|0]|129;break A}A[t+296>>2]=269618961,A[t+300>>2]=370546196,A[t+12>>2]=131110,A[t+144>>2]=2,A[t+104>>2]=184559112,A[t+108>>2]=8192,A[t+16>>2]=0,A[t+20>>2]=2,A[t+4>>2]=1,A[t+8>>2]=2,A[t+100>>2]=A[t+96>>2],A[t+140>>2]=103676,A[t+68>>2]=2,A[t+56>>2]=1,A[t+44>>2]=130,A[t+28>>2]=2,e=A[26025],A[t+304>>2]=A[26024],A[t+308>>2]=e,e=A[26027],A[t+312>>2]=A[26026],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=26996;break A}A[t+4>>2]=524,A[t+8>>2]=2,A[t+196>>2]=368,A[t+104>>2]=0,A[t+336>>2]=104128,A[t- -64>>2]=1,e=A[26029],A[t+304>>2]=A[26028],A[t+308>>2]=e,e=A[26031],A[t+312>>2]=A[26030],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=6972015;break A}for(A[t+296>>2]=303174162,A[t+300>>2]=370545684,e=A[25873],A[t+304>>2]=A[25872],A[t+308>>2]=e,e=A[25875],A[t+312>>2]=A[25874],A[t+316>>2]=e,s=je(t+344|0,0,256),g[t+431|0]=1,g[t+429|0]=1,g[t+411|0]=1,g[t+405|0]=1,g[t+400|0]=1,g[t+396|0]=1,g[t+392|0]=1,e=104160,a=49;g[0|(a=a+s|0)]=4|l[0|a],a=s+l[e+1|0]|0,g[0|a]=4|l[0|a],a=s+l[e+2|0]|0,g[0|a]=4|l[0|a],a=l[0|(e=e+3|0)],(0|e)!=104193;);A[t+600>>2]=4256,A[t+8>>2]=0,A[t+12>>2]=16,g[t+168|0]=7,A[t+132>>2]=32,g[t+392|0]=128|l[t+392|0],g[t+396|0]=128|l[t+396|0],g[t+400|0]=128|l[t+400|0],g[t+405|0]=128|l[t+405|0],g[t+411|0]=128|l[t+411|0],g[t+429|0]=128|l[t+429|0],g[t+431|0]=128|l[t+431|0],A[t+188>>2]=1056,A[t+192>>2]=29301,A[t+104>>2]=19964960;break A}for(A[t+600>>2]=1056,s=je(t+344|0,0,256),g[t+393|0]=1,g[t+365|0]=1,g[t+360|0]=1,g[t+545|0]=1,g[t+529|0]=1,g[t+391|0]=1,g[t+389|0]=1,g[t+390|0]=1,g[t+387|0]=1,g[t+379|0]=1,g[t+374|0]=1,g[t+368|0]=1,g[t+489|0]=1,g[t+487|0]=1,g[t+398|0]=1,e=104224,a=17;g[0|(a=a+s|0)]=4|l[0|a],a=s+l[e+1|0]|0,g[0|a]=4|l[0|a],a=s+l[e+2|0]|0,g[0|a]=4|l[0|a],a=l[0|(e=e+3|0)],(0|e)!=104251;);g[t+360|0]=128|l[t+360|0],g[t+365|0]=128|l[t+365|0],g[t+393|0]=128|l[t+393|0],g[t+368|0]=128|l[t+368|0],g[t+374|0]=128|l[t+374|0],g[t+379|0]=128|l[t+379|0],g[t+387|0]=128|l[t+387|0],g[t+389|0]=128|l[t+389|0],g[t+390|0]=128|l[t+390|0],g[t+391|0]=128|l[t+391|0],g[t+529|0]=128|l[t+529|0],g[t+545|0]=128|l[t+545|0],g[t+489|0]=128|l[t+489|0],g[t+487|0]=128|l[t+487|0],g[t+398|0]=128|l[t+398|0],e=A[26055],A[t+312>>2]=A[26054],A[t+316>>2]=e,e=A[26053],A[t+304>>2]=A[26052],A[t+308>>2]=e,A[t+296>>2]=353636370,A[t+300>>2]=336925972,A[t+200>>2]=0,A[t+8>>2]=7,A[t+12>>2]=2097184,g[t+168|0]=2,A[t+104>>2]=50176,A[t+84>>2]=1,vn(t,3);break A}A[t+296>>2]=320017171,A[t+300>>2]=320017171,A[t+104>>2]=184618072,A[t+8>>2]=12,A[t+12>>2]=32,e=A[25861],A[t+304>>2]=A[25860],A[t+308>>2]=e,e=A[25863],A[t+312>>2]=A[25862],A[t+316>>2]=e,r=27500;break A}A[t+184>>2]=42752,A[t+600>>2]=4352,je(t+344|0,0,256),g[t+456|0]=1,g[t+457|0]=1,g[t+458|0]=1,g[t+459|0]=1,g[t+449|0]=1,g[t+450|0]=1,g[t+451|0]=1,g[t+452|0]=1,g[t+453|0]=1,g[t+454|0]=1,g[t+455|0]=1,g[t+456|0]=1,g[t+441|0]=1,g[t+442|0]=1,g[t+443|0]=1,g[t+444|0]=1,g[t+445|0]=1,g[t+446|0]=1,g[t+447|0]=1,g[t+448|0]=1,g[t+460|0]=65,g[t+461|0]=65,g[t+532|0]=32,g[t+527|0]=32,g[t+519|0]=32,g[t+515|0]=32,g[t+349|0]=32,g[t+350|0]=32,g[t+346|0]=32,A[t+132>>2]=20,A[t+112>>2]=286331152,A[t+104>>2]=1024,A[t+108>>2]=16384,A[t+40>>2]=1,A[t+8>>2]=8,g[t+458|0]=65,g[t+453|0]=65,g[t+447|0]=65,g[t+448|0]=65,g[t+443|0]=65,g[t+444|0]=65,r=27503;break A}A[t+328>>2]=10,A[t+296>>2]=336859666,A[t+300>>2]=353768980,g[t+168|0]=2,A[t+104>>2]=263264,A[t+8>>2]=7,e=A[26065],A[t+304>>2]=A[26064],A[t+308>>2]=e,e=A[26067],A[t+312>>2]=A[26066],A[t+316>>2]=e,r=27509;break A}A[t+104>>2]=1,r=27513;break A}A[t+116>>2]=5e3,A[t+104>>2]=16777216,A[t+24>>2]=1,A[t+16>>2]=0,A[t+20>>2]=2,A[t+8>>2]=2,A[t+12>>2]=32,A[t+328>>2]=5,r=27745;break A}A[t+116>>2]=5e3,A[t+104>>2]=99336,A[t+108>>2]=256,A[t+24>>2]=1,A[t+16>>2]=0,A[t+20>>2]=2,A[t+8>>2]=2,A[t+12>>2]=32,A[t+328>>2]=5,r=27764;break A}A[t+328>>2]=6,A[t+296>>2]=336859409,A[t+300>>2]=353768980,A[t+600>>2]=1056,A[t+104>>2]=2114600,A[t+108>>2]=138,A[t+8>>2]=4,A[t+632>>2]=104288,A[t+604>>2]=104288,e=A[26093],A[t+304>>2]=A[26092],A[t+308>>2]=e,e=A[26095],A[t+312>>2]=A[26094],A[t+316>>2]=e,r=28011;break A}A[t+328>>2]=4,A[t+104>>2]=1,A[t+8>>2]=2,A[t+36>>2]=256,r=28020;break A}A[t+4>>2]=48,A[t+8>>2]=0,A[t+12>>2]=128,A[t+104>>2]=2169880,A[t+32>>2]=1,A[t+36>>2]=256,A[t+24>>2]=1,A[t+136>>2]=85767,e=A[26097],A[t+304>>2]=A[26096],A[t+308>>2]=e,e=A[26099],A[t+312>>2]=A[26098],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=28268;break A}A[t+8>>2]=0,A[t+104>>2]=71752,e=A[26101],A[t+304>>2]=A[26100],A[t+308>>2]=e,e=A[26103],A[t+312>>2]=A[26102],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=28258;break A}A[t+296>>2]=336858898,A[t+300>>2]=370546196,A[t+104>>2]=1088,A[t+108>>2]=512,A[t+8>>2]=2,A[t+12>>2]=524310,e=A[26105],A[t+304>>2]=A[26104],A[t+308>>2]=e,e=A[26107],A[t+312>>2]=A[26106],A[t+316>>2]=e,r=28525;break A}A[t+328>>2]=3,A[t+296>>2]=320015633,A[t+300>>2]=353768980,g[t+168|0]=7,A[t+8>>2]=2,A[t+12>>2]=6,A[t+104>>2]=20488,A[t+108>>2]=192,A[t+36>>2]=9,A[t+60>>2]=260,e=A[26109],A[t+304>>2]=A[26108],A[t+308>>2]=e,e=A[26111],A[t+312>>2]=A[26110],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=28780;break A}for(A[t+296>>2]=353569552,A[t+300>>2]=353768980,A[t+116>>2]=5e3,A[t+104>>2]=33570920,A[t+108>>2]=14336,A[t+8>>2]=3,A[t+12>>2]=139286,A[t+100>>2]=A[t+96>>2],e=A[26113],A[t+304>>2]=A[26112],A[t+308>>2]=e,e=A[26115],A[t+312>>2]=A[26114],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,e=0,a=t+344|0;g[0|(s=e+a|0)]=253&l[0|s],g[0|(s=a+(1|e)|0)]=253&l[0|s],g[0|(s=a+(2|e)|0)]=253&l[0|s],g[0|(s=a+(3|e)|0)]=253&l[0|s],(0|(e=e+4|0))!=256;);g[t+442|0]=2|l[t+442|0],g[t+443|0]=2|l[t+443|0],g[t+444|0]=2|l[t+444|0],g[t+446|0]=2|l[t+446|0],g[t+447|0]=2|l[t+447|0],g[t+450|0]=2|l[t+450|0],g[t+451|0]=2|l[t+451|0],g[t+453|0]=2|l[t+453|0],g[t+454|0]=2|l[t+454|0],g[t+456|0]=2|l[t+456|0],g[t+457|0]=2|l[t+457|0],g[t+459|0]=2|l[t+459|0],g[t+460|0]=2|l[t+460|0],g[t+462|0]=2|l[t+462|0],g[t+464|0]=2|l[t+464|0],g[t+466|0]=2|l[t+466|0],A[t+144>>2]=2,A[t+68>>2]=2;break A}A[t+296>>2]=303172879,A[t+300>>2]=353768980,A[t+328>>2]=3,A[t+8>>2]=3,A[t+12>>2]=262,A[t+104>>2]=16805928,A[t+108>>2]=30,e=A[26117],A[t+304>>2]=A[26116],A[t+308>>2]=e,e=A[26119],A[t+312>>2]=A[26118],A[t+316>>2]=e,r=29295;break A}on(t),r=29301;break A}for(A[t+328>>2]=3,A[t+296>>2]=336859153,A[t+300>>2]=353768980,b[t+168>>1]=261,A[t+8>>2]=0,A[t+12>>2]=22,A[t+124>>2]=0,A[t+128>>2]=44,A[t+104>>2]=16794624,A[t+108>>2]=128,A[t+36>>2]=3,A[t+60>>2]=4,e=A[25869],A[t+304>>2]=A[25868],A[t+308>>2]=e,e=A[25871],A[t+312>>2]=A[25870],A[t+316>>2]=e,(0|r)==25459&&(A[t+108>>2]=136),g[t+465|0]=64&l[t+465|0]|129,g[t+458|0]=64&l[t+458|0]|129,e=0,a=t+344|0;g[0|(s=e+a|0)]=223&l[0|s],g[0|(s=a+(1|e)|0)]=223&l[0|s],g[0|(s=a+(2|e)|0)]=223&l[0|s],g[0|(s=a+(3|e)|0)]=223&l[0|s],(0|(e=e+4|0))!=256;);g[t+442|0]=32|l[t+442|0],g[t+444|0]=32|l[t+444|0],g[t+447|0]=32|l[t+447|0],g[t+450|0]=32|l[t+450|0],g[t+452|0]=32|l[t+452|0],g[t+453|0]=32|l[t+453|0],g[t+454|0]=32|l[t+454|0],g[t+458|0]=32|l[t+458|0],g[t+462|0]=32|l[t+462|0],g[t+463|0]=32|l[t+463|0],g[t+466|0]=32|l[t+466|0],g[t+441|0]=32|l[t+441|0],g[t+445|0]=32|l[t+445|0],g[t+449|0]=32|l[t+449|0],g[t+455|0]=32|l[t+455|0],g[t+461|0]=32|l[t+461|0],g[t+465|0]=32|l[t+465|0];break A}for(A[t+296>>2]=303174162,A[t+300>>2]=370545684,A[t+600>>2]=3456,g[t+169|0]=1,A[t+8>>2]=0,A[t+12>>2]=22,A[t+100>>2]=A[t+96>>2],e=A[25873],A[t+304>>2]=A[25872],A[t+308>>2]=e,e=A[25875],A[t+312>>2]=A[25874],A[t+316>>2]=e,je(t+344|0,0,256),g[t+365|0]=1,g[t+366|0]=1,g[t+357|0]=1,g[t+358|0]=1,g[t+359|0]=1,g[t+360|0]=1,g[t+361|0]=1,g[t+362|0]=1,g[t+363|0]=1,g[t+364|0]=1,g[t+349|0]=1,g[t+350|0]=1,g[t+351|0]=1,g[t+352|0]=1,g[t+353|0]=1,g[t+354|0]=1,g[t+355|0]=1,g[t+356|0]=1,e=74,a=74;g[344+(s=t+a|0)|0]=1|l[s+344|0],g[s+345|0]=1|l[s+345|0],g[s+346|0]=1|l[s+346|0],(0|(a=a+3|0))!=116;);for(;g[344+(a=e+t|0)|0]=2|l[a+344|0],g[a+345|0]=2|l[a+345|0],g[a+346|0]=2|l[a+346|0],(0|(e=e+3|0))!=116;);for(a=26;g[344+(e=t+a|0)|0]=4|l[e+344|0],g[e+345|0]=4|l[e+345|0],g[e+346|0]=4|l[e+346|0],g[e+347|0]=4|l[e+347|0],g[e+348|0]=4|l[e+348|0],(0|(a=a+5|0))!=71;);A[t+112>>2]=84648,A[t+104>>2]=270589952,A[t+108>>2]=65536,A[t+40>>2]=1,A[t+204>>2]=A[t+600>>2]+74;break A}A[t+8>>2]=2,A[t+12>>2]=32,A[t+328>>2]=3,A[t+124>>2]=32,A[t+104>>2]=16864280,A[t+108>>2]=256,A[t+68>>2]=2,A[t+36>>2]=259,A[t+40>>2]=118,A[t+28>>2]=1,g[t+458|0]=128|l[t+458|0],r=29548;break A}A[t+296>>2]=370544658,A[t+300>>2]=370546196,A[t+164>>2]=130,A[t+8>>2]=0,A[t+12>>2]=86,A[t+104>>2]=87064,g[t+169|0]=1,A[t+152>>2]=3,e=A[26121],A[t+304>>2]=A[26120],A[t+308>>2]=e,e=A[26123],A[t+312>>2]=A[26122],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=7564650;break A}A[t+296>>2]=269487120,A[t+300>>2]=320148500,A[t+8>>2]=3,A[t+12>>2]=278,A[t+144>>2]=2,A[t+104>>2]=32872,e=A[26125],A[t+304>>2]=A[26124],A[t+308>>2]=e,e=A[26127],A[t+312>>2]=A[26126],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=29553;break A}A[t+296>>2]=336859152,A[t+300>>2]=353768980,A[t+8>>2]=0,A[t+144>>2]=1,A[t+104>>2]=6408,e=A[26129],A[t+304>>2]=A[26128],A[t+308>>2]=e,e=A[26131],A[t+312>>2]=A[26130],A[t+316>>2]=e,g[t+465|0]=64&l[t+465|0]|129,r=29558;break A}A[t+296>>2]=320015376,A[t+300>>2]=353768980,g[t+168|0]=4,A[t+12>>2]=22,A[t+4>>2]=1,A[t+8>>2]=2,A[t+104>>2]=1248,A[t+100>>2]=A[t+96>>2],e=A[26133],A[t+304>>2]=A[26132],A[t+308>>2]=e,e=A[26135],A[t+312>>2]=A[26134],A[t+316>>2]=e;break A}A[t+296>>2]=303174162,A[t+300>>2]=370545684,g[t+169|0]=1,A[t+8>>2]=0,A[t+12>>2]=22,A[t+112>>2]=5288,A[t+100>>2]=A[t+96>>2],e=A[25877],A[t+304>>2]=A[25876],A[t+308>>2]=e,e=A[25879],A[t+312>>2]=A[25878],A[t+316>>2]=e;p:switch(r-29793|0){default:if((0|r)!=27502){if((0|r)!=28012)break r;e=A[26137],A[t+304>>2]=A[26136],A[t+308>>2]=e,e=A[26139],A[t+312>>2]=A[26138],A[t+316>>2]=e,A[t+600>>2]=3328,A[t+296>>2]=320017171,A[t+300>>2]=320017171,A[t+104>>2]=2098176,A[t+108>>2]=131072,A[t+8>>2]=13;break r}A[t+104>>2]=1,A[t+600>>2]=3200;break r;case 4:break p;case 1:case 2:case 3:break r;case 0:break s}A[t+104>>2]=1,A[t+108>>2]=524288,A[t+600>>2]=3072;break r}A[t+328>>2]=10,A[t+296>>2]=353636370,A[t+300>>2]=336925972,g[t+173|0]=1,A[t+8>>2]=7,A[t+12>>2]=32,g[t+168|0]=2,A[t+84>>2]=1,e=A[26141],A[t+304>>2]=A[26140],A[t+308>>2]=e,A[t+104>>2]=(0|r)==24954?2118920:2114824,e=A[26143],A[t+312>>2]=A[26142],A[t+316>>2]=e;break A}ws(t),A[t+296>>2]=303173650,A[t+300>>2]=303174162,A[t+104>>2]=2131208,A[t+8>>2]=3,A[t+12>>2]=32,e=A[25865],A[t+304>>2]=A[25864],A[t+308>>2]=e,e=A[25867],A[t+312>>2]=A[25866],A[t+316>>2]=e,r=29812;break A}on(t),r=30059;break A}A[t+112>>2]=21160,A[t+104>>2]=16,A[t+600>>2]=1536,A[t+40>>2]=1;break A}A[t+296>>2]=269488144,A[t+300>>2]=370546198,A[t+8>>2]=0,A[t>>2]=33,A[t+148>>2]=1,A[t+104>>2]=12615688,A[t+16>>2]=2,A[t+100>>2]=A[t+96>>2],A[t+632>>2]=104592,A[t+604>>2]=104592,e=A[26145],A[t+304>>2]=A[26144],A[t+308>>2]=e,e=A[26147],A[t+312>>2]=A[26146],A[t+316>>2]=e,r=30313;break A}if(A[t+296>>2]=370544662,A[t+300>>2]=370546198,A[t+8>>2]=3,A[t+12>>2]=2,A[t+148>>2]=1,A[t+184>>2]=12544,b[t+170>>1]=257,A[t+176>>2]=1,g[t+172|0]=1,A[t>>2]=33,A[t+4>>2]=0,A[t+100>>2]=A[t+96>>2],e=A[26225],A[t+304>>2]=A[26224],A[t+308>>2]=e,e=A[26227],A[t+312>>2]=A[26226],A[t+316>>2]=e,(0|r)!=7959909)break A;A[t+112>>2]=24,A[t+104>>2]=1,A[t+108>>2]=1048576,r=7959909;break A}e=A[25873],A[t+304>>2]=A[25872],A[t+308>>2]=e,e=A[25875],A[t+312>>2]=A[25874],A[t+316>>2]=e,A[t+600>>2]=2944,A[t+104>>2]=2097152,A[t+108>>2]=262144,A[t+48>>2]=1}gs(t),g[t+422|0]=2|l[t+422|0];break A}A[t+40>>2]=1}return A[t+212>>2]=r,8&(e=A[t+104>>2])&&(A[t+124>>2]=46,A[t+128>>2]=44),4&e&&(A[t+124>>2]=0),t}function he(e){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0;A:{r=A[32538],A[47354]=0,A[47568]=0,A[49828]=0,A[47569]=0,g[199328]=0,A[49827]=0,A[49845]=0,g[190280]=0,g[190268]=1,A[47202]=0,A[49573]=0,A[49846]=0,g[199304]=0,g[199388]=0,A[33691]=0,A[33285]=0,A[33708]=1,A[33709]=1,A[33288]=0,t=A[33730],A[33712]=A[33729],A[33713]=t,t=A[33732],A[33714]=A[33731],A[33715]=t,t=A[33734],A[33716]=A[33733],A[33717]=t,t=A[33736],A[33718]=A[33735],A[33719]=t,t=A[33738],A[33720]=A[33737],A[33721]=t,t=A[33740],A[33722]=A[33739],A[33723]=t,t=A[33742],A[33724]=A[33741],A[33725]=t,A[33726]=A[33743],g[134784]=0,g[134824]=0,g[134772]=0,g[134760]=0,A[33284]=-1,A[33692]=0,A[32525]=0,A[47201]=A[33717],A[47200]=A[33718],Va(),A[34438]=0,A[34437]=0,t=A[33730],A[34048]=A[33729],A[34049]=t,t=A[33732],A[34050]=A[33731],A[34051]=t,t=A[33734],A[34052]=A[33733],A[34053]=t,t=A[33736],A[34054]=A[33735],A[34055]=t,t=A[33738],A[34056]=A[33737],A[34057]=t,t=A[33740],A[34058]=A[33739],A[34059]=t,t=A[33742],A[34060]=A[33741],A[34061]=t,A[34062]=A[33743];e:{r:{if(1&r){if(A[A[32539]>>2]=0,A[47569]|A[49845]|A[49827])break r;break e}if(A[A[32539]>>2]=0,!(A[49845]|A[49827]||A[47569]))break e}g[190280]=1}A[49828]=0,t=268436735;e:if(!(!A[34391]|!A[34388])&&(A[47204]=0,A[47203]=0,A[47199]=0,A[34439]=0,(A[47192]||!(t=t0(86228)))&&((t=A[33283])||((t=Ct(16))&&(A[t>>2]=0,A[t+4>>2]=0,A[t+8>>2]=0,A[t+12>>2]=0),A[33283]=t),i=268439807,(r=A[A[47192]+328>>2])>>>0>20|!A[129104+(r<<3)>>2]?t=i:(e?(i=4,s=He(e)+1|0):(i=2,s=0),A[t+8>>2]=i,A[t>>2]=e,A[t+12>>2]=A[129108+(r<<3)>>2],A[t+4>>2]=e?e+s|0:0,t=0),!t))){IA(0);r:{for(;;){A[34436]=0,e=A[34391],A[51290]=e,A[54046]=e+A[34390],A[50767]<=102399&&(A[50767]=102400);s:if(!((o=A[51290])>>>0>=uA[54046]))for(;;){if((((0|(e=(s=A[50757])-(c=A[50758])|0))<=0?e+170|0:e)-171|0)>=-1){if((0|(e=A[54731]))<=0)break s;i=0,A[50763]=0,A[50762]=0,A[50765]=2147483647,e=l[218920]?A[54732]:e;i:{for(;;){if(r=e-1|0,A[54732]=r,(0|e)<=0)break i;if(A[51290]=o+1,t=(e=A[51293])+1|0,A[51293]=(0|t)<=5499?t:0,t=(e=P(A[50755],b[205184+(e<<1)>>1]))>>8,g[0|o]=t,s=A[51290],A[51290]=s+1,g[0|s]=e>>>16,(s=A[50756])?(e=r,(r=A[s+4>>2])&&(lt[0|r](t<<16>>16),e=A[54732])):e=r,s=(r=A[51292])+1|0,A[51292]=s,b[205184+(r<<1)>>1]=t,(0|s)>=5500&&(A[51292]=0),o=A[51290],!(uA[54046]>=o+2>>>0))break}i=1}g[218920]=i;break s}e=A[4+(r=216192+(s<<4)|0)>>2];i:{c:{o:{u:{l:{n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{W:switch((255&(t=A[r>>2]))-1|0){case 9:break o;case 7:break u;case 10:break l;case 11:break n;case 13:break p;case 0:break C;case 1:break m;case 2:break b;case 3:break h;case 6:break E;case 5:break w;case 4:break y;case 15:break L;case 8:break W;default:break c}if(!A[50759])break c;t=A[r+12>>2],r=A[r+8>>2],A[50768]=0,o=r||99232,A[50766]=o,A[50769]=e?2097152/(0|e)|0:0,e=A[50971],s=(0|P(e,A[50788]))/50|0,r=P(s-e|0,-18),e=((0|(e=A[50785]))>=101?101:e)-A[50790]|0,t=(i=r+((0|P(A[50970],l[((0|e)>0?e:0)+105680|0]))/128|0)|0)+((0|P(s,(0|(e=t>>16))<(0|(r=65535&t))?e:r))/2|0)|0,A[50770]=t,e=(i+((0|P(s,(0|e)>(0|r)?e:r))/2|0)|0)-t|0,A[50771]=e,r=l[0|o],A[33072]=A[50976],A[50767]=t+(P(e,r)>>8);break c}lt[A[A[50756]>>2]](e,A[r+8>>2]),xt(e);break c}if(l[218920]||(A[54731]=A[54731]-e),A[50781]=100,A[50773]=0,_(),A[50763]=0,A[50762]=0,A[50765]=2147483647,!e)break c;for(e=l[218920]?A[54732]:e;;){if(r=e-1|0,A[54732]=r,(0|e)<=0)break c;if(e=A[51290],A[51290]=e+1,s=(t=A[51293])+1|0,A[51293]=(0|s)<=5499?s:0,s=e,t=(e=P(A[50755],b[205184+(t<<1)>>1]))>>8,g[0|s]=t,s=A[51290],A[51290]=s+1,g[0|s]=e>>>16,(s=A[50756])?(e=r,(r=A[s+4>>2])&&(lt[0|r](t<<16>>16),e=A[54732])):e=r,s=(r=A[51292])+1|0,A[51292]=s,b[205184+(r<<1)>>1]=t,(0|s)>=5500&&(A[51292]=0),s=1,!(uA[54046]>=A[51290]+2>>>0))break}break i}for(A[50773]=0,A[54731]=A[54729],_(),t=A[r+12>>2],s=A[r+8>>2],l[218920]?e=A[54733]:A[54734]=0,c=t>>8,i=255&t,A[50762]=0,A[50763]=0;;){if(r=e-1|0,A[54733]=r,(0|e)<=0)break c;if(t=(e=A[54734])+1|0,i?o=P(i,g[e+s|0]):(o=l[e+s|0]|g[t+s|0]<<8,t=e+2|0),A[54734]=t,f=(e=A[51293])+1|0,A[51293]=f,t=(0|(e=(0|(e=((0|P(c,P(A[33037],P(A[33038],o))>>10))/32|0)+(P(A[50755],b[205184+(e<<1)>>1])>>8)|0))<=-32768?-32768:e))>=32767?32767:e,(0|f)>=5500&&(A[51293]=0),g[A[51290]]=t,g[A[51290]+1|0]=t>>>8,(o=A[50756])?(e=r,(r=A[o+12>>2])&&(lt[0|r](t<<16>>16),e=A[54733])):e=r,r=A[51290],A[51290]=r+2,f=(o=A[51292])+1|0,A[51292]=f,b[205184+(o<<1)>>1]=(0|P(t,3))/4,(0|f)>=5500&&(A[51292]=0),!(uA[54046]>=r+4>>>0))break}s=1;break i}t=A[r+12>>2],s=e>>>16|0,A[50777]=s,e&=65535,A[50773]=e,i=255&t,A[50774]=i,A[50775]=t>>8,i||(A[50777]=s<<1,A[50773]=e<<1),A[50778]=0,A[50776]=0,A[50772]=A[r+8>>2];break c}A[50773]=0}if(A[54731]=A[54729],t=A[50759],l[218920]){if(!t)break c}else{if(!t)break c;for(i=A[r+12>>2],o=A[r+8>>2],r=e>>16,A[55912]=255&r,g[218960]=1,A[55908]=0,67108864&e&&(A[55908]=3,A[55909]=A[110496+(r>>>6&12)>>2]),134217728&e&&(A[55908]=4,A[55909]=A[110512+(r>>>6&12)>>2]),e&=65504;;){if((0|c)!=(0|(s=(0|(r=s+1|0))<=169?r:0)))if((0|(r=A[216192+(s<<4)>>2]))!=3){if(r-5>>>0>1)continue}else g[218960]=0;break}for(A[55913]=A[50762],e=(e=e+32&131008)||64,A[50763]=e+A[50763],A[55684]=P(b[101997],7800)+(M[102024]<<8)<<8,A[55704]=P(b[101998],9e3)+(M[102025]<<8)<<8,T=A[50980],a=+(0|e),I=+(e>>>2|0),e=0;(0|e)!=7&&(s=b[218+(f=(r=e<<1)+t|0)>>1]<<8,c=P(e,80)+222176|0,f=b[f+164>>1],E=s+P(f,b[2+(r+o|0)>>1])<<8,A[c>>2]=E,p=+(0|E),D[c+16>>3]=p,D[c+48>>3]=16*(+(s+P(f,b[2+(r+i|0)>>1])<<8)-p)/I),s=(r=P(e,80))+222176|0,f=b[182+(E=t+(e<<1)|0)>>1],Z=P(f,l[18+(c=e+o|0)|0])<<6,A[s+4>>2]=Z,p=+(0|Z),D[s+24>>3]=p,O=s,s=e+i|0,D[O+56>>3]=64*(+(P(f,l[s+18|0])<<6)-p)/a,(0|e)>(0|T)|e>>>0>5||(f=r+222176|0,Z=b[E+200>>1],E=P(Z,l[c+26|0])<<10,A[f+8>>2]=E,p=+(0|E),D[f+32>>3]=p,O=f- -64|0,f=Z<<10,D[O>>3]=64*(+(0|P(f,l[s+26|0]))-p)/a,e>>>0<=2?(r=r+222176|0,c=P(f,l[c+32|0]),A[r+12>>2]=c,p=+(0|c),D[r+40>>3]=p,D[r+72>>3]=64*(+(0|P(f,l[s+32|0]))-p)/a):A[r+222188>>2]=E),(0|(e=e+1|0))!=8;);}for(;;){if(e=A[50762],!l[218960]&(0|e)==A[50763])break c;b:{h:{if(63&e){if(7&e)break b;E:if(!((0|(r=A[54736]))<=0||(0|(t=A[54735]))<=0))for(s=A[50826],e=1;;){if(A[(o=(i=e<<2)+s|0)>>2]=A[o>>2]+A[i+203312>>2],e>>>0>28|(0|e)>=(0|r))break E;if(i=(0|e)<(0|t),e=e+1|0,!i)break}if((0|(e=A[33073]))>255)break b;A[33073]=e+1;break b}if(e)if(A[50759]){if(r=A[50768]+A[50769]|0,A[50768]=r,r=(t=A[50766])?P(l[t+((0|(r>>=8))>=127?127:r)|0],A[50771])>>8:0,A[55911]=A[55911]+A[55915],t=(0|(t=A[55914]))<=23551?t:0,A[55914]=t+A[50761],t=(r+A[50770]|0)+P(A[33072],l[110528+(t>>6)|0]-128|0)|0,A[50767]=t,!(s=A[51291])&(0|(r=s?s<<12:t))>102399||(t=(0|r)<=102400?102400:r,A[50767]=t),(0|e)!=A[55913]){if(e=0,!((0|(c=A[50980]))<0)){for(;o=P(e,80),a=D[48+(r=o+222176|0)>>3]+D[r+16>>3],D[r+16>>3]=a,I=D[r+56>>3]+D[r+24>>3],D[r+24>>3]=I,p=D[r- -64>>3]+D[r+32>>3],D[r+32>>3]=p,s=SA(a)<2147483648?~~a:-2147483648,A[r>>2]=s,s=SA(p)<2147483648?~~p:-2147483648,A[r+8>>2]=s,i=SA(I)<2147483648?~~I:-2147483648,A[r+4>>2]=(0|i)>0?i:0,(0|e)>2||(a=D[72+(r=o+222176|0)>>3]+D[r+40>>3],D[r+40>>3]=a,s=SA(a)<2147483648?~~a:-2147483648),A[o+222188>>2]=s,(0|c)>=(0|(e=e+1|0)););if((0|e)>=8)break h}for(;(0|e)!=7&&(r=P(e,80)+222176|0,a=D[r+48>>3]+D[r+16>>3],D[r+16>>3]=a,s=SA(a)<2147483648?~~a:-2147483648,A[r>>2]=s),r=P(e,80)+222176|0,a=D[r+56>>3]+D[r+24>>3],D[r+24>>3]=a,s=SA(a)<2147483648?~~a:-2147483648,A[r+4>>2]=(0|s)>0?s:0,(0|(e=e+1|0))!=8;);}}else t=A[50767];else A[50826]=218976,A[54742]=0,A[54736]=us(A[50767]<<4,218976,0),t=A[50767],A[54737]=890/(t>>12),A[54739]=(0|P(A[50781],P(A[50779],t>>8)))/8e4}if(A[55906]=t>>11,A[54735]=A[54736],A[55904]=P(A[50760],t>>7),A[55905]=A[50754]/(t>>12),r=1^(e=A[54742]),A[54742]=r,A[50826]=P(e,1600)+218976,A[54736]=us(t<<4,P(r,1600)+218976|0,1),!(!(t=A[50759])|!A[51022]))for(I=D[25430],p=D[25429],e=1;A[272+(r=t+(e<<2)|0)>>2]&&(s=A[r+308>>2],r=P(e,40)+203456|0,m=Da(I*+b[2+(P(e,80)+222176|0)>>1]),m*=a=zt(p*+(0|s)),m+=m,D[r+8>>3]=m,a*=-a,D[r+16>>3]=a,D[r>>3]=1-m-a),(0|(e=e+1|0))!=9;);}if(i=A[50762]+1|0,A[50762]=i,o=(e=A[50765])+A[55904]|0,A[50765]=o,(0|o)<0&(0|e)>0){if(f=A[55905],t=A[50800]+((0|f)/-2|0)|0,A[55907]=t,(0|(E=A[50763]))<(0|i))break c;if(T=A[54738]+1|0,A[54738]=T,c=A[50767],!((0|(e=(r=A[50980])+1|0))>8)&&(s=c<<3,1&r&&(A[203264+(e<<2)>>2]=(1+(A[P(e,80)+222176>>2]/(0|s)|0)|0)/2,e=r+2|0),(0|r)!=7))for(;r=203264+(e<<2)|0,Z=P(e,80)+222176|0,A[r>>2]=(1+(A[Z>>2]/(0|s)|0)|0)/2,A[r+4>>2]=(1+(A[Z+80>>2]/(0|s)|0)|0)/2,(0|(e=e+2|0))!=9;);e=(0|P(A[50781],P(A[50779],c>>8)))/8e4|0,A[54739]=e;b:if(!((0|(r=A[55908]))<=0)){switch(r-3|0){case 0:if((E-i|0)>=f<<1)break b;A[55908]=2,e=(0|P(A[55909],e))/256|0,A[54739]=e;break b;case 1:A[55908]=2,e=(0|P(A[55909],e))/256|0,A[54739]=e;break b}A[55908]=r-1}(r=A[55910])&&(s=e,e=A[55911]>>8,e=(0|P(s,l[r+((0|e)>=127?127:e)|0]))/128|0,A[54739]=e),(0|(r=A[A[32972]+92>>2]))>7||(r=15&(s=l[A[55912]+(106336+(r<<3)|0)|0]),(s=s>>>4|0)&&((0|s)!=15?(0|T)%(0|s)|0||(A[54739]=(0|P(e,r))/16):(A[55912]=0,A[54739]=(0|P(e,r))/16)))}else t=A[55907];if(i=t+1|0,A[55907]=i,r=o>>>16|0,s=0,!((0|i)<0|(0|i)>=A[50799])){if(!((0|(e=(t=A[50980])+1|0))>8)){if(c=1&(o=8-t|0),(0|t)!=7)for(f=-2&o,t=0;s=P(A[203216+(E=4+(o=e<<2)|0)>>2],b[106400+(P(r,A[E+203264>>2])>>>4&4094)>>1])+(P(A[o+203216>>2],b[106400+(P(r,A[o+203264>>2])>>>4&4094)>>1])+s|0)|0,e=e+2|0,(0|f)!=(0|(t=t+2|0)););c&&(s=P(A[203216+(e<<=2)>>2],b[106400+(P(r,A[e+203264>>2])>>>4&4094)>>1])+s|0)}s=P(l[i+132160|0],(0|s)/A[55906]|0)}if(e=1,(0|(i=A[54737]))<=0)t=r;else for(o=A[50826],t=r;s=P(A[o+(e<<2)>>2],b[106400+((65504&t)>>>4|0)>>1])+s|0,t=t+r|0,(0|i)>=(0|(e=e+1|0)););if((0|(i=A[54735]))>=(0|e))for(o=A[50826];s=s-P(A[o+(e<<2)>>2],b[106400+((65504&t)>>>4|0)>>1])|0,t=t+r|0,(0|i)>=(0|(e=e+1|0)););if(i=(0|(e=A[54728]))==64?s:P(e,s>>6),A[51022]){if(A[50759])for(r=bt(A[33209],0,1103515245,0),e=$,e=Sn(r=r+12345|0,e=r>>>0<12345?e+1|0:e),A[33209]=e,I=+((16383&e)- -8192|0),t=A[50759],o=0,e=1;(s=A[272+(t+(e<<2)|0)>>2])&&(c=A[P(e,80)+222180>>2],r=P(e,40)+203456|0,a=D[r+32>>3],p=D[r+24>>3],D[r+32>>3]=p,a=a*D[r+16>>3]+(D[r>>3]*I+p*D[r+8>>3]),D[r+24>>3]=a,r=SA(a)<2147483648?~~a:-2147483648,o=P(r,P(s,c>>14))+o|0),(0|(e=e+1|0))!=9;);else o=0;i=i+o|0}t=0,(0|(e=A[50776]))>=A[50773]||(r=A[50778],t=A[50772],(o=A[50774])?(s=e+1|0,A[50776]=s,e=P(o,g[t+(e+r|0)|0])):(o=l[0|(t=t+(e+r|0)|0)],t=g[t+1|0],s=e+2|0,A[50776]=s,e=o|t<<8),t=(0|P(P(e,A[50780])>>10,A[50775]))/32|0,(0|(e=A[50777]))>(r+s|0)||(A[50778]=r+((0|P(e,3))/-4|0))),r=(e=A[51293])+1|0,A[51293]=r,e=((P(A[54739],i>>8)>>13)+t|0)+(P(A[50755],b[205184+(e<<1)>>1])>>8)|0,(0|r)>=5500&&(A[51293]=0),r=A[33073];b:{h:{if((0|(t=P(r,e)))>=8388608){if((0|r)>=(0|(o=8388608/(0|e)|0)))break h;break b}if((0|t)>-8388353||(0|r)<(0|(o=-8388608/(0|e)|0)))break b}r=o-1|0,A[33073]=r,t=P(e,r)}if(e=A[51290],A[51290]=e+1,r=e,e=t>>8,g[0|r]=e,r=A[51290],A[51290]=r+1,g[0|r]=t>>>16,(r=A[50756])&&(r=A[r+8>>2])&&lt[0|r](e<<16>>16),t=(r=A[51292])+1|0,A[51292]=t,b[205184+(r<<1)>>1]=e,(0|t)>=5500&&(A[51292]=0),!(uA[54046]>=A[51290]+2>>>0))break}s=1;break i}A[50773]=0}A[54731]=A[54729],s=1,c=65535&e,t=l[218920],o=A[r+8>>2],i=A[r+12>>2],a=0,p=0,J=r=J+-64|0,f=A[50759];C:if((0|(e=A[f+132>>2]))!=6){if(!t){for(e-1>>>0<=4&&(A[55921]=e,A[55964]=A[110896+(e<<2)>>2]),e=A[f+88>>2],A[54741]=1,A[55922]=(0|e)/32,t=A[50758],e=A[50757];;){m:if((0|t)!=(0|(e=(0|(e=e+1|0))<=169?e:0)))if((0|(E=A[216192+(e<<4)>>2]))!=1){if(E-5>>>0>1)continue}else{if(A[54741]=0,e=A[8+(216192+(e<<4)|0)>>2],!(M[i+4>>1]!=M[e+4>>1]|M[e+6>>1]!=M[i+6>>1]|M[e+8>>1]!=M[i+8>>1]|M[e+10>>1]!=M[i+10>>1])&&M[e+12>>1]==M[i+12>>1])break m;A[54741]=2}break}for((M[o+4>>1]!=M[113564]|M[o+6>>1]!=M[113565]|M[o+8>>1]!=M[113566]|M[o+10>>1]!=M[113567]||M[o+12>>1]!=M[113568])&&(Wi(),A[55974]=0,A[55975]=0,A[55972]=0,A[55973]=0,A[55988]=0,A[55989]=0,A[55990]=0,A[55991]=0,A[56004]=0,A[56005]=0,A[56006]=0,A[56007]=0,A[56020]=0,A[56021]=0,A[56022]=0,A[56023]=0,A[56036]=0,A[56037]=0,A[56038]=0,A[56039]=0,A[56052]=0,A[56053]=0,A[56054]=0,A[56055]=0,A[56068]=0,A[56069]=0,A[56070]=0,A[56071]=0,A[56086]=0,A[56087]=0,A[56084]=0,A[56085]=0,A[56102]=0,A[56103]=0,A[56100]=0,A[56101]=0,A[56118]=0,A[56119]=0,A[56116]=0,A[56117]=0,A[56134]=0,A[56135]=0,A[56132]=0,A[56133]=0,A[56150]=0,A[56151]=0,A[56148]=0,A[56149]=0,A[56166]=0,A[56167]=0,A[56164]=0,A[56165]=0,A[56182]=0,A[56183]=0,A[56180]=0,A[56181]=0,A[56198]=0,A[56199]=0,A[56196]=0,A[56197]=0,A[56214]=0,A[56215]=0,A[56212]=0,A[56213]=0,A[56230]=0,A[56231]=0,A[56228]=0,A[56229]=0),e=M[i+4>>1]|M[i+6>>1]<<16,t=M[i>>1]|M[i+2>>1]<<16,b[113562]=t,b[113563]=t>>>16,b[113564]=e,b[113565]=e>>>16,e=M[i+60>>1]|M[i+62>>1]<<16,t=M[i+56>>1]|M[i+58>>1]<<16,b[113590]=t,b[113591]=t>>>16,b[113592]=e,b[113593]=e>>>16,e=M[i+52>>1]|M[i+54>>1]<<16,t=M[i+48>>1]|M[i+50>>1]<<16,b[113586]=t,b[113587]=t>>>16,b[113588]=e,b[113589]=e>>>16,e=M[i+44>>1]|M[i+46>>1]<<16,t=M[i+40>>1]|M[i+42>>1]<<16,b[113582]=t,b[113583]=t>>>16,b[113584]=e,b[113585]=e>>>16,e=M[i+36>>1]|M[i+38>>1]<<16,t=M[i+32>>1]|M[i+34>>1]<<16,b[113578]=t,b[113579]=t>>>16,b[113580]=e,b[113581]=e>>>16,e=M[i+28>>1]|M[i+30>>1]<<16,t=M[i+24>>1]|M[i+26>>1]<<16,b[113574]=t,b[113575]=t>>>16,b[113576]=e,b[113577]=e>>>16,e=M[i+20>>1]|M[i+22>>1]<<16,t=M[i+16>>1]|M[i+18>>1]<<16,b[113570]=t,b[113571]=t>>>16,b[113572]=e,b[113573]=e>>>16,e=M[i+12>>1]|M[i+14>>1]<<16,t=M[i+8>>1]|M[i+10>>1]<<16,b[113566]=t,b[113567]=t>>>16,b[113568]=e,b[113569]=e>>>16,I=+(0|c),(O=1&b[o>>1])?(e=l[o+39|0],A[56680]=e,D[28364]=e>>>0,D[28354]=+(l[i+39|0]-e<<6)/I,e=l[o+40|0],D[28366]=e>>>0,D[28356]=+(l[i+40|0]-e<<6)/I,e=l[o+41|0],A[56682]=e,D[28368]=e>>>0,D[28358]=+(l[i+41|0]-e<<6)/I,t=l[o+42|0],A[56684]=t,D[28370]=t>>>0,e=l[o+43|0],a=+(l[i+43|0]-e<<6)/I,p=+(l[i+42|0]-t<<6)/I,m=+(e>>>0)):(A[56728]=0,A[56729]=0,e=0,A[56680]=0,A[56708]=0,A[56709]=0,A[56732]=0,A[56733]=0,A[56712]=0,A[56713]=0,A[56682]=0,A[56736]=0,A[56737]=0,A[56716]=0,A[56717]=0,A[56684]=0,A[56740]=0,A[56741]=0,m=0),A[56688]=e,D[28360]=p,D[28372]=m,D[28362]=a,A[56692]=0,A[56748]=0,A[56749]=0,A[56694]=0,A[56752]=0,A[56753]=0,A[56696]=0,A[56756]=0,A[56757]=0,A[56700]=0,A[56760]=0,A[56761]=0,A[56704]=0,A[56764]=0,A[56765]=0,A[50764]=c,e=1;T=b[164+(E=(c=e<<1)+f|0)>>1],t=(QA=P(e,80))+222896|0,p=+b[E+218>>1],a=.00390625*+(0|P(T,b[2+(o+c|0)>>1]))+p,D[t+16>>3]=a,Z=SA(a)<2147483648?~~a:-2147483648,A[t>>2]=Z,D[t+48>>3]=64*(.00390625*+(0|P(T,b[2+(i+c|0)>>1]))+p-a)/I,e>>>0<=3&&(t=QA+222896|0,a=.00390625*+b[E+200>>1]*+(l[35+(e+o|0)|0]<<1),D[t+24>>3]=a,c=SA(a)<2147483648?~~a:-2147483648,A[t+4>>2]=c,D[t+56>>3]=64*(+(l[35+(e+i|0)|0]<<1)-a)/I),(0|(e=e+1|0))!=6;);if(a=+((e=l[o+40|0])<<1),D[27864]=a,t=A[56618],e||(a=+(0|t),D[27864]=a),e=SA(a)<2147483648?~~a:-2147483648,A[55724]=e,c=l[i+40|0],A[55730]=0,A[55731]=1079394304,A[55738]=0,A[55739]=0,A[55725]=89,e=1,D[27868]=64*(+(0|(c?c<<1:t))-a)/I,O)for(;t=P(e,80)+222896|0,f=l[56+(c=e+o|0)|0]<<2,A[t+12>>2]=f,a=+(0|f),D[t+40>>3]=a,f=e+i|0,D[t+72>>3]=64*(+(l[f+56|0]<<2)-a)/I,c=l[c+49|0],A[t+8>>2]=c,a=+(c>>>0),D[t+32>>3]=a,D[t- -64>>3]=64*(+l[f+49|0]-a)/I,(0|(e=e+1|0))!=7;);A[56606]=0}for(;;){if((0|(Z=A[50764]))>(0|(i=A[56606]))){for(e=A[50767],A[56609]=A[55724],A[56619]=A[55725],A[56610]=A[55744],A[56611]=A[55764],A[56612]=A[55784],A[56613]=A[55804],O=P(e,10),A[56607]=(0|O)/4096,A[56620]=A[55745],A[56621]=A[55765],A[56622]=A[55785],A[56614]=A[55824],A[56630]=A[55746],A[56631]=A[55766],A[56632]=A[55786],A[56633]=A[55806],A[56634]=A[55826],A[56635]=A[55846],QA=A[56680],A[56608]=QA,o=A[56694],A[56656]=o,c=A[56696],A[56653]=c,f=A[56700],A[56655]=f,E=A[56684],A[56649]=E,A[56651]=A[56704],A[56654]=A[56688],A[56652]=A[56682],A[56650]=A[56692],e=0;t=P(e,80)+222896|0,a=D[t+48>>3]+D[t+16>>3],D[t+16>>3]=a,I=D[t+56>>3]+D[t+24>>3],D[t+24>>3]=I,p=D[t+72>>3]+D[t+40>>3],D[t+40>>3]=p,m=D[t- -64>>3]+D[t+32>>3],D[t+32>>3]=m,T=SA(a)<2147483648?~~a:-2147483648,A[t>>2]=T,T=SA(I)<2147483648?~~I:-2147483648,A[t+4>>2]=T,T=SA(p)<2147483648?~~p:-2147483648,A[t+12>>2]=T,T=SA(m)<2147483648?~~m:-2147483648,A[t+8>>2]=T,(0|(e=e+1|0))!=9;);for(a=D[28354]+D[28364],D[28364]=a,D[28366]=D[28356]+D[28366],I=D[28358]+D[28368],D[28368]=I,p=D[28360]+D[28370],D[28370]=p,m=D[28362]+D[28372],D[28372]=m,e=SA(a)<2147483648?~~a:-2147483648,A[56680]=e,e=SA(I)<2147483648?~~I:-2147483648,A[56682]=e,e=SA(p)<2147483648?~~p:-2147483648,A[56684]=e,e=SA(m)<2147483648?~~m:-2147483648,A[56688]=e,a=D[28374]+0,D[28374]=a,e=SA(a)<2147483648?~~a:-2147483648,A[56692]=e,a=D[28376]+0,D[28376]=a,e=SA(a)<2147483648?~~a:-2147483648,A[56694]=e,a=D[28378]+0,D[28378]=a,e=SA(a)<2147483648?~~a:-2147483648,A[56696]=e,a=D[28380]+0,D[28380]=a,e=SA(a)<2147483648?~~a:-2147483648,A[56700]=e,a=D[28382]+0,D[28382]=a,e=SA(a)<2147483648?~~a:-2147483648,A[56704]=e,A[56659]=A[55724],A[56669]=A[55725],A[56660]=A[55744],A[56670]=A[55745],A[56661]=A[55764],A[56671]=A[55765],A[56662]=A[55784],A[56672]=A[55785],A[56663]=A[55804],A[56664]=A[55824],A[56665]=A[55844],e=A[50768]+A[50769]|0,A[50768]=e,e>>=8,A[50767]=A[50770]+(P(A[50771],l[A[50766]+((0|e)>=127?127:e)|0])>>8),e=Z-i|0,A[55923]=(0|e)>=64?64:e,A[55961]=(0|O)/40960,e=QA-7|0,A[56658]=(0|e)>0?e:0,D[27974]=E>>>0<=87?.001*+b[111136+(E<<1)>>1]*.05:0,D[27975]=c>>>0<=87?.001*+b[111136+(c<<1)>>1]*.25:0,D[27973]=o>>>0<=87?.001*+b[111136+(o<<1)>>1]:0,D[27971]=f>>>0<=87?.001*+b[111136+(f<<1)>>1]*.05:0,a=(e=A[56629])>>>0<=87?.001*+b[111136+(e<<1)>>1]*.6:0,D[r>>3]=a,a=(e=A[56630])>>>0<=87?.001*+b[111136+(e<<1)>>1]*.4:0,D[r+8>>3]=a,a=(e=A[56631])>>>0<=87?.001*+b[111136+(e<<1)>>1]*.15:0,D[r+16>>3]=a,a=(e=A[56632])>>>0<=87?.001*+b[111136+(e<<1)>>1]*.06:0,D[r+24>>3]=a,a=(e=A[56633])>>>0<=87?.001*+b[111136+(e<<1)>>1]*.04:0,D[r+32>>3]=a,a=(e=A[56634])>>>0<=87?.001*+b[111136+(e<<1)>>1]*.022:0,D[r+40>>3]=a,a=(e=A[56635])>>>0<=87?.001*+b[111136+(e<<1)>>1]*.03:0,D[r+48>>3]=a,a=(e=(0|(e=A[56657]-3|0))<=0?57:e)>>>0<=87?.001*+b[111136+(e<<1)>>1]:0,D[27977]=a/+A[55964],I=D[27968],p=D[27967],e=1;t=223664+(i=e<<6)|0,m=(a=zt(p*+A[48+(c=226428+(o=e<<2)|0)>>2]))*-a,D[t+216>>3]=m,a*=Da(I*+A[c+8>>2]),a+=a,D[t+208>>3]=a,hA=1-a-m,D[t+200>>3]=hA,e>>>0<=5&&(c=A[208+(o=o+226428|0)>>2],t=i+223664|0,cA=(AA=zt(p*+A[o+248>>2]))*Da(I*+(0|c)),cA+=cA,D[t+1488>>3]=cA,AA*=-AA,D[t+1496>>3]=AA,vA=1-cA-AA,D[t+1480>>3]=vA,D[t+256>>3]=.015625*(AA-m),D[t+248>>3]=.015625*(cA-a),D[t+240>>3]=.015625*(vA-hA)),(0|(e=e+1|0))!=10;);for(AA=(a=zt(p*+A[56619]))*-a,D[27985]=AA,cA=(a*=Da(I*+(0-A[56609]|0)))+a,D[27984]=cA,a=1-cA-AA,D[27983]=a,a!=0&&(a=1/a,D[27983]=a,AA*=m=-a,D[27985]=AA,cA*=m,D[27984]=cA),hA=(m=zt(p*+A[56669]))*-m,D[28145]=hA,vA=(m*=Da(I*+(0-A[56659]|0)))+m,D[28144]=vA,m=1-vA-hA,D[28143]=m,m!=0&&(m=1/m,D[28143]=m,hA*=re=-m,D[28145]=hA,vA*=re,D[28144]=vA),D[27990]=.015625*(hA-AA),D[27989]=.015625*(vA-cA),D[27988]=.015625*(m-a),e=0;o=A[8+(i=226428+(e<<2)|0)>>2],t=223664+(e<<6)|0,m=(a=zt(p*+A[i+128>>2]))*Da(I*+(0|o)),m+=m,D[t+848>>3]=m,a*=-a,D[t+856>>3]=a,D[t+840>>3]=D[r+(e<<3)>>3]*(1-m-a),(0|(e=e+1|0))!=7;);if(p=(a=zt(p*+(A[55918]/2|0)))*-a,D[28137]=p,a*=Da(0*I),a+=a,D[28136]=a,D[28135]=1-a-p,e=1,(0|Xe())!=1)continue;break C}break}e=1,A[54741]>0&&(A[54741]=0,A[55963]=64,A[56606]=i+-64,A[55923]=64,(0|Xe())==1)||(e=0)}else{if(J=E=J-752|0,!t){je(e=E+376|0,0,376),ks(f,o,e),ks(f,i,e=je(E,0,376)),t=A[50768]+P(A[50769],c>>>6|0)|0,A[50768]=t,t>>=8,t=A[50770]+(P(A[50771],l[A[50766]+((0|t)>=127?127:t)|0])>>8)|0,A[50767]=t,D[e+368>>3]=(0|t)/4096|0,A[50773]&&(D[e+736>>3]=D[e+736>>3]/5,D[e+360>>3]=D[e+360>>3]/5),t=A[A[56797]+4>>2],lt[A[A[t>>2]>>2]](t,e+376|0,110,110,-1,0),i=c-110|0,f=A[50758],t=A[50757];m:{for(;;){if((0|f)!=(0|(t=(t+1|0)%170|0))&&!((T=A[216192+(t<<4)>>2])-5>>>0<2)){if(o=1,(0|T)!=1)continue;break m}break}i=c-220|0,o=0}(0|i)>0&&(t=A[A[56797]+4>>2],lt[A[A[t>>2]>>2]](t,e,i,i||1,-1,0)),o||(A[e+352>>2]=0,A[e+356>>2]=0,D[e>>3]=D[e+368>>3],t=A[A[56797]+4>>2],lt[A[A[t>>2]>>2]](t,e,55,55,-1,0),A[e+360>>2]=0,A[e+364>>2]=0,t=A[A[56797]+4>>2],lt[A[A[t>>2]>>2]](t,e,55,55,-1,0))}e=A[A[56797]+8>>2],t=A[51290],c=0|lt[A[A[e>>2]>>2]](e,A[54046]-t>>>1|0,t),f=A[51290];m:if(c&&!((0|(t=A[50776]))>=(0|(QA=A[50773]))))for(WA=A[50777],le=(0|P(WA,3))/-4|0,a=.0009765625*+A[50780],T=A[50772],i=A[50778],Me=A[50775],Z=A[50774],e=0;;){if(O=l[T+(o=t+i|0)|0],Z?O=P(Z,O<<24>>24):(t=t+1|0,A[50776]=t,O|=g[T+(o=t+i|0)|0]<<8),O=SA(I=a*+(0|O))<2147483648?~~I:-2147483648,b[(KA=f+(e<<1)|0)>>1]=M[KA>>1]+((0|P(O,Me))/40|0),(0|o)>=(0|WA)&&(i=i+le|0,A[50778]=i),t=t+1|0,A[50776]=t,(0|t)>=(0|QA))break m;if(!(c>>>0>(e=e+1|0)>>>0))break}e=f+(c<<1)|0,A[51290]=e,J=E+752|0,e=uA[54046]<=e>>>0}if(J=r- -64|0,e)break i;break c}A[50781]=e||100;break c}Ps(e,A[r+8>>2]);break c}e=A[r+8>>2],A[50759]=wt(203816,e,1344),A[50801]=A[e+108>>2]?105792:106064,e=(0|P(A[e+120>>2],26))/100|0,A[33038]=e,(0|(s=A[50754]))<=11e3&&(g[203300]=1,A[33038]=e<<1),A[54728]=A[50982],e=A[50979],t=A[50978],je(205184,0,11e3),A[51293]=0,e=(t=(o=(0|(i=A[50789]))>0)?130:(0|t)>=5499?5499:t)?o?i:(0|e)>=100?100:e:0,A[50755]=e,t=(0|P(t,s))/1e3|0,A[51292]=t,A[54729]=(0|e)>20?t<<1:e?t:0,A[33037]=(0|P(500-e|0,(0|P(l[A[50797]+105596|0],(0|P(A[50787],55))/100|0))/16|0))/500,e=256,(0|(t=(0|(t=A[50785]))>=101?101:t))>=51&&(e=256+(((P(t,25)-1250&65535)>>>0)/50|0)|0),b[101990]=(0|P(b[102026],e))/256,b[101991]=(0|P(b[102027],e))/256,b[101992]=(0|P(b[102028],e))/256,b[101993]=(0|P(b[102029],e))/256,b[101994]=(0|P(b[102030],e))/256,b[101995]=(0|P(b[102031],e))/256,e=A[50790],b[101999]=(0|P(b[102035],P(e,-6)+256|0))/256,b[102e3]=(0|P(b[102036],P(e,-3)+256|0))/256,Ai(8,0,A[50986],0,A[51290]),xt(A[r+8>>2]);break c}if(!A[50759])break c;t=A[r+12>>2],r=A[r+8>>2],A[55911]=0,A[55915]=e?2097152/(0|e)|0:0,A[55910]=r,e=(0|P(t,A[33037]))/16|0,A[50779]=e,A[50780]=(0|P(P(e,A[50985]),15))/100;break c}Ai(t>>8,e,A[r+8>>2],A[r+12>>2],o)}s=0,e=A[50757]+1|0,A[50757]=(0|e)<=169?e:0}if(g[218920]=s,!((o=A[51290])>>>0<uA[54046]))break}i=A[34391],r=(A[51290]-i|0)/2|0,A[34439]=r+A[34439],t=A[34436],e=A[34388]+P(t,36)|0,A[e+4>>2]=0,A[e>>2]=0,A[e+24>>2]=A[34438];s:if(2&(e=A[32538])){if(o=A[34388],(-2&e)==2&&(!(r=t?o:0)|A[r>>2]!=8||(0|(r=A[r+28>>2]))!=A[34389]&&(A[34389]=r)),s=1,(0|t)<2)break s;for(;;){r=t?o+P(s,36)|0:0;i:{c:switch(0|e){case 2:case 3:if(!r|A[r>>2]!=8||(0|(r=A[r+28>>2]))==A[34389])break i;A[34389]=r;break i;case 0:break c;default:break i}(e=A[34440])?(lt[0|e](i,0,r),t=A[34436],e=A[32538]):e=0}if(!((0|(s=s+1|0))<(0|t)))break}}else if((e=A[34440])&&0|lt[0|e](i,r,A[34388]))break r;if(!ce(1)&&!(170-((0|(e=A[50757]-A[50758]|0))<=0?e+170|0:e)|0||(e=A[34388],A[e>>2]=0,A[e+4>>2]=A[34437],A[e+24>>2]=A[34438],IA(1))))break}if(t=0,2&l[130152]||!(e=A[34440])||!(0|lt[0|e](0,0,A[34388])))break e}IA(2),t=268439295}if((0|t)<=268437502){if(!t|(0|t)==268436479|(0|t)!=268437247)break A;return}}}function ce(e){var t,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0;J=t=J-720|0,r=A[47198],e||(A[36443]=0,A[36442]=1,A[36444]=0,A[36440]=0,A[36441]=0,e=A[50758],A[36454]=e,A[36427]=-1,A[36424]=-1,A[36446]=0,A[36447]=0,A[36439]=-1,A[36426]=0,A[36455]=e,A[36448]=0,A[36449]=0,A[36450]=0,A[36451]=0,A[36452]=0,A[36453]=0,La(),A[36427]=-1,e=216192+(A[50758]<<4)|0,A[e>>2]=5,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,A[36426]=0,A[36438]&&(A[36438]=0,e=216192+(A[50758]<<4)|0,A[e>>2]=14,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0));A:{e:if(!((0|(e=A[36442]))>997|A[36423]<=(0|e)))for(O=r>>>1&1,Z=t+48|4,AA=t+348|0,cA=t+652|0,hA=A[32322],I=A[32320],vA=t+60|0,QA=t+648|0,WA=t+56|0,KA=t+620|0,E=t- -64|0;;){if(a=145840+(e<<5)|0,!(e=A[50756])|!A[e>>2]||(A[t+12>>2]=0,rs(e=t+16|0,A[a+8>>2],a,0,t+12|0),r=Ki(e),s=l[a+17|0],e=216192+(A[50758]<<4)|0,A[e>>2]=16,A[e+8>>2]=s,A[e+4>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),e=1,(0|(s=(0|(r=A[50757]-A[50758]|0))<=0?r+170|0:r))<=(0|((r=l[a+17|0])?(0|r)==2?25:15:10)))break A;if(m=A[36442],2&l[0|a])for(p=2047&M[a+4>>1];;){if(s=A[36443],c=127&(r=A[198304+(s<<2)>>2])){e=r>>>8|0,A[36443]=s+1;r:{s:{switch((31&r)-2|0){case 0:Ps(96&r|8,e),Fs(2);break r;case 5:if((0|e)>=A[34064]||!A[4+(c=136272+(s=e<<4)|0)>>2])break r;dr(10,0),e=216192+(A[50758]<<4)|0,A[e>>2]=6,c=A[c+4>>2],A[e+8>>2]=A[8+(s+136272|0)>>2]+44,A[e+12>>2]=5376,A[e+4>>2]=c;break s;case 8:if((0|((0|(s=A[50757]-A[50758]|0))<=0?s+170:s))<6)break r;c=A[47353],s=216192+(A[50758]<<4)|0,A[s>>2]=778,A[s+8>>2]=e,A[s+4>>2]=c+p&16777215;break s;case 9:if((0|((0|(s=A[50757]-A[50758]|0))<=0?s+170:s))<6)break r;c=A[33284],s=216192+(A[50758]<<4)|0,A[s>>2]=1034,A[s+8>>2]=e,A[s+4>>2]=c+1&16777215;break s}dr(10,0),s=216192+(A[50758]<<4)|0,A[s>>2]=12,A[s+8>>2]=e,A[s+4>>2]=c}e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0}if(!(128&r))continue}break}(e=l[a+20|0])&&(1&g[A[47192]+48|0]&l[a+17|0]==2|1&g[A[a+8>>2]+7|0]||(A[36426]=0),r=A[47353]+(2047&M[a+4>>1])|0,A[36445]=r,4&e&&((0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))<6||(s=A[47568],e=216192+(A[50758]<<4)|0,A[e>>2]=522,A[e+8>>2]=s,A[e+4>>2]=16777215&r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)),1&g[a+20|0]&&(r=M[a+4>>1],s=A[36444],A[36444]=s+1,(0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))<6||(p=A[36445],c=A[47355],e=216192+(A[50758]<<4)|0,A[e>>2]=266,A[e+8>>2]=s+c,A[e+4>>2]=16777215&p|(63488&r)<<13,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0))),(0|(e=A[36441]))>0&&(r=216192+(A[36425]<<4)|0,A[r+4>>2]||(A[r+4>>2]=e),A[36441]=0),e=m+1<<5,r=m-1<<5,!(s=l[a+18|0])|2&l[A[a+8>>2]+7|0]||dr(s,1),c=e+145840|0,i=r+145840|0,p=1;r:{s:{if(A[47198]&&(f=A[a+8>>2],l[f+10|0]!=15)){i:if(l[a+17|0]==2)switch(l[i+17|0]-3|0){case 0:case 5:break s;default:break i}p=0,rs(t+704|0,f,a,O,0),(0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))<6||(r=A[36445],e=216192+(A[50758]<<4)|0,A[e>>2]=1802,A[e+4>>2]=16777215&r,r=A[t+708>>2],A[e+8>>2]=A[t+704>>2],A[e+12>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)}i:switch(l[a+17|0]){case 0:dr(A[a+12>>2],0),g[a+23|0]=l[A[a+8>>2]+14|0];break r;case 4:r=A[a+8>>2],(0|(e=l[c+17|0]))==2|!l[c+20|0]&(0|e)==3||(b[a>>1]=8192|M[a>>1]),2&l[r+7|0]&&(A[t+88>>2]=0,A[t+92>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+56>>2]=0,A[t+60>>2]=0,A[t+48>>2]=0,A[t+52>>2]=0,Ar(0,1,a,t+552|0,145784),A[t+56>>2]=A[t+620>>2],A[E>>2]=A[t+640>>2],A[36424]<0&&(s=l[c+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[12+(e=216192+(e<<4)|0)>>2]=s,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,p=l[c+22|0],s=l[c+21|0],c=A[129280+(l[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(f=A[36440]))<=0||A[4+(e=216192+(e<<4)|0)>>2]||(A[e+4>>2]=f),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,p|=s<<16,s=(0|s)==255,A[e+12>>2]=s?3604556:p,A[e+8>>2]=s?I:c,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),Qe(r,0,t+48|0,a,0)),Ar(0,0,a,t+552|0,145784),A[t+552>>2]=4|A[t+552>>2],(0|(e=A[36440]))<=0||(0|(r=A[36424]))<0||(A[4+(r=216192+(r<<4)|0)>>2]||(A[r+4>>2]=e),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],La(),A[36427]=-1,A[36422]=0,(e=A[t+624>>2])&&(s=e,e=A[t+644>>2],xs(s,2,A[t+596>>2]<<1,A[t+552>>2],0,e?(e<<5)/100|0:32)),A[36426]=0;break r;case 6:Ar(0,0,a,t+552|0,145784),8&l[0|a]&&(e=A[a+12>>2],(0|(r=A[36440]))<=0||(0|(s=A[36424]))<0||(A[4+(s=216192+(s<<4)|0)>>2]||(A[s+4>>2]=r),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],La(),A[36427]=-1,A[36422]=0,(r=A[t+624>>2])&&(s=e,e=A[t+644>>2],xs(r,2,A[t+596>>2]<<1,A[t+552>>2],s,e?(e<<5)/100|0:32))),e=A[a+12>>2],(0|(r=A[36440]))<=0||(0|(s=A[36424]))<0||(A[4+(s=216192+(s<<4)|0)>>2]||(A[s+4>>2]=r),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],La(),A[36427]=-1,A[36422]=0,(r=A[t+624>>2])&&(s=e,e=A[t+644>>2],xs(r,2,A[t+596>>2]<<1,A[t+552>>2],s,e?(e<<5)/100|0:32)),A[36426]=0;break r;case 5:s=A[a+8>>2],A[Z+40>>2]=0,A[(e=Z)+32>>2]=0,A[e+36>>2]=0,A[e+24>>2]=0,A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,A[e+8>>2]=0,A[e+12>>2]=0,A[e>>2]=0,A[e+4>>2]=0,A[t+48>>2]=4;c:{o:{u:{l:switch(l[c+17|0]-2|0){case 0:r=l[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[12+(e=216192+(e<<4)|0)>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,r=l[a+22|0],f=l[a+21|0],p=A[129280+(l[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(o=A[36440]))<=0||A[4+(e=216192+(e<<4)|0)>>2]||(A[e+4>>2]=o),e=(o=!(255&~f))?I:p,p=1;break o;case 1:break l;default:break u}if(!l[c+20|0]){r=l[c+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[12+(e=216192+(e<<4)|0)>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,r=l[c+22|0],f=l[c+21|0],p=A[129280+(l[c+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(o=A[36440]))<=0||A[4+(e=216192+(e<<4)|0)>>2]||(A[e+4>>2]=o),e=(o=!(255&~f))?I:p,p=1;break o}}if(p=0,A[36424]>=0)break c;r=l[c+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[12+(e=216192+(e<<4)|0)>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,r=l[a+22|0],f=l[a+21|0],p=A[129280+(l[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(o=A[36440]))<=0||A[4+(e=216192+(e<<4)|0)>>2]||(A[e+4>>2]=o),e=(o=!(255&~f))?I:p,p=0}T=A[50758],A[36424]=T,A[36440]=0,A[(T=216192+(T<<4)|0)>>2]=9,A[T+4>>2]=0,A[T+12>>2]=o?3604556:255&r|(255&f)<<16,A[T+8>>2]=e,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0}c:if(!(2&l[s+7|0])&l[i+17|0]!=2)8&l[0|a]&&dr(50,0);else{if(Ar(0,1,a,t+552|0,145784),A[t+56>>2]=A[t+620>>2],A[t+64>>2]=A[t+640>>2],Qe(s,0,t+48|0,a,0),!(8&l[0|a]))break c;dr(25,1),Qe(s,0,t+48|0,a,0)}c:if(p){if(A[36455]!=A[36454])break c;A[36455]=A[50758]}else b[a>>1]=8192|M[a>>1];if(Ar(0,0,a,t+552|0,145784),A[t+56>>2]=A[t+620>>2],A[t+64>>2]=A[t+640>>2],A[t+76>>2]=A[t+636>>2],A[t+80>>2]=A[t+656>>2],Qe(s,0,t+48|0,a,0),l[a+20|0]|l[84+(145840+(m<<5)|0)|0]||((0|(e=l[c+17|0]))==7&&(dr(20,0),e=l[c+17|0]),(255&e)!=6))break r;dr(12,0);break r;case 7:c:{o:{u:{l:{n:switch((e=l[c+17|0])-2|0){case 1:break l;case 0:break n;default:break u}r=l[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[12+(e=216192+(e<<4)|0)>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,p=l[a+22|0],e=l[a+21|0],s=A[129280+(l[a+16|0]<<2)>>2],(0|(r=A[36424]))<0|(0|(f=A[36440]))<=0||A[4+(r=216192+(r<<4)|0)>>2]||(A[r+4>>2]=f),r=(f=!(255&~e))?I:s;break o}r=l[c+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[12+(e=216192+(e<<4)|0)>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,p=l[c+22|0],e=l[c+21|0],s=A[129280+(l[c+16|0]<<2)>>2],(0|(r=A[36424]))<0|(0|(f=A[36440]))<=0||A[4+(r=216192+(r<<4)|0)>>2]||(A[r+4>>2]=f),r=(f=!(255&~e))?I:s;break o}if(A[36424]>=0)break c;r=l[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[12+(e=216192+(e<<4)|0)>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,p=l[a+22|0],e=l[a+21|0],s=A[129280+(l[a+16|0]<<2)>>2],(0|(r=A[36424]))<0|(0|(f=A[36440]))<=0||A[4+(r=216192+(r<<4)|0)>>2]||(A[r+4>>2]=f),r=(f=!(255&~e))?I:s}s=A[50758],A[36424]=s,A[36440]=0,A[(s=216192+(s<<4)|0)>>2]=9,A[s+4>>2]=0,A[s+12>>2]=f?3604556:(255&e)<<16|p,A[s+8>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,e=l[c+17|0]}c:{o:{u:switch((255&e)-2|0){case 1:if(l[c+20|0])break o;break;case 0:break u;default:break o}if(A[36455]!=A[36454])break c;A[36455]=A[50758];break c}b[a>>1]=8192|M[a>>1]}Ar(0,0,a,t+552|0,145784),A[t+56>>2]=0,A[t+60>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[t+88>>2]=0,A[t+56>>2]=A[t+620>>2],A[E>>2]=A[t+640>>2],A[t+80>>2]=A[t+656>>2],A[t+48>>2]=0,A[t+52>>2]=0,A[t+76>>2]=A[t+636>>2],A[t+92>>2]=A[t+596>>2]<<1,8&l[0|a]&&Qe(A[a+8>>2],0,t+48|0,a,0),Qe(A[a+8>>2],0,t+48|0,a,0);break r;case 8:if(A[t+88>>2]=0,A[t+92>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+56>>2]=0,A[t+60>>2]=0,A[t+48>>2]=0,A[t+52>>2]=0,1&g[0|a]||(r=l[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[12+(e=216192+(e<<4)|0)>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,s=l[a+22|0],r=l[a+21|0],p=A[129280+(l[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(f=A[36440]))<=0||A[4+(e=216192+(e<<4)|0)>>2]||(A[e+4>>2]=f),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,s|=r<<16,r=(0|r)==255,A[e+12>>2]=r?3604556:s,A[e+8>>2]=r?I:p,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),l[i+17|0]==8&&(A[36426]=0),Ar(0,0,a,t+552|0,145784),A[t+56>>2]=A[t+620>>2],A[t+64>>2]=A[t+640>>2],A[t+92>>2]=A[t+596>>2]<<1,l[c+17|0]==2){A[36455]==A[36454]&&(A[36455]=A[50758]),Qe(A[a+8>>2],0,t+48|0,a,0);break r}if(!(!(1&g[0|a])|l[i+17|0]!=2)){Qe(A[a+8>>2],0,t+48|0,a,0);break r}A[36426]=0,Qe(A[a+8>>2],0,t+48|0,a,0),A[36426]=0;break r;case 3:A[t+88>>2]=0,A[t+92>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+56>>2]=0,A[t+60>>2]=0,A[t+48>>2]=0,A[t+52>>2]=0,s=A[A[a+8>>2]+4>>2],1&g[0|a]||(r=l[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[12+(e=216192+(e<<4)|0)>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,p=l[a+22|0],r=l[a+21|0],f=A[129280+(l[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(o=A[36440]))<=0||A[4+(e=216192+(e<<4)|0)>>2]||(A[e+4>>2]=o),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,p|=r<<16,r=(0|r)==255,A[e+12>>2]=r?3604556:p,A[e+8>>2]=r?I:f,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),l[i+17|0]==8&&(A[36426]=0),l[c+17|0]!=2|A[36455]!=A[36454]||(A[36455]=A[50758]),Ar(0,0,a,t+552|0,145784),(0|(e=A[t+584>>2]-l[a+18|0]|0))>0&&dr(e,1),A[t+56>>2]=A[t+620>>2],A[t+64>>2]=A[t+640>>2],A[t+76>>2]=A[t+636>>2],A[t+80>>2]=A[t+656>>2],A[t+92>>2]=A[t+596>>2]<<1,Qe(A[a+8>>2],0,t+48|0,a,s<<24>>31&5);break r;case 2:break i;default:break r}f=A[a+8>>2]}m=l[a+3|0],A[t+88>>2]=0,A[t+92>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+56>>2]=0,A[t+60>>2]=0,A[t+48>>2]=0,A[t+52>>2]=0,Ar(0,0,a,t+552|0,145784),e=A[t+628>>2],A[t+56>>2]=e,A[t+92>>2]=A[t+596>>2]<<1;s:{if(!e||(o=0,s=QA,r=vA,2&l[t+552|0])){if(l[i+17|0]?(o=0,Ar(0,0,i,t+400|0,0),e=A[t+476>>2],A[t+56>>2]=e,!e|!(2&l[t+400|0])||(A[t+72>>2]=A[t+496>>2],o=1),r=A[t+512>>2],A[t+84>>2]=A[t+508>>2],A[t+88>>2]=r):o=0,e)break s;A[t+48>>2]=1,A[t+52>>2]=1,s=KA,r=WA}A[r>>2]=A[s>>2]}A[t+64>>2]=A[t+640>>2],r=l[a+16|0],e=0,(s=l[a+7|0])?(Li(s,t+96|0),r=Tn(A[t+220>>2]),(0|(s=A[t+224>>2]))<=0||(e=Tn(s))):r=A[129280+(r<<2)>>2],A[36455]==A[36454]&&(A[36455]=A[50758]),s=(s=15&m)>>>0<2?1:s>>>0>6?3:2;s:{switch(l[i+17|0]-3|0){case 2:case 4:o=l[a+19|0],i=A[50758],A[36425]=i,A[36441]=0,A[12+(i=216192+(i<<4)|0)>>2]=o,A[i+8>>2]=e,A[i>>2]=8,A[i+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,o=l[a+22|0],i=l[a+21|0],(0|(e=A[36440]))<=0||(0|(m=A[36424]))<0||A[4+(m=216192+(m<<4)|0)>>2]||(A[m+4>>2]=e),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,o|=i<<16,i=(0|i)==255,A[e+12>>2]=i?3604556:o,A[e+8>>2]=i?I:r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,Qe(f,1,t+48|0,a,s);break s;case 0:case 5:o=l[a+19|0],i=A[50758],A[36425]=i,A[36441]=0,A[12+(i=216192+(i<<4)|0)>>2]=o,A[i+8>>2]=e,A[i>>2]=8,A[i+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,Qe(f,1,t+48|0,a,s),o=l[a+22|0],i=l[a+21|0],(0|(e=A[36440]))<=0||(0|(m=A[36424]))<0||A[4+(m=216192+(m<<4)|0)>>2]||(A[m+4>>2]=e),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,o|=i<<16,i=(0|i)==255,A[e+12>>2]=i?3604556:o,A[e+8>>2]=i?I:r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0;break s}o?(o=l[a+22|0],(0|(i=A[36440]))<=0||(0|(m=A[36424]))<0||A[4+(m=216192+(m<<4)|0)>>2]||(A[m+4>>2]=i),i=A[50758],A[36424]=i,A[36440]=0,A[(i=216192+(i<<4)|0)>>2]=9,A[i+4>>2]=0,A[i+12>>2]=(o|o<<16)-983040,A[i+8>>2]=hA,i=A[50758]+1|0,A[50758]=(0|i)<=169?i:0,o=l[a+19|0],i=A[50758],A[36425]=i,A[36441]=0,A[(i=216192+(i<<4)|0)>>2]=8,A[i+4>>2]=0,A[i+12>>2]=o-1,A[i+8>>2]=e,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,Qe(f,1,t+48|0,a,s),i=l[a+21|0],o=l[a+22|0],(0|(e=A[36440]))<=0||(0|(m=A[36424]))<0||A[4+(m=216192+(m<<4)|0)>>2]||(A[m+4>>2]=e),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,o|=i<<16,i=(0|i)==255,A[e+12>>2]=i?3604556:o,A[e+8>>2]=i?I:r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0):(1&g[0|a]||(o=l[a+19|0],i=A[50758],A[36425]=i,A[36441]=0,A[12+(i=216192+(i<<4)|0)>>2]=o,A[i+8>>2]=e,A[i>>2]=8,A[i+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,o=l[a+22|0],i=l[a+21|0],(0|(e=A[36440]))<=0||(0|(m=A[36424]))<0||A[4+(m=216192+(m<<4)|0)>>2]||(A[m+4>>2]=e),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,o|=i<<16,i=(0|i)==255,A[e+12>>2]=i?3604556:o,A[e+8>>2]=i?I:r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),Qe(f,1,t+48|0,a,s))}!A[47198]|1^p||(rs(t+704|0,A[a+8>>2],a,O,0),(0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))<6||(r=A[36445],e=216192+(A[50758]<<4)|0,A[e>>2]=1802,A[e+4>>2]=16777215&r,r=A[t+708>>2],A[e+8>>2]=A[t+704>>2],A[e+12>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)),A[t+56>>2]=A[t+620>>2],A[t+84>>2]=0,A[t+88>>2]=0,A[t+64>>2]=A[t+640>>2],r=A[t+632>>2],A[t+68>>2]=r,e=cA;s:{if(!r&&(!l[c+17|0]||(A[t+72>>2]=0,Ar(0,0,c,t+248|0,0),A[t+52>>2]=1,e=A[t+368>>2],A[t+84>>2]=A[t+364>>2],A[t+88>>2]=e,r=A[t+328>>2],A[t+68>>2]=r,e=AA,!r)))break s;A[t+72>>2]=A[e>>2]}Qe(f,2,t+48|0,a,s)}if(e=A[36442]+1|0,A[36442]=e,(0|e)>997)break e;if(!(A[36423]>(0|e)))break}(0|(e=A[36440]))<=0||(0|(r=A[36424]))<0||(A[4+(r=216192+(r<<4)|0)>>2]||(A[r+4>>2]=e),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],La(),A[36427]=-1,e=0,A[36423]<=0||(r=A[47568],s=A[33284],(0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))>=6&&(e=216192+(A[50758]<<4)|0,A[e>>2]=1290,A[e+8>>2]=r,A[e+4>>2]=16777215&s,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),A[36423]=0,e=0)}return J=t+720|0,e}function ye(e,t,r,a){var s,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0,ft=0;J=s=J-48|0;A:{if(r>>>0<=2){for(Me=A[124732+(r<<=2)>>2],ze=A[r+124720>>2];(0|(r=A[t+4>>2]))==A[t+104>>2]?r=Ce(t):(A[t+4>>2]=r+1,r=l[0|r]),(0|r)==32|r-9>>>0<5;);T=1;e:{r:switch(r-43|0){case 0:case 2:break r;default:break e}T=(0|r)==45?-1:1,(0|(r=A[t+4>>2]))==A[t+104>>2]?r=Ce(t):(A[t+4>>2]=r+1,r=l[0|r])}e:{r:{for(;;){if(g[c+84056|0]==(32|r)){if(c>>>0>6||((0|(r=A[t+4>>2]))==A[t+104>>2]?r=Ce(t):(A[t+4>>2]=r+1,r=l[0|r])),(0|(c=c+1|0))!=8)continue;break r}break}if((0|c)!=3){if((0|c)==8)break r;if(!a|c>>>0<4)break e;if((0|c)==8)break r}if((0|(r=A[t+116>>2]))>0|(0|r)>=0&&(A[t+4>>2]=A[t+4>>2]-1),!(!a|c>>>0<4))for(r=(0|r)<0;r||(A[t+4>>2]=A[t+4>>2]-1),(c=c-1|0)>>>0>3;);}J=I=J-16|0,EA(RA(RA(0|T)*RA(1/0))),(t=2147483647&(f=X(2)))-8388608>>>0<=2130706431?(r=t,r<<=25,a=1065353216+(t=t>>>7|0)|0):(r=f<<25,a=f>>>7|2147418112,t>>>0>=2139095040||(r=0,a=0,t&&(ta(I,r=t,0,0,0,(t=YA(t))+81|0),p=A[I>>2],m=A[I+4>>2],r=A[I+8>>2],a=65536^A[I+12>>2]|16265-t<<16))),A[s>>2]=p,A[s+4>>2]=m,A[s+8>>2]=r,A[s+12>>2]=-2147483648&f|a,J=I+16|0,p=A[s+8>>2],m=A[s+12>>2],f=A[s>>2],E=A[s+4>>2];break A}e:{r:{s:if(!c){for(c=0;;){if(g[c+84473|0]!=(32|r))break s;if(c>>>0>1||((0|(r=A[t+4>>2]))==A[t+104>>2]?r=Ce(t):(A[t+4>>2]=r+1,r=l[0|r])),(0|(c=c+1|0))==3)break}break r}switch(0|c){case 0:if((0|r)==48){if((0|(c=A[t+4>>2]))==A[t+104>>2]?c=Ce(t):(A[t+4>>2]=c+1,c=l[0|c]),(-33&c)==88){J=o=J-432|0,(0|(r=A[t+4>>2]))==A[t+104>>2]?c=Ce(t):(A[t+4>>2]=r+1,c=l[0|r]);s:{i:{for(;;){if((0|c)!=48){if((0|c)!=46)break s;if((0|(r=A[t+4>>2]))!=A[t+104>>2]){A[t+4>>2]=r+1,c=l[0|r];break i}break}(0|(r=A[t+4>>2]))!=A[t+104>>2]?(le=1,A[t+4>>2]=r+1,c=l[0|r]):(le=1,c=Ce(t))}c=Ce(t)}if(AA=1,(0|c)==48){for(;cA=(r=cA)-1|0,hA=hA-!r|0,(0|(r=A[t+4>>2]))==A[t+104>>2]?c=Ce(t):(A[t+4>>2]=r+1,c=l[0|r]),(0|c)==48;);le=1}}for(E=1073676288;;){s:{r=32|c;i:{if(!((At=c-48|0)>>>0<10)){if((0|c)!=46&r-97>>>0>=6)break s;if((0|c)==46){if(AA)break s;AA=1,cA=p,hA=m;break i}}r=(0|c)>57?r-87|0:At,(0|m)<=0&p>>>0<=7|(0|m)<0?i=r+(i<<4)|0:!m&p>>>0<=28?(za(o+48|0,r),Ne(o+32|0,KA,re,f,E,0,0,0,1073414144),KA=A[o+32>>2],re=A[o+36>>2],f=A[o+40>>2],E=A[o+44>>2],Ne(o+16|0,A[o+48>>2],A[o+52>>2],A[o+56>>2],A[o+60>>2],KA,re,f,E),ea(o,A[o+16>>2],A[o+20>>2],A[o+24>>2],A[o+28>>2],I,Z,QA,WA),QA=A[o+8>>2],WA=A[o+12>>2],I=A[o>>2],Z=A[o+4>>2]):O|!r||(Ne(o+80|0,KA,re,f,E,0,0,0,1073610752),ea(o- -64|0,A[o+80>>2],A[o+84>>2],A[o+88>>2],A[o+92>>2],I,Z,QA,WA),QA=A[o+72>>2],WA=A[o+76>>2],O=1,I=A[o+64>>2],Z=A[o+68>>2]),m=(p=p+1|0)?m:m+1|0,le=1}(0|(r=A[t+4>>2]))!=A[t+104>>2]?(A[t+4>>2]=r+1,c=l[0|r]):c=Ce(t);continue}break}s:if(le){if((0|m)<=0&p>>>0<=7|(0|m)<0)for(f=p,E=m;i<<=4,(0|(f=f+1|0))!=8|(E=f?E:E+1|0););i:{c:{o:{if((-33&c)==80){if(f=pi(t,a),E=r=$,f|(0|r)!=-2147483648)break i;if(a){if((0|(r=A[t+116>>2]))>0|(0|r)>=0)break o;break c}I=0,Z=0,Ja(t,0,0),r=0,t=0;break s}if(f=0,E=0,A[t+116>>2]<0)break i}A[t+4>>2]=A[t+4>>2]-1}f=0,E=0}if(i)if(r=f+((t=AA?cA:p)<<2)|0,t=(m=(AA?hA:m)<<2|t>>>30)+E|0,(p=r-32|0)>>>0>0-Me>>>0&(0|(t=m=(r>>>0<f>>>0?t+1|0:t)-(r>>>0<32)|0))>=0|(0|t)>0)A[56798]=68,za(o+160|0,T),Ne(o+144|0,A[o+160>>2],A[o+164>>2],A[o+168>>2],A[o+172>>2],-1,-1,-1,2147418111),Ne(o+128|0,A[o+144>>2],A[o+148>>2],A[o+152>>2],A[o+156>>2],-1,-1,-1,2147418111),I=A[o+128>>2],Z=A[o+132>>2],r=A[o+140>>2],t=A[o+136>>2];else if((0|m)>=(0|(r=(t=Me-226|0)>>31))&t>>>0<=p>>>0|(0|r)<(0|m)){if((0|i)>=0)for(;ea(o+416|0,I,Z,QA,WA,0,0,0,-1073807360),ea(o+400|0,I,Z,QA,WA,(t=r=(0|(t=s0(I,Z,QA,WA,1073610752)))>=0)?A[o+416>>2]:I,t?A[o+420>>2]:Z,t?A[o+424>>2]:QA,t?A[o+428>>2]:WA),p=(t=p)-1|0,m=m-!t|0,QA=A[o+408>>2],WA=A[o+412>>2],I=A[o+400>>2],Z=A[o+404>>2],(0|(i=r|i<<1))>=0;);t=m-((Me>>31)+(p>>>0<Me>>>0)|0)|0,(0|(r=(r=32+(p-Me|0)|0)>>>0<ze>>>0&(0|(t=r>>>0<32?t+1|0:t))<=0|(0|t)<0?(0|r)>0?r:0:ze))>=113?(za(o+384|0,T),cA=A[o+392>>2],hA=A[o+396>>2],KA=A[o+384>>2],re=A[o+388>>2],f=0,t=0):(Nr(o+352|0,Ys(1,144-r|0)),za(o+336|0,T),KA=A[o+336>>2],re=A[o+340>>2],cA=A[o+344>>2],hA=A[o+348>>2],Mn(o+368|0,A[o+352>>2],A[o+356>>2],A[o+360>>2],A[o+364>>2],KA,re,cA,hA),vA=A[o+376>>2],at=A[o+380>>2],f=A[o+372>>2],t=A[o+368>>2]),ri(o+320|0,(a=!(1&i)&!!(0|ge(I,Z,QA,WA,0,0,0,0))&(0|r)<32)+i|0),Ne(o+304|0,KA,re,cA,hA,A[o+320>>2],A[o+324>>2],A[o+328>>2],A[o+332>>2]),r=t,ea(o+272|0,A[o+304>>2],A[o+308>>2],A[o+312>>2],A[o+316>>2],t,f,vA,at),Ne(o+288|0,KA,re,cA,hA,(t=a)?0:I,t?0:Z,t?0:QA,t?0:WA),ea(o+256|0,A[o+288>>2],A[o+292>>2],A[o+296>>2],A[o+300>>2],A[o+272>>2],A[o+276>>2],A[o+280>>2],A[o+284>>2]),Hi(o+240|0,A[o+256>>2],A[o+260>>2],A[o+264>>2],A[o+268>>2],r,f,vA,at),ge(t=A[o+240>>2],a=A[o+244>>2],r=A[o+248>>2],f=A[o+252>>2],0,0,0,0)||(A[56798]=68),cr(o+224|0,t,a,r,f,p),I=A[o+224>>2],Z=A[o+228>>2],r=A[o+236>>2],t=A[o+232>>2]}else A[56798]=68,za(o+208|0,T),Ne(o+192|0,A[o+208>>2],A[o+212>>2],A[o+216>>2],A[o+220>>2],0,0,0,65536),Ne(o+176|0,A[o+192>>2],A[o+196>>2],A[o+200>>2],A[o+204>>2],0,0,0,65536),I=A[o+176>>2],Z=A[o+180>>2],r=A[o+188>>2],t=A[o+184>>2];else Nr(o+112|0,0*+(0|T)),I=A[o+112>>2],Z=A[o+116>>2],r=A[o+124>>2],t=A[o+120>>2]}else{i:{c:{if((0|(r=A[t+116>>2]))>0|(0|r)>=0){if(r=A[t+4>>2],A[t+4>>2]=r-1,!a)break c;if(A[t+4>>2]=r-2,!AA)break i;A[t+4>>2]=r-3;break i}if(a)break i}Ja(t,0,0)}Nr(o+96|0,0*+(0|T)),I=A[o+96>>2],Z=A[o+100>>2],r=A[o+108>>2],t=A[o+104>>2]}A[s+16>>2]=I,A[s+20>>2]=Z,A[s+24>>2]=t,A[s+28>>2]=r,J=o+432|0,p=A[s+24>>2],m=A[s+28>>2],f=A[s+16>>2],E=A[s+20>>2];break A}A[t+116>>2]<0||(A[t+4>>2]=A[t+4>>2]-1)}c=t,vA=T,o=a,t=0,T=0,J=i=J-8976|0,at=(At=0-Me|0)-ze|0;s:{i:{for(;;){if((0|r)!=48){if((0|r)!=46)break s;if((0|(r=A[c+4>>2]))!=A[c+104>>2]){A[c+4>>2]=r+1,r=l[0|r];break i}break}(0|(t=A[c+4>>2]))!=A[c+104>>2]?(A[c+4>>2]=t+1,r=l[0|t]):r=Ce(c),t=1}r=Ce(c)}if(O=1,(0|r)==48){for(;p=(t=p)-1|0,m=m-!t|0,(0|(t=A[c+4>>2]))==A[c+104>>2]?r=Ce(c):(A[c+4>>2]=t+1,r=l[0|t]),(0|r)==48;);t=1}}A[i+784>>2]=0;s:{i:{c:{o:{u:{if((a=(0|r)==46)|(I=r-48|0)>>>0<=9)for(;;){l:{if(1&a){if(!O){p=f,m=E,O=1;break l}a=!t;break u}E=(f=f+1|0)?E:E+1|0,(0|T)<=2044?(le=(0|r)==48?le:f,t=(i+784|0)+(T<<2)|0,AA&&(I=(P(A[t>>2],10)+r|0)-48|0),A[t>>2]=I,t=1,AA=(r=(0|(a=AA+1|0))==9)?0:a,T=r+T|0):(0|r)!=48&&(A[i+8960>>2]=1|A[i+8960>>2],le=18396)}if((0|(r=A[c+4>>2]))==A[c+104>>2]?r=Ce(c):(A[c+4>>2]=r+1,r=l[0|r]),!((a=(0|r)==46)|(I=r-48|0)>>>0<10))break}if(p=O?p:f,m=O?m:E,!(!t|(-33&r)!=69)){if(I=pi(c,o),Z=t=$,!(I|(0|t)!=-2147483648)){if(!o)break c;I=0,Z=0,A[c+116>>2]<0||(A[c+4>>2]=A[c+4>>2]-1)}m=m+Z|0,m=(p=p+I|0)>>>0<I>>>0?m+1|0:m;break i}if(a=!t,(0|r)<0)break o}A[c+116>>2]<0||(A[c+4>>2]=A[c+4>>2]-1)}if(!a)break i;A[56798]=28}f=0,E=0,Ja(c,0,0),r=0,t=0;break s}if(t=A[i+784>>2])if(f>>>0>9&(0|E)>=0|(0|E)>0|(0|f)!=(0|p)|(0|m)!=(0|E)|(t>>>ze|0?(0|ze)<=30:0))if(p>>>0>At>>>1>>>0&(0|m)>=0|(0|m)>0)A[56798]=68,za(i+96|0,vA),Ne(i+80|0,A[i+96>>2],A[i+100>>2],A[i+104>>2],A[i+108>>2],-1,-1,-1,2147418111),Ne(i- -64|0,A[i+80>>2],A[i+84>>2],A[i+88>>2],A[i+92>>2],-1,-1,-1,2147418111),f=A[i+64>>2],E=A[i+68>>2],r=A[i+76>>2],t=A[i+72>>2];else if((r=p>>>0<(t=Me-226|0)>>>0)&(0|m)<=(0|(t>>=31))|(0|t)>(0|m))A[56798]=68,za(i+144|0,vA),Ne(i+128|0,A[i+144>>2],A[i+148>>2],A[i+152>>2],A[i+156>>2],0,0,0,65536),Ne(i+112|0,A[i+128>>2],A[i+132>>2],A[i+136>>2],A[i+140>>2],0,0,0,65536),f=A[i+112>>2],E=A[i+116>>2],r=A[i+124>>2],t=A[i+120>>2];else{if(AA){if((0|AA)<=8){for(c=A[(t=(i+784|0)+(T<<2)|0)>>2];c=P(c,10),(0|(AA=AA+1|0))!=9;);A[t>>2]=c}T=T+1|0}if(O=p,!((0|le)>(0|p)|(0|le)>=9|(0|p)>17)){if((0|O)==9){za(i+192|0,vA),ri(i+176|0,A[i+784>>2]),Ne(i+160|0,A[i+192>>2],A[i+196>>2],A[i+200>>2],A[i+204>>2],A[i+176>>2],A[i+180>>2],A[i+184>>2],A[i+188>>2]),f=A[i+160>>2],E=A[i+164>>2],r=A[i+172>>2],t=A[i+168>>2];break s}if((0|O)<=8){za(i+272|0,vA),ri(i+256|0,A[i+784>>2]),Ne(i+240|0,A[i+272>>2],A[i+276>>2],A[i+280>>2],A[i+284>>2],A[i+256>>2],A[i+260>>2],A[i+264>>2],A[i+268>>2]),za(i+224|0,A[124720+(0-O<<2)>>2]),Sr(i+208|0,A[i+240>>2],A[i+244>>2],A[i+248>>2],A[i+252>>2],A[i+224>>2],A[i+228>>2],A[i+232>>2],A[i+236>>2]),f=A[i+208>>2],E=A[i+212>>2],r=A[i+220>>2],t=A[i+216>>2];break s}if(t=27+(P(O,-3)+ze|0)|0,!((r=A[i+784>>2])>>>t|0&&(0|t)<=30)){za(i+352|0,vA),ri(i+336|0,r),Ne(i+320|0,A[i+352>>2],A[i+356>>2],A[i+360>>2],A[i+364>>2],A[i+336>>2],A[i+340>>2],A[i+344>>2],A[i+348>>2]),za(i+304|0,A[124648+(O<<2)>>2]),Ne(i+288|0,A[i+320>>2],A[i+324>>2],A[i+328>>2],A[i+332>>2],A[i+304>>2],A[i+308>>2],A[i+312>>2],A[i+316>>2]),f=A[i+288>>2],E=A[i+292>>2],r=A[i+300>>2],t=A[i+296>>2];break s}}for(;!A[(i+784|0)+((T=(r=T)-1|0)<<2)>>2];);if(AA=0,t=(0|O)%9|0){if(a=0,t=(0|O)<0?t+9|0:t,r){for(m=1e9/(0|(p=A[124720+(0-t<<2)>>2]))|0,I=0,c=0;f=(f=I)+(T=((E=A[(I=(i+784|0)+(c<<2)|0)>>2])>>>0)/(p>>>0)|0)|0,A[I>>2]=f,a=(f=!f&(0|a)==(0|c))?a+1&2047:a,O=f?O-9|0:O,I=P(m,E-P(p,T)|0),(0|(c=c+1|0))!=(0|r););I&&(A[(i+784|0)+(r<<2)>>2]=I,r=r+1|0)}else r=0;O=9+(O-t|0)|0}else a=0;for(;;){c=(i+784|0)+(a<<2)|0;i:{for(;;){if(((0|O)!=36|uA[c>>2]>=10384593)&(0|O)>=36)break i;for(T=r+2047|0,I=0,t=r;r=t,p=I,I=(t=A[(T=(i+784|0)+((f=2047&T)<<2)|0)>>2])<<29,t=E=t>>>3|0,!(m=(p=p+I|0)>>>0<I>>>0?t+1|0:t)&p>>>0<1000000001?I=0:p=(t=p)-bt(I=oi(t,m,1e9),$,1e9,0)|0,A[T>>2]=p,t=(0|f)!=(r-1&2047)||(0|a)==(0|f)||p?r:f,T=f-1|0,(0|a)!=(0|f););if(AA=AA-29|0,I)break}(0|(a=a-1&2047))==(0|t)&&(c=r=(p=i+784|0)+((t+2046&2047)<<2)|0,m=A[r>>2],r=t-1&2047,A[c>>2]=m|A[p+(r<<2)>>2]),O=O+9|0,A[(i+784|0)+(a<<2)>>2]=I;continue}break}i:{c:for(;;){for(p=r+1&2047,I=(i+784|0)+((r-1&2047)<<2)|0;;){f=(0|O)>45?9:1;o:{for(;;){t=a,c=0;u:{for(;;){if((0|(a=t+c&2047))!=(0|r)&&!((a=A[(i+784|0)+(a<<2)>>2])>>>0<(m=A[124672+(c<<2)>>2])>>>0)){if(a>>>0>m>>>0)break u;if((0|(c=c+1|0))!=4)continue}break}if((0|O)==36){for(p=0,m=0,c=0,f=0,E=0;(0|(a=t+c&2047))==(0|r)&&(A[780+(i+((r=r+1&2047)<<2)|0)>>2]=0),ri(i+768|0,A[(i+784|0)+(a<<2)>>2]),Ne(i+752|0,p,m,f,E,0,0,1342177280,1075633366),ea(i+736|0,A[i+752>>2],A[i+756>>2],A[i+760>>2],A[i+764>>2],A[i+768>>2],A[i+772>>2],A[i+776>>2],A[i+780>>2]),f=A[i+744>>2],E=A[i+748>>2],p=A[i+736>>2],m=A[i+740>>2],(0|(c=c+1|0))!=4;);if(za(i+720|0,vA),Ne(i+704|0,p,m,f,E,A[i+720>>2],A[i+724>>2],A[i+728>>2],A[i+732>>2]),f=A[i+712>>2],E=A[i+716>>2],p=0,m=0,I=A[i+704>>2],Z=A[i+708>>2],(0|(a=(T=(0|(c=(o=AA+113|0)-Me|0))<(0|ze))?(0|c)>0?c:0:ze))<=112)break o;break i}}if(AA=f+AA|0,a=r,(0|t)!=(0|r))break}for(E=1e9>>>f|0,T=~(-1<<f),c=0,a=t;m=(m=c)+((o=A[(c=(i+784|0)+(t<<2)|0)>>2])>>>f|0)|0,A[c>>2]=m,a=(m=!m&(0|t)==(0|a))?a+1&2047:a,O=m?O-9|0:O,c=P(E,o&T),(0|r)!=(0|(t=t+1&2047)););if(!c)continue;if((0|a)!=(0|p)){A[(i+784|0)+(r<<2)>>2]=c,r=p;continue c}A[I>>2]=1|A[I>>2];continue}break}break}Nr(i+656|0,Ys(1,225-a|0)),Mn(i+688|0,A[i+656>>2],A[i+660>>2],A[i+664>>2],A[i+668>>2],I,Z,f,E),KA=A[i+696>>2],re=A[i+700>>2],QA=A[i+688>>2],WA=A[i+692>>2],Nr(i+640|0,Ys(1,113-a|0)),di(i+672|0,I,Z,f,E,A[i+640>>2],A[i+644>>2],A[i+648>>2],A[i+652>>2]),Hi(i+624|0,I,Z,f,E,p=A[i+672>>2],m=A[i+676>>2],cA=A[i+680>>2],hA=A[i+684>>2]),ea(i+608|0,QA,WA,KA,re,A[i+624>>2],A[i+628>>2],A[i+632>>2],A[i+636>>2]),f=A[i+616>>2],E=A[i+620>>2],I=A[i+608>>2],Z=A[i+612>>2]}if((0|(O=t+4&2047))!=(0|r)){i:if((O=A[(i+784|0)+(O<<2)>>2])>>>0<=499999999){if(!O&(t+5&2047)==(0|r))break i;Nr(i+496|0,.25*+(0|vA)),ea(i+480|0,p,m,cA,hA,A[i+496>>2],A[i+500>>2],A[i+504>>2],A[i+508>>2]),cA=A[i+488>>2],hA=A[i+492>>2],p=A[i+480>>2],m=A[i+484>>2]}else(0|O)==5e8?(ft=+(0|vA),(t+5&2047)!=(0|r)?(Nr(i+560|0,.75*ft),ea(i+544|0,p,m,cA,hA,A[i+560>>2],A[i+564>>2],A[i+568>>2],A[i+572>>2]),cA=A[i+552>>2],hA=A[i+556>>2],p=A[i+544>>2],m=A[i+548>>2]):(Nr(i+528|0,.5*ft),ea(i+512|0,p,m,cA,hA,A[i+528>>2],A[i+532>>2],A[i+536>>2],A[i+540>>2]),cA=A[i+520>>2],hA=A[i+524>>2],p=A[i+512>>2],m=A[i+516>>2])):(Nr(i+592|0,.75*+(0|vA)),ea(i+576|0,p,m,cA,hA,A[i+592>>2],A[i+596>>2],A[i+600>>2],A[i+604>>2]),cA=A[i+584>>2],hA=A[i+588>>2],p=A[i+576>>2],m=A[i+580>>2]);(0|a)>111||(di(i+464|0,p,m,cA,hA,0,0,0,1073676288),ge(A[i+464>>2],A[i+468>>2],A[i+472>>2],A[i+476>>2],0,0,0,0)||(ea(i+448|0,p,m,cA,hA,0,0,0,1073676288),cA=A[i+456>>2],hA=A[i+460>>2],p=A[i+448>>2],m=A[i+452>>2]))}ea(i+432|0,I,Z,f,E,p,m,cA,hA),Hi(i+416|0,A[i+432>>2],A[i+436>>2],A[i+440>>2],A[i+444>>2],QA,WA,KA,re),f=A[i+424>>2],E=A[i+428>>2],I=A[i+416>>2],Z=A[i+420>>2],(at-2|0)>=(2147483647&o)||(A[i+408>>2]=f,A[i+412>>2]=2147483647&E,A[i+400>>2]=I,A[i+404>>2]=Z,Ne(i+384|0,I,Z,f,E,0,0,0,1073610752),f=(t=(0|(t=s0(A[i+400>>2],A[i+404>>2],A[i+408>>2],A[i+412>>2],1081081856)))>=0)?A[i+392>>2]:f,E=t?A[i+396>>2]:E,I=t?A[i+384>>2]:I,Z=t?A[i+388>>2]:Z,AA=t+AA|0,!(!!(0|ge(p,m,cA,hA,0,0,0,0))&(t?T&(0|a)!=(0|c):T))&(AA+110|0)<=(0|at)||(A[56798]=68)),cr(i+368|0,I,Z,f,E,AA),f=A[i+368>>2],E=A[i+372>>2],r=A[i+380>>2],t=A[i+376>>2]}else za(i+48|0,vA),ri(i+32|0,t),Ne(i+16|0,A[i+48>>2],A[i+52>>2],A[i+56>>2],A[i+60>>2],A[i+32>>2],A[i+36>>2],A[i+40>>2],A[i+44>>2]),f=A[i+16>>2],E=A[i+20>>2],r=A[i+28>>2],t=A[i+24>>2];else Nr(i,0*+(0|vA)),f=A[i>>2],E=A[i+4>>2],r=A[i+12>>2],t=A[i+8>>2]}A[s+40>>2]=t,A[s+44>>2]=r,A[s+32>>2]=f,A[s+36>>2]=E,J=i+8976|0,p=A[s+40>>2],m=A[s+44>>2],f=A[s+32>>2],E=A[s+36>>2];break A;case 3:break r}(0|(r=A[t+116>>2]))>0|(0|r)>=0&&(A[t+4>>2]=A[t+4>>2]-1);break e}if((0|(r=A[t+4>>2]))==A[t+104>>2]?r=Ce(t):(A[t+4>>2]=r+1,r=l[0|r]),(0|r)!=40){if(m=2147450880,A[t+116>>2]<0)break A;A[t+4>>2]=A[t+4>>2]-1;break A}for(c=1;(0|(r=A[t+4>>2]))==A[t+104>>2]?r=Ce(t):(A[t+4>>2]=r+1,r=l[0|r]),r-48>>>0<10|r-65>>>0<26|(0|r)==95||!(r-97>>>0>=26);)c=c+1|0;if(m=2147450880,(0|r)==41)break A;(0|(r=A[t+116>>2]))>0|(0|r)>=0&&(A[t+4>>2]=A[t+4>>2]-1);r:{if(a){if(c)break r;break A}break e}for(;c=c-1|0,(0|r)>0|(0|r)>=0&&(A[t+4>>2]=A[t+4>>2]-1),c;);break A}A[56798]=28,Ja(t,0,0)}m=0}A[e>>2]=f,A[e+4>>2]=E,A[e+8>>2]=p,A[e+12>>2]=m,J=s+48|0}function Qe(e,t,r,a,s){var i,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0;if(J=i=J-112|0,A[r+8>>2]){Me=A[50754]/70|0,Z=(I=A[a+12>>2])||256;A:if((0|t)!=2){if((0|t)==1){e:if(l[e+11|0]!=3)switch(l[a-15|0]-3|0){case 0:case 5:break e;default:break A}Z=(0|(I=A[A[47192]+44>>2]))<(0|Z)?Z:I}}else{if((0|(I=A[A[47192]+80>>2]))<=0|!(8&l[0|a]|I>>>0<=l[e+14|0]|32&l[e+6|0]))break A;Me<<=1}if(A[36436]=0,hA=e,ze=t,p=a,J=O=J-16|0,e=A[34460]+A[r+8>>2]|0,t=(t=l[e+2|0])>>>0>=24?24:t,A[O+12>>2]=t,c=A[r+12>>2]+A[r+24>>2]|0,A[36422]=c,t){for(I=e+4|0,o=1&b[e+4>>1];e=145488+(m<<3)|0,a=I+(o?m<<6:P(m,44))|0,A[e+4>>2]=a,T=M[a>>1],b[e+2>>1]=T,b[e>>1]=l[a+16|0],f=2&T?m:f,(0|(m=m+1|0))!=(0|t););I=145488,(0|f)<=0||((0|ze)!=1?(t=t-f|0,A[O+12>>2]=t,I=145488+(f<<3)|0):(t=f+1|0,A[O+12>>2]=t,I=145488))}else t=0,I=145488;if(!(!A[r+4>>2]|A[r+20>>2]|l[hA+11|0]!=2)){if(o=A[r+36>>2],a=A[r+40>>2],e=0,(0|(t=A[O+12>>2]))>=2){f=o>>>12|0,T=a>>>26&7,vA=a>>>18&248,AA=P(cA=63&a,50),WA=63&(KA=o>>>6|0),m=o<<1&126,re=P(a>>>16&31,50)-750|0,le=P(a>>>11&31,50)-750|0,QA=P(a>>>6&31,50)-750|0;A:{e:if((0|ze)!=1){if(!(f|cA))break A;if(8&f?(t=A[4+(I+((c=t-1|0)<<3)|0)>>2],b[t>>1]<0?e=t:(e=(0|(e=A[44469]+1|0))<=169?e:0,A[44469]=e,c=M[t+20>>1]|M[t+22>>1]<<16,e=177888+(e<<6)|0,o=M[t+16>>1]|M[t+18>>1]<<16,b[e+16>>1]=o,b[e+18>>1]=o>>>16,b[e+20>>1]=c,b[e+22>>1]=c>>>16,c=M[t+4>>1]|M[t+6>>1]<<16,o=M[t>>1]|M[t+2>>1]<<16,b[e>>1]=o,b[e+2>>1]=o>>>16,b[e+4>>1]=c,b[e+6>>1]=c>>>16,c=M[t+12>>1]|M[t+14>>1]<<16,o=M[t+8>>1]|M[t+10>>1]<<16,b[e+8>>1]=o,b[e+10>>1]=o>>>16,b[e+12>>1]=c,b[e+14>>1]=c>>>16,c=M[t+28>>1]|M[t+30>>1]<<16,o=M[t+24>>1]|M[t+26>>1]<<16,b[e+24>>1]=o,b[e+26>>1]=o>>>16,b[e+28>>1]=c,b[e+30>>1]=c>>>16,c=M[t+36>>1]|M[t+38>>1]<<16,o=M[t+32>>1]|M[t+34>>1]<<16,b[e+32>>1]=o,b[e+34>>1]=o>>>16,b[e+36>>1]=c,b[e+38>>1]=c>>>16,c=M[t+44>>1]|M[t+46>>1]<<16,o=M[t+40>>1]|M[t+42>>1]<<16,b[e+40>>1]=o,b[e+42>>1]=o>>>16,b[e+44>>1]=c,b[e+46>>1]=c>>>16,c=M[t+52>>1]|M[t+54>>1]<<16,o=M[t+48>>1]|M[t+50>>1]<<16,b[e+48>>1]=o,b[e+50>>1]=o>>>16,b[e+52>>1]=c,b[e+54>>1]=c>>>16,c=M[t+60>>1]|M[t+62>>1]<<16,t=M[t+56>>1]|M[t+58>>1]<<16,b[e+56>>1]=t,b[e+58>>1]=t>>>16,b[e+60>>1]=c,b[e+62>>1]=c>>>16,g[e+16|0]=0,b[e>>1]=32768|M[e>>1],c=A[O+12>>2]-1|0),A[4+(I+(c<<3)|0)>>2]=e,t=1792,(0|(c=b[e+4>>1]))<300||(t=1536,c>>>0<400||(t=c>>>0<500?1280:1024)),A[36436]=t,o=35):(A[O+12>>2]=t+1,b[(e=(c=I+(t<<3)|0)-8|0)>>1]=m,t=A[e+4>>2],e=(0|(e=A[44469]+1|0))<=169?e:0,A[44469]=e,(e=177888+(KA=e<<6)|0)&&(o=M[t+4>>1]|M[t+6>>1]<<16,E=M[t>>1]|M[t+2>>1]<<16,b[e>>1]=E,b[e+2>>1]=E>>>16,b[e+4>>1]=o,b[e+6>>1]=o>>>16,o=M[t+60>>1]|M[t+62>>1]<<16,E=M[t+56>>1]|M[t+58>>1]<<16,b[e+56>>1]=E,b[e+58>>1]=E>>>16,b[e+60>>1]=o,b[e+62>>1]=o>>>16,o=M[t+52>>1]|M[t+54>>1]<<16,E=M[t+48>>1]|M[t+50>>1]<<16,b[e+48>>1]=E,b[e+50>>1]=E>>>16,b[e+52>>1]=o,b[e+54>>1]=o>>>16,o=M[t+44>>1]|M[t+46>>1]<<16,E=M[t+40>>1]|M[t+42>>1]<<16,b[e+40>>1]=E,b[e+42>>1]=E>>>16,b[e+44>>1]=o,b[e+46>>1]=o>>>16,o=M[t+36>>1]|M[t+38>>1]<<16,E=M[t+32>>1]|M[t+34>>1]<<16,b[e+32>>1]=E,b[e+34>>1]=E>>>16,b[e+36>>1]=o,b[e+38>>1]=o>>>16,o=M[t+28>>1]|M[t+30>>1]<<16,E=M[t+24>>1]|M[t+26>>1]<<16,b[e+24>>1]=E,b[e+26>>1]=E>>>16,b[e+28>>1]=o,b[e+30>>1]=o>>>16,o=M[t+20>>1]|M[t+22>>1]<<16,E=M[t+16>>1]|M[t+18>>1]<<16,b[e+16>>1]=E,b[e+18>>1]=E>>>16,b[e+20>>1]=o,b[e+22>>1]=o>>>16,o=M[t+12>>1]|M[t+14>>1]<<16,t=M[t+8>>1]|M[t+10>>1]<<16,b[e+8>>1]=t,b[e+10>>1]=t>>>16,b[e+12>>1]=o,b[e+14>>1]=o>>>16,g[KA+177904|0]=0,b[e>>1]=32768|M[e>>1]),b[c>>1]=0,A[c+4>>2]=e,m>>>0>=37&&(A[36422]=(m+A[36422]|0)-36),o=WA<<1,cA&&HA(e,AA,QA,le,T,re,vA,f)),A[A[32972]+132>>2]||(t=l[e+17|0])&&(t=b[102896+(((0|(t=(o<<6>>>0)/(t>>>0)|0))>=199?199:t)<<1)>>1],g[e+18|0]=(0|P(t,l[e+18|0]))/512,g[e+19|0]=(0|P(t,l[e+19|0]))/512,g[e+20|0]=(0|P(t,l[e+20|0]))/512,g[e+21|0]=(0|P(t,l[e+21|0]))/512,g[e+22|0]=(0|P(t,l[e+22|0]))/512,g[e+23|0]=(0|P(t,l[e+23|0]))/512,g[e+24|0]=(0|P(t,l[e+24|0]))/512,g[e+25|0]=(0|P(t,l[e+25|0]))/512),a-536870912>>>0<=1073741823){if(T=A[44469],(0|(c=A[O+12>>2]))>0)for(e=P(a>>>29|0,10)+102854|0,vA=b[e+4>>1],cA=b[e+2>>1],AA=b[e>>1],re=b[e+6>>1],le=b[e+8>>1],o=0;t=A[4+(QA=I+(o<<3)|0)>>2],b[t>>1]<0?e=t:(e=177888+(WA=(T=(0|(e=T+1|0))<=169?e:0)<<6)|0)?(a=M[t+4>>1]|M[t+6>>1]<<16,c=M[t>>1]|M[t+2>>1]<<16,b[e>>1]=c,b[e+2>>1]=c>>>16,b[e+4>>1]=a,b[e+6>>1]=a>>>16,a=M[t+60>>1]|M[t+62>>1]<<16,c=M[t+56>>1]|M[t+58>>1]<<16,b[e+56>>1]=c,b[e+58>>1]=c>>>16,b[e+60>>1]=a,b[e+62>>1]=a>>>16,a=M[t+52>>1]|M[t+54>>1]<<16,c=M[t+48>>1]|M[t+50>>1]<<16,b[e+48>>1]=c,b[e+50>>1]=c>>>16,b[e+52>>1]=a,b[e+54>>1]=a>>>16,a=M[t+44>>1]|M[t+46>>1]<<16,c=M[t+40>>1]|M[t+42>>1]<<16,b[e+40>>1]=c,b[e+42>>1]=c>>>16,b[e+44>>1]=a,b[e+46>>1]=a>>>16,a=M[t+36>>1]|M[t+38>>1]<<16,c=M[t+32>>1]|M[t+34>>1]<<16,b[e+32>>1]=c,b[e+34>>1]=c>>>16,b[e+36>>1]=a,b[e+38>>1]=a>>>16,a=M[t+28>>1]|M[t+30>>1]<<16,c=M[t+24>>1]|M[t+26>>1]<<16,b[e+24>>1]=c,b[e+26>>1]=c>>>16,b[e+28>>1]=a,b[e+30>>1]=a>>>16,a=M[t+20>>1]|M[t+22>>1]<<16,c=M[t+16>>1]|M[t+18>>1]<<16,b[e+16>>1]=c,b[e+18>>1]=c>>>16,b[e+20>>1]=a,b[e+22>>1]=a>>>16,a=M[t+12>>1]|M[t+14>>1]<<16,t=M[t+8>>1]|M[t+10>>1]<<16,b[e+8>>1]=t,b[e+10>>1]=t>>>16,b[e+12>>1]=a,b[e+14>>1]=a>>>16,g[WA+177904|0]=0,b[e>>1]=32768|M[e>>1],c=A[O+12>>2]):e=0,A[QA+4>>2]=e,b[e+8>>1]=(0|P(vA,b[e+8>>1]))/256,b[e+6>>1]=(0|P(cA,b[e+6>>1]))/256,b[e+4>>1]=(0|P(AA,b[e+4>>1]))/256,b[e+12>>1]=(0|P(le,b[e+12>>1]))/256,b[e+10>>1]=(0|P(re,b[e+10>>1]))/256,(0|c)>(0|(o=o+1|0)););A[44469]=T}if(!e)break A}else{t=A[I+4>>2],(0|(c=b[t>>1]))<0?e=t:(a=(0|(a=A[44469]+1|0))<=169?a:0,A[44469]=a,(a=177888+(c=a<<6)|0)&&(e=M[t+4>>1]|M[t+6>>1]<<16,E=M[t>>1]|M[t+2>>1]<<16,b[a>>1]=E,b[a+2>>1]=E>>>16,b[a+4>>1]=e,b[a+6>>1]=e>>>16,e=M[t+60>>1]|M[t+62>>1]<<16,E=M[t+56>>1]|M[t+58>>1]<<16,b[a+56>>1]=E,b[a+58>>1]=E>>>16,b[a+60>>1]=e,b[a+62>>1]=e>>>16,e=M[t+52>>1]|M[t+54>>1]<<16,E=M[t+48>>1]|M[t+50>>1]<<16,b[a+48>>1]=E,b[a+50>>1]=E>>>16,b[a+52>>1]=e,b[a+54>>1]=e>>>16,e=M[t+44>>1]|M[t+46>>1]<<16,E=M[t+40>>1]|M[t+42>>1]<<16,b[a+40>>1]=E,b[a+42>>1]=E>>>16,b[a+44>>1]=e,b[a+46>>1]=e>>>16,e=M[t+36>>1]|M[t+38>>1]<<16,E=M[t+32>>1]|M[t+34>>1]<<16,b[a+32>>1]=E,b[a+34>>1]=E>>>16,b[a+36>>1]=e,b[a+38>>1]=e>>>16,e=M[t+28>>1]|M[t+30>>1]<<16,E=M[t+24>>1]|M[t+26>>1]<<16,b[a+24>>1]=E,b[a+26>>1]=E>>>16,b[a+28>>1]=e,b[a+30>>1]=e>>>16,e=M[t+20>>1]|M[t+22>>1]<<16,E=M[t+16>>1]|M[t+18>>1]<<16,b[a+16>>1]=E,b[a+18>>1]=E>>>16,b[a+20>>1]=e,b[a+22>>1]=e>>>16,e=M[t+12>>1]|M[t+14>>1]<<16,t=M[t+8>>1]|M[t+10>>1]<<16,b[a+8>>1]=t,b[a+10>>1]=t>>>16,b[a+12>>1]=e,b[a+14>>1]=e>>>16,g[c+177904|0]=0,c=-32768|M[a>>1],b[a>>1]=c,e=a)),A[I+4>>2]=e,b[I>>1]=m||50,b[I+2>>1]=16384|M[I+2>>1],b[e>>1]=16384|c,c=A[I+12>>2],t=l[c+17|0],a=A[32972],A[a+132>>2]&&(g[e+39|0]=l[c+39|0]-4);r:if(cA){if(2048&o){t=(P(t,31&KA)>>>0)/30|0,A[a+132>>2]||(a=l[e+17|0])&&(t=b[102896+(((0|(t=(t<<6>>>0)/(a>>>0)|0))>=199?199:t)<<1)>>1],g[e+18|0]=(0|P(t,l[e+18|0]))/512,g[e+19|0]=(0|P(t,l[e+19|0]))/512,g[e+20|0]=(0|P(t,l[e+20|0]))/512,g[e+21|0]=(0|P(t,l[e+21|0]))/512,g[e+22|0]=(0|P(t,l[e+22|0]))/512,g[e+23|0]=(0|P(t,l[e+23|0]))/512,g[e+24|0]=(0|P(t,l[e+24|0]))/512,g[e+25|0]=(0|P(t,l[e+25|0]))/512),HA(e,AA,QA,le,T,re,vA,f);break r}if(HA(e,AA,QA,le,T,re,vA,f),A[A[32972]+132>>2]||!(t=l[e+17|0]))break r;t=b[102896+(((0|(t=(WA<<7>>>0)/(t>>>0)|0))>=199?199:t)<<1)>>1],g[e+18|0]=(0|P(t,l[e+18|0]))/512,g[e+19|0]=(0|P(t,l[e+19|0]))/512,g[e+20|0]=(0|P(t,l[e+20|0]))/512,g[e+21|0]=(0|P(t,l[e+21|0]))/512,g[e+22|0]=(0|P(t,l[e+22|0]))/512,g[e+23|0]=(0|P(t,l[e+23|0]))/512,g[e+24|0]=(0|P(t,l[e+24|0]))/512,g[e+25|0]=(0|P(t,l[e+25|0]))/512}else if(a=A[a+132>>2],8&f){if(a||!(a=l[e+17|0]))break r;t=((16320&P(t,48))>>>0)/(a>>>0)|0,t=b[102896+((t>>>0>=199?199:t)<<1)>>1],g[e+18|0]=(0|P(t,l[e+18|0]))/512,g[e+19|0]=(0|P(t,l[e+19|0]))/512,g[e+20|0]=(0|P(t,l[e+20|0]))/512,g[e+21|0]=(0|P(t,l[e+21|0]))/512,g[e+22|0]=(0|P(t,l[e+22|0]))/512,g[e+23|0]=(0|P(t,l[e+23|0]))/512,g[e+24|0]=(0|P(t,l[e+24|0]))/512,g[e+25|0]=(0|P(t,l[e+25|0]))/512}else a||(t=l[e+17|0])&&(t=b[102896+(((t=1792/(t>>>0)|0)>>>0>=199?199:t)<<1)>>1],g[e+18|0]=(0|P(t,l[e+18|0]))/512,g[e+19|0]=(0|P(t,l[e+19|0]))/512,g[e+20|0]=(0|P(t,l[e+20|0]))/512,g[e+21|0]=(0|P(t,l[e+21|0]))/512,g[e+22|0]=(0|P(t,l[e+22|0]))/512,g[e+23|0]=(0|P(t,l[e+23|0]))/512,g[e+24|0]=(0|P(t,l[e+24|0]))/512,g[e+25|0]=(0|P(t,l[e+25|0]))/512);if(!(8&f))break e;t=2816,(0|(a=b[e+4>>1]))<300||(t=2560,a>>>0<400||(t=a>>>0<500?2304:2048)),A[36436]=t}4&f&&(b[e>>1]=32|M[e>>1]),2&f&&(b[e>>1]=16|M[e>>1])}64&f&&dr(20,0),e=m&f<<27>>31}else e=0;c=e+A[36422]|0,A[36422]=c,t=A[O+12>>2]}if((0|(a=t-1|0))<=0)o=0;else{if(e=0,m=0,o=0,t-2>>>0>=3)for(vA=-4&a,T=0;o=(((b[(f=m<<3)+I>>1]+o|0)+b[I+(8|f)>>1]|0)+b[I+(16|f)>>1]|0)+b[I+(24|f)>>1]|0,m=m+4|0,(0|vA)!=(0|(T=T+4|0)););if(f=3&a)for(;o=b[I+(m<<3)>>1]+o|0,m=m+1|0,(0|f)!=(0|(e=e+1|0)););}if(e=t,(f=A[r+20>>2])&&(e=a,m=f+A[34460]|0,(T=l[m+2|0])&&(cA=M[m+4>>1],b[I+(a<<3)>>1]=l[m+20|0],f=1,e=t,(0|T)!=1))){if(vA=m+4|0,cA&=1,re=1&(m=T-1|0),(0|T)!=2)for(le=-2&m,T=0;QA=vA+(f<<6)|0,WA=vA+P(f,44)|0,KA=l[(AA=cA?QA:WA)+16|0],A[4+(m=I+(e<<3)|0)>>2]=AA,b[m>>1]=KA,b[m+2>>1]=M[AA>>1],QA=l[16+(AA=cA?QA- -64|0:WA+44|0)|0],A[m+12>>2]=AA,b[m+8>>1]=QA,b[m+10>>1]=M[AA>>1],f=f+2|0,e=e+2|0,(0|le)!=(0|(T=T+2|0)););re&&(f=vA+(cA?f<<6:P(f,44))|0,T=l[f+16|0],A[4+(m=I+(e<<3)|0)>>2]=f,b[m>>1]=T,b[m+2>>1]=M[f>>1],e=e+1|0)}A:if(!((0|o)<=0)){e:{switch(ze-1|0){case 1:if(f=(0|(f=(A[r+44>>2]+c|0)-45|0))<=10?10:f,8&l[0|p]&&(f=f+(l[A[36128]+14|0]<<1)|0),(0|a)<=0)break A;if(p=(f<<8)/(0|o)|0,m=0,(0|t)!=2)for(t=-2&a,f=0;b[(o=(c=m<<3)+I|0)>>1]=(0|P(p,b[o>>1]))/256,b[(c=I+(8|c)|0)>>1]=(0|P(p,b[c>>1]))/256,m=m+2|0,(0|t)!=(0|(f=f+2|0)););if(!(1&a))break A;b[(t=I+(m<<3)|0)>>1]=(0|P(p,b[t>>1]))/256;break A;case 0:if(A[r>>2]!=1||(0|(f=A[r+44>>2]))>129)break e;b[I>>1]=(0|P(f,b[I>>1]))/130;break e}(0|(f=A[r+44>>2]))<=0||(c=(f-o|0)+c|0,A[36422]=c)}if(!(!c|(0|a)<=0)){if(p=(o+c<<8)/(0|o)|0,m=0,(0|t)!=2)for(t=-2&a,f=0;b[(o=(c=m<<3)+I|0)>>1]=(0|P(p,b[o>>1]))/256,b[(c=I+(8|c)|0)>>1]=(0|P(p,b[c>>1]))/256,m=m+2|0,(0|t)!=(0|(f=f+2|0)););1&a&&(b[(t=I+(m<<3)|0)>>1]=(0|P(p,b[t>>1]))/256)}}if(A[i+108>>2]=e,J=O+16|0,I){if((0|(e=A[r+16>>2]))!=A[36438]&&(A[36438]=e,t=216192+(A[50758]<<4)|0,A[t>>2]=14,A[t+4>>2]=e,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),m=(e=A[A[32972]+132>>2])?1:3,t=A[I+4>>2],A[r+28>>2]|!l[145748]||(g[145748]=0,m=e?2:4),(a=A[36426])&&(!((2&(e=M[a>>1]))>>>1|l[a+16|0]<2)|16&e||(c=216192+(A[36439]<<4)|0,A[c+12>>2]=t,8&e&&(e=(0|(e=A[44469]+1|0))<=169?e:0,A[44469]=e,(e=177888+(f=e<<6)|0)&&(p=M[t+4>>1]|M[t+6>>1]<<16,o=M[t>>1]|M[t+2>>1]<<16,b[e>>1]=o,b[e+2>>1]=o>>>16,b[e+4>>1]=p,b[e+6>>1]=p>>>16,p=M[t+60>>1]|M[t+62>>1]<<16,o=M[t+56>>1]|M[t+58>>1]<<16,b[e+56>>1]=o,b[e+58>>1]=o>>>16,b[e+60>>1]=p,b[e+62>>1]=p>>>16,p=M[t+52>>1]|M[t+54>>1]<<16,o=M[t+48>>1]|M[t+50>>1]<<16,b[e+48>>1]=o,b[e+50>>1]=o>>>16,b[e+52>>1]=p,b[e+54>>1]=p>>>16,p=M[t+44>>1]|M[t+46>>1]<<16,o=M[t+40>>1]|M[t+42>>1]<<16,b[e+40>>1]=o,b[e+42>>1]=o>>>16,b[e+44>>1]=p,b[e+46>>1]=p>>>16,p=M[t+36>>1]|M[t+38>>1]<<16,o=M[t+32>>1]|M[t+34>>1]<<16,b[e+32>>1]=o,b[e+34>>1]=o>>>16,b[e+36>>1]=p,b[e+38>>1]=p>>>16,p=M[t+28>>1]|M[t+30>>1]<<16,o=M[t+24>>1]|M[t+26>>1]<<16,b[e+24>>1]=o,b[e+26>>1]=o>>>16,b[e+28>>1]=p,b[e+30>>1]=p>>>16,p=M[t+20>>1]|M[t+22>>1]<<16,o=M[t+16>>1]|M[t+18>>1]<<16,b[e+16>>1]=o,b[e+18>>1]=o>>>16,b[e+20>>1]=p,b[e+22>>1]=p>>>16,p=M[t+12>>1]|M[t+14>>1]<<16,o=M[t+8>>1]|M[t+10>>1]<<16,b[e+8>>1]=o,b[e+10>>1]=o>>>16,b[e+12>>1]=p,b[e+14>>1]=p>>>16,g[f+177904|0]=0,b[e>>1]=32768|M[e>>1]),b[8+(f=f+177888|0)>>1]=M[a+8>>1],g[f+21|0]=l[a+21|0],b[f+10>>1]=M[a+10>>1],g[f+22|0]=l[a+22|0],b[f+12>>1]=M[a+12>>1],g[f+23|0]=l[a+23|0],b[f+14>>1]=M[a+14>>1],g[f+24|0]=l[a+24|0],g[f+25|0]=l[a+25|0],A[c+12>>2]=e))),(0|ze)!=2|l[hA+11|0]!=2||(La(),A[36427]=A[50758]),!((0|(hA=A[i+108>>2]))<2)){for(e=A[36433],p=(P(256-e|0,Z)+(e<<8)|0)/256|0,e=A[36432],c=(P(256-e|0,Z)+(e<<8)|0)/256|0,o=A[50754],e=0,a=1;f=M[2+(O=(I+(a<<3)|0)-8|0)>>1],f=(0|P((0|P(o,b[O>>1]))/1e3|0,4&f?c:16384&f?p:Z))/256|0,A[(a<<2)+i>>2]=f,e=e+f|0,(0|hA)!=(0|(a=a+1|0)););if(!((0|e)<=0|(0|e)>=(0|Me)|(0|hA)<2)){if(a=1,p=1&(f=hA-1|0),(0|hA)!=2)for(c=-2&f,Z=0;A[(f=(a<<2)+i|0)>>2]=(0|P(A[f>>2],Me))/(0|e),A[f+4>>2]=(0|P(A[f+4>>2],Me))/(0|e),a=a+2|0,(0|c)!=(0|(Z=Z+2|0)););p&&(A[(a=(a<<2)+i|0)>>2]=(0|P(A[a>>2],Me))/(0|e))}if(Z=0,!((0|hA)<2))for(hA=ze+256|0,a=1;e=A[4+(I+(a<<3)|0)>>2],!(f=A[r+28>>2])|128&l[0|t]||(A[36422]=0,xs(f,hA,0,o=A[r>>2],0,p=(p=A[r+32>>2])?(p<<5)/100|0:32),g[145748]=1,A[r+28>>2]=0),(0|s)<0||(s=64&l[0|t]?6:s,(A[i+108>>2]-1|0)==(0|a)&&(s=(f=s)|(3840&(s=A[36436])?s:0))),f=A[(a<<2)+i>>2],A[36440]=f+A[36440],A[36441]=f+A[36441],f?(p=A[50758],A[36439]=p,(0|s)>=0&&(A[(p=216192+(p<<4)|0)>>2]=m,A[p+12>>2]=e,A[p+8>>2]=t,A[p+4>>2]=f+(s<<16),t=A[50758]+1|0,A[50758]=(0|t)<=169?t:0),A[36426]=e,Z=f+Z|0):A[36426]=0,t=e,(0|(a=a+1|0))<A[i+108>>2];);}!A[36438]|(0|ze)==1||(A[36438]=0,e=216192+(A[50758]<<4)|0,A[e>>2]=14,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)}}J=i+112|0}function Te(e,t,r,a){var s,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0;J=s=J-1856|0,A[s+164>>2]=0,r?E=A[r>>2]:je(r=s- -64|0,0,96),A[33264]=0,A[s+1824>>2]=0,A[s+1828>>2]=0,A[s+1832>>2]=0,A[s+1836>>2]=0,g[s+1616|0]=0,g[s+992|0]=0,g[s+1200|0]=0,g[s+784|0]=0;A:if(A[e+688>>2]){for(A[s+1840>>2]=t,l[0|(i=t)]==32&&(i=t+1|0,A[s+1840>>2]=i),T=s+416|1,KA=s+1844|1,le=s+1848|1,Me=s+1852|1,A[s+1820>>2]=i,Gt(s+168|0,i),i=A[s+1820>>2];(32|l[0|i])!=32;)i=Gt(s+164|0,i)+A[s+1820>>2]|0,A[s+1820>>2]=i,AA=AA+1|0;wt(s+256|0,t,re=(0|(c=i-t|0))>=159?159:c),!(QA=4194304&E)|(0|AA)!=1?(hA=((0|(i=A[47202]))==36)<<2,(0|AA)==1|(0|i)!=36||(i=A[s+1840>>2]-1|0,A[s+1840>>2]=i,g[0|i]=95,hA=0,o=!!(0|kr(e,s+1840|0,s+1616|0,s+1832|0,0,r)),i=A[47202])):(o=1,Gt(s+172|0,i+1|0),rr(A[s+172>>2])&&(0|Os(A[s+164>>2]))==(0|Os(A[s+172>>2]))&&(o=0),hA=(0|(i=A[47202]))==36?4:o,o=0);e:{r:{s:{i:{c:if(16&i)O=15&i,hA=0;else{if(cA=1,o||(cA=!!(0|kr(e,s+1840|0,s+1616|0,s+1832|0,2,r))),50331648&(i=A[s+1832>>2])&&(c=A[s+1820>>2],l[c+1|0]==46&&(g[c+1|0]=32,i=A[s+1832>>2])),536870912&i){if(!a)break A;qe(a,A[s+1840>>2]);break A}if(8192&i|!(128&i)|cA)a=A[33264];else if(i=A[s+1840>>2],A[s+1820>>2]=i,!((0|(a=A[33264]))<=0))for(o=0;l[0|i]==32&&(g[0|i]=45,o=o+1|0,i=A[s+1820>>2],a=A[33264]),i=i+1|0,A[s+1820>>2]=i,(0|a)>(0|o););o:if(!(a|(0|AA)!=1)&&(c=Gt(s+576|0,I=A[s+1840>>2]),l[c+I|0]==32)){o=s+1408|0,a=I;u:{l:{n:{for(;;){p:if(rr(A[s+576>>2])){C:{if(l[1+(f=a+c|0)|0]==46){O=0;m:switch(l[(i=c+2|0)+a|0]-32|0){case 0:break C;case 7:break m;default:break p}if(O=1,c=i,l[f+3|0]==115)break C;break p}if(O=1,(0|p)<=0)break n}if(!((0|c)<=0)){if(Z=3&c,m=0,c>>>0<4)i=0;else for(vA=-4&c,i=0,f=0;g[0|o]=l[a+i|0],g[o+1|0]=l[(1|i)+a|0],g[o+2|0]=l[(2|i)+a|0],g[o+3|0]=l[(3|i)+a|0],i=i+4|0,o=o+4|0,(0|vA)!=(0|(f=f+4|0)););if(Z)for(;g[0|o]=l[a+i|0],i=i+1|0,o=o+1|0,(0|Z)!=(0|(m=m+1|0)););}if(p=p+1|0,O)a=a+c|0;else if(c=Gt(s+576|0,a=3+(a+c|0)|0),l[a+c|0]==32)continue}break}if(!((0|p)<2)){(c=(c=o-(i=s+1408|0)|0)+(i=wt(I,i,c))|0)>>>0<a>>>0&&je(c,32,(s+1408|0)+a-(i+o)|0),A[33264]=(p<<1)-2,A[s+1836>>2]=0;break l}}if(!p)break o;if(A[s+1832>>2]=0,A[s+1836>>2]=0,!A[33264])break u}A[s+1832>>2]=128}hA=1}if(l[s+1616|0]==21){qe(189088,s+1616|0),i=0;break A}if(ze=l[s+1833|0],o=1,!cA){if(A[s+168>>2]-48>>>0<10){if(Re(e,84174,189088),i=0,l[189088]==21)break A;if(!(!(128&l[e+109|0])|32&l[r+2|0])){g[189088]=21,g[189089]=0;break A}o=!!(0|Aa(e,A[s+1840>>2],s+1616|0,s+1832|0,r,0))}else o=0;if(!(o|(3&E)==2)&&(16777216&(a=A[e+104>>2])||(o=0,!(!(33554432&a)|!(1&E))))&&(16&E||(o=0,!(1&g[r+13|0])))){vA=A[s+1840>>2],i=0,p=0,f=0,J=Z=J-224|0,g[0|(m=s+1616|0)]=0,A[Z+216>>2]=0,A[Z+220>>2]=0;o:if(!(g[vA-2|0]-48>>>0<10|(1&g[0|r]?0:2&l[e+107|0])||(a=l[0|(c=vA+1|0)],(!(2561&M[e+106>>1])|!(1&g[r+2|0]))&(0|a)==32))){if((0|(p=l[0|vA]))!=32){for(O=32767,a=0;;){if(!(i=ei(101868,p<<24>>24,8))){p=0;break o}if(I=0,(0|(i=A[(i<<2)-305584>>2]))==(0|a)&&!((0|(I=f+1|0))<=2)){p=0;break o}u:{l:{n:{p:{if(!((0|a)<2)){if((0|a)==10|(0|a)==100)break p;if(!((0|a)>(0|i))){p=0;break o}}if(!a)break l;if((0|a)<(0|i))break n;break l}if((0|a)>=(0|i))break l}if(p=0,(0|WA)%10|(0|P(a,10))<(0|i))break o;i=i-a|0,O=a;break u}if((0|i)>=(0|O)){p=0;break o}WA=a+WA|0}if(p=l[0|c],c=o=c+1|0,a=i,f=I,(0|p)==32)break}a=l[0|o]}else o=c;if((a<<24>>24)-48>>>0<10)p=0;else if((0|(a=i+WA|0))<A[e+120>>2])p=0;else if((0|a)>A[e+116>>2])p=0;else if(Re(e,85600,Z+176|0),i=m,4&l[e+107|0]||(i=qe(m,i=Z+176|0)+He(i)|0),A[Z+4>>2]=A[e+140>>2],A[Z>>2]=a,De(Z+16|0,85839,Z),p=0,l[0|o]!=46){pa(e,vA,o,r,1)&&(A[r>>2]=32768|A[r>>2]),c=0;u:if(8&l[e+107|0]){if(f=A[r>>2],A[e+212>>2]==26741){if(32768&f)break u;if(!(16384&f))break o;c=1,f=0;l:{n:switch(l[0|o]-97|0){case 0:case 4:break n;default:break l}n:{p:{C:{m:switch((O=l[o+1|0])-116|0){case 6:break l;case 1:case 2:case 3:case 4:case 5:break p;case 0:break m;default:break C}if(l[o+2|0]!=116)break n;break l}if((0|O)==32)break l}if(!((0|a)%1e3|0)&&(0|O)==108)break l}f=1}if(f)break u;break o}A[r>>2]=32768|f}A[(a=e+8232|0)>>2]=0,A[a+4>>2]=0,Aa(e,Z+16|2,i,Z+216|0,r,c),p=1,4&l[e+107|0]&&na(m,Z+176|0)}}J=Z+224|0,p?(A[s+1832>>2]=8192|A[s+1832>>2],o=1):o=0}}if(O=cA?hA:32&ze?1:hA,hA=0,!(!(1&E)|(0|AA)<2)&&is(A[s+168>>2])){o:{if(1&g[188785]){if(!(!(a=8192&(i=A[s+1832>>2]))|o))break o;hA=a>>>2^2048;break c}if(o)break i;i=A[s+1832>>2]}if(!(128&i|AA>>>0>3)&&!((0|(i=A[e+8220>>2]))<4)&&(a=1,(0|i)>=A[e+8216>>2]))break e}}if(m=0,(0|O)<=0)break s;a=O;break e}if((0|(a=O))>0)break e;m=0,I=0,f=0,p=0;break r}if(o)I=0,f=0,p=0;else{a=A[s+1840>>2],A[s+1820>>2]=a,i=999,p=0,I=0,T=0;s:{i:{c:{for(;;){o:{u:{l:{if(i-1>>>0>=2){if((0|AA)<2||(Gt(s+1408|0,a),(0|(i=A[s+1408>>2]))<577&A[e+600>>2]>0)||(i=Os(i),(A[i+4>>2]!=A[e+600>>2]?i:0)|A[e+40>>2]==1))break l;switch(i=l[0|a],A[s+1408>>2]=i<<24>>24,i-32|0){default:if(!i)break l;break;case 0:case 7:break l;case 1:case 2:case 3:case 4:case 5:case 6:}m=Gt(s+1408|0,a),cA=9;n:{p:{C:{m:if(-33&(i=A[s+1408>>2])){for(o=0,f=0;;){b:{h:{if((0|i)==39){if((0|I)>0|(0|o)>1)break m;if(f=o?f:39,A[e+40>>2]!=3)break h;break b}f=o?f:i}o=o+1|0}if(!l0(e,i)){if((0|(i=A[s+1408>>2]))!=39&&!is(i))break l;if(m=Gt(s+1408|0,a+m|0)+m|0,-33&(i=A[s+1408>>2]))continue;break m}break}if((0|o)<=2)break C;cA=o}else f=0;if((0|(i=A[e+40>>2]))!=2)break p;J=i=J-208|0,g[0|i]=0,o=l[0|(c=a-1|0)],g[0|c]=32,a=Zt(e,a,i,200,0,-2147483648,0),g[0|c]=o,J=i+208|0,a=!a|(32768&a)>>>15;break n}i=A[e+40>>2],cA=o}a=(g[e+168|0]+1|0)<(cA-((0|i)==(0|f))|0)}if(!a)break l;a=A[s+1820>>2]}if(l[0|a]!=39)break u;p=67108864,hA=0}if(m=0,rt(e,s+992|0,0,I),a=A[s+1820>>2],(0|(i=l[0|a]))!=32)break o;I=0,f=0;break r}if(hA=0,a=Qs(e,a,s+992|0,1&(T|=(0|I)>0))+A[s+1820>>2]|0,A[s+1820>>2]=a,l[s+992|0]==21)break c;for(I=I+1|0,o=0;o=(i=o)+1|0,l[a+i|0]!=32;);p=67108864;continue}break}if(!l[s+992|0]|(0|i)==39||(g[a-1|0]=32,a=A[s+1820>>2]),c=Zt(e,a,s+1616|0,200,s+784|0,E,s+1832|0),(0|(a=l[s+1616|0]))==21){qe(189088,s+1616|0),i=0;break A}if(!(a|l[s+784|0])&&(Gt(s+1408|0,A[s+1820>>2]),(0|AA)==1&&(rr(A[s+1408>>2])||h0(A[s+1408>>2])))){hn(e,A[s+1820>>2],s+1616|0,O)&&qe(189088,s+1616|0),i=0;break A}A[s+172>>2]=g[A[s+1820>>2]-1|0];o:if(1024&c)for(vA=s+176|1,O=0,i=1,T=0,I=0;;){if((cA=131072&c)|!(1&i)||(g[s+1408|0]=0,!(a=Zt(e,A[s+1820>>2],s+1408|0,200,s+576|0,805306368|E,s+1832|0)))){2048&c&&(A[e+8184>>2]=1),g[A[s+1820>>2]-1|0]=A[s+172>>2];u:{l:{n:{p:if(cA){if(g[s+176|0]=0,i=A[s+1820>>2],a=1,f=63&c){if(Z=1&c,I=f-1|0,o=0,(0|f)!=1)for(WA=f-Z|0,f=0;m=i,A[s+1820>>2]=i+1,g[0|(QA=(s+176|0)+a|0)]=(0|o)!=(0|I)?l[0|i]:0,i=i+2|0,A[s+1820>>2]=i,g[QA+1|0]=(0|I)!=(1|o)?l[m+1|0]:0,o=o+2|0,a=a+2|0,(0|WA)!=(0|(f=f+2|0)););Z&&(f=i+1|0,A[s+1820>>2]=f,g[(s+176|0)+a|0]=(0|o)!=(0|I)?l[0|i]:0,a=a+1|0,i=f)}g[(s+176|0)+a|0]=0}else{if(i=A[s+1820>>2],!(f=15&c))break n;if(a=0,o=f,m=3&c)for(;i=i+1|0,A[s+1820>>2]=i,(192&l[0|i])==128||(o=o-1|0,(0|m)!=(0|(a=a+1|0))););if(f>>>0<4)break p;for(;;)if(i=i+1|0,A[s+1820>>2]=i,(192&l[0|i])!=128){for(;i=i+1|0,A[s+1820>>2]=i,(192&l[0|i])==128;);for(;i=i+1|0,A[s+1820>>2]=i,(192&l[0|i])==128;);for(;i=i+1|0,A[s+1820>>2]=i,(192&l[0|i])==128;);if(a=(0|o)>4,o=o-4|0,!a)break}}if(a=i-1|0,A[s+172>>2]=g[0|a],g[0|a]=32,a=E|=8388608,!cA)break l;if(ar(s+576|0,s+784|0,12),A[s+1852>>2]=vA,a=qe(s+1200|0,i=s+1616|0),kr(e,s+1852|0,i,s+1832|0,0,r)&&qe(a,s+1616|0),!(32&l[s+1833|0]))break u;g[0|a]=0,hn(e,A[s+1852>>2],a,1);break u}a=i-1|0,A[s+172>>2]=g[0|a],g[0|a]=32,a=8388608|E}E=a,na(s+1200|0,s+784|0)}if(g[s+784|0]=0,f=1,a=kr(e,s+1820|0,s+1616|0,s+1824|0,1024,r),A[s+1832>>2]||(i=A[s+1828>>2],A[s+1832>>2]=A[s+1824>>2],A[s+1836>>2]=i,f=T),a){m=0,I=c;break s}if(m=Zt(e,A[s+1820>>2],s+1616|0,200,s+784|0,8404992&E,s+1832|0),i=1,I=c,T=f,l[s+1616|0]==21){g[A[s+1820>>2]-1|0]=A[s+172>>2],qe(189088,s+1616|0),i=0;break A}}else i=s+416|0,Ts(e,A[s+1820>>2],a,i),m=Zt(e,A[s+1820>>2],s+1616|0,200,s+784|0,268435456|E,s+1832|0),wt(A[s+1820>>2],i,He(i)),1024&m||(qe(s+1616|0,s+1408|0),i=qe(s+784|0,s+576|0),8&l[188788]&&(Je(f=i,i=s+576|0),c=A[47195],A[s+48>>2]=i,fr(c,85205,s+48|0)),m=a),i=0;if(a=(o=1024&m)>>>10|0,O>>>0>48)break o;if(O=O+1|0,c=m,!o)break}else m=c,I=0,T=0,a=0;if(a|!m)break i;for(c=qe(s+1408|0,s+1616|0),o=Ts(e,A[s+1820>>2],m,s+416|0),f=T,i=m;;){o:{if(g[s+1616|0]=0,l[s+1200|0]){if(g[A[s+1820>>2]-1|0]=A[s+172>>2],a=kr(e,s+1840|0,s+1616|0,s+1824|0,o,r),g[A[s+1820>>2]-1|0]=32,l[s+1616|0]==21){e=s+416|0,wt(A[s+1820>>2],e,He(e)),qe(189088,s+1616|0),i=0;break A}if(A[s+1832>>2]||(T=A[s+1828>>2],A[s+1832>>2]=A[s+1824>>2],A[s+1836>>2]=T),a){g[s+1200|0]=0;break o}f=A[s+1824>>2]?1:f}if(a=kr(e,s+1820|0,s+1616|0,s+1824|0,o,r),l[s+1616|0]==21){e=s+416|0,wt(A[s+1820>>2],e,He(e)),qe(189088,s+1616|0),i=0;break A}if(A[s+1832>>2]||(T=A[s+1828>>2],A[s+1832>>2]=A[s+1824>>2],A[s+1836>>2]=T),!a)if(16384&i)qe(s+1616|0,c);else{E|=o<<11&8192|i<<9&134217728;u:if(524288&i){if(T=qe(s+576|0,a=s+784|0),i=Zt(e,A[s+1820>>2],s+1616|0,200,a,E,s+1832|0),na(a,T),a=0,!i){i=0;break u}if(1024&i)break u;a=1,o=Ts(e,A[s+1820>>2],i,0)}else i=0,Zt(e,A[s+1820>>2],s+1616|0,200,0,E,s+1832|0),a=0;if(l[s+1616|0]==21){qe(189088,s+1616|0),e=s+416|0,wt(A[s+1820>>2],e,He(e)),g[A[s+1820>>2]-1|0]=A[s+172>>2],i=0;break A}if(a)continue}}break}65536&m||(nn(e,s+1616|0,200,s+784|0),g[s+784|0]=0),a=s+416|0,wt(A[s+1820>>2],a,He(a));break s}qe(189088,e=s+992|0),i=!Ba(1|e,84744,3)<<12;break A}m=0,f=T}g[A[s+1820>>2]-1|0]=A[s+172>>2]}}if(a=A[s+164>>2],A[s+1852>>2]=8026656,A[s+1848>>2]=8022304,A[s+1844>>2]=7566112,4&E){r:{if((i=255&a)&&((0|i)==102||(KA=le,zn(a<<24>>24))))break r;KA=Me}Zt(e,KA,189088,200,0,0,0)}for(a=0,i=s+1200|0,T=l[s+784|0];;){r:{s:{i:switch(0|(c=l[0|i])){case 0:break r;case 6:case 7:break i;default:break s}a=c}i=i+1|0;continue}break}r:if(a|f){if(A[e+32>>2]|65536&I){for(o=0,$t(e,s+1616|0,s+1832|0,3,0),i=s+1200|0;;){switch(l[0|i]){case 6:o&&(g[0|i]=5),o=1;default:i=i+1|0;continue;case 0:}break}A[s+24>>2]=s+1616,A[s+20>>2]=s+1200,A[s+16>>2]=s+992,as(189088,200,85233,s+16|0),g[189287]=0,$t(e,189088,s+1832|0,-1,0);break r}A[s+8>>2]=s+1616,A[s+4>>2]=s+1200,A[s>>2]=s+992,as(189088,200,85233,s),g[189287]=0,$t(e,189088,s+1832|0,-1,0)}else $t(e,a=s+1616|0,s+1832|0,-1,!!(0|T)<<1),A[s+40>>2]=a,A[s+36>>2]=s+1200,A[s+32>>2]=s+992,as(189088,200,85233,s+32|0),g[189287]=0;l[s+784|0]&&(a=He(189088),g[983+(s-a|0)|0]=0,qe(a+189088|0,s+784|0)),16&(a=E|hA)&&(A[s+1832>>2]=-268435457&A[s+1832>>2]);r:if(!(128&a)|!(16&l[e+14|0]))if(3072&a){if($A(e,6),!(2048&a))break r;A[s+1832>>2]=268435456|A[s+1832>>2]}else 16&l[P(A[33264],12)+r|0]&&(1536&(r=A[s+1832>>2])?$A(e,4):2048&r&&$A(e,3));else $A(e,3);8192&m&&(A[e+8192>>2]=2,A[e+8184>>2]=2);r:{if(8&(r=A[s+1836>>2]))A[e+8184>>2]=0,A[e+8188>>2]=3,a=e+8196|0;else if(1&r)A[e+8192>>2]=0,A[e+8184>>2]=2,a=e+8196|0;else if(2&r)A[e+8192>>2]=2,A[e+8184>>2]=0,A[e+8188>>2]=0,a=e+8196|0;else{if(!(4&r))break r;A[e+8184>>2]=0,A[e+8192>>2]=0,A[e+8196>>2]=2,a=e+8188|0}A[a>>2]=0}!l[A[s+1820>>2]]|256&r||((0|(r=A[e+8184>>2]))>0&&(A[e+8184>>2]=r-1),(0|(r=A[e+8192>>2]))>0&&(A[e+8192>>2]=r-1),(0|(r=A[e+8196>>2]))>0&&(A[e+8196>>2]=r-1),(0|(r=A[e+8188>>2]))<=0||(A[e+8188>>2]=r-1)),(0|AA)!=1|A[e+212>>2]!=25966||!is(A[s+168>>2])|A[s+168>>2]==105||(A[s+1832>>2]=16777216|A[s+1832>>2]);r:if(2&l[e+68|0]&&98304&(a=A[s+1832>>2])&&!((0|(r=He(189088)-1|0))<=0))for(i=0;;){if(e=i+1|0,l[i+189088|0]==6){r=g[0|(e=e+189088|0)];s:{if(65536&a){if((0|sa(69))==(0|r)?(AA=sa(101),g[0|e]=AA):AA=l[0|e],o=111,(0|sa(79))==AA<<24>>24)break s;break r}if((0|sa(101))==(0|r)?(AA=sa(69),g[0|e]=AA):AA=l[0|e],o=79,(0|sa(111))!=AA<<24>>24)break r}g[0|e]=sa(o);break r}if((0|r)==(0|(i=e)))break}e=A[s+1832>>2],wt(t,s+256|0,re),i=e|p;break A}if(i=0,g[s+1616|0]=0,hn(e,A[s+1840>>2],s+1616|0,a)){if(c=qe(189088,s+1616|0),!QA){if(a=A[s+164>>2],A[s+1408>>2]=8026656,A[s+576>>2]=8022304,A[s+416>>2]=7566112,4&E){t=s+576|1,r=s+1408|1;e:{if((i=255&a)&&((0|i)==102||(T=t,zn(a<<24>>24))))break e;T=r}Zt(e,T,c,200,0,0,0)}i=128&A[s+1832>>2]}}else i=((0|AA)>1)<<12}else g[189088]=0;return J=s+1856|0,i}function Mt(e,t,r,a,s,i,o,c){var f,m,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0,ft=0,Nt=0,Kt=0,er=0,pr=0,hr=0,yr=0,Er=0,zr=0,Wr=0,oa=0,Xr=0,la=0,va=0,As=0,ns=0,os=0,Us=0,Ei=0,Ms=0,Mi=0,Gi=0;J=f=J-384|0,m=A[t>>2];A:{e:{r:{s:{if(s){if(l[0|s]!=7)break s;A[t>>2]=(a||1)+m;break r}A[i>>2]=0,A[t>>2]=m+1;break A}Nt=86135,Wr=268435456&o,oa=134217728&o,Xr=8388608&o,la=16384&o,va=8192&o,pr=r-1|0,hr=a-r|0,As=2&o,ns=128&o,os=o>>>31|0,Us=-2147483648&o,yr=f+96|1;s:for(;;)for(A[f+268>>2]=0,AA=(E=A[t>>2])+a|0,le=-2,KA=-6,r=s,Me=Us,At=0,Kt=0,re=1,p=0,ze=0,ft=0;;){T=E,cA=p;i:{c:{o:{u:{l:{n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{W:{for(;vA=r,r=r+1|0,!((I=l[0|vA])>>>0>9);)switch(O=r,0|I){case 0:if(!(r=Er)){Er=0,r=86135;break L}for(;;){I=1;V:{M:switch(0|(p=l[0|r])){case 0:case 3:break W;case 5:break M;default:break V}I=2}r=(r+I|0)+(((0|p)==9)<<1)|0}case 1:if(ft=1,!os)continue;break l;case 2:ft=2;continue;case 4:Er=r;continue;case 5:r=vA+2|0,p=A[e+320>>2];V:{if((E=l[vA+1|0])>>>0>=32){if(!(p>>>E-32&1))break V;break l}if(!(p>>>E&1))break l}re=re+1|0;continue;case 9:r=vA+3|0;continue;case 8:ft=1,Kt=1,Me=0;break;case 3:break y}O=0,p=cA,E=T;V:switch(0|ft){case 0:M:{B:{if((0|(p=l[0|AA]))!=(0|I)){if((0|p)!=69)break l;if((0|I)==101)break B;break l}if(O=0,(192&I)==128)break M}O=21}AA=AA+1|0,At=At+1|0;break i;case 1:break w;case 2:break V;default:break b}if(A[f+264>>2]=A[f+268>>2],!l[AA-1|0])break l;KA=(0|(p=KA+6|0))>=19?19:p,WA=AA+1|0,QA=Gt(f+268|0,AA),hA=l[0|AA],O=20,p=cA;V:{M:switch(I-11|0){case 6:r=vA+2|0,p=A[f+268>>2],E=g[vA+1|0];B:if(I=A[604+(((E=((0|E)<65?191:-65)+E|0)<<2)+e|0)>>2])p=!!(0|Lr(I,p));else{if((0|E)>7)break l;D:{if((0|(I=A[e+600>>2]))>0){if((p=p-I|0)-1>>>0<255)break D;break l}if((I=p-192|0)>>>0<=413){p=l[344+(l[I+94240|0]+e|0)|0]&1<<E;break B}if(p>>>0>255)break l}p=l[344+(e+p|0)|0]&1<<E}if(!p)break l;AA=AA+QA|0,O=((0|E)==2?19:20)-KA|0;break i;case 7:if(r=vA+2|0,p=g[vA+1|0],!(p=A[4788+((((0|p)<65?191:-65)+p<<2)+e|0)>>2]))break l;B:for(;;){if((0|(O=l[0|p]))==7)break l;if((0|O)==126){O=20-KA|0;break i}D:if(hA){if(Z=AA,I=p,(0|O)==(0|hA))for(;;){if((0|(O=l[0|(I=I+1|0)]))!=(0|(p=l[0|(Z=Z+1|0)])))break D;if(!p)break}}else I=p,Z=AA;if(O){for(;;)if(E=l[0|I],I=p=I+1|0,!E)continue B}break}if((0|(p=Z-AA|0))<0)break l;AA=p+AA|0,O=20-KA|0;break i;case 14:I=A[f+268>>2];B:{D:if(p=A[e+604>>2])p=!!(0|Lr(p,I));else{F:{if((0|(p=A[e+600>>2]))>0){if((Z=I-p|0)-1>>>0<255)break F;break B}if((p=I-192|0)>>>0<=413){p=1&g[344+(l[p+94240|0]+e|0)|0];break D}if(Z=I,I>>>0>255)break c}p=1&g[344+(e+Z|0)|0]}if(p)break l;I=A[f+268>>2]}if(!oa)break c;if((0|I)==32)break l;break c;case 4:if((p=A[f+268>>2])-48>>>0<10|p-2406>>>0<10)break c;if(!l[e+170|0])break l;O=20-KA|0;break i;case 5:if(ki(A[f+268>>2]))break l;break o;case 0:if(A[f+268>>2]==A[f+264>>2])break o;break l;case 17:r=vA+2|0,p=32768,O=0;B:{D:switch((I=l[vA+1|0])-1|0){case 0:break b;case 1:break D;default:break B}if(O=1,p=cA,!Xr)break b;break l}if((0|(p=240&I))==16){if(O=23,p=cA,c>>>(15&I)&16384)break b;break l}if((0|I)!=3&(0|p)!=32||(wt(p=f+96|0,pr,E=1+(A[t>>2]+(At+hr|0)|0)|0),g[0|(p=p+E|0)]=32,g[p+1|0]=0,A[33265]=0,A[33266]=0,A[f+16>>2]=yr,kr(e,f+16|0,f+272|0,133060,0,0),O=23,!((0|I)!=3|(0|(Z=A[33265]))>=0|16384&A[33266])))break i;if(p=cA,E=T,Z>>>(15&I)&16384)break b;break l;case 34:B:{if(p=hA-32|0){if((0|p)==13)break B;break l}if(!la)break l}Z=22-KA|0;break u;case 10:if(p=1,l[0|r]==21)break V;break n;case 18:if((0|(Z=A[f+268>>2]))!=32)for(I=AA+QA|0;;){B:{D:if(p=A[e+632>>2])p=!!(0|Lr(p,Z));else{F:{if((0|(p=A[e+600>>2]))>0){if((Z=Z-p|0)-1>>>0<255)break F;break B}if((p=Z-192|0)>>>0<=413){p=128&l[344+(l[p+94240|0]+e|0)|0];break D}if(Z>>>0>255)break B}p=128&l[344+(e+Z|0)|0]}if(p)break l}if(I=Gt(f+268|0,I)+I|0,(0|(Z=A[f+268>>2]))==32)break}Z=19-KA|0;break u;case 49:break p;case 2:break C;case 3:break m;case 1:break b;case 13:break h;case 12:break M;default:break E}Gt(f+272|0,r),QA=-1;M:if((0|(p=A[f+272>>2]))!=(0|(I=A[f+268>>2])))if(-33&I)for(;;){hA=AA,QA=-1;B:if((0|p)==18&&(p=g[vA+2|0],O=A[4788+((((0|p)<65?191:-65)+p<<2)+e|0)>>2])){for(;;){if((0|(E=l[0|O]))==7)break B;if((0|E)==126){QA=0;break B}D:if((0|(AA=l[0|hA]))==(0|E)){if(p=hA,I=O,AA)for(;;){if((0|(E=l[0|(I=I+1|0)]))!=(0|(O=l[0|(p=p+1|0)])))break D;if(!O)break}}else I=O,p=hA;if(!E){p=p-hA|0;break}for(;p=l[0|I],I=O=I+1|0,p;);}QA=p}if(E=Gt(f+268|0,hA),(0|(p=A[f+272>>2]))==(0|(I=A[f+268>>2]))|!(-33&I))break M;if(AA=E+hA|0,(0|QA)!=-1)break}else hA=AA;else hA=AA;AA=(0|p)==(0|I)||(0|QA)>=0?hA:WA,O=0;break i}for(;p=p+1|0,l[0|(r=r+1|0)]==21;);break n}r=r+1|0}O=vA}if(!(l[T-1|0]!=32&Kt|Me||((0|(I=Kt?re+4|0:re))>=(0|er)&&(Ei=ze,Ms=cA,er=I,Mi=At,Nt=r),!(8&A[47197])|Wr|(0|I)<=0))){for(Je(r,vA=f+272|0),WA=A[47195],E=f+16|0,r=0,hA=0,Me=0,ze=0,J=AA=J-496|0,g[AA+80|0]=0,(0|a)>0?(wt(AA+288|0,m,a),cA=a):cA=0,g[cA+(p=AA+288|0)|0]=0,T=He(p)+p|0,QA=(0|o)<0;;){if(Z=l[0|s],cA=s,s=s+1|0,Z>>>0>9)for(;;){y:{L:{W:{V:{M:{B:switch((p=255&Z)-14|0){case 4:break W;case 3:break V;case 0:break M;case 14:break B;default:break L}if(cA=cA+2|0,Z=32,!QA&(0|(s=l[0|s]))==1)break y;g[0|T]=36,qe(p=T+1|0,s=Ii(128960,s)),T=He(s)+p|0;break y}p=l[cA+2|0],Z=l[0|s],A[AA+36>>2]=127&l[cA+3|0],A[AA+32>>2]=4&p?80:83,De(AA+48|0,85131,AA+32|0),1&p&&(s=He(s=AA+48|0)+s|0,g[0|s]=101,g[s+1|0]=0),2&(s=127&p)&&(p=He(p=AA+48|0)+p|0,g[0|p]=105,g[p+1|0]=0),4&s&&(p=He(p=AA+48|0)+p|0,g[0|p]=112,g[p+1|0]=0),8&s&&(p=He(p=AA+48|0)+p|0,g[0|p]=118,g[p+1|0]=0),16&s&&(p=He(p=AA+48|0)+p|0,g[0|p]=100,g[p+1|0]=0),32&s&&(p=He(p=AA+48|0)+p|0,g[0|p]=102,g[p+1|0]=0),s>>>0>=64&&(s=He(s=AA+48|0)+s|0,g[0|s]=113,g[s+1|0]=0),1&Z&&(s=He(s=AA+48|0)+s|0,g[0|s]=116,g[s+1|0]=0),cA=cA+4|0,T=qe(T,s=AA+48|0)+He(s)|0,Z=32;break y}cA=cA+2|0,Z=l[g[0|s]+93871|0];break y}s=g[0|s],g[0|T]=76,p=((s=s+((0|s)<65?191:-65)|0)>>>0)/10|0,g[T+1|0]=p+48,Z=s-P(p,10)|48,(0|ze)==1&&(g[0|T]=Z,Z=76),cA=cA+2|0,T=T+2|0;break y}Z=p>>>0<=31?l[p+93904|0]:(0|p)==32?95:Z,cA=s}if(g[0|T]=Z,s=cA+1|0,T=T+1|0,!((Z=l[0|cA])>>>0>=10))break}p=1;y:switch(0|Z){case 1:p=r;case 8:g[0|T]=0,T=AA+80|0,r=p,ze=1;continue;case 2:g[0|T]=0,cA=He(p=AA+288|0)+p|0,T=l[84899]|l[84900]<<8,g[0|cA]=T,g[cA+1|0]=T>>>8,ze=2,g[cA+2|0]=l[84901],T=He(p)+p|0;continue;case 5:hA=g[0|s],s=cA+2|0;continue;case 9:Me=(l[0|s]+P(l[cA+2|0],255)|0)-256|0,s=cA+3|0;continue;case 0:case 3:break y;default:continue}break}if(g[0|T]=0,T=E,(0|Me)>0&&(A[AA+16>>2]=Me,De(E,85581,AA+16|0),T=E+7|0),(0|hA)>0&&(A[AA>>2]=hA,De(T,85694,AA),T=He(T)+T|0),1&((0|(s=He(AA+80|0)))>0|r)){1&r&&(g[0|T]=95,T=T+1|0);y:if(!((0|(cA=s-1|0))<0|T>>>0>=E>>>0))for(;;){if(g[0|T]=l[(AA+80|0)+cA|0],T=T+1|0,(0|cA)<=0)break y;if(cA=cA-1|0,!(T>>>0<E>>>0))break}g[0|T]=41,g[T+1|0]=32,T=T+2|0}g[0|T]=0,g[(r=AA+288|0)+((E+3|0)-T|0)|0]=0,na(T,r),(0|(r=He(E)))<=7&&(je(r+E|0,32,8-r|0),r=8),g[r+E|0]=0,J=AA+496|0,A[f+4>>2]=E,A[f>>2]=(0|a)>1?I+35|0:I,A[f+8>>2]=vA,fr(WA,89088,f)}r=O;break l}if(!l[0|T])break l;le=(0|(p=le+2|0))>=19?19:p,Gt(f+264|0,T),p=Ga(f+268|0,E=T-1|0),hA=l[0|E],WA=E;w:{y:{L:{W:{V:{M:switch(I-10|0){case 13:if(p=(0|(at=l[0|r]))==(0|(I=l[0|T])),QA=-1,(0|I)==32|(0|I)==(0|at))break W;if(I)break V;break L;case 7:r=vA+2|0,O=A[f+268>>2],T=g[vA+1|0];B:if(I=A[604+(((T=((0|T)<65?191:-65)+T|0)<<2)+e|0)>>2])I=!!(0|Lr(I,O));else{if((0|T)>7)break l;D:{if((0|(I=A[e+600>>2]))>0){if((O=O-I|0)-1>>>0<255)break D;break l}if((I=O-192|0)>>>0<=413){I=l[344+(l[I+94240|0]+e|0)|0]&1<<T;break B}if(O>>>0>255)break l}I=l[344+(e+O|0)|0]&1<<T}if(!I)break l;E=1+(E-p|0)|0,O=((0|T)==2?19:20)-le|0;break w;case 8:if(r=vA+2|0,p=g[vA+1|0],!(p=A[4788+((((0|p)<65?191:-65)+p<<2)+e|0)>>2]))break l;B:{for(;;){if((0|(hA=l[0|p]))==7)break l;if((0|hA)==126){QA=0;break B}I=E;D:{F:{if((0|(vA=(QA=He(p))-1|0))>0)for(I=T-QA|0,O=0,Z=E;;){if(!l[0|(Z=Z-1|0)])break F;if((0|vA)==(0|(O=O+1|0)))break}q:if(!((0|(O=l[0|I]))!=(0|hA)|!O))for(;;){if((0|(hA=l[0|(p=p+1|0)]))!=(0|(O=l[0|(I=I+1|0)])))break q;if(!O)break}if(!hA)break D}for(I=p;O=l[0|I],I=p=I+1|0,O;);continue}break}if((0|QA)<0)break l}O=20-KA|0,E=1+(E-QA|0)|0;break w;case 15:I=A[f+268>>2];B:{D:if(T=A[e+604>>2])T=!!(0|Lr(T,I));else{F:{if((0|(T=A[e+600>>2]))>0){if((I=I-T|0)-1>>>0<255)break F;break B}if((T=I-192|0)>>>0<=413){T=1&g[344+(l[T+94240|0]+e|0)|0];break D}if(I>>>0>255)break B}T=1&g[344+(e+I|0)|0]}if(T)break l}O=20-le|0,E=1+(E-p|0)|0;break w;case 1:if(A[f+268>>2]!=A[f+264>>2])break l;O=21-le|0,E=1+(E-p|0)|0;break w;case 5:if(!((T=A[f+268>>2])-48>>>0<10|T-2406>>>0<10))break l;O=21-le|0,E=1+(E-p|0)|0;break w;case 6:if(ki(A[f+268>>2]))break l;O=21-KA|0,E=1+(E-p|0)|0;break w;case 18:if(r=vA+2|0,!((0|(I=l[vA+1|0]))==3|(240&I)==32)||(wt(p=f+96|0,pr,E=1+(A[t>>2]+(At+hr|0)|0)|0),g[0|(p=p+E|0)]=32,g[p+1|0]=0,A[33265]=0,A[33266]=0,A[f+16>>2]=yr,kr(e,f+16|0,f+272|0,133060,0,0),O=23,!((0|I)!=3|(0|(Z=A[33265]))>=0|16384&A[33266])))break i;if(p=cA,E=T,Z>>>(15&I)&16384)break b;break l;case 11:if(I=1,l[0|r]==21)for(;I=I+1|0,l[0|(r=r+1|0)]==21;);if(A[e+8208>>2]<(0|I))break l;O=18+(I-le|0)|0;break w;case 0:if(O=19,p=cA,E=T,A[e+8212>>2]>0)break b;break l;case 19:if(O=3,(0|(Z=A[f+268>>2]))==32)break w;for(I=1+(E-p|0)|0;;){B:{D:if(p=A[e+632>>2])p=!!(0|Lr(p,Z));else{F:{if((0|(p=A[e+600>>2]))>0){if((Z=Z-p|0)-1>>>0<255)break F;break B}if((p=Z-192|0)>>>0<=413){p=128&l[344+(l[p+94240|0]+e|0)|0];break D}if(Z>>>0>255)break B}p=128&l[344+(e+Z|0)|0]}if(p)break l}if(I=I-Ga(f+268|0,I-1|0)|0,(0|(Z=A[f+268>>2]))==32)break}break w;case 16:if(O=1,p=cA,E=T,A[e+8184>>2])break b;break l;case 9:if(O=1,p=cA,E=T,As)break b;break l;case 36:for(;;){if(O=50,p=cA,!(T=(255&hA)-32|0))break l;if((0|T)==14)break b;hA=l[0|(WA=WA-1|0)]}case 35:break M;default:break y}M:{if(p=hA-32|0){if((0|p)==13)break M;break l}if(!ns)break l}O=22-KA|0;break w}V:{for(;;){QA=-1,Z=T,T=T-1|0;M:if((0|at)==18&&(p=g[vA+2|0],O=A[4788+((((0|p)<65?191:-65)+p<<2)+e|0)>>2]))for(Gi=Z+1|0;;){if((0|(WA=l[0|O]))==7){QA=-1;break M}if((0|WA)==126){QA=0;break M}I=Z;B:{if((0|(zr=(QA=He(O))-1|0))>0)for(I=Gi-QA|0,hA=0,p=Z;;){if(!l[0|(p=p-1|0)])break B;if((0|zr)==(0|(hA=hA+1|0)))break}D:if(!((0|(p=l[0|I]))!=(0|WA)|!p))for(;;){if((0|(WA=l[0|(O=O+1|0)]))!=(0|(p=l[0|(I=I+1|0)])))break D;if(!p)break}if(!WA)break M}for(I=O;p=l[0|I],I=O=I+1|0,p;);}if(p=(0|(I=l[0|T]))==(0|at),(0|I)==32|(0|I)==(0|at))break V;if(!I){T=Z;break L}if((0|QA)!=-1)break}T=Z;break L}T=Z}E=p?T:E}O=0,E=(0|QA)<0?E:T+1|0;break w}if((0|I)!=(0|hA))break l;O=4,(0|I)!=32&&(O=(192&I)!=128?21-le|0:0)}p=cA;break b}if((0|I)!=(0|hA))break l;Z=(192&I)!=128?21-KA|0:0;break u}if(O=1,va)break l}re=O+re|0;continue}if(p=g[vA+1|0],cA=l[vA+3|0],E=l[vA+2|0],1&!(A[e+8208>>2]|4&E)&g[e+84|0])break l;r=vA+4|0,Z=0,cA=127&cA|(127&E)<<8|p<<16;break u}C:if(!(WA>>>0<=(I=A[t>>2]+a|0)>>>0)){for(;;){if(l[0|I]!=101){if(p=I>>>0<AA>>>0,I=I+1|0,p)continue;break C}break}Z=0,ze=I;break u}Z=0;break u}O=-20;break i}if(hA=0,(0|(I=A[f+268>>2]))!=32)for(Z=AA+QA|0,O=0;;){if(!O){n:{p:if(E=A[e+632>>2])I=!!(0|Lr(E,I));else{C:{if((0|(E=A[e+600>>2]))>0){if((I=I-E|0)-1>>>0<255)break C;break n}if((E=I-192|0)>>>0<=413){I=128&l[344+(l[E+94240|0]+e|0)|0];break p}if(I>>>0>255)break n}I=128&l[344+(e+I|0)|0]}I&&(hA=hA+1|0)}I=A[f+268>>2]}n:if(E=A[e+632>>2])O=!!(0|Lr(E,I));else{p:{if((0|(E=A[e+600>>2]))>0){if(O=0,(I=I-E|0)-1>>>0<255)break p;break n}if((E=I-192|0)>>>0<=413){O=128&l[344+(l[E+94240|0]+e|0)|0];break n}if(O=0,I>>>0>255)break n}O=128&l[344+(e+I|0)|0]}if(Z=Gt(f+268|0,Z)+Z|0,(0|(I=A[f+268>>2]))==32)break}if(!((0|p)>(0|hA))){Z=18+(p-KA|0)|0;break u}}for(;p=l[0|r],r=s=r+1|0,p;);if(l[0|s]!=7)continue s;if(e=a+Mi|0,A[t>>2]=A[t>>2]+(e||1),er)break e;break r}p=cA,AA=WA,E=T,re=Z+re|0;continue}AA=AA+QA|0,O=21-KA|0;break i}AA=AA+QA|0,O=20-KA|0}p=cA,E=T,re=O+re|0}}Nt=86135}A[i+12>>2]=Ei,A[i+8>>2]=Ms,A[i+4>>2]=Nt,A[i>>2]=er}J=f+384|0}function Tt(e,t){var r,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0,ft=0,Nt=0,Kt=0,er=0;J=r=J-1168|0,A[r+928>>2]=0,A[r+932>>2]=0,A[r+920>>2]=0,A[r+924>>2]=0,A[r+912>>2]=0,A[r+916>>2]=0,A[r+904>>2]=0,A[r+908>>2]=0,A[r+896>>2]=0,A[r+900>>2]=0;A:{e:{if(e){if(l[0|e]|8&t)break e;break A}if(!(8&t))break A}if(ar(r+1088|0,e,40),16&t){if((0|ss(qe(r+704|0,e)))<=0)break A;Z=8&t}else(Z=8&t)|l[r+1088|0]||(b[r+1088>>1]=l[85055]|l[85056]<<8,g[r+1090|0]=l[85057]),A[r+496>>2]=137584,A[r+500>>2]=47,A[r+504>>2]=47,De(a=r+512|0,85286,r+496|0),A[r+484>>2]=r+1088,A[r+480>>2]=a,De(a=r+704|0,85425,r+480|0),(0|ss(a))>0||(A[r+468>>2]=47,A[r+472>>2]=47,A[r+464>>2]=137584,De(a=r+512|0,85648,r+464|0),A[r+452>>2]=r+1088,A[r+448>>2]=a,De(r+704|0,85425,r+448|0));if(s=Z?86012:85055,!(AA=ka(r+704|0,85712))){if(a=0,3&t)break A;s=(0|Ci(a=r+1088|0))<0?s:a}if((O=2&t)||(a=A[47192])&&(k0(a),A[47192]=0),vA=qe(r+992|0,s),hA=qe(r+944|0,s),O?((a=$a(200992,43))&&(g[0|a]=0),A[r+432>>2]=e+3,De(e=r+704|0,86030,r+432|0),na(200992,e)):(A[32972]=199592,ar(200992,e,40),g[201088]=0,g[201040]=0,A[50299]=200992,A[50298]=201088,A[50297]=201040),Xt(O),AA){for(WA=A[30450],KA=r+548|0,re=r+544|0,le=r+540|0,Me=r+536|0,ze=r+532|0,At=r+528|0,at=12|(e=r+512|0),ft=8|e,Nt=4|e;Jt(r+704|0,190,AA);){e=r+704|0;e:{if(l[r+704|0]!=35){r:if(!((0|(e=He(r+704|0)-1|0))<=0))for(;;){if(!((0|(s=g[0|(a=(r+704|0)+e|0)]))==32|s-9>>>0<5))break r;if(g[0|a]=0,!((0|(e=e-1|0))>0))break}if(!(e=Hr(r+704|0)))break e}g[0|e]=0}e=r+704|0;e:if(a=l[r+704|0])for(;;){if((0|(a=a<<24>>24))==32|a-9>>>0<5)break e;if(!(a=l[0|(e=e+1|0)]))break}if(g[0|e]=0,l[r+704|0])if(e=e+1|0,a=ms(129744,r+704|0)){i=0,J=s=J-416|0;e:if(o=A[47192]){switch(a-19|0){case 16:if(A[s+32>>2]=s+412,(0|dt(e,84249,s+32|0))!=1)break e;A[o+324>>2]=A[s+412>>2];break e;case 8:R0(e,o+320|0,27);break e;case 2:if(A[s+48>>2]=188784,dt(e,84249,s+48|0),!(e=l[188784]))break e;A[o+152>>2]=e;break e;case 11:if(l[0|e]){for(c=A[30450];;)if(a=e,e=e+1|0,!((0|(i=g[0|a]))==32|i-9>>>0<5)){for(i=Hs(a),A[s+412>>2]=i,(0|i)>0&&(i>>>0<=31?A[o+104>>2]=A[o+104>>2]|1<<i:i>>>0<=63?A[o+108>>2]=A[o+108>>2]|1<<i-32:(A[s+64>>2]=i,fr(c,84700,s- -64|0)),a=e);a=(e=a)+1|0,(i=g[0|e])-48>>>0<10|(32|i)-97>>>0<26;);if(!i)break}}8&(e=A[o+104>>2])&&(A[o+124>>2]=46,A[o+128>>2]=44),4&e&&(A[o+124>>2]=0);break e;default:if((65280&a)!=256)break e;A[s+16>>2]=24+(o+((255&a)<<2)|0),dt(e,84249,s+16|0);break e;case 1:A[s+144>>2]=o,A[s+148>>2]=o+4,dt(e,85642,s+144|0);break e;case 3:if(a=0,je(i=s+160|0,0,240),A[s+132>>2]=s+360,A[s+128>>2]=s+320,A[s+124>>2]=s+280,A[s+120>>2]=s+240,A[s+116>>2]=s+200,A[s+112>>2]=i,i=dt(e,85037,s+112|0),A[s+412>>2]=i,A[o+152>>2]=0,(0|i)<=0)break e;for(p=A[30450];;){r:if(vr(c=(s+160|0)+P(a,40)|0,85301)){s:{if((0|(m=A[34454]))>0)for(T=A[34455],e=0;;){if(!vr(c,T+P(e,68)|0))break s;if((0|m)==(0|(e=e+1|0)))break}A[s+96>>2]=c,fr(p,85562,s+96|0),i=A[s+412>>2];break r}g[156+(a+o|0)|0]=e}if(!((0|i)>(0|(a=a+1|0))))break}break e;case 9:A[s+88>>2]=o+20,A[s+84>>2]=o+16,A[s+80>>2]=o+8,dt(e,84778,s+80|0);break e;case 10:R0(e,o+12|0,29);break e;case 5:if((0|(p=un(e,s+160|0)))<=0)break e;if(a=0,e=0,p>>>0>=4)for(T=-4&p,c=o+304|0;m=s+160|0,b[c+(e<<1)>>1]=A[m+(e<<2)>>2],b[c+((f=1|e)<<1)>>1]=A[m+(f<<2)>>2],b[c+((f=2|e)<<1)>>1]=A[m+(f<<2)>>2],b[c+((f=3|e)<<1)>>1]=A[m+(f<<2)>>2],e=e+4|0,(0|T)!=(0|(i=i+4|0)););if(!(i=3&p))break e;for(;b[304+(o+(e<<1)|0)>>1]=A[(s+160|0)+(e<<2)>>2],e=e+1|0,(0|i)!=(0|(a=a+1|0)););break e;case 6:if((0|(p=un(e,s+160|0)))<=0)break e;if(a=0,e=0,p>>>0>=4)for(T=-4&p,c=o+296|0;m=s+160|0,g[e+c|0]=A[m+(e<<2)>>2],g[(f=1|e)+c|0]=A[m+(f<<2)>>2],g[(f=2|e)+c|0]=A[m+(f<<2)>>2],g[(f=3|e)+c|0]=A[m+(f<<2)>>2],e=e+4|0,(0|T)!=(0|(i=i+4|0)););if(!(i=3&p))break e;for(;g[296+(e+o|0)|0]=A[(s+160|0)+(e<<2)>>2],e=e+1|0,(0|i)!=(0|(a=a+1|0)););break e;case 7:if((0|(p=un(e,s+160|0)))<=0)break e;if(a=0,e=0,p>>>0>=4)for(T=-4&p,c=o+304|0;f=m=c+(e<<1)|0,I=M[m>>1],m=s+160|0,b[f>>1]=I+M[m+(e<<2)>>1],b[(I=c+((f=1|e)<<1)|0)>>1]=M[I>>1]+M[m+(f<<2)>>1],b[(I=c+((f=2|e)<<1)|0)>>1]=M[I>>1]+M[m+(f<<2)>>1],b[(I=c+((f=3|e)<<1)|0)>>1]=M[I>>1]+M[m+(f<<2)>>1],e=e+4|0,(0|T)!=(0|(i=i+4|0)););if(!(i=3&p))break e;for(;b[304+(c=o+(e<<1)|0)>>1]=M[c+304>>1]+M[(s+160|0)+(e<<2)>>1],e=e+1|0,(0|i)!=(0|(a=a+1|0)););break e;case 4:g[o+169|0]=1;break e;case 0:}g[o+208|0]=1}else A[s>>2]=Ii(129568,a),fr(A[30450],89101,s);J=s+416|0}else{switch(ms(131904,r+704|0)-1|0){case 1:if(O||(g[r+1040|0]=0,A[r+512>>2]=5,A[r+32>>2]=r+1040,A[r+36>>2]=r+512,dt(e,86237,r+32|0),A[r+1040>>2]==1769103734&A[r+1044>>2]==7630433))continue;if((e=He(r+1040|0)+2|0)>>>0<99-cA>>>0&&(g[0|(a=cA+201088|0)]=A[r+512>>2],qe(a+1|0,r+1040|0),cA=e+cA|0),!Kt){if(e=0,(a=c=r+1040|0)||(a=A[57150])){if(e=86875,A[24+(s=J-32|0)>>2]=0,A[s+28>>2]=0,A[s+16>>2]=0,A[s+20>>2]=0,A[s+8>>2]=0,A[s+12>>2]=0,A[s>>2]=0,A[s+4>>2]=0,o=0,i=l[86875])if(l[86876]){for(;A[(o=s+(i>>>3&28)|0)>>2]=A[o>>2]|1<<i,i=l[e+1|0],e=e+1|0,i;);e:if(i=l[0|(e=a)])for(;;){if(!(A[s+(i>>>3&28)>>2]>>>i&1))break e;if(i=l[e+1|0],e=e+1|0,!i)break}o=e-a|0}else{for(e=a;s=e,e=e+1|0,l[0|s]==(0|i););o=s-a|0}if(l[0|(e=o+a|0)]){a=86875,J=i=J-32|0,s=g[86875];e:if(l[86876]&&s){if(je(i,0,32),s=l[86875])for(;A[(o=i+(s>>>3&28)|0)>>2]=A[o>>2]|1<<s,s=l[a+1|0],a=a+1|0,s;);if(a=e,s=l[0|e])for(;;){if(A[i+(s>>>3&28)>>2]>>>s&1)break e;if(s=l[a+1|0],a=a+1|0,!s)break}}else a=Ls(e,s);J=i+32|0,l[0|(a=(a-e|0)+e|0)]?(A[57150]=a+1,g[0|a]=0):A[57150]=0}else A[57150]=0,e=0}a=qe(vA,e),qe(hA,e),Ci(qe(r+896|0,e)),A[47192]=_A(a),ar(A[32972]+40|0,c,20)}Kt=1;continue;case 0:if(O)continue;for(;a=e,e=e+1|0,(0|(s=g[0|a]))==32|s-9>>>0<5;);ar(201040,a,40);continue;case 2:A[r+1152>>2]=0,a=r+512|0,A[r+48>>2]=a,A[r+52>>2]=r+1152,dt(e,86237,r+48|0),g[201200]=ms(132112,a),g[201201]=A[r+1152>>2];continue;case 4:A[r+64>>2]=hA,dt(e,86939,r- -64|0);continue;case 3:A[r+80>>2]=r+896,dt(e,86939,r+80|0);continue;case 8:if(A[r+1152>>2]=100,A[r+1164>>2]=100,A[r+1148>>2]=100,A[r+112>>2]=r+1144,A[r+1144>>2]=0,A[r+96>>2]=r+512,A[r+100>>2]=r+1152,A[r+104>>2]=r+1164,A[r+108>>2]=r+1148,(0|dt(e,91156,r+96|0))<2||(e=A[r+512>>2])>>>0>8||((0|(a=A[r+1152>>2]))>=0&&(s=A[32972]+(e<<1)|0,a=SA(E=2.56001*+(0|a))<2147483648?~~E:-2147483648,b[s+236>>1]=a,b[s+164>>1]=a),(0|(a=A[r+1164>>2]))>=0&&(s=A[32972]+(e<<1)|0,a=SA(E=2.56001*+(0|a))<2147483648?~~E:-2147483648,b[s+254>>1]=a,b[s+182>>1]=a),(0|(s=A[r+1148>>2]))<0?a=A[32972]:(c=(a=A[32972])+(e<<1)|0,s=SA(E=2.56001*+(0|s))<2147483648?~~E:-2147483648,b[c+200>>1]=s),b[218+((e<<1)+a|0)>>1]=A[r+1144>>2],e))continue;b[a+200>>1]=(0|P(b[a+200>>1],105))/100;continue;case 9:if(A[r+132>>2]=r+696,A[r+128>>2]=r+700,(0|dt(e,87106,r+128|0))!=2)continue;if(e=A[32972],a=A[r+700>>2],A[e+64>>2]=(a<<12)-36864,A[e+68>>2]=P(A[r+696>>2]-a|0,108),SA(E=256*(+(a-82|0)/82*.25+1))<2147483648){A[e+116>>2]=~~E;continue}A[e+116>>2]=-2147483648;continue;case 35:er||Ci(r+896|0),A[r+1164>>2]=0,g[r+1156|0]=l[91267],A[r+1152>>2]=l[91263]|l[91264]<<8|l[91265]<<16|l[91266]<<24,A[r+144>>2]=r+1164,A[r+148>>2]=r+512,A[r+152>>2]=r+1152,(0|dt(e,91302,r+144|0))<2|A[49848]>59||(e=dn(r+512|0))&&(g[P(A[49848],3)+199408|0]=e,e=dn(r+1152|0),a=A[49848],s=P(a,3)+199408|0,g[s+1|0]=e,A[49848]=a+1,g[s+2|0]=A[r+1164>>2]),er=1;continue;case 10:A[r+1140>>2]=0,a=A[32972],A[a+100>>2]=0,A[r+164>>2]=a+100,A[r+160>>2]=a+96,dt(e,87106,r+160|0);continue;case 11:if(A[r+176>>2]=r+1140,(0|dt(e,87268,r+176|0))!=1)continue;A[A[32972]+88>>2]=A[r+1140>>2]<<5;continue;case 12:if(A[r+192>>2]=r+1140,(0|dt(e,87268,r+192|0))!=1)continue;A[A[32972]+92>>2]=A[r+1140>>2];continue;case 13:if(A[r+208>>2]=r+1140,(0|dt(e,87268,r+208|0))!=1)continue;a=A[32972],(0|(e=A[r+1140>>2]))>=5&&(A[a+108>>2]=1,A[r+1140>>2]=4,e=4),A[a+104>>2]=e+1;continue;case 14:for(A[r+552>>2]=-1,A[r+556>>2]=-1,A[r+544>>2]=-1,A[r+548>>2]=-1,A[r+536>>2]=-1,A[r+540>>2]=-1,A[r+528>>2]=-1,A[r+532>>2]=-1,A[r+240>>2]=At,A[r+244>>2]=ze,A[r+248>>2]=Me,A[r+252>>2]=le,A[r+256>>2]=re,A[r+260>>2]=KA,A[r+520>>2]=-1,A[r+524>>2]=-1,A[r+512>>2]=-1,A[r+516>>2]=-1,A[r+228>>2]=Nt,A[r+232>>2]=ft,A[r+236>>2]=at,A[r+224>>2]=r+512,dt(e,84222,r+224|0),T=A[32972],e=0,i=A[r+516>>2],s=0;;){if(a=s,o=i,c=e,(0|(s=A[(i=(e<<=2)+(r+512|0)|0)>>2]))==-1&&(s=8e3,A[i>>2]=8e3,c&&(A[(r+512|0)+(4|e)>>2]=A[508+(e+r|0)>>2])),i=A[(r+512|0)+(4|e)>>2],!((0|a)>=(0|(s=(0|s)/8|0))||(0|(m=s-a|0))<=0||(p=a+1|0,e=a,1&m&&(g[344+(a+T|0)|0]=(0|o)>=255?255:o,e=p),(0|s)==(0|p))))for(p=i-o|0;I=T+344|0,f=o+((0|P(p,e-a|0))/(0|m)|0)|0,g[I+e|0]=(0|f)>=255?255:f,f=o+((0|P(p,(QA=e+1|0)-a|0))/(0|m)|0)|0,g[I+QA|0]=(0|f)>=255?255:f,(0|s)!=(0|(e=e+2|0)););if(e=c+2|0,!(c>>>0<10))break}continue;case 15:if(A[r+272>>2]=r+1140,(0|dt(e,87268,r+272|0))!=1)continue;A[A[32972]+112>>2]=(A[r+1140>>2]<<6)/100;continue;case 16:a=A[32972],A[(s=a+300|0)>>2]=0,A[s+4>>2]=0,A[(i=a+292|0)>>2]=0,A[i+4>>2]=0,A[(o=a+284|0)>>2]=0,A[o+4>>2]=0,A[(c=a+276|0)>>2]=0,A[c+4>>2]=0,A[r+316>>2]=a+304,A[r+312>>2]=s,A[r+308>>2]=a+296,A[r+304>>2]=i,A[r+300>>2]=a+288,A[r+296>>2]=o,A[r+292>>2]=a+280,A[r+288>>2]=c,a=dt(e,84553,r+288|0),e=A[32972],A[e+272>>2]=a,A[e+276>>2]=0-A[e+276>>2],A[e+284>>2]=0-A[e+284>>2],A[e+292>>2]=0-A[e+292>>2],A[e+300>>2]=0-A[e+300>>2];continue;case 17:a=A[32972],A[(s=a+336|0)>>2]=0,A[s+4>>2]=0,A[(i=a+328|0)>>2]=0,A[i+4>>2]=0,A[(o=a+320|0)>>2]=0,A[o+4>>2]=0,A[(c=a+312|0)>>2]=0,A[c+4>>2]=0,A[r+348>>2]=a+340,A[r+344>>2]=s,A[r+340>>2]=a+332,A[r+336>>2]=i,A[r+332>>2]=a+324,A[r+328>>2]=o,A[r+324>>2]=a+316,A[r+320>>2]=c,e=dt(e,84553,r+320|0),A[A[32972]+308>>2]=e;continue;case 36:a=A[32972],A[r+352>>2]=a+120,A[r+356>>2]=a+124,A[r+1140>>2]=dt(e,87106,r+352|0);continue;case 33:A[r+368>>2]=A[32972]+84,dt(e,87268,r+368|0),Fs(3);continue;case 31:a=A[32972],A[(s=a+156|0)>>2]=0,A[s+4>>2]=0,A[(i=a+148|0)>>2]=0,A[i+4>>2]=0,A[(o=a+140|0)>>2]=0,A[o+4>>2]=0,A[(c=a+132|0)>>2]=0,A[c+4>>2]=0,A[r+412>>2]=a+160,A[r+408>>2]=s,A[r+404>>2]=a+152,A[r+400>>2]=i,A[r+396>>2]=a+144,A[r+392>>2]=o,A[r+388>>2]=a+136,A[r+384>>2]=c,dt(e,84553,r+384|0),e=A[32972],A[e+152>>2]=A[e+152>>2]-40;continue;case 32:A[r+416>>2]=145740,dt(e,87268,r+416|0),Fs(3);continue;case 6:case 7:continue}A[r+16>>2]=r+704,fr(WA,87359,r+16|0)}}aa(AA)}e:{if((e=A[47192])|O){if(O)break e}else e=_A(vA),A[47192]=e;r:{if(!Z){if((0|(e=Ci(r+896|0)))<0&&(A[r>>2]=r+896,fr(A[30450],87567,r),e=0),A[A[32972]+60>>2]=e,a=A[47192],A[a+292>>2]=e,Xa(a,hA,4&t),l[132848])break r;k0(A[47192]),a=0;break A}A[A[32972]+60>>2]=0,A[e+292>>2]=0}g[cA+201088|0]=0}a=A[32972]}return J=r+1168|0,a}function dt(e,t,r){var a,s,i,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0;J=i=J-16|0,A[i+12>>2]=r,J=o=J-144|0,a=je(o,0,144),A[a+76>>2]=-1,A[a+44>>2]=e,A[a+32>>2]=18,A[a+84>>2]=e,o=t,KA=r,e=0,J=s=J-304|0;A:{e:{r:if(A[a+4>>2]||(Oi(a),A[a+4>>2])){if(!(t=l[0|o]))break A;s:{i:{c:{o:{for(;;){u:{l:if((0|(t&=255))==32|t-9>>>0<5){for(;t=o,o=o+1|0,(0|(r=l[t+1|0]))==32|r-9>>>0<5;);for(Ja(a,0,0);(0|(r=A[a+4>>2]))==A[a+104>>2]?r=Ce(a):(A[a+4>>2]=r+1,r=l[0|r]),(0|r)==32|r-9>>>0<5;);o=A[a+4>>2],(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(o=o-1|0,A[a+4>>2]=o),o=r=o-A[a+44>>2]|0,p=cA+A[a+124>>2]|0,p=(c=r>>31)+((r=O+A[a+120>>2]|0)>>>0<O>>>0?p+1|0:p)|0,cA=(O=r+o|0)>>>0<r>>>0?p+1|0:p}else{n:{p:{C:{if(l[0|o]==37){if((0|(t=l[o+1|0]))==42)break C;if((0|t)!=37)break p}if(Ja(a,0,0),l[0|o]!=37)(0|(t=A[a+4>>2]))==A[a+104>>2]?t=Ce(a):(A[a+4>>2]=t+1,t=l[0|t]);else{for(;(0|(t=A[a+4>>2]))==A[a+104>>2]?t=Ce(a):(A[a+4>>2]=t+1,t=l[0|t]),(0|t)==32|t-9>>>0<5;);o=o+1|0}if(l[0|o]!=(0|t)){if((0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),(0|t)>=0||(f=0,re))break A;break r}m=(c=t=A[a+4>>2]-A[a+44>>2]|0)>>31,t=cA+A[a+124>>2]|0,f=((r=O+A[a+120>>2]|0)>>>0<O>>>0?t+1|0:t)+m|0,cA=(O=r+c|0)>>>0<r>>>0?f+1|0:f,t=o;break l}I=0,t=o+2|0;break n}l[o+2|0]!=36|t-48>>>0>=10?(I=A[KA>>2],KA=KA+4|0,t=o+1|0):(t=l[o+1|0]-48|0,A[12+(r=J-16|0)>>2]=KA,t=(t>>>0>1?(t<<2)-4|0:0)+KA|0,A[r+8>>2]=t+4,I=A[t>>2],t=o+3|0)}if(E=0,o=0,l[0|t]-48>>>0<10)for(;o=(l[0|t]+P(o,10)|0)-48|0,r=l[t+1|0],t=t+1|0,r-48>>>0<10;);(0|(Z=l[0|t]))==109&&(T=0,E=!!(0|I),Z=l[t+1|0],e=0,t=t+1|0),t=(r=t)+1|0,c=3,f=E;n:{p:switch(Z-65|0){case 39:c=r+2|0,t=(r=l[r+1|0]==104)?c:t,c=r?-2:-1;break n;case 43:c=r+2|0,t=(r=l[r+1|0]==108)?c:t,c=r?3:1;break n;case 51:case 57:c=1;break n;case 11:c=2;break n;case 41:break n;case 0:case 2:case 4:case 5:case 6:case 18:case 23:case 26:case 32:case 34:case 35:case 36:case 37:case 38:case 40:case 45:case 46:case 47:case 50:case 52:case 55:break p;default:break s}c=0,t=r}f=c,QA=(c=(47&(r=l[0|t]))==3)?1:f;n:if((0|(vA=c?32|r:r))!=91){p:{if((0|vA)!=110){if((0|vA)!=99)break p;o=(0|o)<=1?1:o;break n}C0(I,QA,O,cA);break l}for(Ja(a,0,0);(0|(r=A[a+4>>2]))==A[a+104>>2]?r=Ce(a):(A[a+4>>2]=r+1,r=l[0|r]),(0|r)==32|r-9>>>0<5;);r=A[a+4>>2],(0|(c=A[a+116>>2]))>0|(0|c)>=0&&(r=r-1|0,A[a+4>>2]=r),c=r=r-A[a+44>>2]|0,p=cA+A[a+124>>2]|0,cA=(f=r>>31)+((r=O+A[a+120>>2]|0)>>>0<O>>>0?p+1|0:p)|0,cA=(O=r+c|0)>>>0<r>>>0?cA+1|0:cA}if(AA=o,Ja(a,o,hA=o>>31),(0|(r=A[a+4>>2]))==A[a+104>>2]){if((0|Ce(a))<0)break i}else A[a+4>>2]=r+1;(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),r=16;n:{p:{C:{m:{switch(vA-88|0){default:if((r=vA-65|0)>>>0>6|!(1<<r&113))break n;case 9:case 13:case 14:case 15:if(ye(s+8|0,a,QA,0),r=A[a+4>>2]-A[a+44>>2]|0,A[a+120>>2]!=(0-r|0)|A[a+124>>2]!=(0-((r>>31)+!!(0|r)|0)|0))break C;break c;case 3:case 11:case 27:if((16|vA)==115){if(je(s+32|0,-1,257),g[s+32|0]=0,(0|vA)!=115)break p;g[s+65|0]=0,g[s+46|0]=0,b[s+42>>1]=0,b[s+44>>1]=0;break p}je(s+32|0,m=(0|(c=l[t+1|0]))==94,257),g[s+32|0]=0,r=m?t+2|0:t+1|0;b:{h:{E:{if((0|(t=l[(m?2:1)+t|0]))!=45){if((0|t)==93)break E;c=(0|c)!=94,t=r;break b}c=(0|c)!=94,g[s+78|0]=c;break h}c=(0|c)!=94,g[s+126|0]=c}t=r+1|0}for(;;){if((0|(r=l[0|t]))==45){if(r=45,!(!(m=l[t+1|0])|(0|m)==93)){if(f=t+1|0,m>>>0<=(t=l[t-1|0])>>>0)r=m;else for(;g[(t=t+1|0)+(s+32|0)|0]=c,(r=l[0|f])>>>0>t>>>0;);t=f}}else{if(!r)break i;if((0|r)==93)break p}g[33+(r+s|0)|0]=c,t=t+1|0}case 23:r=8;break m;case 12:case 29:r=10;break m;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 22:case 25:case 26:case 28:case 30:case 31:break n;case 0:case 24:case 32:break m;case 17:}r=0}m=0,p=0,c=0,f=0,Z=0,J=WA=J-16|0;m:if((0|r)!=1&r>>>0<=36){for(;(0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o]),(0|o)==32|o-9>>>0<5;);b:{h:switch(o-43|0){case 0:case 2:break h;default:break b}Z=(0|o)==45?-1:0,(0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o])}b:{h:{E:{w:{if(!(!!(0|r)&(0|r)!=16|(0|o)!=48)){if((0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o]),(-33&o)==88){if(r=16,(0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o]),l[o+121329|0]<16)break E;(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),Ja(a,0,0);break m}if(r)break w;r=8;break E}if(!((r=r||10)>>>0>l[o+121329|0])){(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),Ja(a,0,0),A[56798]=28;break m}}if((0|r)==10){if((c=o-48|0)>>>0<=9){for(r=0;f=(r=P(r,10)+c|0)>>>0<429496729,(0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o]),f&(c=o-48|0)>>>0<=9;);m=r}w:if(!(c>>>0>9)){for(r=bt(m,0,10,0),f=$;;){if(p=f,f=(0|(p=(m=r+c|0)>>>0<c>>>0?p+1|0:p))==429496729&m>>>0>=2576980378|p>>>0>429496729,(0|(r=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=r+1,o=l[0|r]),f|(c=o-48|0)>>>0>9)break w;if(r=bt(m,p,10,0),!((0|(f=$))==-1&~c>>>0>=r>>>0|(0|f)!=-1))break}r=10;break h}if(r=10,c>>>0<=9)break h;break b}}if(r-1&r){if((f=l[o+121329|0])>>>0<r>>>0){for(;m=(c=P(r,c)+f|0)>>>0<119304647,(0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o]),m&(f=l[o+121329|0])>>>0<r>>>0;);m=c}if(r>>>0<=f>>>0)break h;for(;;){if(c=bt(m,p,r,0),(0|(AA=$))==-1&~(f&=255)>>>0<c>>>0||(p=AA,p=(m=c+f|0)>>>0<f>>>0?p+1|0:p,(0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o]),r>>>0<=(f=l[o+121329|0])>>>0))break h;if(Kr(WA,r,0,0,0,m,p,0,0),A[WA+8>>2]|A[WA+12>>2])break}}else{if(AA=g[84400+(P(r,23)>>>5&7)|0],(c=l[o+121329|0])>>>0<r>>>0){for(;m=(f=f<<AA|c)>>>0<134217728,(0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o]),m&(c=l[o+121329|0])>>>0<r>>>0;);m=f}if(!(r>>>0<=c>>>0||(hA=31&AA,(63&AA)>>>0>=32?(f=0,hA=-1>>>hA|0):hA=(f=-1>>>hA|0)|(1<<hA)-1<<32-hA,!f&m>>>0>hA>>>0)))for(;;){if(le=255&c,c=m,o=31&AA,(63&AA)>>>0>=32?(p=c<<o,o=0):(p=(1<<o)-1&c>>>32-o|p<<o,o=c<<o),m=le|o,(0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o]),r>>>0<=(c=l[o+121329|0])>>>0)break h;if(!((0|f)==(0|p)&m>>>0<=hA>>>0|f>>>0>p>>>0))break}}}if(!(l[o+121329|0]>=r>>>0)){for(;(0|(o=A[a+4>>2]))==A[a+104>>2]?o=Ce(a):(A[a+4>>2]=o+1,o=l[0|o]),l[o+121329|0]<r>>>0;);A[56798]=68,Z=0,m=-1,p=-1}}(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),m=(r=m^Z)-Z|0,p=((o=Z>>31)^p)-((r>>>0<Z>>>0)+o|0)|0}else A[56798]=28;if(J=WA+16|0,r=A[a+4>>2]-A[a+44>>2]|0,A[a+120>>2]==(0-r|0)&A[a+124>>2]==(0-((r>>31)+!!(0|r)|0)|0))break c;if(!(!I|(0|vA)!=112)){A[I>>2]=m;break n}C0(I,QA,m,p);break n}if(!I)break n;o=A[s+16>>2],r=A[s+20>>2],c=A[s+8>>2],E=A[s+12>>2];C:switch(0|QA){case 0:J=p=J-32|0;m:if(0|(f=(m=2147483647&r)-1065418752|0)>>>0<(AA=m-1082064896|0)>>>0){if(m=(33554431&r)<<7|o>>>25,AA=f=0,!(!f&(0|(o&=33554431))==16777216?!(c|E):!f&o>>>0<16777216)){f=m+1073741825|0;break m}if(f=m+1073741824|0,16777216^o|c|E|AA)break m;f=(1&m)+f|0}else(!o&(0|m)==2147418112?!(c|E):m>>>0<2147418112)?(f=2139095040,m>>>0>1082064895||(f=0,(m=m>>>16|0)>>>0<16145||(ta(p+16|0,c,E,o,f=65535&r|65536,m-16129|0),Ha(p,c,E,o,f,16257-m|0),o=A[p+8>>2],f=(33554431&A[p+12>>2])<<7|o>>>25,m=A[p>>2]|!!(A[p+16>>2]|A[p+24>>2]|A[p+20>>2]|A[p+28>>2]),E=A[p+4>>2],(!(c=0)&(0|(o&=33554431))==16777216?!(m|E):!c&o>>>0<16777216)?16777216^o|m|c|E||(f=(1&f)+f|0):f=f+1|0))):f=4194303&((33554431&r)<<7|o>>>25)|2143289344;J=p+32|0,A[I>>2]=-2147483648&r|f;break n;case 1:D[I>>3]=Bs(c,E,o,r);break n;case 2:break C;default:break n}A[I>>2]=c,A[I+4>>2]=E,A[I+8>>2]=o,A[I+12>>2]=r;break n}c=(WA=(0|vA)!=99)?31:o+1|0;p:if((0|QA)!=1){if(E){if(o=0,!(r=Ct(c)))break o;for(;;){for(e=r;;){if((0|(r=A[a+4>>2]))==A[a+104>>2]?r=Ce(a):(A[a+4>>2]=r+1,r=l[0|r]),!l[33+(r+s|0)|0]){c=0,T=e;break p}if(g[e+o|0]=r,(0|c)==(0|(o=o+1|0)))break}if(f=1,!(r=Ur(e,c=c<<1|1)))break}T=e,e=0;break s}if(o=0,I)for(;;){if((0|(e=A[a+4>>2]))==A[a+104>>2]?e=Ce(a):(A[a+4>>2]=e+1,e=l[0|e]),!l[33+(e+s|0)|0]){c=0,T=e=I;break p}g[o+I|0]=e,o=o+1|0}for(;(0|(e=A[a+4>>2]))==A[a+104>>2]?e=Ce(a):(A[a+4>>2]=e+1,e=l[0|e]),l[33+(e+s|0)|0];);e=0,T=0,c=0}else{if(r=I,E&&!(r=Ct(c<<2)))break o;for(A[s+296>>2]=0,A[s+300>>2]=0,o=0;;){e=r;C:{for(;;){if((0|(r=A[a+4>>2]))==A[a+104>>2]?r=Ce(a):(A[a+4>>2]=r+1,r=l[0|r]),!l[33+(r+s|0)|0])break C;g[s+27|0]=r,m=s+28|0,r=A[(f=(r=s+296|0)||228604)>>2];m:{b:{h:{E:{if(!(T=s+27|0)){if(r)break E;r=0;break m}if(!r){if((0|(p=(r=l[0|T])<<24>>24))>=0){m&&(A[m>>2]=r),r=!!(0|p);break m}if(!A[A[56841]>>2]){if(r=1,!m)break h;A[m>>2]=57343&p,r=1;break m}if((r=r-194|0)>>>0>50)break E;r=A[124752+(r<<2)>>2];break b}if(Z=1,!(((QA=(p=l[0|T])>>>3|0)-16|(r>>26)+QA)>>>0>7))for(;;){if(Z=Z-1|0,(0|(r=p-128|r<<6))>=0){A[f>>2]=0,m&&(A[m>>2]=r),r=1-Z|0;break m}if(!Z)break b;if((192&(p=l[0|(T=T+1|0)]))!=128)break}}A[f>>2]=0,A[56798]=25,r=-1}break m}A[f>>2]=r,r=-2}if((0|r)!=-2){if(T=0,(0|r)==-1)break i;if(e&&(A[(o<<2)+e>>2]=A[s+28>>2],o=o+1|0),!(!E|(0|o)!=(0|c)))break}}if(f=1,r=Ur(e,(c=c<<1|1)<<2))continue;break s}break}if(T=0,c=e,s+296|0&&A[s+296>>2])break i}if(r=A[a+4>>2],(0|(m=A[a+116>>2]))>0|(0|m)>=0&&(r=r-1|0,A[a+4>>2]=r),r=(m=r-A[a+44>>2]|0)+A[a+120>>2]|0,p=A[a+124>>2]+(m>>31)|0,!((p=r>>>0<m>>>0?p+1|0:p)|r)|!(WA|(0|r)==(0|AA)&(0|p)==(0|hA)))break u;E&&(A[I>>2]=e),(0|vA)!=99&&(c&&(A[(o<<2)+c>>2]=0),T?g[o+T|0]=0:T=0),e=c}o=r=A[a+4>>2]-A[a+44>>2]|0,f=cA+A[a+124>>2]|0,cA=(c=r>>31)+((r=O+A[a+120>>2]|0)>>>0<O>>>0?f+1|0:f)|0,cA=(O=r+o|0)>>>0<r>>>0?cA+1|0:cA,re=!!(0|I)+re|0}if(o=t+1|0,t=l[t+1|0])continue;break A}break}e=c;break c}f=1,T=0,e=0;break s}f=E;break e}f=E}if(re)break e}re=-1}f&&(xt(T),xt(e))}return J=s+304|0,J=a+144|0,J=i+16|0,re}function Ct(e){var t,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0;J=t=J-16|0;A:{e:{r:{s:{i:{c:{o:{u:{l:{if((e|=0)>>>0<=244){if(3&(r=(c=A[57152])>>>(a=(f=e>>>0<11?16:e+11&-8)>>>3|0)|0)){r=228648+(e=(a=a+(1&~r)|0)<<3)|0,s=A[e+228656>>2],(0|r)!=(0|(e=A[s+8>>2]))?(A[e+12>>2]=r,A[r+8>>2]=e):A[57152]=ma(-2,a)&c,e=s+8|0,r=a<<3,A[s+4>>2]=3|r,A[4+(r=r+s|0)>>2]=1|A[r+4>>2];break A}if((I=A[57154])>>>0>=f>>>0)break l;if(r){r=228648+(e=(s=Bi(0-(e=(0-(e=2<<a)|e)&r<<a)&e))<<3)|0,i=A[e+228656>>2],(0|r)!=(0|(e=A[i+8>>2]))?(A[e+12>>2]=r,A[r+8>>2]=e):(c=ma(-2,s)&c,A[57152]=c),A[i+4>>2]=3|f,s=(e=s<<3)-f|0,A[4+(a=i+f|0)>>2]=1|s,A[e+i>>2]=s,I&&(r=228648+(-8&I)|0,o=A[57157],(e=1<<(I>>>3))&c?e=A[r+8>>2]:(A[57152]=e|c,e=r),A[r+8>>2]=o,A[e+12>>2]=o,A[o+12>>2]=r,A[o+8>>2]=e),e=i+8|0,A[57157]=a,A[57154]=s;break A}if(!(p=A[57153]))break l;for(a=A[228912+(Bi(0-p&p)<<2)>>2],o=(-8&A[a+4>>2])-f|0,r=a;(e=A[r+16>>2])||(e=A[r+20>>2]);)o=(s=(r=(-8&A[e+4>>2])-f|0)>>>0<o>>>0)?r:o,a=s?e:a,r=e;if(m=A[a+24>>2],(0|(s=A[a+12>>2]))!=(0|a)){e=A[a+8>>2],A[e+12>>2]=s,A[s+8>>2]=e;break e}if(!(e=A[(r=a+20|0)>>2])){if(!(e=A[a+16>>2]))break u;r=a+16|0}for(;i=r,s=e,(e=A[(r=e+20|0)>>2])||(r=s+16|0,e=A[s+16>>2]););A[i>>2]=0;break e}if(f=-1,!(e>>>0>4294967231)&&(f=-8&(e=e+11|0),p=A[57153])){o=0-f|0,c=0,f>>>0<256||(c=31,f>>>0>16777215||(c=62+((f>>>38-(e=YA(e>>>8|0))&1)-(e<<1)|0)|0));n:{p:{if(r=A[228912+(c<<2)>>2])for(e=0,a=f<<((0|c)!=31?25-(c>>>1|0):0);;){if(!((i=(-8&A[r+4>>2])-f|0)>>>0>=o>>>0||(s=r,o=i,i))){o=0,e=r;break p}if(i=A[r+20>>2],r=A[16+((a>>>29&4)+r|0)>>2],e=i?(0|i)==(0|r)?e:i:e,a<<=1,!r)break}else e=0;if(!(e|s)){if(s=0,!(e=(0-(e=2<<c)|e)&p))break l;e=A[228912+(Bi(e&0-e)<<2)>>2]}if(!e)break n}for(;o=(a=(r=(-8&A[e+4>>2])-f|0)>>>0<o>>>0)?r:o,s=a?e:s,e=(r=A[e+16>>2])||A[e+20>>2];);}if(!(!s|A[57154]-f>>>0<=o>>>0)){if(c=A[s+24>>2],(0|s)!=(0|(a=A[s+12>>2]))){e=A[s+8>>2],A[e+12>>2]=a,A[a+8>>2]=e;break r}if(!(e=A[(r=s+20|0)>>2])){if(!(e=A[s+16>>2]))break o;r=s+16|0}for(;i=r,a=e,(e=A[(r=e+20|0)>>2])||(r=a+16|0,e=A[a+16>>2]););A[i>>2]=0;break r}}}if((e=A[57154])>>>0>=f>>>0){s=A[57157],(r=e-f|0)>>>0>=16?(A[4+(a=s+f|0)>>2]=1|r,A[e+s>>2]=r,A[s+4>>2]=3|f):(A[s+4>>2]=3|e,A[4+(e=e+s|0)>>2]=1|A[e+4>>2],a=0,r=0),A[57154]=r,A[57157]=a,e=s+8|0;break A}if((m=A[57155])>>>0>f>>>0){r=m-f|0,A[57155]=r,e=(a=A[57158])+f|0,A[57158]=e,A[e+4>>2]=1|r,A[a+4>>2]=3|f,e=a+8|0;break A}if(e=0,p=f+47|0,A[57270]?a=A[57272]:(A[57273]=-1,A[57274]=-1,A[57271]=4096,A[57272]=4096,A[57270]=t+12&-16^1431655768,A[57275]=0,A[57263]=0,a=4096),(r=(i=p+a|0)&(o=0-a|0))>>>0<=f>>>0||(s=A[57262])&&s>>>0<(c=(a=A[57260])+r|0)>>>0|a>>>0>=c>>>0)break A;l:{if(!(4&l[229052])){n:{p:{C:{m:{if(s=A[57158])for(e=229056;;){if((a=A[e>>2])>>>0<=s>>>0&s>>>0<a+A[e+4>>2]>>>0)break m;if(!(e=A[e+8>>2]))break}if((0|(a=si(0)))==-1||(c=r,(e=(s=A[57271])-1|0)&a&&(c=(r-a|0)+(e+a&0-s)|0),c>>>0<=f>>>0)||(s=A[57262])&&s>>>0<(o=(e=A[57260])+c|0)>>>0|e>>>0>=o>>>0)break n;if((0|a)!=(0|(e=si(c))))break C;break l}if((0|(a=si(c=o&i-m)))==(A[e>>2]+A[e+4>>2]|0))break p;e=a}if((0|e)==-1)break n;if(f+48>>>0<=c>>>0){a=e;break l}if((0|si(a=(a=A[57272])+(p-c|0)&0-a))==-1)break n;c=a+c|0,a=e;break l}if((0|a)!=-1)break l}A[57263]=4|A[57263]}if((0|(a=si(r)))==-1|(0|(e=si(0)))==-1|e>>>0<=a>>>0||(c=e-a|0)>>>0<=f+40>>>0)break s}e=A[57260]+c|0,A[57260]=e,e>>>0>uA[57261]&&(A[57261]=e);l:{if(i=A[57158]){for(e=229056;;){if(((s=A[e>>2])+(r=A[e+4>>2])|0)==(0|a))break l;if(!(e=A[e+8>>2]))break}break c}for((e=A[57156])>>>0<=a>>>0&&e||(A[57156]=a),e=0,A[57265]=c,A[57264]=a,A[57160]=-1,A[57161]=A[57270],A[57267]=0;r=228648+(s=e<<3)|0,A[s+228656>>2]=r,A[s+228660>>2]=r,(0|(e=e+1|0))!=32;);r=(s=c-40|0)-(e=a+8&7?-8-a&7:0)|0,A[57155]=r,e=e+a|0,A[57158]=e,A[e+4>>2]=1|r,A[4+(a+s|0)>>2]=40,A[57159]=A[57274];break i}if(8&l[e+12|0]|s>>>0>i>>>0|a>>>0<=i>>>0)break c;A[e+4>>2]=r+c,a=(e=i+8&7?-8-i&7:0)+i|0,A[57158]=a,e=(r=A[57155]+c|0)-e|0,A[57155]=e,A[a+4>>2]=1|e,A[4+(r+i|0)>>2]=40,A[57159]=A[57274];break i}s=0;break e}a=0;break r}uA[57156]>a>>>0&&(A[57156]=a),r=a+c|0,e=229056;c:{o:{u:{l:{n:{p:{for(;;){if((0|r)!=A[e>>2]){if(e=A[e+8>>2])continue;break p}break}if(!(8&l[e+12|0]))break n}for(e=229056;;){if((r=A[e>>2])>>>0<=i>>>0&&(o=r+A[e+4>>2]|0)>>>0>i>>>0)break l;e=A[e+8>>2]}}if(A[e>>2]=a,A[e+4>>2]=A[e+4>>2]+c,A[4+(p=(a+8&7?-8-a&7:0)+a|0)>>2]=3|f,e=(c=r+(r+8&7?-8-r&7:0)|0)-(m=f+p|0)|0,(0|i)==(0|c)){A[57158]=m,e=A[57155]+e|0,A[57155]=e,A[m+4>>2]=1|e;break o}if(A[57157]==(0|c)){A[57157]=m,e=A[57154]+e|0,A[57154]=e,A[m+4>>2]=1|e,A[e+m>>2]=e;break o}if((3&(o=A[c+4>>2]))==1){i=-8&o;n:if(o>>>0<=255){if(s=A[c+8>>2],r=o>>>3|0,(0|(a=A[c+12>>2]))==(0|s)){A[57152]=A[57152]&ma(-2,r);break n}A[s+12>>2]=a,A[a+8>>2]=s}else{if(f=A[c+24>>2],(0|c)==(0|(a=A[c+12>>2])))if((r=A[(o=c+20|0)>>2])||(r=A[(o=c+16|0)>>2])){for(;s=o,(r=A[(o=(a=r)+20|0)>>2])||(o=a+16|0,r=A[a+16>>2]););A[s>>2]=0}else a=0;else r=A[c+8>>2],A[r+12>>2]=a,A[a+8>>2]=r;if(f){s=A[c+28>>2];p:{if(A[(r=228912+(s<<2)|0)>>2]==(0|c)){if(A[r>>2]=a,a)break p;A[57153]=A[57153]&ma(-2,s);break n}if(A[f+(A[f+16>>2]==(0|c)?16:20)>>2]=a,!a)break n}A[a+24>>2]=f,(r=A[c+16>>2])&&(A[a+16>>2]=r,A[r+24>>2]=a),(r=A[c+20>>2])&&(A[a+20>>2]=r,A[r+24>>2]=a)}}o=A[4+(c=i+c|0)>>2],e=e+i|0}if(A[c+4>>2]=-2&o,A[m+4>>2]=1|e,A[e+m>>2]=e,e>>>0<=255){r=228648+(-8&e)|0,(a=A[57152])&(e=1<<(e>>>3))?e=A[r+8>>2]:(A[57152]=e|a,e=r),A[r+8>>2]=m,A[e+12>>2]=m,A[m+12>>2]=r,A[m+8>>2]=e;break o}if(o=31,e>>>0<=16777215&&(o=62+((e>>>38-(r=YA(e>>>8|0))&1)-(r<<1)|0)|0),A[m+28>>2]=o,A[m+16>>2]=0,A[m+20>>2]=0,r=228912+(o<<2)|0,(s=A[57153])&(a=1<<o)){for(o=e<<((0|o)!=31?25-(o>>>1|0):0),a=A[r>>2];;){if(r=a,(-8&A[a+4>>2])==(0|e))break u;if(a=o>>>29|0,o<<=1,!(a=A[16+(s=(4&a)+r|0)>>2]))break}A[s+16>>2]=m}else A[57153]=a|s,A[r>>2]=m;A[m+24>>2]=r,A[m+12>>2]=m,A[m+8>>2]=m;break o}for(r=(s=c-40|0)-(e=a+8&7?-8-a&7:0)|0,A[57155]=r,e=e+a|0,A[57158]=e,A[e+4>>2]=1|r,A[4+(a+s|0)>>2]=40,A[57159]=A[57274],A[(s=(e=(o+(o-39&7?39-o&7:0)|0)-47|0)>>>0<i+16>>>0?i:e)+4>>2]=27,e=A[57267],A[s+16>>2]=A[57266],A[s+20>>2]=e,e=A[57265],A[s+8>>2]=A[57264],A[s+12>>2]=e,A[57266]=s+8,A[57265]=c,A[57264]=a,A[57267]=0,e=s+24|0;A[e+4>>2]=7,r=e+8|0,e=e+4|0,r>>>0<o>>>0;);if((0|s)==(0|i))break i;if(A[s+4>>2]=-2&A[s+4>>2],o=s-i|0,A[i+4>>2]=1|o,A[s>>2]=o,o>>>0<=255){r=228648+(-8&o)|0,(a=A[57152])&(e=1<<(o>>>3))?e=A[r+8>>2]:(A[57152]=e|a,e=r),A[r+8>>2]=i,A[e+12>>2]=i,A[i+12>>2]=r,A[i+8>>2]=e;break i}if(e=31,o>>>0<=16777215&&(e=62+((o>>>38-(e=YA(o>>>8|0))&1)-(e<<1)|0)|0),A[i+28>>2]=e,A[i+16>>2]=0,A[i+20>>2]=0,r=228912+(e<<2)|0,(s=A[57153])&(a=1<<e)){for(e=o<<((0|e)!=31?25-(e>>>1|0):0),s=A[r>>2];;){if((0|o)==(-8&A[(r=s)+4>>2]))break c;if(a=e>>>29|0,e<<=1,!(s=A[16+(a=(4&a)+r|0)>>2]))break}A[a+16>>2]=i}else A[57153]=a|s,A[r>>2]=i;A[i+24>>2]=r,A[i+12>>2]=i,A[i+8>>2]=i;break i}e=A[r+8>>2],A[e+12>>2]=m,A[r+8>>2]=m,A[m+24>>2]=0,A[m+12>>2]=r,A[m+8>>2]=e}e=p+8|0;break A}e=A[r+8>>2],A[e+12>>2]=i,A[r+8>>2]=i,A[i+24>>2]=0,A[i+12>>2]=r,A[i+8>>2]=e}if(!((e=A[57155])>>>0<=f>>>0)){r=e-f|0,A[57155]=r,e=(a=A[57158])+f|0,A[57158]=e,A[e+4>>2]=1|r,A[a+4>>2]=3|f,e=a+8|0;break A}}A[56798]=48,e=0;break A}r:if(c){r=A[s+28>>2];s:{if(A[(e=228912+(r<<2)|0)>>2]==(0|s)){if(A[e>>2]=a,a)break s;p=ma(-2,r)&p,A[57153]=p;break r}if(A[c+(A[c+16>>2]==(0|s)?16:20)>>2]=a,!a)break r}A[a+24>>2]=c,(e=A[s+16>>2])&&(A[a+16>>2]=e,A[e+24>>2]=a),(e=A[s+20>>2])&&(A[a+20>>2]=e,A[e+24>>2]=a)}r:if(o>>>0<=15)e=o+f|0,A[s+4>>2]=3|e,A[4+(e=e+s|0)>>2]=1|A[e+4>>2];else if(A[s+4>>2]=3|f,A[4+(i=s+f|0)>>2]=1|o,A[i+o>>2]=o,o>>>0<=255)r=228648+(-8&o)|0,(a=A[57152])&(e=1<<(o>>>3))?e=A[r+8>>2]:(A[57152]=e|a,e=r),A[r+8>>2]=i,A[e+12>>2]=i,A[i+12>>2]=r,A[i+8>>2]=e;else{e=31,o>>>0<=16777215&&(e=62+((o>>>38-(e=YA(o>>>8|0))&1)-(e<<1)|0)|0),A[i+28>>2]=e,A[i+16>>2]=0,A[i+20>>2]=0,r=228912+(e<<2)|0;s:{if((a=1<<e)&p){for(e=o<<((0|e)!=31?25-(e>>>1|0):0),f=A[r>>2];;){if((-8&A[(r=f)+4>>2])==(0|o))break s;if(a=e>>>29|0,e<<=1,!(f=A[16+(a=(4&a)+r|0)>>2]))break}A[a+16>>2]=i}else A[57153]=a|p,A[r>>2]=i;A[i+24>>2]=r,A[i+12>>2]=i,A[i+8>>2]=i;break r}e=A[r+8>>2],A[e+12>>2]=i,A[r+8>>2]=i,A[i+24>>2]=0,A[i+12>>2]=r,A[i+8>>2]=e}e=s+8|0;break A}e:if(m){r=A[a+28>>2];r:{if(A[(e=228912+(r<<2)|0)>>2]==(0|a)){if(A[e>>2]=s,s)break r;A[57153]=ma(-2,r)&p;break e}if(A[m+(A[m+16>>2]==(0|a)?16:20)>>2]=s,!s)break e}A[s+24>>2]=m,(e=A[a+16>>2])&&(A[s+16>>2]=e,A[e+24>>2]=s),(e=A[a+20>>2])&&(A[s+20>>2]=e,A[e+24>>2]=s)}o>>>0<=15?(e=o+f|0,A[a+4>>2]=3|e,A[4+(e=e+a|0)>>2]=1|A[e+4>>2]):(A[a+4>>2]=3|f,A[4+(s=a+f|0)>>2]=1|o,A[s+o>>2]=o,I&&(r=228648+(-8&I)|0,i=A[57157],(e=1<<(I>>>3))&c?e=A[r+8>>2]:(A[57152]=e|c,e=r),A[r+8>>2]=i,A[e+12>>2]=i,A[i+12>>2]=r,A[i+8>>2]=e),A[57157]=s,A[57154]=o),e=a+8|0}return J=t+16|0,0|e}function $t(e,t,r,a,s){var i,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0;J=i=J-544|0,je(i+320|0,0,100),je(i+208|0,0,100),m=r?A[r>>2]:m,O=A[e+12>>2],p=A[36115];A:{e:{r:{s:{for(;;){if(o=(0|(o=l[t+c|0]))>=(0|p)?13:o,g[i+c|0]=o,!o){o=c;break s}if(f=(0|p)<=(0|(f=l[(o=1|c)+t|0]))?13:f,g[o+i|0]=f,!f)break s;if((0|(c=c+2|0))==200)break}c=198,AA=l[i+199|0];break r}if(!o)break e;AA=l[i+(c=o-1|0)|0],(0|o)!=1&&(c=o-2|0)}if(QA=8&m,A[i+536>>2]=(QA>>>3|0?3:7)&m,m=l[i+c|0],p=1,E=(0|(I=fi(e,i,i+432|0,i+540|0,i+536|0,1)))>=0?I:0,hA=l[0|i])for(c=i,o=hA;o=A[144464+((255&o)<<2)>>2],l[o+11|0]==2&&(1048576&(o=A[o+4>>2])||(f=(2097152&o)>>>21|0,f|=o=l[A[144464+(l[0|(T=c+1|0)]<<2)>>2]+10|0]==12,g[(i+208|0)+p|0]=f,Z=A[144464+(l[(o?2:1)+c|0]<<2)>>2],f=l[Z+11|0]-10>>>0<4294967289|!(32&l[Z+6|0])&l[A[144464+(l[(o?3:2)+c|0]<<2)>>2]+11|0]==2?f:f?2:1,c=o?T:c,g[(i+320|0)+p|0]=f,p=p+1|0)),o=l[0|(c=c+1|0)];);c=r=r?E:I;r:{s:{i:{c:{o:{u:{l:{n:{p:{C:{m:{b:switch(A[e+8>>2]-1|0){case 11:if((0|(r=A[i+540>>2]))<2)break p;if(c=1,E=1&(o=r-1|0),(0|r)!=2)break m;p=0;break C;case 8:if((0|(o=A[i+540>>2]))<2)break s;if(p=3&(f=o-1|0),c=1,o-2>>>0>=3)for(E=-4&f,f=0;m=g[0|(o=(i+432|0)+c|0)],g[0|o]=(0|m)<0?4:m,m=g[o+1|0],g[o+1|0]=(0|m)<0?4:m,m=g[o+2|0],g[o+2|0]=(0|m)<0?4:m,m=o,o=g[o+3|0],g[m+3|0]=(0|o)<0?4:o,c=c+4|0,(0|E)!=(0|(f=f+4|0)););if(!p)break s;for(o=0;f=g[0|(m=(i+432|0)+c|0)],g[0|m]=(0|f)<0?4:f,c=c+1|0,(0|p)!=(0|(o=o+1|0)););break s;case 7:if(!l[i+322|0]|g[i+321|0]>0)break s;case 0:if(A[i+536>>2]|A[i+540>>2]<3)break s;if(A[i+536>>2]=2,c=4,r)break r;g[i+434|0]=4;break r;case 1:if(A[i+536>>2])break r;h:{E:{if((0|(p=A[i+540>>2]))>=3){r=p-2|0,A[i+536>>2]=r,c=r;w:if(512&O&&(o=A[144464+(AA<<2)>>2],(0|(f=l[o+11|0]))!=2)){c=A[o>>2],o=i;y:{L:{if((0|(E=A[e+212>>2]))!=26977){if((0|E)!=24942)break L;switch(c-110|0){case 0:case 5:if(c=r,l[A[144464+(m<<2)>>2]+11|0]==2)break w}c=p-1|0;break y}if((0|c)==115&&(c=r,l[A[144464+(m<<2)>>2]+11|0]==2))break w;c=p-1|0;break y}L:{W:{if((0|c)==115){if(c=r,(0|(f=l[A[144464+(m<<2)>>2]+11|0]))!=8)break W;break w}if((0|f)!=8)break L;f=l[A[144464+(m<<2)>>2]+11|0]}if(c=r,(255&f)==2)break w}c=p-1|0}A[o+536>>2]=c}if(524288&O&&(g[(o=p-1|0)+(p=i+208|0)|0]<=g[r+p|0]||(A[i+536>>2]=o,c=o)),l[(i+432|0)+c|0]>1){o=c;break h}if(o=2,r=c-1|0,c>>>0>=2)break E;A[i+536>>2]=c+1;break h}r=1}o=r,A[i+536>>2]=o}if(c=4,g[0|(r=(i+432|0)+o|0)]>=0||g[(o=(i+432|0)+o|0)-1|0]>=4&g[o+1|0]>3)break r;g[0|r]=4;break r;case 2:if(A[i+536>>2])break r;for(r=(c=A[i+540>>2])-1|0,r&=r>>31;;){if((0|(c=c-1|0))<=0)break i;if(!(g[0|(o=(i+432|0)+c|0)]>=0))break}A[i+536>>2]=c,c=4,g[0|o]=4;break r;case 3:if(A[i+536>>2])break s;if(o=(0|(c=A[i+540>>2]-3|0))<=1?1:c,A[i+536>>2]=o,c=4,r)break r;g[o+(i+432|0)|0]=4;break r;case 4:if(A[i+536>>2])break r;if(o=(r=A[i+540>>2])-3|0,A[i+536>>2]=o,(0|r)<=15){h:{switch(l[A[144464+(AA<<2)>>2]+11|0]-2|0){case 0:o=g[r+94176|0];break h;case 2:o=g[r+94192|0];break h}o=g[r+94160|0]}A[i+536>>2]=o}c=4,g[(i+432|0)+o|0]=4;break r;case 5:if(A[i+536>>2])break r;if(p=-1,f=0,!((0|(r=(o=A[i+540>>2])-1|0))<2)){if(c=1,T=1&o,(0|o)!=3)for(Z=(-2&o)-4|0,o=0;g[(i+432|0)+c|0]<0&&(f=(m=(0|(E=g[(i+320|0)+c|0]))<(0|p))?f:c,p=m?p:E),g[(m=c+1|0)+(i+432|0)|0]<0&&(f=(E=(0|(vA=g[m+(i+320|0)|0]))<(0|p))?f:m,p=E?p:vA),c=c+2|0,m=(0|o)!=(0|Z),o=o+2|0,m;);!T|g[(i+432|0)+c|0]>=0||(p=(o=(0|(m=g[(i+320|0)+c|0]))<(0|p))?p:m,f=o?f:c)}A[i+536>>2]=f,l[r+(i+320|0)|0]!=2|(0|p)>1?(0|p)>0||(f=1,A[i+536>>2]=1):(A[i+536>>2]=r,f=r),c=4,g[(i+432|0)+f|0]=4;break r;case 14:break c;case 12:break o;case 6:break b;default:break r}if(A[i+536>>2])break r;p=(r=A[i+540>>2])-1|0,A[i+536>>2]=p;b:if(!((0|r)<2))for(c=1;;){if(l[(i+432|0)+c|0]==1){p=c-1|0,A[i+536>>2]=p;break b}if((0|r)==(0|(c=c+1|0)))break}c=4,g[(i+432|0)+p|0]=4;break r}for(T=-2&o,p=0,f=0;o=l[0|(Z=(m=i+432|0)+c|0)],cA=Z,vA=g[(Z=i+208|0)+c|0]>0,g[0|cA]=vA||(0|o)==4?3:o,WA=(0|(m=l[0|(cA=(o=c+1|0)+m|0)]))==4?3:m,m=g[o+Z|0]>0,g[0|cA]=m?3:WA,p=m?o:vA?c:p,c=c+2|0,(0|T)!=(0|(f=f+2|0)););}if(E&&(m=(0|(o=l[0|(f=(i+432|0)+c|0)]))==4?3:o,o=g[(i+208|0)+c|0]>0,g[0|f]=o?3:m,p=o?c:p),o=A[i+536>>2])break u;if((0|p)>0){A[i+536>>2]=p,o=p;break u}if((0|r)<6)break n;o=r-3|0;break l}if(o=A[i+536>>2])break u}o=r-1|0}A[i+536>>2]=o}c=4,g[(i+432|0)+o|0]=4;break r}if(A[i+536>>2])break r;o=1,A[i+536>>2]=1,l[i+209|0]|A[i+540>>2]<3|g[i+210|0]<=0||(o=2,A[i+536>>2]=2),c=4,g[i+432|o]=4;break r}if(A[i+536>>2]||(0|(o=A[i+540>>2]))<3)break s;if(je(i+432|1,0,o-1|0),A[i+536>>2]=2,r||(g[i+434|0]=4),c=4,o>>>0<4)break r;g[431+(o+i|0)|0]=3;break r}A[i+536>>2]=r,c=4;break r}c=r}!(256&O)|2&s||(0|(r=A[i+540>>2]))<3|(0|I)>2||l[0|(o=(r=r+(i+432|0)|0)-1|0)]!=4|l[A[144464+(AA<<2)>>2]+11|0]!=2||(g[0|o]=1,g[r-2|0]=4);r:{s:{if(QA)I=A[i+540>>2];else{if(r=g[i+433|0],!(!(4096&O)|(0|(I=A[i+540>>2]))!=3)){if((0|r)==4){g[i+434|0]=3;break s}if(l[i+434|0]==4){g[i+433|0]=3;break s}}if(!(!(8192&O)|(0|r)>=0|(0|I)<4|g[i+434|0]<4)){g[i+433|0]=3;break s}}if(f=0,(0|I)<2)break r}for(p=(0|c)<4?4:3,Z=128&O,vA=64&O,cA=32&O,E=I-1|0,WA=16&O,KA=!(32768&O),AA=0,m=0,c=1;;){s:{i:if((0|(o=g[0|(T=(i+432|0)+c|0)]))>=0)f=p;else{f=3;c:{o:if(!(!(!WA|(0|p)>3)&(0|c)==(0|E))){if(!(1&(AA|KA)))break c;if(!(g[431+(i+c|0)|0]>1)){if((0|(o=g[(r=c+1|0)+(i+432|0)|0]))>=2){if((0|p)!=4||(f=4,o>>>0>=3))break o}else if(!(!cA|(0|p)!=3)){p=3;break s}if(!vA|c>>>0<2||(f=l[(i+320|0)+c|0]))break c;if((0|E)>(0|(o=c))){for(;;){if(g[(i+320|0)+o|0]>0)break s;if((0|E)==(0|(o=o+1|0)))break}if(f)break c}if(g[r+(i+320|0)|0]<=0)break c;break s}f=p}o=l[0|T];break i}g[0|T]=p,AA=1,f=3,o=p}i:{if(o<<24>>24>=4){if(r=m||c,!m|!Z)break i;g[0|T]=3}p=f;break s}p=f,m=r}if(f=1,(0|I)==(0|(c=c+1|0)))break}}if(a=!QA|(0|a)>=0?a:A[((0|I)<3?16:20)+e>>2],p=0,o=0,f){if(AA=3&(r=I-1|0),f=0,I-2>>>0<3)c=1;else for(QA=-4&r,c=1,m=0;o=(r=(0|(o=(T=(0|(o=(E=(0|(o=(I=(0|(E=g[(r=i+432|0)+c|0]))<(0|o))?o:E))>(0|(T=g[(Z=c+1|0)+r|0])))?o:T))>(0|(cA=g[(vA=c+2|0)+r|0])))?o:cA))>(0|(WA=g[(cA=c+3|0)+r|0])))?o:WA,p=r?T?E?I?p:c:Z:vA:cA,c=c+4|0,(0|QA)!=(0|(m=m+4|0)););if(AA)for(;o=(r=(0|(m=g[(i+432|0)+c|0]))<(0|o))?o:m,p=r?p:c,c=c+1|0,(0|AA)!=(0|(f=f+1|0)););}if((0|a)<0?a=o:(0|a)<=(0|o)&(0|o)>4||(g[(i+432|0)+p|0]=a),AA=t+197|0,I=1,!(1&s)&&(r=A[144464+(hA<<2)>>2])){if(o=i,!((0|(f=l[r+11|0]))!=1&(0|hA)!=15))for(;r=l[0|(o=o+1|0)],(0|(f=l[A[144464+(r<<2)>>2]+11|0]))==1|(0|r)==15;);!(48&(r=A[e+4>>2]))|(0|f)!=2||(g[0|t]=(32&r)>>>5|0&&g[i+433|0]>3?11:23,t=t+1|0)}r:if(!(t>>>0>=AA>>>0))for(E=65536&O,T=2&O,QA=4&O,c=i;;){if(!(o=l[0|c]))break r;if(s=c,c=c+1|0,r=A[144464+(o<<2)>>2]){s:{i:{switch(l[r+11|0]){case 0:A[e+8200>>2]=0;break s;case 2:if(!(16&l[r+6|0]))break i}if(l[0|c]!=20)break s}if((0|(hA=A[i+540>>2]))<(0|I))break A;m=g[0|(O=(i+432|0)+I|0)],A[e+8200>>2]=m;i:{c:{if(!((0|(r=m))>1)){if(f=hA-1|0,!(!QA|(0|I)<2|(0|a)<2)&&(r=0,(0|f)==(0|I)))break c;if(r=1,!((0|I)==1|T|(hA-2|0)==(0|I)&g[f+(i+432|0)|0]<2|(0|f)==(0|I)||g[431+(i+I|0)|0]>=0&&(r=m,E))){r=0,g[0|O]=0;break c}}if(r&&(0|r)<2)break i}g[0|t]=l[r+94151|0],t=t+1|0,m=g[0|O]}f=(0|a)>(0|m),l[0|c]==12&&1&(hA=A[e+28>>2])&&(c=(16&hA?(0|p)!=(0|I):(0|r)<4)?s+2|0:c),a=f?a:m,I=I+1|0}if((0|o)!=1&&(g[0|t]=o,t=t+1|0),!(t>>>0<AA>>>0))break}}g[0|t]=0}return void(J=i+544|0)}TA(86136,86634,1353,94208),kA()}function Sr(e,t,r,a,s,i,o,c,f){var m,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0,ft=0,Nt=0,Kt=0,er=0,pr=0,hr=0,yr=0,Er=0,zr=0,Wr=0,oa=0;J=m=J-336|0,T=c,Z=65535&f,O=a,E=65535&s,QA=-2147483648&(s^f);A:{if(!((hA=f>>>16&32767)-32767>>>0>4294934529&(AA=s>>>16&32767)-32767>>>0>=4294934530)){if(!(!a&(0|(p=2147483647&s))==2147418112?!(t|r):p>>>0<2147418112)){cA=a,QA=32768|s;break A}if(!(!c&(0|(s=2147483647&f))==2147418112?!(i|o):s>>>0<2147418112)){cA=c,QA=32768|f,t=i,r=o;break A}if(!(t|a|2147418112^p|r)){if(!(i|c|2147418112^s|o)){t=0,r=0,QA=2147450880;break A}QA|=2147418112,t=0,r=0;break A}if(!(i|c|2147418112^s|o)){t=0,r=0;break A}if(!(t|a|r|p)){cA=(t=!(i|c|s|o))?0:cA,QA=t?2147450880:QA,t=0,r=0;break A}if(!(i|c|s|o)){QA|=2147418112,t=0,r=0;break A}(0|p)==65535|p>>>0<65535&&(f=a=!(E|O),p=a?t:O,c=a<<=6,ta(m+320|0,t,r,O,E,(a=a+((0|(f=YA(f?r:E)))==32?YA(p)+32|0:f)|0)-15|0),WA=16-a|0,O=A[m+328>>2],E=A[m+332>>2],r=A[m+324>>2],t=A[m+320>>2]),s>>>0>65535||(c=a=!(T|Z),f=a?i:T,s=a<<=6,ta(m+304|0,i,o,T,Z,(a=a+((0|(c=YA(c?o:Z)))==32?YA(f)+32|0:c)|0)-15|0),WA=(a+WA|0)-16|0,T=A[m+312>>2],Z=A[m+316>>2],i=A[m+304>>2],o=A[m+308>>2])}if(ze=s=65536|Z,At=T,p=s<<15|(a=T)>>>17,Kr(m+288|0,a=s=a<<15|o>>>17,c=p,0,0,f=0-a|0,p=1963258675-(p+!!(0|a)|0)|0,0,0),Kr(m+272|0,0-(a=A[m+296>>2])|0,0-(A[m+300>>2]+!!(0|a)|0)|0,0,0,f,p,0,0),Kr(m+256|0,f=(a=A[m+280>>2])<<1|A[m+276>>2]>>>31,a=A[m+284>>2]<<1|a>>>31,0,0,s,c,0,0),Kr(m+240|0,f,a,0,0,0-(p=A[m+264>>2])|0,0-(A[m+268>>2]+!!(0|p)|0)|0,0,0),Kr(m+224|0,p=(f=A[m+248>>2])<<1|A[m+244>>2]>>>31,a=A[m+252>>2]<<1|f>>>31,0,0,s,c,0,0),Kr(m+208|0,p,a,0,0,0-(f=A[m+232>>2])|0,0-(A[m+236>>2]+!!(0|f)|0)|0,0,0),Kr(m+192|0,f=(a=A[m+216>>2])<<1|A[m+212>>2]>>>31,a=A[m+220>>2]<<1|a>>>31,0,0,s,c,0,0),Kr(m+176|0,f,a,0,0,0-(p=A[m+200>>2])|0,0-(A[m+204>>2]+!!(0|p)|0)|0,0,0),Kr(m+160|0,f=s,a=c,0,0,c=(T=(s=A[m+184>>2])<<1|A[m+180>>2]>>>31)-1|0,s=(A[m+188>>2]<<1|s>>>31)-!T|0,0,0),Kr(m+144|0,i<<15,o<<15|i>>>17,0,0,a=c,s,0,0),vA=m+112|0,le=A[m+168>>2],c=A[m+172>>2],I=(T=A[m+160>>2])+(f=A[m+152>>2])|0,p=(Z=A[m+164>>2])+A[m+156>>2]|0,f=p=f>>>0>I>>>0?p+1|0:p,p=(p=(0|Z)==(0|p)&I>>>0<T>>>0|p>>>0<Z>>>0)>>>0>(Z=p+le|0)>>>0?c+1|0:c,Kr(vA,a,s,0,0,0-(c=(T=!f&I>>>0>1|!!(0|f))+Z|0)|0,0-(!!(0|c)+(p=T>>>0>c>>>0?p+1|0:p)|0)|0,0,0),Kr(m+128|0,1-I|0,0-((I>>>0>1)+f|0)|0,0,0,a,s,0,0),pr=(AA-hA|0)+WA|0,vA=s=A[m+116>>2],T=(a=A[m+112>>2])<<1,AA=p=s<<1|a>>>31,a=p,Me=c=A[m+140>>2],a=a+(p=c<<1|(s=A[m+136>>2])>>>31)|0,s=a=(c=(f=s<<1|A[m+132>>2]>>>31)+T|0)>>>0<f>>>0?a+1|0:a,re=a=a-(c>>>0<13927)|0,le=a,hr=p=65536|E,yr=O,zr=(a=O)<<1,Wr=p=p<<1|a>>>31,ft=p,Nt=a=bt(re,I=0,p,0),KA=p=$,WA=t<<1,hA=a=r<<1|t>>>31,Z=p=0,re=(0|s)==(0|re)&(f=c-13927|0)>>>0<c>>>0|s>>>0>re>>>0,s=(0|s)==(0|AA)&c>>>0<T>>>0|s>>>0<AA>>>0,a=A[m+120>>2],p=c=A[m+124>>2]<<1|a>>>31,p=(a=(I=Me>>>31|0)+(a=a<<1|vA>>>31)|0)>>>0<I>>>0?p+1|0:p,I=(c=a)>>>0>(a=a+s|0)>>>0?p+1|0:p,I=(s=a)>>>0>(a=a+re|0)>>>0?I+1|0:I,s=a-1|0,p=bt(hA,Z,re=I-!a|0,AA=0),c=$+KA|0,vA=(0|KA)==(0|(c=(a=p+Nt|0)>>>0<p>>>0?c+1|0:c))&a>>>0<Nt>>>0|c>>>0<KA>>>0,Me=s,s=bt(s,p=0,at=(Er=r>>>31|0)|O<<1,KA=0),p=$+c|0,I=0,T=p=s>>>0>(O=s+a|0)>>>0?p+1|0:p,I=(s=a=(0|p)==(0|c)&a>>>0>O>>>0|c>>>0>p>>>0)>>>0>(a=a+vA|0)>>>0?1:I,s=bt(ft,Z,re,AA),p=$+I|0,vA=a=s+a|0,a=a>>>0<s>>>0?p+1|0:p,s=bt(ft,Z,Me,KA),E=$,c=s,s=bt(at,KA,re,AA),p=$+E|0,s=p=s>>>0>(I=c+s|0)>>>0?p+1|0:p,a=a+(p=(0|E)==(0|p)&c>>>0>I>>>0|p>>>0<E>>>0)|0,vA=E=vA+s|0,E=a=E>>>0<s>>>0?a+1|0:a,p=I+T|0,s=p=(a=(s=0)+O|0)>>>0<s>>>0?p+1|0:p,c=(0|p)==(0|T)&a>>>0<O>>>0|p>>>0<T>>>0,p=E,I=c,Kt=c=c+vA|0,I=p=I>>>0>c>>>0?p+1|0:p,vA=a,E=a,O=s,Nt=f,a=bt(f,0,at,KA),c=$,s=a,f=bt(le,cA,hA,cA),p=$+c|0,f=(0|c)==(0|(p=(a=a+f|0)>>>0<f>>>0?p+1|0:p))&a>>>0<s>>>0|c>>>0>p>>>0,c=p,s=bt(Me,KA,er=-2&WA,0),p=$+p|0,s=p=s>>>0>(T=s+a|0)>>>0?p+1|0:p,a=(0|p)==(0|c)&a>>>0>T>>>0|c>>>0>p>>>0,c=0,a=((f=a+f|0)>>>0<a>>>0?1:c)+O|0,p=I,f=a=(E=f+E|0)>>>0<f>>>0?a+1|0:a,c=a=(0|a)==(0|O)&E>>>0<vA>>>0|a>>>0<O>>>0,oa=a=a+Kt|0,vA=p=c>>>0>a>>>0?p+1|0:p,a=bt(ft,Z,Nt,cA),Kt=$,ft=a,c=bt(re,AA,er,cA),p=$+Kt|0,O=a=a+c|0,I=a+(Z=bt(le,cA,at,KA))|0,a=(c=a>>>0<c>>>0?p+1|0:p)+$|0,a=I>>>0<Z>>>0?a+1|0:a,AA=I,Z=I+(p=bt(hA,cA,Me,KA))|0,I=$+a|0,at=(0|a)==(0|(I=p>>>0>Z>>>0?I+1|0:I))&Z>>>0<AA>>>0|a>>>0>I>>>0,p=((a=(a=(a=(0|a)==(0|c)&O>>>0>AA>>>0|a>>>0<c>>>0)+(p=(0|c)==(0|Kt)&O>>>0<ft>>>0|c>>>0<Kt>>>0)|0)+at|0)|(Me=0))+f|0,O=p=(c=I)>>>0>(AA=c+E|0)>>>0?p+1|0:p,a=(0|f)==(0|p)&E>>>0>AA>>>0|f>>>0>p>>>0,p=vA,c=a,Me=a=a+oa|0,f=p=c>>>0>a>>>0?p+1|0:p,a=bt(le,cA,er,cA),le=$,E=a,c=bt(hA,cA,Nt,cA),p=$+le|0,c=(0|(p=(a=a+c|0)>>>0<c>>>0?p+1|0:p))==(0|le)&a>>>0<E>>>0|p>>>0<le>>>0,E=p,a=p+T|0,p=(c|(vA=0))+s|0,E=(0|s)==(0|(p=a>>>0<E>>>0?p+1|0:p))&a>>>0<T>>>0|s>>>0>p>>>0,I=(c=p)+(p=Z)|0,p=0,p=((s=a=(0|c)==(0|(I=(T=(Z=0)+a|0)>>>0<Z>>>0?I+1|0:I))&a>>>0>T>>>0|c>>>0>I>>>0)>>>0>(a=a+E|0)>>>0?1:p)+O|0,I=f,s=p=(s=a)>>>0>(a=a+AA|0)>>>0?p+1|0:p,f=I=(f=c=(0|O)==(0|p)&a>>>0<AA>>>0|p>>>0<O>>>0)>>>0>(c=c+Me|0)>>>0?I+1|0:I,(0|I)==131071|I>>>0<131071?(yr=zr|Er,hr=KA|Wr,Kr(m+80|0,a,s,c,f,i,o,At,ze),Z=I=A[m+84>>2],p=t<<17,O=(r=(T=0)-(E=A[m+88>>2])|0)-(I=!!(I|(t=A[m+80>>2])))|0,E=(p-(A[m+92>>2]+(E>>>0>T>>>0)|0)|0)-(r>>>0<I>>>0)|0,T=0-t|0,Z=0-(!!(0|t)+Z|0)|0,t=pr+16382|0):(Kr(m+96|0,a=(1&s)<<31|a>>>1,s=c<<31|s>>>1,c=(1&f)<<31|c>>>1,f=f>>>1|0,i,o,At,ze),hA=O=A[m+100>>2],O=(T=0-(WA=A[m+104>>2])|0)-(E=!!(O|(I=A[m+96>>2])))|0,E=((t<<16)-(A[m+108>>2]+(Z>>>0<WA>>>0)|0)|0)-(E>>>0>T>>>0)|0,T=0-I|0,Z=0-(!!(0|I)+hA|0)|0,WA=t,hA=r,t=pr+16383|0),(0|t)>=32767)QA|=2147418112,t=0,r=0;else{if((0|t)>0)I=E<<1|O>>>31,O=O<<1|Z>>>31,E=I,WA=c,hA=65535&f|t<<16,I=Z<<1|T>>>31,f=T<<1;else{if((0|t)<=-113){t=0,r=0;break A}Ha(m- -64|0,a,s,c,f,1-t|0),ta(m+48|0,WA,hA,yr,hr,t+112|0),Kr(m+32|0,i,o,At,ze,a=A[m+64>>2],s=A[m+68>>2],WA=A[m+72>>2],hA=A[m+76>>2]),t=A[m+40>>2],T=(r=A[m+56>>2])-(O=t<<1|(I=A[m+36>>2])>>>31)|0,E=A[m+60>>2]-((A[m+44>>2]<<1|t>>>31)+(r>>>0<O>>>0)|0)|0,p=(t=A[m+32>>2])<<1,O=T-(t=(0|(c=I<<1|t>>>31))==(0|(f=A[m+52>>2]))&p>>>0>(r=A[m+48>>2])>>>0|c>>>0>f>>>0)|0,E=E-(t>>>0>T>>>0)|0,I=f-((r>>>0<p>>>0)+c|0)|0,f=r-p|0}t=f,Kr(m+16|0,i,o,At,ze,3,0,0,0),Kr(m,i,o,At,ze,5,0,0,0),c=I+(r=0)|0,c=f>>>0>(t=t+(p=1&a)|0)>>>0?c+1|0:c,f=t,o=(0|o)==(0|c)&t>>>0>i>>>0|o>>>0<c>>>0,I=E,t=(0|r)==(0|c)&t>>>0<p>>>0|r>>>0>c>>>0,p=s,r=p=(r=t=(t=(0|(I=t>>>0>(i=t+O|0)>>>0?I+1|0:I))==(0|ze))&(0|i)==(0|At)?o:t&i>>>0>At>>>0|I>>>0>ze>>>0)>>>0>(t=t+a|0)>>>0?p+1|0:p,a=(0|s)==(0|p)&t>>>0<a>>>0|s>>>0>p>>>0,p=hA,p=(s=a)>>>0>(a=a+WA|0)>>>0?p+1|0:p,o=a,E=(0|(s=A[m+20>>2]))==(0|c)&uA[m+16>>2]<f>>>0|s>>>0<c>>>0,s=A[m+28>>2],s=p>>>0<2147418112&((0|(a=A[m+24>>2]))==(0|i)&(0|s)==(0|I)?E:(0|s)==(0|I)&a>>>0<i>>>0|s>>>0<I>>>0),a=r,p=(r=t=(0|r)==(0|(a=(E=s)>>>0>(s=t+s|0)>>>0?a+1|0:a))&t>>>0>s>>>0|r>>>0>a>>>0)>>>0>(t=t+o|0)>>>0?p+1|0:p,o=t,c=(0|(r=A[m+4>>2]))==(0|c)&uA[m>>2]<f>>>0|r>>>0<c>>>0,r=A[m+12>>2],r=I=(r=t=p>>>0<2147418112&((0|(t=A[m+8>>2]))==(0|i)&(0|r)==(0|I)?c:(0|r)==(0|I)&t>>>0<i>>>0|r>>>0<I>>>0))>>>0>(t=t+s|0)>>>0?a+1|0:a,s=(0|a)==(0|I)&t>>>0<s>>>0|a>>>0>I>>>0,a=p,i=s,cA|=s=s+o|0,QA|=a=i>>>0>s>>>0?a+1|0:a}}A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=cA,A[e+12>>2]=QA,J=m+336|0}function Ar(e,t,r,a,s){var i,o,c,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0;if(J=o=J-80|0,c=A[r+8>>2],!s|!M[r+4>>1]||(A[s+8>>2]=0),i=je(a,0,152),A[i+44>>2]=l[c+14|0],A[i+40>>2]=l[c+15|0],a=M[c+8>>1]){for(a=A[34459]+(a<<1)|0,cA=256&t,hA=r+32|0,WA=r-32|0,KA=r- -64|0,re=r+96|0,le=r+-64|0,Me=r-28|0,ze=1&t,At=r-24|0,vA=A[30450];;){f=15&(E=(t=M[a>>1])>>>8|0);A:{e:{r:{s:{i:{c:{o:{u:{l:{n:{p:{C:switch(0|(p=t>>>12|0)){case 10:break o;case 9:break u;case 6:break l;case 2:case 3:break n;case 1:break p;case 0:break C;case 11:case 12:case 13:case 14:case 15:break c;default:break i}m=255&t;C:{m:{b:switch(0|f){case 13:if(m)break m;f=a,t=0;break C;case 0:switch(f=a,m-1|0){case 1:break A;case 0:break e}A[o+20>>2]=Qn(o+75|0,A[c>>2]),A[o+16>>2]=t,fr(vA,85851,o+16|0);break A;case 5:if(l[A[144464+(l[r+34|0]<<2)>>2]+11|0]!=2)break A;A[i+20>>2]=m;break A;case 12:break b;default:break s}A[i+44>>2]=A[i+44>>2]+(t<<24>>31&-256|m);break A}g[i+132|0]=l[a+3|0],f=a+2|0,g[i+133|0]=l[0|f],t=2,m>>>0<3||(g[i+134|0]=l[a+5|0],f=a+4|0,g[i+135|0]=l[0|f],t=4,m>>>0<5||(g[i+136|0]=l[a+7|0],f=a+6|0,g[i+137|0]=l[0|f],t=6,m>>>0<7||(g[i+138|0]=l[a+9|0],f=a+8|0,g[i+139|0]=l[0|f],t=8,m>>>0<9||(g[i+140|0]=l[a+11|0],f=a+10|0,g[i+141|0]=l[0|f],t=10,m>>>0<11||(g[i+142|0]=l[a+13|0],f=a+12|0,g[i+143|0]=l[0|f],t=12,m>>>0<13||(g[i+144|0]=l[a+15|0],f=a+14|0,g[i+145|0]=l[0|f],t=14,m>>>0<15||(g[i+146|0]=l[a+17|0],f=a+16|0,g[i+147|0]=l[0|f],t=16)))))))}g[132+(t+i|0)|0]=0,m=O;break e}if(!e|f>>>0>7||(p=r,l[A[144464+(l[r+2|0]<<2)>>2]+11|0]!=2&&(p=hA,l[A[144464+(l[r+34|0]<<2)>>2]+11|0]!=2))||!(1&(f=A[e+56>>2]))&&16&l[0|r])break A;m=15&l[p+3|0],m=2&f&&l[p+6|0]<=m>>>0?4:m;p:{C:{m:{b:switch((f=7&E)-3|0){case 1:break C;case 0:break b;default:break m}if(m>>>0>3)break p;break A}if(A[102832+(f<<2)>>2]>(0|m))break p;break A}if(l[p+6|0]>m>>>0)break A}A[i+8>>2]=255&t,m=1;break r}if((57344&t)==8192){for(at=A[32972],E=1,QA=0;;){I=255&t,f=(T=4095&t)>>>8|0;n:if(T>>>0<=3583){(0|(m=(f>>>0)%7|0))==6&&(m=M[a+2>>1]),AA=0,f=r;p:{C:{m:switch(0|m){case 6:if(p=0,M[r+36>>1]|M[r+68>>1])break n;case 3:f=KA;break C;case 9:if(p=0,M[r+36>>1]|M[r+68>>1])break n;if(f=re,!M[r+100>>1])break p;break n;case 7:if(p=0,M[r+36>>1])break n;for(m=1;;){if(l[A[144464+(l[2+(f=(m<<5)+r|0)|0]<<2)>>2]+11|0]==2)break C;if(M[4+(((m=m+1|0)<<5)+r|0)>>1])break}break n;case 5:if(p=0,M[r+4>>1])break n;case 0:AA=1,f=WA;break C;case 4:if(p=0,M[r+36>>1])break n;case 2:f=hA;break C;case 8:if(p=0,!s)break n;if(AA=1,A[(f=s)+8>>2])break p;break n;case 10:break m;default:break C}if(p=0,M[r+4>>1]|M[Me>>1])break n;AA=1,f=le;break p}C:switch(0|m){case 0:case 5:break C;default:break p}f=(l[f+2|0]==1?-32:0)+f|0}if(cA?(m=A[144464+(l[f+2|0]<<2)>>2],A[f+8>>2]=m):m=A[f+8>>2],T>>>0<=1791){if(p=1,A[A[144464+(I<<2)>>2]>>2]==A[m>>2])break n;if(!(!AA|l[m+11|0]!=2)){p=(0|I)==l[m+13|0];break n}p=(0|I)==l[m+12|0];break n}I=31&T,p=0;p:switch(T>>>5&7){case 0:p=(0|I)==l[m+11|0];break n;case 1:p=(0|I)==(15&M[m+6>>1]);break n;case 2:p=A[m+4>>2]>>>I&1;break n;case 4:break p;default:break n}p:switch(0|I){case 0:case 1:case 2:case 3:case 4:if(l[A[144464+(l[f+2|0]<<2)>>2]+11|0]!=2){if(l[A[144464+(l[f+34|0]<<2)>>2]+11|0]!=2)break n;f=f+32|0}m=15&l[f+3|0],m=!e|!(2&l[e+56|0])?m:l[f+6|0]<=m>>>0?4:m;C:{switch(I-3|0){case 1:p=l[f+6|0]<=m>>>0;break n;case 0:if(p=1,m>>>0<=3)break C;break n}if(p=1,A[102832+(I<<2)>>2]>(0|m))break n}p=0;break n;case 17:if(!l[m+11|0]){p=1;break n}p=(32&l[r+1|0])>>>5|0;break n;case 18:p=M[f+4>>1]!=0;break n;case 19:if(p=1,M[f+36>>1])break n;p=!l[A[f+40>>2]+11|0];break n;case 9:if(M[f+4>>1])break n;for(;;){if(p=!!(0|(m=12&l[f-29|0])),m)break n;if(M[4+(f=f-32|0)>>1])break}break n;case 10:p=l[m+11|0]!=2;break n;case 11:for(;;){if(p=!!(0|(m=M[f+36>>1])),m)break n;if(m=f,f=f+32|0,l[A[m+40>>2]+11|0]==2)break}break n;case 12:if(p=1,(254&l[m+11|0])==2)break n;p=(16&l[m+4|0])>>>4|0;break n;case 13:for(;p=(l[A[f+8>>2]+11|0]==2)+p|0,m=M[f+4>>1],f=f-32|0,!m;);p=(0|p)==1;break n;case 14:for(;p=(l[A[f+8>>2]+11|0]==2)+p|0,m=M[f+4>>1],f=f-32|0,!m;);p=(0|p)==2;break n;case 16:break p;default:break n}p=(16&l[0|f])>>>4|0}else if(p=0,(0|f)==15){p:switch(I-1|0){case 0:p=ze;break n;case 1:break p;default:break n}p=A[at+132>>2]!=0}n:if(1970>>>(f=(m=65535&t)>>>12|0)&1)f=g[f+102848|0];else{switch(0|f){case 0:if(f=1,(3840&m)!=3328)break n;f=1+(1+(255&m)>>>1|0)|0;break n;case 6:f=(m>>>9&7)-5>>>0<2?12:1;break n;case 2:case 3:f=(0|(f=3840&m))==3328||(0|f)==1536?2:1;break n}f=4,(m=M[a+4>>1])>>>0>61439||(f=(0|m)==2?3:2)}if(a=((f=M[(a=(f<<1)+a|0)>>1]==3)<<1)+a|0,f^=p,E=QA?f|E:f&E,QA=4096&t,(57344&(t=M[a>>1]))!=8192)break}if(!(1&E))if((63488&t)!=26624){n:if(1970>>>(f=t>>>12|0)&1)f=g[f+102848|0];else{switch(0|f){case 0:if(f=1,(3840&t)!=3328)break n;f=1+(1+(255&t)>>>1|0)|0;break n;case 6:f=(t>>>9&7)-5>>>0<2?12:1;break n;case 2:case 3:f=(0|(t&=3840))==3328||(0|t)==1536?2:1;break n}f=4,(t=M[a+4>>1])>>>0>61439||(f=(0|t)==2?3:2)}a=(((65024&M[(t=(f<<1)+a|0)>>1])==24576)<<1)+t|0}else a=((255&t)<<1)+a|0}f=a-2|0,m=O;break e}l:switch(f>>>1|0){case 0:a=(((255&t)<<1)+a|0)-2|0;break A;case 5:A[i>>2]=2|A[i>>2],((t=l[A[r+40>>2]+12|0])-28&255)>>>0<=5&&(f=M[4+(t=((t<<2)+a|0)-112|0)>>1],t=M[t+2>>1],A[i+96>>2]=t>>>4<<24>>24,A[i+76>>2]=(15&t)<<18|f<<2),a=a+24|0;break A;case 6:break l;default:break A}((t=l[A[At>>2]+13|0])-28&255)>>>0<=5&&(f=M[4+(t=((t<<2)+a|0)-112|0)>>1],t=M[t+2>>1],A[i+100>>2]=t>>>4<<24>>24,A[i+80>>2]=(15&t)<<18|f<<2),a=a+24|0;break A}t=M[(a=a+2|0)>>1]|t<<16&983040;u:switch(f-1|0){case 0:if((0|Z)>9)break A;A[(o+32|0)+(Z<<2)>>2]=a,a=(A[34459]+(t<<1)|0)-2|0,Z=Z+1|0;break A;case 1:A[i+124>>2]=t;break A;case 2:break u;default:break A}A[i+128>>2]=t;break A}A[108+(f=(((0|f)!=1)<<3)+i|0)>>2]=M[a+2>>1]|(255&t)<<16,t=M[a+4>>1]<<16,a=a+6|0,A[f+112>>2]=t|M[a>>1];break A}if(m=M[(f=a+2|0)>>1],T=t>>>4|0,A[88+(E=((I=p-11|0)<<2)+i|0)>>2]=255&T,A[E+68>>2]=t<<18&3932160|m<<2,(0|(a=M[a+4>>1]))==2){a=f;break A}if(m=t>>>0<=53247?a>>>0>61439?2:1:O-((0|I)==4)|0,p-13>>>0>1)break e;A[E+88>>2]=T<<24>>24;break e}A[o+4>>2]=Qn(o+75|0,A[c>>2]),A[o>>2]=t,fr(vA,85851,o);break A}A[4+((f<<2)+i|0)>>2]=m,m=cA&&(0|f)==1?1:O}f=a}(0|m)!=1|(0|Z)<=0?(a=f,O=m):(a=A[(o+32|0)+((Z=Z-1|0)<<2)>>2],O=0)}if(a=a+2|0,(0|O)==1)break}!s|l[r+17|0]!=2||(e=A[r+4>>2],A[s>>2]=A[r>>2],A[s+4>>2]=e,e=A[r+28>>2],A[s+24>>2]=A[r+24>>2],A[s+28>>2]=e,e=A[r+20>>2],A[s+16>>2]=A[r+16>>2],A[s+20>>2]=e,e=A[r+12>>2],A[s+8>>2]=A[r+8>>2],A[s+12>>2]=e),g[r+23|0]=A[i+44>>2],(e=A[i+68>>2])?(A[r+24>>2]=e,e=i+88|0):(A[r+24>>2]=A[i+72>>2],e=i+92|0),A[r+28>>2]=A[e>>2]}J=o+80|0}function Aa(e,t,r,a,s,i){var o,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0;J=o=J-848|0;A:if(!(!A[e+104>>2]|8&l[s+2|0]|A[47202]==193)){for(A[a>>2]=0,A[33272]=0,A[33274]=i,g[o+192|0]=0,A[33273]=o+192;p=(i=p)+1|0,g[0|(hA=t+i|0)]-48>>>0<10;);A[56798]=0,KA=o+188|0,E=-2147483648,J=cA=J-16|0;e:if(c=l[0|t]){I=t;r:{for(;;){if(!((0|(c=c<<24>>24))==32|c-9>>>0<5))break r;if(c=l[I+1|0],I=I+1|0,!c)break}break e}r:switch((c=l[0|I])-43|0){case 0:case 2:break r;default:break e}Z=(0|c)==45?-1:0,I=I+1|0}else I=t;for(;c=-48,(((T=g[0|I])-48&255)>>>0<10||(c=-87,(T-97&255)>>>0<26||(c=-55,!((T-65&255)>>>0>25))))&&!((0|(T=c+T|0))>=10);)Kr(cA,10,0,0,0,O,AA,0,0),c=1,A[cA+8>>2]|A[cA+12>>2]||(QA=bt(O,AA,10,0),(0|(WA=$))==-1&~T>>>0<QA>>>0||(c=WA,AA=(O=T+QA|0)>>>0<T>>>0?c+1|0:c,vA=1,c=m)),I=I+1|0,m=c;KA&&(A[KA>>2]=vA?I:t);e:{r:{if(m)A[56798]=68,O=-2147483648,AA=0;else if(!AA&O>>>0<2147483648)break r;if(!Z){A[56798]=68,E=2147483647;break e}if(!(!AA&O>>>0<=2147483648)){A[56798]=68;break e}}E=(Z^O)-Z|0}if(J=cA+16|0,Z=E,!(A[56798]|A[o+188>>2]==(0|t))){e:{r:{s:{if(!(!((0|(T=64&l[e+109|0]?4:3))!=(0|i)|A[e+124>>2]!=g[t-2|0])&g[t-3|0]-48>>>0<10)){i:{if(A[e+124>>2]!=32){if(!(16&l[e+105|0]))break s;if((0|i)==3)break i;break s}if((0|i)!=3)break s}if(4&l[s+2|0]|g[t-2|0]-48>>>0>=10)break s}g[133104]=0,g[o+288|0]=0,re=1;break r}if(g[133104]=0,A[33275]=0,g[o+288|0]=0,le=1,vA=0,l[0|t]==48)break e}vA=pa(e,t,hA,s,0)}l[0|hA]!=46|g[t+p|0]-48>>>0<10|1&g[s+13|0]|g[hA+2|0]-48>>>0<10||(g[0|hA]=0);e:if(!vA||(QA=1,A[e+212>>2]==26741)){if(E=o+256|0,A[o+844>>2]=E,f=p,64&l[s+1|0]&&(g[o+256|0]=45,E=o+256|1,A[o+844>>2]=E,f=i+2|0),I=l[t+f|0]){for(;!((255&I)==32|(0|f)>28)&&(c=A[o+844>>2],A[o+844>>2]=c+1,g[0|c]=I,I=l[(f=f+1|0)+t|0]););E=A[o+844>>2]}if(g[0|E]=0,QA=1,c=g[o+256|0]){if(!(m=A[e+136>>2])||vr(o+256|0,m)){if(c-48>>>0<10||(A[o+176>>2]=o+256,De(c=o+800|0,88653,o+176|0),!Re(e,c,133104)))break e;A[a>>2]=128|A[a>>2],A[o+160>>2]=o+256,De(c=o+800|0,88773,o+160|0),Re(e,c,133116),QA=0}vA=2}}KA=A[s>>2],g[o+352|0]=0,g[o+624|0]=0;e:{r:{s:if(!(!le|l[0|t]!=48||(0|(c=g[t+1|0]))==32|(0|c)==A[e+128>>2])){i:{if((0|i)==2){if(l[t+3|0]!=58|g[t+5|0]-48>>>0>=10||!((0|(c=g[t+7|0]))==32|c-9>>>0<5))break i;break s}if((0|i)>3)break r}if(l[0|t]==48&&!((0|(c=i-1|0))<=0))for(f=0;;){if(Re(e,88875,He(m=o+288|0)+m|0),l[(f=f+1|0)+t|0]!=48)break s;if(!((0|c)>(0|f)))break}}s:{i:{if(!((0|(c=g[0|hA]))==32&&16&l[e+105|0])){if(WA=2,O=i+2|0,(0|c)==A[e+124>>2])break i;AA=1,E=0,c=0;break s}WA=1,O=i+2|0}if(4&l[s+14|0])E=1,c=0,AA=1;else for(c=0,I=1,f=i,AA=1;;){m=c,c=I,I=(cA=f+WA|0)+t|0,f=0;i:{for(;;){if(E=1,!(g[f+I|0]-48>>>0>=10)){if((0|T)!=(0|(f=f+1|0)))continue;break i}break}c=m;break s}if(g[I+T|0]-48>>>0<10){c=m;break s}if(f=0,g[I-1|0]-48>>>0<10){c=m;break s}i:{for(;;){if(l[(f+cA|0)+t|0]==48){if((0|T)!=(0|(f=f+1|0)))continue;break i}break}AA=0}if((0|(m=g[(f=T+cA|0)+t|0]))!=A[e+124>>2]&(!(16&l[e+105|0])|(0|m)!=32))break s;if(O=f+2|0,4&l[2+(P(I=c+1|0,12)+s|0)|0])break}}f=!Z;s:if(!(!AA|!(64&l[1+(P(c,12)+s|0)|0])|A[e+212>>2]!=26741)){i:switch(l[0|(m=t+O|0)]-97|0){case 0:case 4:break i;default:break s}i:{c:{o:{u:switch((I=l[m+1|0])-116|0){case 6:break s;case 1:case 2:case 3:case 4:case 5:break c;case 0:break u;default:break o}if(l[m+2|0]!=116)break i;break s}if((0|I)==32)break s}if(!(!!((0|Z)%1e3|0)&(0|c)!=1)&&(0|I)==108)break s}A[33274]=1|A[33274]}O=32768&KA,f&=re;s:if(A[e+128>>2]!=g[0|hA]|g[t+p|0]-48>>>0>=10){i:{if(!f){if(f=0,m=1,!((0|c)>0&E))break i;Z=(p=Is(e,Z,c,AA,o+624|0))?0:Z,f=!!(0|p),I=0;break s}f=1,Z=0,A[33275]==1&&(A[o+144>>2]=c+1,De(p=o+800|0,89026,o+144|0),Re(e,p,o+688|0)||(A[o+128>>2]=c,De(p=o+800|0,89026,o+128|0),Re(e,p,o+624|0)))}m=1,I=0}else Re(e,88882,o+624|0),m=0,I=256;E=O?2:vA;s:{if(c|l[o+624|0]|l[0|hA]!=46){if(c)break s}else Re(e,89192,o+624|0);if(A[o+844>>2]=t,g[t+1|0]-48>>>0<10)for(;p=A[o+844>>2],A[o+844>>2]=p+1,g[p+2|0]-48>>>0<10;);if(g[A[o+844>>2]-1|0]-48>>>0>=10||(A[o+416>>2]=A[o+844>>2]-1,kr(e,o+416|0,o+192|0,a,4,s)&&(A[33272]=2)),l[o+192|0]|l[A[o+844>>2]]==48||kr(e,o+844|0,o+192|0,a,4,s)&&(A[33272]=1),le){if(!E&m&&(A[o+112>>2]=Z,De(s=o+800|0,89214,o+112|0),Re(e,s,r)))break e;if(1&g[e+110|0]){for(p=t;(32|l[0|p])!=32;)p=p+1|0;A[o+416>>2]=p,l[p+1|0]==37&&(Re(e,89328,r),s=He(r),g[A[o+416>>2]+1|0]=32,r=r+s|0)}}}cs(e,Z,o+416|0,f,c,E|I|re),!(2&l[e+109|0])|(0|c)<=0?(A[o+60>>2]=15,A[o- -64>>2]=o+624,A[o+56>>2]=o+416,A[o+52>>2]=o+352,A[o+48>>2]=o+288,De(r,89415,o+48|0)):(A[o+88>>2]=15,A[o+96>>2]=o+416,A[o+92>>2]=o+352,A[o+84>>2]=o+624,A[o+80>>2]=o+288,De(r,89346,o+80|0));s:if(!m)for(;;){for(i=i+1|0,m=0;m=(p=m)+1|0,g[(c=i+p|0)+t|0]-48>>>0<10;);s=2;i:{c:{o:{u:{l:{n:switch((m=57344&A[e+104>>2])-8192>>>13|0){case 6:break c;case 2:break o;case 0:case 4:case 5:break u;case 1:break l;case 3:break n;default:break i}s=5}if((0|(m=l[0|(f=t+i|0)]))==48)for(;Re(e,88875,c=o+688|0),na(r,c),p=p-1|0,(0|(m=l[0|(f=(i=i+1|0)+t|0)]))==48;);if((0|s)<(0|p)|(m<<24>>24)-48>>>0>=10)break i;s=o+688|0,cs(e,Hs(f),s,0,0,0),na(r,s),i=i+p|0;break i}if(cs(e,Hs(s=t+i|0),o+416|0,0,0,0),!((0|m)==8192&l[0|s]!=48)){if(A[o+16>>2]=p,De(s=o+800|0,89508,o+16|0),!Re(e,s,o+688|0))break i;na((0|m)==49152?r:o+416|0,o+688|0)}na(r,o+416|0),i=c;break i}if((0|p)>4||l[0|(s=t+i|0)]==48)break i;cs(e,i=Hs(s),s=o+688|0,0,0,0),na(r,s),i=c;break i}if(!((0|p)<=1))for(;;){if(A[o+32>>2]=g[t+i|0],De(s=o+800|0,89575,o+32|0),!Re(e,s,o+688|0))break i;if(na(r,o+688|0),i=i+1|0,!((0|(p=p-1|0))>1))break}}i:if(!((m=l[0|(p=t+i|0)])-48>>>0>=10||He(r)>>>0>=190))for(;;){if(s=o+688|0,Za(e,g[0|p]-48|0,0,2,s),c=He(r),A[o>>2]=15,A[o+4>>2]=s,De(r+c|0,89594,o),(m=l[0|(p=(i=i+1|0)+t|0)])-48>>>0>=10)break i;if(!(He(r)>>>0<=189))break}if(Re(e,89678,o+688|0)&&na(r,o+688|0),A[e+128>>2]!=(0|m)|g[1+(t+i|0)|0]-48>>>0>=10)break s;Re(e,88882,s=o+688|0),na(r,s)}if(!(s=l[0|r])|(0|s)==21||(s=Gt(o+184|0,t=1+(t+i|0)|0),i=A[o+184>>2],!(2&l[e+106|0])|(0|i)!=32||(Gt(o+184|0,t+s|0),i=A[o+184>>2]),is(i)|AA||(e=He(r)+r|0,g[0|e]=11,g[e+1|0]=0)),A[a>>2]=-2147483648|A[a>>2],A[33275]=A[33275]-1,f=1,QA)break A;A[33264]=1;break A}A[a>>2]=-129&A[a>>2],f=0;break A}f=1}}return J=o+848|0,f}function It(e,t,r,a){var s,i,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0;if(J=s=J-416|0,vA=M[r+8>>1],O=l[r+10|0],64&(i=A[r>>2])){for(A[r>>2]=-65&i,g[199388]=1,f=A[47202],E=A[49846],p=A[47352],I=A[47351],m=A[47350];;){o=(c=A[198304+(I<<2)>>2])>>8;A:{e:switch((31&c)-9|0){case 0:f=o;break A;case 4:E=o;break A;case 3:break e;default:break A}p=c>>>0>=256?o+p|0:0}if(!(!(128&c)&(0|m)>(0|(I=I+1|0))))break}A[47352]=p,A[47351]=I,A[49846]=E,A[47202]=f}E=0;A:if(!((0|(o=A[49572]))>997)){if(1048576&i||!l[0|t])l[199388]&&(A[49572]=o+1,g[199388]=0,A[(e=190288+(o<<3)|0)>>2]=983042,A[e+4>>2]=0),g[189088]=0;else if(!((0|o)>990)){(0|(o=A[e+8224>>2]))>0&&(A[e+8224>>2]=o-1),f=512&i?a:a+4|0,p=(240&A[47202])==16,(cA=2&i)&&((0|(c=A[47200]))<3||(0|(o=A[47350]))>243||(l[199388]&&(A[(I=198300+(o<<2)|0)>>2]=-129&A[I>>2]),A[47350]=o+1,g[199388]=1,QA=(0|c)==3?20:c,A[198304+(o<<2)>>2]=QA<<8|193)),m=p?f:a;e:{r:{if(!(8&i)){for(;a=l[(o=T)+t|0],g[o+(s+240|0)|0]=a,223&a&&(T=o+1|0,o>>>0<160););if(g[s+66|0]=0,T=s- -64|2,E=Se(A[47192],t,r,T),A[s+412>>2]=E,!(4096&E))break r;wt(t,s+240|0,o);break A}s:if(Ba(t,87276,3))zs(t,189088,s+240|0);else{if(I=0,223&(o=l[0|(T=t+3|0)]))for(;g[(s+240|0)+I|0]=Ht(o<<24>>24),I=I+1|0,223&(o=l[0|(T=T+1|0)]););g[(a=s+240|0)+I|0]=0,o=0;i:if(!((0|(r=A[34461]))<=0)){for(;;){if(!vr(a,P(o,44)+137856|0)){A[34457]=o;break i}if((0|r)==(0|(o=o+1|0)))break}o=r}if((0|(r=(0|r)==(0|o)?-1:o))<=0)break s;ia(r),g[189090]=0,g[189089]=r,g[189088]=21}E=-2147483648,A[s+412>>2]=-2147483648,a=-1;break e}if(!(!(8388608&E)|8&l[r+12|0])){for(J=p=J-208|0,I=A[e+60>>2],c=t;a=c,c=c+1|0,l[0|a]!=32;);Gt(p+204|0,c);r:if(is(A[p+204>>2])){f=qe(p,189088),c=(!(256&I)|(AA=Te(e,c,r+12|0,0))>>>15)&!(67108864&AA)&l[189088]!=21;s:{i:{if(512&I){if(!(c&!(16&l[r+12|0])))break i;break s}if(c)break s}qe(189088,f);break r}if(g[0|a]=45,A[r>>2]=-2&A[r>>2],E=0,c=189088,Z=Te(A[47192],t,r,0),A[s+412>>2]=Z,!((0|I)<=0)&&(f=l[189088])){for(;E=(l[A[144464+(f<<2)>>2]+11|0]==2)+E|0,f=l[0|(c=c+1|0)];);if(!((31&I)>=(0|E))){g[0|a]=32,A[s+412>>2]=Te(A[47192],t,r,0);break r}}A[s+412>>2]=128|(Z||AA),A[33264]=1}J=p+208|0}if(a=-1,l[189088]==21){if(I=qe(s+16|0,132848),p=A[s+412>>2],c=wt(t,s+240|0,o),f=s- -64|1,(0|(a=pn(l[189089]?189089:87315,188772,189296)))<0||(A[r>>2]=4194304|A[r>>2],l[s+66|0]?(b[s+64>>1]=8192,p=Te(A[47193],f,r,0)):p=Se(A[47193],c,r,T)),l[189088]==21&&(o=wt(c,s+240|0,o),(0|(a=pn(l[189089]?189089:87315,188772,189296)))<0||(A[r>>2]=4194304|A[r>>2],l[s+66|0]?(b[s+64>>1]=8192,p=Te(A[47193],f,r,0)):p=Se(A[47193],o,r,T)),E=4096,l[189088]==21))break A;A[s+412>>2]=p,(0|a)>=0||(g[189090]=0,b[94544]=3341,(0|a)==-1&&(qe(132848,I),ia(A[A[32972]+60>>2]),a=A[A[32972]+60>>2]))}E=A[s+412>>2],128&i||(m=268435456&E&&(0|m)<=1?1:m,!(256&E)|528&i|A[e+8224>>2]|2&l[r-11|0]||(A[e+8224>>2]=3,m=(0|m)<=4?4:m)),m=(0|m)<=0&&A[49846]>2?1:m}if(r=l[199388],!((0|m)<=0|(0|(T=A[49572]))>990)){A[49572]=T+1,c=1&r,r=0,b[(o=190288+(T<<3)|0)>>1]=c?2:0,g[o+7|0]=0,g[o+3|0]=0,c=m>>>0>1,g[o+2|0]=c?9:11,b[o+4>>1]=0,A[e+8236>>2]=0;e:if(!(!(o=c?m-2|0:0)|(0|(T=A[49572]))>990))for(f=e+8236|0;;){if(A[49572]=T+1,b[(c=190288+(T<<3)|0)>>1]=0,g[c+7|0]=0,g[c+3|0]=0,p=o>>>0>1,g[c+2|0]=p?9:11,b[c+4>>1]=0,A[f>>2]=0,T=A[49572],(0|(o=p?o-2|0:0))<=0)break e;if(!((0|T)<991))break}A[e+8228>>2]=0,A[e+8232>>2]=0}g[199388]=1&r,!cA|A[47200]!=1||(A[49572]=T+2,g[199388]=0,b[(o=190288+(T<<3)|0)>>1]=1&r?2:0,g[o+7|0]=0,b[o+2>>1]=10,b[o+4>>1]=0,b[o+12>>1]=0,A[o+8>>2]=1179648,g[o+15|0]=0,1&i&&rr(g[t+1|0])&&(r=l[199388],g[199388]=0,t=A[49572],A[49572]=t+2,b[(t=190288+(t<<3)|0)>>1]=r?2:0,g[t+7|0]=0,b[t+2>>1]=10,b[t+4>>1]=0,b[t+12>>1]=0,A[t+8>>2]=1179648,g[t+15|0]=0)),o=O>>>0<31;e:if(!((0|a)<0))if(t=A[49572],r=l[190290+((m=t-1|0)<<3)|0],l[189088]!=9|l[189089]!=21)(0|r)!=21&&(c=l[199388],g[199388]=0,g[7+(r=190288+(t<<3)|0)|0]=0,b[r+2>>1]=21,b[r+4>>1]=0,b[r>>1]=c?2:0,m=t),A[49572]=m+1,g[190295+(m<<3)|0]=a;else{if((0|r)!=21)break e;A[49572]=m}t=2047&vA,r=(o?O:31)<<11,p=(WA=128&i)?l[A[144464+(l[189088]<<2)>>2]+11|0]?189088:189089:189088,(m=l[0|p])|!(1&g[199388])||(m=23,g[0|p]=23,g[p+1|0]=0),KA=t|r,f=A[49572];e:if(m)if((0|f)>994)t=0;else for(Me=((-1610612736&E)==-2147483648)<<4,vA=KA+1|0,ze=e+8233|0,t=0,c=1,AA=0,re=1,O=-1,cA=-1,o=0;;){I=p+1|0;r:{if((0|(Z=255&m))!=255){if(r=A[144464+(Z<<2)>>2])break r;A[s>>2]=Z,J=r=J-16|0,A[r+12>>2]=s,Cs(132552,87474,s),J=r+16|0,f=A[49572]}if(!(m=l[0|I]))break e;if(p=I,(0|f)<995)continue;break e}r:if((0|(hA=255&m))!=21)if((0|(p=l[r+11|0]))!=1){switch(r=vA,hA-12|0){case 8:g[3+(r=190288+((O=f-1|0)<<3)|0)|0]=c,b[r>>1]=4|M[r>>1],r=o;break r;case 0:b[(r=190280+(f<<3)|0)>>1]=8|M[r>>1],r=o;break r;case 10:E|=16384,A[s+412>>2]=E,r=o;break r;case 3:break r}Z=l[199388],g[199388]=0,g[7+(r=190288+(hA=f<<3)|0)|0]=0,g[r+2|0]=m,b[r+4>>1]=o,o=(Z?2:0)|Me,b[r>>1]=o,(0|p)==2?((0|c)>=4&&(g[189076]=1),(0|O)<0||(0|(t=f-1|0))!=(0|O)&&(g[190291+(t<<3)|0]=c),b[r>>1]=4|o,le=(t=(0|c)>(0|cA))?f:le,cA=t?c:cA,o=1,AA&&(g[r+7|0]=AA),O=f,AA=0,t=c):(!re|!(64&l[0|ze])||(b[r>>1]=8|o),o=c),f=f+1|0,A[49572]=f,g[hA+190291|0]=t,r=0,re=0,c=o}else{if(!M[r+8>>1]){c=l[r+14|0],r=o;break r}if((0|O)<0){r=o,AA=Z;break r}g[190295+(O<<3)|0]=m,r=o}else A[(r=190288+(f<<3)|0)>>2]=1376256,b[r+4>>1]=0,g[r+7|0]=l[p+1|0],A[49572]=f+1,ia(l[p+1|0]),I=p+2|0,f=A[49572],r=o;if(!(m=l[0|I]))break e;if(p=I,o=r,!((0|f)<995))break}else t=0;131072&i&&(r=f+1|0,A[49572]=r,c=l[199388],g[199388]=0,g[7+(o=190288+(f<<3)|0)|0]=0,b[o+2>>1]=27,b[o+4>>1]=0,b[o>>1]=c?2:0,f=r),WA||(b[190292+(T<<3)>>1]=KA),A[e+8228>>2]=0,l[A[144464+(l[190282+(f<<3)|0]<<2)>>2]+11|0]!=2|(0|t)<4||(A[e+8228>>2]=1),(0|a)>=0&&(qe(132848,s+16|0),ia(A[A[32972]+60>>2]),r=l[199388],g[199388]=0,a=A[49572],b[(t=190288+(a<<3)|0)>>1]=r?2:0,b[t+2>>1]=21,b[t+4>>1]=0,g[t+7|0]=A[A[32972]+60>>2],f=a+1|0,A[49572]=f),(0|QA)>0&&(g[199388]=0,A[49572]=f+1,A[(t=190288+(f<<3)|0)>>2]=655362,r=A[47350],A[47350]=r+1,g[t+7|0]=0,b[t+4>>1]=0,A[198304+(r<<2)>>2]=QA<<8|225),1024&E&&(b[(t=190288+(le<<3)|0)>>1]=64|M[t>>1]),A[e+8232>>2]=E}}return J=s+416|0,E}function Ka(e,t,r,a,s){var i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0;A:if(t){if(cA=s<<4,o=(t=A[33268])+r|0,!((0|t)<=0||(i=l[0|(f=cA+129360|0)],I=l[f+1|0]-i<<8,I=(0|t)!=1?(0|I)/(0|t)|0:I,(0|r)>=(0|o))))for(E=I>>>0>255,Z=I>>>8|0,i<<=8,f=0-I>>>8|0,QA=(0|I)<=0,t=r;QA?(m=(p=(p=(0|(c=(0|(c=A[101024+(g[P(t,6)+e|0]<<2)>>2]))<(0|f)?f:c))>=18?18:c)+(c=(0|(c=(0|(i=i+I|0))/256|0))>0?c:0)|0)>>>0>=254?254:p,c=c>>>0>=254?254:c):(c=P(t,6)+e|0,g[c+2|0]=E|l[c+2|0],c=(p=(0|(c=(0|i)/256|0))>0?c:0)>>>0>=254?254:p,m=(p=p+Z|0)>>>0>=254?254:p,i=i+I|0),p=P(t,6)+e|0,g[p+5|0]=c,g[p+4|0]=m,(0|o)!=(0|(t=t+1|0)););if(2&l[188785]?(f=A[33271],A[33270]=f):f=A[33270],Z=(E=l[3+(i=129360+(t=s<<4)|0)|0])-(c=l[i+2|0])<<8,QA=A[i+4>>2],(0|r)>0?(KA=101056,hA=5,p=(0|Z)/(l[t+129368|0]-1|0)|0):(KA=A[12+(t=t+129360|0)>>2],hA=l[t+10|0],p=0),(0|o)<(0|f)){for(I=(0|r)<=0,AA=((t=Z>>31)^Z)-t|0,T=129360+(s<<4)|0,c<<=8,WA=E<<8,E=0;;){e:{if(m=P(o,6)+e|0,!(!(1&I)&(0|(i=g[0|m]))<4)){r=0,t=o;r:if(1&((0|i)==5|I)){for(;(0|(p=g[P(t,6)+e|0]))<=6&&(r=((0|p)>3)+r|0,(0|f)!=(0|(t=t+1|0))););if(O=0,(0|(vA=(0|(t=l[T+8|0]))>(0|r)?r:t))<2){p=0,E=c;break r}p=(0|Z)/(vA-1|0)|0,E=c}else(0|vA)>0?E=p+E|0:(E=WA+(P(AA,g[O+KA|0])>>6)|0,(0|hA)>(0|(O=O+1|0))||(KA=A[T+12>>2],O=0));if(vA=vA-1|0,!((0|i)<4)){g[0|m]=6,r=(t=(0|(t=(0|E)/256|0))>0?t:0)+(((r=(i=A[QA+(i<<2)>>2])>>31)^i)-r|0)|0;break e}}(0|i)!=3?(t=(0|E)/256|0,(63&l[m-6|0])>>>0>=3?(r=(i=A[QA+(i<<2)>>2])>>31,r=(t=(0|(t=t-g[T+9|0]|0))>0?t:0)+((r^i)-r|0)|0):r=(t=(0|t)>0?t:0)+(((r=(i=A[QA+(i<<2)>>2])>>31)^i)-r|0)|0):r=(t=(0|(t=(0|E)/256|0))>0?t:0)+(((r=(i=A[QA+12>>2])>>31)^i)-r|0)|0}if(g[m+5|0]=t>>>0>=254?254:t,I=0,t=(0|r)>0?r:0,g[m+4|0]=t>>>0>=254?254:t,g[m+2|0]=l[m+2|0]|i>>>31,(0|f)==(0|(o=o+1|0)))break}o=f}if(!(l[133068]||((268435455&s)==3&&(t=P(o,6)+e|0,g[t+2|0]=2|l[t+2|0]),A[33269]?(t=l[5+(i=100768+(s<<4)|0)|0],c=i+3|0,r=l[i+4|0]-t|0):(t=l[2+(r=100768+(s<<4)|0)|0],c=cA+100768|0,r=l[r+1|0]-t|0),i=P(o,6)+e|0,g[i+5|0]=t>>>0>=254?254:t,g[i+2|0]=l[i+2|0]|r>>>31,t=(p=t)+(((t=r>>31)^r)-t|0)|0,g[i+4|0]=t>>>0>=254?254:t,r=P(f,6)+e|0,g[r+1|0]=l[0|c],t=o+1|0,l[0|r]==4&&(g[0|r]=6),(0|(r=a-t|0))<=0||(s=l[12+(o=100768+(s<<4)|0)|0],o=l[o+13|0]-s<<8,o=(0|r)!=1?(0|o)/(0|r)|0:o,(0|t)>=(0|a)))))for(p=o>>>0>255,I=o>>>8|0,r=s<<8,s=0-o>>>8|0,E=(0|o)<=0;E?(c=(f=(c=(0|(i=(0|s)>(0|(i=A[101024+(g[P(t,6)+e|0]<<2)>>2]))?s:i))>=18?18:i)+(i=(0|(i=(0|(r=r+o|0))/256|0))>0?i:0)|0)>>>0>=254?254:f,f=i>>>0>=254?254:i):(i=P(t,6)+e|0,g[i+2|0]=p|l[i+2|0],f=(i=(0|(i=(0|r)/256|0))>0?i:0)>>>0>=254?254:i,c=(i=i+I|0)>>>0>=254?254:i,r=r+o|0),i=P(t,6)+e|0,g[i+5|0]=f,g[i+4|0]=c,(0|a)!=(0|(t=t+1|0)););}else{if(t=(hA=A[34455])+P(s,68)|0,o=l[t+24|0],f=l[t+25|0],i=(t=A[33268])+r|0,!((0|t)<=0||(m=f-o<<8,m=(0|t)!=1?(0|m)/(0|t)|0:m,(0|r)>=(0|i))))for(p=m>>>0>255,I=m>>>8|0,t=o<<8,f=0-m>>>8|0,E=(0|m)<=0;E?(o=(o=(Z=(0|(o=(0|(o=A[101024+(g[P(r,6)+e|0]<<2)>>2]))<(0|f)?f:o))>=18?18:o)+(c=(0|(o=(0|(t=t+m|0))/256|0))>0?o:0)|0)>>>0>=254?254:o,c=c>>>0>=254?254:c):(o=P(r,6)+e|0,g[o+2|0]=p|l[o+2|0],c=(o=(0|(o=(0|t)/256|0))>0?o:0)>>>0>=254?254:o,o=(o=o+I|0)>>>0>=254?254:o,t=t+m|0),Z=P(r,6)+e|0,g[Z+5|0]=c,g[Z+4|0]=o,(0|i)!=(0|(r=r+1|0)););2&l[188785]?(r=A[33271],A[33270]=r):r=A[33270],f=r,t=hA+P(s,68)|0;e:if((0|(I=l[t+33|0]))!=255)for(;;){if((0|(f=f-1|0))<(0|i)){f=r;break e}if(!(g[P(f,6)+e|0]<4))break}if((0|r)>(0|i)){for(ze=((o=(le=(E=l[t+32|0])-(m=l[0|(c=t+31|0)])<<8)>>31)^le)-o|0,WA=(0|(t=l[0|(p=t+30|0)]))==255,Z=I<<8,QA=m<<8,At=E<<8,cA=hA+P(s,68)|0,at=(0|t)!=255,E=0,I=0,t=1,m=0;;){e:{if(T=P(i,6)+e|0,!(!(1&t)&(0|(AA=g[0|T]))<4)){r:if(1&((0|AA)==5|t)){s:if(at){if(re=1,t=0,o=p,!((0|f)<=(0|(m=i+1|0)))){for(;;){if(o=p,(0|(I=g[P(m,6)+e|0]))>6)break s;if(t=((0|I)>3)+t|0,(0|f)==(0|(m=m+1|0)))break}o=p}}else{if(t=0,m=i,o=c,(0|f)<=(0|i))break s;for(;;){if(o=c,(0|(I=g[P(m,6)+e|0]))>6)break s;if(t=((0|I)>3)+t|0,(0|f)==(0|(m=m+1|0)))break}o=c}if(I=l[0|o]<<8,Me=0,(0|(m=(0|t)<(0|(o=l[cA+34|0]))?t:o))<2){KA=0;break r}KA=(0|le)/(m-1|0)|0}else(0|i)!=(0|f)?re?(WA=1,m=m+1|0,re=0,I=QA):(0|m)>0?(I=I+KA|0,re=0):(re=0,I=(P(g[16+(cA+Me|0)|0],ze)>>6)+At|0,Me=(0|(t=Me+1|0))<l[cA+35|0]?t:0):(WA=2,I=Z);if(m=m-1|0,!((0|AA)<4)){t=o=i+1|0;r:if(!((0|r)<=(0|i)))for(;;){if(g[P(t,6)+e|0]>1)break r;if(!((0|r)>=(0|(t=t+1|0))))break}g[0|T]=6,g[T+1|0]=l[cA+26|0],E=0,O=l[cA+27|0],i=(0|(i=(0|I)/256|0))>0?i:0,g[T+5|0]=i>>>0>=254?254:i,i=i+O|0,g[T+4|0]=i>>>0>=254?254:i,vA=t-o|0;break e}}if((0|AA)>=2){t=o=i+1|0;r:if(!((0|r)<=(0|i)))for(;;){if(g[P(t,6)+e|0]>1)break r;if(!((0|r)>=(0|(t=t+1|0))))break}E=0,i=(0|(i=(0|I)/256|0))>0?i:0,g[T+5|0]=i>>>0>=254?254:i,O=A[100976+(AA<<2)>>2],g[T+2|0]=l[T+2|0]|O>>>31,i=(0|(i=(AA=i)+(((i=O>>31)^O)-i|0)|0))>0?i:0,g[T+4|0]=i>>>0>=254?254:i,vA=t-o|0}else(0|vA)<=1?(O=g[36+(cA+WA|0)|0],t=0):(O=g[36+(t=cA+WA|0)|0],t=(g[t+39|0]-O|0)/(vA-1|0)|0),o=A[100976+(AA<<2)>>2],g[T+2|0]=l[T+2|0]|o>>>31,t=(0|(t=(((0|I)/256|0)+O|0)+P(t,E)|0))>0?t:0,g[T+5|0]=t>>>0>=254?254:t,t=(0|(t=t+(((AA=o)^(o>>=31))-o|0)|0))>0?t:0,g[T+4|0]=t>>>0>=254?254:t,E=E+1|0,o=i+1|0}if(t=0,(0|r)==(0|(i=o)))break}i=r}if(l[133068]||(o=P(i,6)+e|0,A[33269]?(c=hA+P(s,68)|0,t=l[c+47|0],f=l[c+46|0]-t|0,c=c+45|0):(c=hA+P(s,68)|0,t=l[c+44|0],f=l[c+43|0]-t|0,c=c+42|0),c=l[0|c],p=(((p=f>>31)^f)-p|0)+t|0,g[o+4|0]=p>>>0>=254?254:p,g[o+5|0]=t>>>0>=254?254:t,t=P(i,6)+e|0,g[t+2|0]=l[t+2|0]|f>>>31,r=P(r,6)+e|0,g[r+1|0]=c,t=i+1|0,l[0|r]==4&&(g[0|r]=6),(0|(r=a-t|0))<=0)||(o=hA+P(s,68)|0,s=l[o+48|0],o=l[o+49|0]-s<<8,o=(0|r)!=1?(0|o)/(0|r)|0:o,(0|t)>=(0|a)))break A;for(p=o>>>0>255,I=o>>>8|0,r=s<<8,s=0-o>>>8|0,E=(0|o)<=0;E?(c=(f=(c=(0|(i=(0|s)>(0|(i=A[101024+(g[P(t,6)+e|0]<<2)>>2]))?s:i))>=18?18:i)+(i=(0|(i=(0|(r=r+o|0))/256|0))>0?i:0)|0)>>>0>=254?254:f,f=i>>>0>=254?254:i):(i=P(t,6)+e|0,g[i+2|0]=p|l[i+2|0],f=(i=(0|(i=(0|r)/256|0))>0?i:0)>>>0>=254?254:i,c=(i=i+I|0)>>>0>=254?254:i,r=r+o|0),i=P(t,6)+e|0,g[i+5|0]=f,g[i+4|0]=c,(0|a)!=(0|(t=t+1|0)););}}function La(){var e,t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0;if((0|(e=A[36455]))!=(0|(f=A[36454]))){A:if(!((0|(T=A[36427]))<0|(0|f)==(0|T))){r=I=A[8+(216192+((m=T)<<4)|0)>>2];e:{for(;;){if((a=A[(o=216192+((m=(0|(a=m-1|0))<0?169:a)<<4)|0)>>2])-5>>>0<2)break e;r:{if((0|a)<=4){if(A[o+12>>2]!=(0|r))break e;if(a=M[o+4>>1],A[o+12>>2]=I,r=A[o+8>>2],16&(t=M[r>>1]))break r;for(Z=32&t?(P(a,12)>>>0)/10|0:a,s=0,a=r,c=0;;){t=M[r>>1];s:if(!(c>>>0<3&&8&t)){if(t=t<<16>>16,(0|(O=(p=b[2+((E=c<<1)+r|0)>>1])-(i=b[2+(E=I+E|0)>>1])|0))>(0|(p=(0|P(Z,(0|P(A[200944+(c<<2)>>2],(0|O)>0?p+(i<<1)|0:(p<<1)+i|0))/3e3|0))/256|0)))s||((0|t)<0?a=r:(a=0,t=(0|(t=A[44469]+1|0))<=169?t:0,A[44469]=t,(t=177888+(s=t<<6)|0)&&(a=M[r+4>>1]|M[r+6>>1]<<16,i=M[r>>1]|M[r+2>>1]<<16,b[t>>1]=i,b[t+2>>1]=i>>>16,b[t+4>>1]=a,b[t+6>>1]=a>>>16,a=M[r+60>>1]|M[r+62>>1]<<16,i=M[r+56>>1]|M[r+58>>1]<<16,b[t+56>>1]=i,b[t+58>>1]=i>>>16,b[t+60>>1]=a,b[t+62>>1]=a>>>16,a=M[r+52>>1]|M[r+54>>1]<<16,i=M[r+48>>1]|M[r+50>>1]<<16,b[t+48>>1]=i,b[t+50>>1]=i>>>16,b[t+52>>1]=a,b[t+54>>1]=a>>>16,a=M[r+44>>1]|M[r+46>>1]<<16,i=M[r+40>>1]|M[r+42>>1]<<16,b[t+40>>1]=i,b[t+42>>1]=i>>>16,b[t+44>>1]=a,b[t+46>>1]=a>>>16,a=M[r+36>>1]|M[r+38>>1]<<16,i=M[r+32>>1]|M[r+34>>1]<<16,b[t+32>>1]=i,b[t+34>>1]=i>>>16,b[t+36>>1]=a,b[t+38>>1]=a>>>16,a=M[r+28>>1]|M[r+30>>1]<<16,i=M[r+24>>1]|M[r+26>>1]<<16,b[t+24>>1]=i,b[t+26>>1]=i>>>16,b[t+28>>1]=a,b[t+30>>1]=a>>>16,a=M[r+20>>1]|M[r+22>>1]<<16,i=M[r+16>>1]|M[r+18>>1]<<16,b[t+16>>1]=i,b[t+18>>1]=i>>>16,b[t+20>>1]=a,b[t+22>>1]=a>>>16,a=M[r+12>>1]|M[r+14>>1]<<16,i=M[r+8>>1]|M[r+10>>1]<<16,b[t+8>>1]=i,b[t+10>>1]=i>>>16,b[t+12>>1]=a,b[t+14>>1]=a>>>16,g[s+177904|0]=0,b[t>>1]=32768|M[t>>1],a=t))),t=p+M[E+2>>1]|0;else{if((0-p|0)<=(0|O))break s;s||((0|t)<0?a=r:(a=0,t=(0|(t=A[44469]+1|0))<=169?t:0,A[44469]=t,(t=177888+(s=t<<6)|0)&&(a=M[r+4>>1]|M[r+6>>1]<<16,i=M[r>>1]|M[r+2>>1]<<16,b[t>>1]=i,b[t+2>>1]=i>>>16,b[t+4>>1]=a,b[t+6>>1]=a>>>16,a=M[r+60>>1]|M[r+62>>1]<<16,i=M[r+56>>1]|M[r+58>>1]<<16,b[t+56>>1]=i,b[t+58>>1]=i>>>16,b[t+60>>1]=a,b[t+62>>1]=a>>>16,a=M[r+52>>1]|M[r+54>>1]<<16,i=M[r+48>>1]|M[r+50>>1]<<16,b[t+48>>1]=i,b[t+50>>1]=i>>>16,b[t+52>>1]=a,b[t+54>>1]=a>>>16,a=M[r+44>>1]|M[r+46>>1]<<16,i=M[r+40>>1]|M[r+42>>1]<<16,b[t+40>>1]=i,b[t+42>>1]=i>>>16,b[t+44>>1]=a,b[t+46>>1]=a>>>16,a=M[r+36>>1]|M[r+38>>1]<<16,i=M[r+32>>1]|M[r+34>>1]<<16,b[t+32>>1]=i,b[t+34>>1]=i>>>16,b[t+36>>1]=a,b[t+38>>1]=a>>>16,a=M[r+28>>1]|M[r+30>>1]<<16,i=M[r+24>>1]|M[r+26>>1]<<16,b[t+24>>1]=i,b[t+26>>1]=i>>>16,b[t+28>>1]=a,b[t+30>>1]=a>>>16,a=M[r+20>>1]|M[r+22>>1]<<16,i=M[r+16>>1]|M[r+18>>1]<<16,b[t+16>>1]=i,b[t+18>>1]=i>>>16,b[t+20>>1]=a,b[t+22>>1]=a>>>16,a=M[r+12>>1]|M[r+14>>1]<<16,i=M[r+8>>1]|M[r+10>>1]<<16,b[t+8>>1]=i,b[t+10>>1]=i>>>16,b[t+12>>1]=a,b[t+14>>1]=a>>>16,g[s+177904|0]=0,b[t>>1]=32768|M[t>>1],a=t))),t=M[E+2>>1]-p|0}s=1,b[2+((c<<1)+a|0)>>1]=t,A[o+8>>2]=a}if((0|(c=c+1|0))==6)break}I=a}if((0|f)!=(0|m))continue;break e}break}I=r}for(a=0;;){if((r=A[(m=216192+(T<<4)|0)>>2])-5>>>0<2)break A;if((0|r)<=4){if(r=A[m+8>>2],t=M[m+4>>1],a){if((0|r)!=(0|a))break A;A[m+8>>2]=I}else I=r;if(16&(a=M[I>>1]))break A;for(E=32&a?(P(t,6)>>>0)/5|0:t,s=0,r=a=A[m+12>>2],c=0;;){e:{r:if((0|(f=(o=b[2+((t=c<<1)+a|0)>>1])-(t=b[2+(p=t+I|0)>>1])|0))>(0|(o=(0|P(E,(0|P(A[200944+(c<<2)>>2],(0|f)>0?o+(t<<1)|0:(o<<1)+t|0))/3e3|0))/256|0))){if(!s){if(b[a>>1]<0){r=a,t=t+o|0;break r}r=(0|(r=A[44469]+1|0))<=169?r:0,A[44469]=r,s=M[a+20>>1]|M[a+22>>1]<<16,t=16+(r=177888+(r<<6)|0)|0,f=M[a+16>>1]|M[a+18>>1]<<16,b[t>>1]=f,b[t+2>>1]=f>>>16,b[t+4>>1]=s,b[t+6>>1]=s>>>16,t=M[a+4>>1]|M[a+6>>1]<<16,s=M[a>>1]|M[a+2>>1]<<16,b[r>>1]=s,b[r+2>>1]=s>>>16,b[r+4>>1]=t,b[r+6>>1]=t>>>16,t=M[a+12>>1]|M[a+14>>1]<<16,s=M[a+8>>1]|M[a+10>>1]<<16,b[r+8>>1]=s,b[r+10>>1]=s>>>16,b[r+12>>1]=t,b[r+14>>1]=t>>>16,t=M[a+28>>1]|M[a+30>>1]<<16,s=M[a+24>>1]|M[a+26>>1]<<16,b[r+24>>1]=s,b[r+26>>1]=s>>>16,b[r+28>>1]=t,b[r+30>>1]=t>>>16,t=M[a+36>>1]|M[a+38>>1]<<16,s=M[a+32>>1]|M[a+34>>1]<<16,b[r+32>>1]=s,b[r+34>>1]=s>>>16,b[r+36>>1]=t,b[r+38>>1]=t>>>16,t=M[a+44>>1]|M[a+46>>1]<<16,s=M[a+40>>1]|M[a+42>>1]<<16,b[r+40>>1]=s,b[r+42>>1]=s>>>16,b[r+44>>1]=t,b[r+46>>1]=t>>>16,t=M[a+52>>1]|M[a+54>>1]<<16,s=M[a+48>>1]|M[a+50>>1]<<16,b[r+48>>1]=s,b[r+50>>1]=s>>>16,b[r+52>>1]=t,b[r+54>>1]=t>>>16,t=M[a+60>>1]|M[a+62>>1]<<16,s=M[a+56>>1]|M[a+58>>1]<<16,b[r+56>>1]=s,b[r+58>>1]=s>>>16,b[r+60>>1]=t,b[r+62>>1]=t>>>16,g[r+16|0]=0,b[r>>1]=32768|M[r>>1],t=M[p+2>>1]}t=t+o|0}else{if((0|f)>=(0-o|0))break e;s||(b[a>>1]<0?r=a:(r=(0|(r=A[44469]+1|0))<=169?r:0,A[44469]=r,s=M[a+20>>1]|M[a+22>>1]<<16,t=16+(r=177888+(r<<6)|0)|0,f=M[a+16>>1]|M[a+18>>1]<<16,b[t>>1]=f,b[t+2>>1]=f>>>16,b[t+4>>1]=s,b[t+6>>1]=s>>>16,t=M[a+4>>1]|M[a+6>>1]<<16,s=M[a>>1]|M[a+2>>1]<<16,b[r>>1]=s,b[r+2>>1]=s>>>16,b[r+4>>1]=t,b[r+6>>1]=t>>>16,t=M[a+12>>1]|M[a+14>>1]<<16,s=M[a+8>>1]|M[a+10>>1]<<16,b[r+8>>1]=s,b[r+10>>1]=s>>>16,b[r+12>>1]=t,b[r+14>>1]=t>>>16,t=M[a+28>>1]|M[a+30>>1]<<16,s=M[a+24>>1]|M[a+26>>1]<<16,b[r+24>>1]=s,b[r+26>>1]=s>>>16,b[r+28>>1]=t,b[r+30>>1]=t>>>16,t=M[a+36>>1]|M[a+38>>1]<<16,s=M[a+32>>1]|M[a+34>>1]<<16,b[r+32>>1]=s,b[r+34>>1]=s>>>16,b[r+36>>1]=t,b[r+38>>1]=t>>>16,t=M[a+44>>1]|M[a+46>>1]<<16,s=M[a+40>>1]|M[a+42>>1]<<16,b[r+40>>1]=s,b[r+42>>1]=s>>>16,b[r+44>>1]=t,b[r+46>>1]=t>>>16,t=M[a+52>>1]|M[a+54>>1]<<16,s=M[a+48>>1]|M[a+50>>1]<<16,b[r+48>>1]=s,b[r+50>>1]=s>>>16,b[r+52>>1]=t,b[r+54>>1]=t>>>16,t=M[a+60>>1]|M[a+62>>1]<<16,s=M[a+56>>1]|M[a+58>>1]<<16,b[r+56>>1]=s,b[r+58>>1]=s>>>16,b[r+60>>1]=t,b[r+62>>1]=t>>>16,g[r+16|0]=0,b[r>>1]=32768|M[r>>1],t=M[p+2>>1])),t=t-o|0}s=1,b[2+((c<<1)+r|0)>>1]=t,A[m+12>>2]=r}if((0|(c=c+1|0))==6)break}I=r}if((0|e)==(0|(T=(0|(r=T+1|0))<=169?r:0)))break}}A[36454]=e}}function wa(e,t){var r,a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0;J=r=J-48|0,CA(+e),i=0|X(1),s=0|X(0),a=i;A:{e:{r:{if((f=2147483647&i)>>>0<=1074752122){if((1048575&i)==598523)break r;if(f>>>0<=1073928572){if((0|a)>0|(0|a)>=0){c=(e+=-1.5707963267341256)+-6077100506506192e-26,D[t>>3]=c,D[t+8>>3]=e-c-6077100506506192e-26,i=1;break A}c=(e+=1.5707963267341256)+6077100506506192e-26,D[t>>3]=c,D[t+8>>3]=e-c+6077100506506192e-26,i=-1;break A}if((0|a)>0|(0|a)>=0){c=(e+=-3.1415926534682512)+-12154201013012384e-26,D[t>>3]=c,D[t+8>>3]=e-c-12154201013012384e-26,i=2;break A}c=(e+=3.1415926534682512)+12154201013012384e-26,D[t>>3]=c,D[t+8>>3]=e-c+12154201013012384e-26,i=-2;break A}if(f>>>0<=1075594811){if(f>>>0<=1075183036){if((0|f)==1074977148)break r;if((0|a)>0|(0|a)>=0){c=(e+=-4.712388980202377)+-18231301519518578e-26,D[t>>3]=c,D[t+8>>3]=e-c-18231301519518578e-26,i=3;break A}c=(e+=4.712388980202377)+18231301519518578e-26,D[t>>3]=c,D[t+8>>3]=e-c+18231301519518578e-26,i=-3;break A}if((0|f)==1075388923)break r;if((0|a)>0|(0|a)>=0){c=(e+=-6.2831853069365025)+-2430840202602477e-25,D[t>>3]=c,D[t+8>>3]=e-c-2430840202602477e-25,i=4;break A}c=(e+=6.2831853069365025)+2430840202602477e-25,D[t>>3]=c,D[t+8>>3]=e-c+2430840202602477e-25,i=-4;break A}if(f>>>0>1094263290)break e}s=(QA=(c=e+-1.5707963267341256*(I=.6366197723675814*e+6755399441055744-6755399441055744))-(T=6077100506506192e-26*I))<-.7853981633974483,i=SA(I)<2147483648?~~I:-2147483648,s?(i=i-1|0,T=6077100506506192e-26*(I+=-1),c=e+-1.5707963267341256*I):QA>.7853981633974483&&(i=i+1|0,T=6077100506506192e-26*(I+=1),c=e+-1.5707963267341256*I),e=c-T,D[t>>3]=e,CA(+e),s=0|X(1),X(0),((o=f>>>20|0)-(s>>>20&2047)|0)<17||(T=c,e=(c-=e=6077100506303966e-26*I)-(T=20222662487959506e-37*I-(T-c-e)),D[t>>3]=e,CA(+e),s=0|X(1),X(0),(o-(s>>>20&2047)|0)<50||(T=c,e=(c-=e=20222662487111665e-37*I)-(T=84784276603689e-45*I-(T-c-e)),D[t>>3]=e)),D[t+8>>3]=c-e-T;break A}if(f>>>0>=2146435072)e-=e,D[t>>3]=e,D[t+8>>3]=e,i=0;else{for(R(0,0|s),R(1,1048575&a|1096810496),e=+aA(),i=0,s=1;o=(r+16|0)+(i<<3)|0,c=+(0|(i=SA(e)<2147483648?~~e:-2147483648)),D[o>>3]=c,e=16777216*(e-c),i=1,o=s,s=0,o;);for(D[r+32>>3]=e,i=2;i=(s=i)-1|0,D[(r+16|0)+(s<<3)>>3]==0;);if(WA=r+16|0,o=0,J=m=J-560|0,f=P(vA=(0|(f=((i=(f>>>20|0)-1046|0)-3|0)/24|0))>0?f:0,-24)+i|0,((O=A[28105])+(p=(cA=s+1|0)-1|0)|0)>=0)for(i=O+cA|0,s=vA-p|0;D[(m+320|0)+(o<<3)>>3]=(0|s)<0?0:+A[112432+(s<<2)>>2],s=s+1|0,(0|i)!=(0|(o=o+1|0)););for(AA=f-24|0,i=0,o=(0|O)>0?O:0,Z=(0|cA)<=0;;){if(Z)e=0;else for(E=i+p|0,s=0,e=0;e=D[(s<<3)+WA>>3]*D[(m+320|0)+(E-s<<3)>>3]+e,(0|cA)!=(0|(s=s+1|0)););if(D[(i<<3)+m>>3]=e,s=(0|i)==(0|o),i=i+1|0,s)break}Me=47-f|0,KA=48-f|0,ze=f-25|0,i=O;e:{for(;;){if(e=D[(i<<3)+m>>3],s=0,o=i,!(E=(0|i)<=0))for(;Z=(m+480|0)+(s<<2)|0,p=SA(c=5960464477539063e-23*e)<2147483648?~~c:-2147483648,p=SA(e=-16777216*(c=+(0|p))+e)<2147483648?~~e:-2147483648,A[Z>>2]=p,e=D[((o=o-1|0)<<3)+m>>3]+c,(0|i)!=(0|(s=s+1|0)););e=Ys(e,AA),e+=-8*ee(.125*e),e-=+(0|(Z=SA(e)<2147483648?~~e:-2147483648));r:{s:{i:{if(re=(0|AA)<=0){if(AA)break i;p=A[476+((i<<2)+m|0)>>2]>>23}else hA=o=(i<<2)+m|0,o=(p=A[o+476>>2])-((s=p>>KA)<<KA)|0,A[hA+476>>2]=o,Z=s+Z|0,p=o>>Me;if((0|p)<=0)break r;break s}if(p=2,!(e>=.5)){p=0;break r}}if(s=0,o=0,!E)for(;le=A[(hA=(m+480|0)+(s<<2)|0)>>2],E=16777215,o||(E=16777216,le)?(A[hA>>2]=E-le,o=1):o=0,(0|i)!=(0|(s=s+1|0)););s:if(!re){s=8388607;i:switch(0|ze){case 1:s=4194303;break;case 0:break i;default:break s}A[476+(E=(i<<2)+m|0)>>2]=A[E+476>>2]&s}Z=Z+1|0,(0|p)==2&&(e=1-e,p=2,o&&(e-=Ys(1,AA)))}if(e!=0)break;if(o=0,!((0|O)>=(0|(s=i)))){for(;o=A[(m+480|0)+((s=s-1|0)<<2)>>2]|o,(0|s)>(0|O););if(o){for(f=AA;f=f-24|0,!A[(m+480|0)+((i=i-1|0)<<2)>>2];);break e}}for(s=1;o=s,s=s+1|0,!A[(m+480|0)+(O-o<<2)>>2];);for(o=i+o|0;;){if(p=i+cA|0,i=i+1|0,D[(m+320|0)+(p<<3)>>3]=A[112432+(vA+i<<2)>>2],s=0,e=0,(0|cA)>0)for(;e=D[(s<<3)+WA>>3]*D[(m+320|0)+(p-s<<3)>>3]+e,(0|cA)!=(0|(s=s+1|0)););if(D[(i<<3)+m>>3]=e,!((0|i)<(0|o)))break}i=o}(e=Ys(e,24-f|0))>=16777216?(AA=(m+480|0)+(i<<2)|0,s=SA(c=5960464477539063e-23*e)<2147483648?~~c:-2147483648,o=SA(e=-16777216*+(0|s)+e)<2147483648?~~e:-2147483648,A[AA>>2]=o,i=i+1|0):(s=SA(e)<2147483648?~~e:-2147483648,f=AA),A[(m+480|0)+(i<<2)>>2]=s}if(e=Ys(1,f),!((0|i)<0)){for(s=i;o=s,D[(s<<3)+m>>3]=e*+A[(m+480|0)+(s<<2)>>2],s=s-1|0,e*=5960464477539063e-23,o;);if(E=0,!((0|i)<0))for(f=(0|O)>0?O:0,o=i;;){for(AA=f>>>0<E>>>0?f:E,O=i-o|0,s=0,e=0;e=D[115200+(s<<3)>>3]*D[(s+o<<3)+m>>3]+e,cA=(0|s)!=(0|AA),s=s+1|0,cA;);if(D[(m+160|0)+(O<<3)>>3]=e,o=o-1|0,s=(0|i)!=(0|E),E=E+1|0,!s)break}}if(e=0,(0|i)>=0)for(s=i;o=s,s=s-1|0,e+=D[(m+160|0)+(o<<3)>>3],o;);if(D[r>>3]=p?-e:e,e=D[m+160>>3]-e,s=1,(0|i)>0)for(;e+=D[(m+160|0)+(s<<3)>>3],o=(0|s)!=(0|i),s=s+1|0,o;);D[r+8>>3]=p?-e:e,J=m+560|0,i=7&Z,e=D[r>>3],(0|a)<0?(D[t>>3]=-e,D[t+8>>3]=-D[r+8>>3],i=0-i|0):(D[t>>3]=e,D[t+8>>3]=D[r+8>>3])}}return J=r+48|0,i}function Xe(){var e=0,t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0,ft=0,Nt=0,Kt=0,er=0,pr=0,hr=0,yr=0,Er=0,zr=0,Wr=0,oa=0,Xr=0,la=0,va=0,As=0,ns=0,os=0;A[55925]=0,e=A[56772],A[56772]=e+1,r=A[55961],E=A[55922],O=Si(39.89822670059037*(t=+(0|e))),m=Si(22.30530784048753*t),t=+(0|E)/50*(+(0|r)/100)*(Si(14.765485471872028*t)+(O+m))*10,e=SA(t)<2147483648?~~t:-2147483648,A[56607]=e+A[56607];A:if(!(A[55923]<=0)){for(;;){for(r=bt(A[33209],0,1103515245,0),e=$,e=Sn(r=r+12345|0,e=r>>>0<12345?e+1|0:e),A[33209]=e,e=8191+((e>>>0)%16383|0)|0,A[55929]=e,ft=+(0|e),t=.75*D[28387]+ft,D[28387]=t,Nt=(0|(e=A[55924]))>(0|(KA=A[55928]))?.5*t:t,hr=(s=.033*+A[56652])>0?1-s:1,r=A[56650]<<2,Me=(0|(le=A[55921]))==1&&(0|r)>263?263:r,yr=111136+((Kt=A[56651])<<1)|0,Er=111136+((ze=A[56658])<<1)|0,zr=(0|ze)>0,er=A[55918],Wr=P(er,40),oa=A[55925],Xr=D[27967],pr=A[56607],t=D[27979],AA=D[27969],c=D[27970],At=A[56780],vA=A[56654],I=D[27976],T=D[27972],cA=D[28388],hA=D[28389],E=A[55927],a=D[28383],p=A[55926],QA=A[55956],la=D[27975],m=D[28131],i=D[28130],o=D[28123],Z=D[28121],f=D[28122],re=D[28120],WA=D[28119],va=D[28129],As=D[28128],ns=D[28127],os=Da(0*D[27968]),at=0;;){O=i;e:{r:switch(le-1|0){case 0:cA=0,i=Z*o,o=f,f=a=i+(WA*(cA=(0|e)<=2?D[111312+(e<<3)>>3]:cA)+re*o);break e;case 1:if(a=0,(0|e)>=(0|E)){hA=0;break e}i=D[27965]-D[27966],D[27965]=i,a=.028*(hA=i+hA);break e;case 2:if(!p){QA=100,a=0;break e}QA=100,r=SA(i=+(0|e)/+(0|p)*100)<2147483648?~~i:-2147483648,a=+b[110928+((0|r)%100<<1)>>1],a=t*((+b[110928+((r+1|0)%100<<1)>>1]-a)*(i-+(0|r))+a);break e;case 3:break r;default:break e}p?(QA=256,r=SA(i=+(0|e)/+(0|p)*256)<2147483648?~~i:-2147483648,a=+b[111344+((0|r)%256<<1)>>1],a=t*((+b[111344+((r+1|0)%256<<1)>>1]-a)*(i-+(0|r))+a)):(QA=256,a=0)}if((0|e)>=(0|p)&&((0|pr)>0?(e=(0|Wr)/(0|pr)|0,I=0,T=0,T=ze>>>0<=87?.001*+b[Er>>1]:T,I=Kt>>>0<=87?.001*+b[yr>>1]*.1:I,KA=e>>zr,E=(0|(r=(p=(e-1|0)<=(0|Me))?e-2|0:Me))<=40?40:r,i=+b[111776+((E=p||(0|r)<40?E:Me)<<1)>>1],D[27966]=i,Z=i,i=+(0|E),D[27965]=Z*i*.333,vA=(0|(r=e-E|0))>(0|vA)?vA:r,At=0-(r=(0|At)<0?0-vA|0:vA)|0,WA=(i*=.00833)*i,WA*=1-(re=(Z=(i=zt(Xr*+((0|er)/(0|E)|0)))*os)+Z)-(Z=i*-i),e=(0|(p=e+r|0))!=4):(A[55930]=0,A[55931]=0,A[55932]=0,A[55933]=0,KA=4,I=0,T=0,p=4,e=0),c=(e|=!oa)?s:c,AA=e?hr:AA,e=0),e=e+1|0,i=a=va*m+(ns*a+As*O),m=O,(0|(at=at+1|0))==4)break}if(A[55926]=p,A[55956]=QA,A[55924]=e,D[28383]=a,A[55927]=E,D[28389]=hA,D[28388]=cA,D[27972]=T,D[27976]=I,A[55928]=KA,A[56654]=vA,A[56780]=At,D[27970]=c,D[27969]=AA,D[28122]=f,D[28120]=re,D[28119]=WA,D[28123]=o,D[28121]=Z,D[28131]=m,D[28130]=a,(0|le)==5&&(a=6e3*((t=+(0|e)/+(0|p))+t+-1),D[28383]=a),t=a*AA+D[28384]*c,D[28383]=t,D[28384]=t,(0|e)<(0|E)&&(t=I*ft+t,D[28383]=t),c=Nt*D[27974],O=t*D[27973]+c,m=0,A[55916]!=2&&(m=D[27987],f=D[27986],D[27987]=f,t=c+t*T,D[27986]=t,c=D[28059],o=D[28058],D[28059]=o,t=c*D[28057]+(D[28055]*(m*D[27985]+(D[27983]*t+f*D[27984]))+o*D[28056]),D[28058]=t,m=D[28049],c=D[28051],f=D[28048],o=D[28047],s=D[28050],D[28051]=s,t=m*c+(o*t+f*s),D[28050]=t,m=D[28043],c=D[28041],f=D[28040],o=D[28039],s=D[28042],D[28043]=s,t=c*m+(o*t+f*s),D[28042]=t,m=D[28035],c=D[28033],f=D[28032],o=D[28031],s=D[28034],D[28035]=s,t=c*m+(o*t+f*s),D[28034]=t,m=D[28027],c=D[28025],f=D[28024],o=D[28023],s=D[28026],D[28027]=s,t=c*m+(o*t+f*s),D[28026]=t,m=D[28019],c=D[28017],f=D[28016],o=D[28015],s=D[28018],D[28019]=s,t=c*m+(o*t+f*s),D[28018]=t,m=D[28011],c=D[28009],f=D[28008],o=D[28007],s=D[28010],D[28011]=s,t=c*m+(o*t+f*s),D[28010]=t,m=D[28003],c=D[28001],f=D[28e3],o=D[27999],s=D[28002],D[28003]=s,t=c*m+(o*t+f*s),D[28002]=t,m=D[27995],c=D[27993],f=D[27992],o=D[27991],s=D[27994],D[27995]=s,m=c*m+(o*t+f*s),D[27994]=m),t=D[28385],D[28385]=O,c=D[28075],f=D[28074],D[28075]=f,o=D[28067],s=D[28066],D[28067]=s,c=c*D[28073]+(D[28071]*O+f*D[28072]),D[28074]=c,f=o*D[28065]+(D[28063]*O+s*D[28064]),D[28066]=f,o=D[28081],s=D[28083],i=D[28079],a=D[28080],I=D[28082],D[28083]=I,O=o*s+(i*(t=la*Nt+O-t)+a*I),D[28082]=O,o=D[28091],s=D[28089],i=D[28087],a=D[28088],I=D[28090],D[28091]=I,o=s*o+(i*t+a*I),D[28090]=o,s=D[28099],i=D[28097],a=D[28095],I=D[28096],T=D[28098],D[28099]=T,s=i*s+(a*t+I*T),D[28098]=s,i=D[28107],a=D[28105],I=D[28103],T=D[28104],AA=D[28106],D[28107]=AA,i=a*i+(I*t+T*AA),D[28106]=i,a=D[28115],I=D[28113],T=D[28111],AA=D[28112],cA=D[28114],D[28115]=cA,a=I*a+(T*t+AA*cA),D[28114]=a,I=D[28139],T=D[28137],AA=D[28136],cA=D[28135],hA=D[27971],Z=D[28138],D[28139]=Z,t=T*I+(cA*(t*hA-(a-(i-(s-(o-(O-(m+c+f)))))))+AA*Z),D[28138]=t,t=D[27977]*(t*+A[50779]),a=+(0|(e=SA(t)<2147483648?~~t:-2147483648)),(0|(e=A[50776]))<A[50773]&&(p=e+1|0,r=A[50772],(E=A[50774])?(A[50776]=p,e=P(E,g[e+r|0])):(E=l[e+r|0],r=g[r+p|0],A[50776]=e+2,e=E|r<<8),a+=+((0|P(A[50775],(0|P(e,A[50780]))/1024|0))/40|0)),(0|(e=A[55962]))<=63&&(A[55962]=e+1,a=a*+(0|e)*.015625),(0|(e=A[55963]))<=0||(e=e-1|0,A[55963]=e,a=a*+(0|e)*.015625,e||(A[55962]=0)),r=(e=A[51293])+1|0,A[51293]=r,p=P(b[205184+(e<<1)>>1],A[50755])>>8,e=SA(a)<2147483648?~~a:-2147483648,(0|r)>=5500&&(A[51293]=0),r=A[51290],A[51290]=r+1,e=(0|(e=(0|(e=e+p|0))<=-32768?-32768:e))>=32767?32767:e,g[0|r]=e,r=A[51290],A[51290]=r+1,g[0|r]=e>>>8,p=(r=A[51292])+1|0,A[51292]=p,b[205184+(r<<1)>>1]=e,(0|p)>=5500&&(A[51292]=0),p=1,A[56606]=A[56606]+1,uA[54046]<A[51290]+2>>>0)break A;if(e=A[55925]+1|0,A[55925]=e,!((0|e)<A[55923]))break}p=0}return p}function $e(e,t,r,a,s,i,o){var c,f,m,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0;J=c=J-80|0,A[c+76>>2]=t,m=c+55|0,f=c+56|0;A:{e:{r:{s:{i:for(;;){if(E=t,(2147483647^cA)<(0|p))break s;cA=p+cA|0;c:{o:{u:{if(I=l[0|(p=E)])for(;;){l:{n:if(t=255&I){if((0|t)!=37)break l;for(I=p;;){if(l[I+1|0]!=37){t=I;break n}if(p=p+1|0,O=l[I+2|0],I=t=I+2|0,(0|O)!=37)break}}else t=p;if((0|(p=p-E|0))>(0|(le=2147483647^cA)))break s;if(e&&Zr(e,E,p),p)continue i;A[c+76>>2]=t,p=t+1|0,hA=-1,l[t+2|0]!=36|g[t+1|0]-48>>>0>=10||(hA=g[t+1|0]-48|0,WA=1,p=t+3|0),A[c+76>>2]=p,Z=0;n:if((t=(I=g[0|p])-32|0)>>>0>31)AA=p;else if(AA=p,75913&(t=1<<t))for(;;){if(AA=p+1|0,A[c+76>>2]=AA,Z|=t,(t=(I=g[p+1|0])-32|0)>>>0>=32)break n;if(p=AA,!(75913&(t=1<<t)))break}n:if((0|I)!=42){if((0|(vA=d0(c+76|0)))<0)break s;I=A[c+76>>2]}else{if(l[AA+2|0]!=36|g[AA+1|0]-48>>>0>=10){if(WA)break u;if(I=AA+1|0,!e){A[c+76>>2]=I,WA=0,vA=0;break n}t=A[r>>2],A[r>>2]=t+4,WA=0,t=A[t>>2]}else A[((g[AA+1|0]<<2)+s|0)-192>>2]=10,I=AA+3|0,WA=1,t=A[((g[AA+1|0]<<3)+a|0)-384>>2];if(A[c+76>>2]=I,vA=t,(0|t)>=0)break n;vA=0-vA|0,Z|=8192}if(p=0,T=-1,l[0|I]==46)if(l[I+1|0]!=42)A[c+76>>2]=I+1,T=d0(c+76|0),t=A[c+76>>2],re=1;else{if(l[I+3|0]!=36|g[I+2|0]-48>>>0>=10){if(WA)break u;t=I+2|0,T=0,e&&(I=A[r>>2],A[r>>2]=I+4,T=A[I>>2])}else A[((g[I+2|0]<<2)+s|0)-192>>2]=10,t=I+4|0,T=A[((g[I+2|0]<<3)+a|0)-384>>2];A[c+76>>2]=t,re=~T>>>31|0}else t=I,re=0;for(;;){if(QA=p,AA=28,O=t,(p=g[0|t])-123>>>0<4294967238)break r;if(t=O+1|0,!((p=l[123983+(p+P(QA,58)|0)|0])-1>>>0<8))break}A[c+76>>2]=t;n:{p:{if((0|p)!=27){if(!p)break r;if((0|hA)>=0){A[(hA<<2)+s>>2]=p,p=A[4+(I=(hA<<3)+a|0)>>2],A[c+64>>2]=A[I>>2],A[c+68>>2]=p;break p}if(!e)break c;Vt(c- -64|0,p,r,o);break n}if((0|hA)>=0)break r}if(p=0,!e)continue i}I=-65537&Z,Z=8192&Z?I:Z,hA=0,KA=84065,AA=f;n:{p:{C:{m:{b:{h:{E:{w:{y:{L:{W:{V:{M:{B:{D:{switch(p=g[0|O],(p=QA&&(15&p)==3?-33&p:p)-88|0){case 11:break n;case 9:case 13:case 14:case 15:break p;case 27:break E;case 12:case 17:break L;case 23:break W;case 0:case 32:break V;case 24:break M;case 22:break B;case 29:break D;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 25:case 26:case 28:case 30:case 31:break o}switch(p-65|0){case 0:case 4:case 5:case 6:break p;case 2:break b;case 1:case 3:break o}if((0|p)==83)break h;break o}I=A[c+64>>2],O=A[c+68>>2],KA=84065;break y}p=0;B:switch(255&QA){case 0:case 1:case 6:A[A[c+64>>2]>>2]=cA;continue i;case 2:E=A[c+64>>2],A[E>>2]=cA,A[E+4>>2]=cA>>31;continue i;case 3:b[A[c+64>>2]>>1]=cA;continue i;case 4:g[A[c+64>>2]]=cA;continue i;case 7:break B;default:continue i}E=A[c+64>>2],A[E>>2]=cA,A[E+4>>2]=cA>>31;continue i}T=T>>>0<=8?8:T,Z|=8,p=120}if(E=f,Me=32&p,(I=A[c+64>>2])|(O=A[c+68>>2]))for(;g[0|(E=E-1|0)]=Me|l[124512+(15&I)|0],ze=!O&I>>>0>15|!!(0|O),QA=O,O=O>>>4|0,I=(15&QA)<<28|I>>>4,ze;);if(!(A[c+64>>2]|A[c+68>>2])|!(8&Z))break w;KA=84065+(p>>>4|0)|0,hA=2;break w}if(p=f,O=E=A[c+68>>2],E|(I=A[c+64>>2]))for(;g[0|(p=p-1|0)]=7&I|48,QA=!O&I>>>0>7|!!(0|O),O=(E=O)>>>3|0,I=(7&E)<<29|I>>>3,QA;);if(E=p,!(8&Z))break w;T=(0|(p=f-E|0))<(0|T)?T:p+1|0;break w}I=A[c+64>>2],O=p=A[c+68>>2],(0|p)<0?(O=E=0-(O+!!(0|I)|0)|0,I=0-I|0,A[c+64>>2]=I,A[c+68>>2]=E,hA=1,KA=84065):2048&Z?(hA=1,KA=84066):KA=(hA=1&Z)?84067:84065}E=ds(I,O,f)}if((0|T)<0&&re)break s;if(Z=re?-65537&Z:Z,!(T|!!((p=A[c+64>>2])|(I=A[c+68>>2])))){E=f,T=0;break o}T=(0|(p=!(p|I)+(f-E|0)|0))<(0|T)?T:p;break o}if(AA=(p=(p=ei(E=(p=A[c+64>>2])||84639,0,O=T>>>0>=2147483647?2147483647:T))?p-E|0:O)+E|0,(0|T)>=0){Z=I,T=p;break o}if(Z=I,T=p,l[0|AA])break s;break o}if(T){I=A[c+64>>2];break m}p=0,ra(e,32,vA,0,Z);break C}A[c+12>>2]=0,A[c+8>>2]=A[c+64>>2],I=c+8|0,A[c+64>>2]=I,T=-1}p=0;m:{for(;;){if(!(E=A[I>>2]))break m;if(!((E=(0|(O=r0(c+4|0,E)))<0)|O>>>0>T-p>>>0)){if(I=I+4|0,T>>>0>(p=p+O|0)>>>0)continue;break m}break}if(E)break e}if(AA=61,(0|p)<0)break r;if(ra(e,32,vA,p,Z),p)for(AA=0,I=A[c+64>>2];;){if(!(E=A[I>>2])||(AA=(E=r0(c+4|0,E))+AA|0)>>>0>p>>>0)break C;if(Zr(e,c+4|0,E),I=I+4|0,!(p>>>0>AA>>>0))break}else p=0}ra(e,32,vA,p,8192^Z),p=(0|p)<(0|vA)?vA:p;continue i}if((0|T)<0&&re)break s;if(AA=61,(0|(p=0|lt[0|i](e,D[c+64>>3],vA,T,Z,p)))>=0)continue i;break r}g[c+55|0]=A[c+64>>2],T=1,E=m,Z=I;break o}I=l[p+1|0],p=p+1|0}if(e)break A;if(!WA)break c;for(p=1;;){if(e=A[(p<<2)+s>>2]){if(Vt((p<<3)+a|0,e,r,o),cA=1,(0|(p=p+1|0))!=10)continue;break A}break}if(cA=1,p>>>0>=10)break A;for(;;){if(A[(p<<2)+s>>2])break u;if((0|(p=p+1|0))==10)break}break A}AA=28;break r}if((0|(I=(0|T)>(0|(O=AA-E|0))?T:O))>(2147483647^hA))break s;if(AA=61,(0|le)<(0|(p=(0|(T=I+hA|0))<(0|vA)?vA:T)))break r;ra(e,32,p,T,Z),Zr(e,KA,hA),ra(e,48,p,T,65536^Z),ra(e,48,I,O,0),Zr(e,E,O),ra(e,32,p,T,8192^Z);continue}break}cA=0;break A}AA=61}A[56798]=AA}cA=-1}return J=c+80|0,cA}function Ne(e,t,r,a,s,i,o,c,f){var m,p,I,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0,ft=0,Nt=0,Kt=0,er=0,pr=0,hr=0,yr=0,Er=0,zr=0,Wr=0,oa=0,Xr=0,la=0,va=0;J=m=J-96|0,KA=65535&f,AA=-2147483648&(s^f),At=hA=65535&s;A:{if(!((p=f>>>16&32767)-32767>>>0>4294934529&(I=s>>>16&32767)-32767>>>0>=4294934530)){if(E=a,!(!a&(0|(vA=QA=2147483647&s))==2147418112?!(t|r):vA>>>0<2147418112)){O=a,AA=32768|s;break A}if(!(!(s=c)&(0|(cA=QA=2147483647&f))==2147418112?!(i|o):cA>>>0<2147418112)){O=c,AA=32768|f,t=i,r=o;break A}if(!(t|E|2147418112^vA|r)){if(!(s|i|o|cA)){AA=2147450880,t=0,r=0;break A}AA|=2147418112,t=0,r=0;break A}if(!(s|i|2147418112^cA|o)){if(s=t|E,a=r|vA,t=0,r=0,!(a|s)){AA=2147450880;break A}AA|=2147418112;break A}if(!(t|E|r|vA)){t=0,r=0;break A}if(!(s|i|o|cA)){t=0,r=0;break A}(0|vA)==65535|vA>>>0<65535&&(QA=(E=!(a|hA))<<6,s=YA(f=E?t:a)+32|0,ta(m+80|0,t,r,a,hA,(f=QA+((0|(f=YA(E?r:hA)))==32?s:f)|0)-15|0),WA=16-f|0,a=A[m+88>>2],At=A[m+92>>2],r=A[m+84>>2],t=A[m+80>>2]),cA>>>0>65535||(hA=(f=!(c|KA))<<6,E=YA(s=f?i:c)+32|0,ta(m- -64|0,i,o,c,KA,(s=hA+((0|(s=YA(f?o:KA)))==32?E:s)|0)-15|0),WA=16+(WA-s|0)|0,c=A[m+72>>2],KA=A[m+76>>2],i=A[m+64>>2],o=A[m+68>>2])}if(s=i,i=o<<15|i>>>17,zr=r,QA=bt(re=-32768&(f=s<<15),s=0,r,0),ze=s=$,Wr=i,vA=t,t=bt(i,0,t,0),i=$+s|0,r=t>>>0>(f=t+QA|0)>>>0?i+1|0:i,E=0,t=bt(vA,T,re,T),s=(i=f)+$|0,hA=s=t>>>0>(cA=E+t|0)>>>0?s+1|0:s,oa=(0|i)==(0|s)&E>>>0>cA>>>0|s>>>0<i>>>0,Xr=a,le=bt(re,T,a,0),la=$,t=bt(zr,T,Wr,T),E=$+la|0,E=t>>>0>(Me=t+le|0)>>>0?E+1|0:E,t=KA<<15|c>>>17,a=bt(at=c<<15|o>>>17,0,vA,T),i=$+E|0,Nt=i=a>>>0>(ft=a+Me|0)>>>0?i+1|0:i,i=(a=(0|r)==(0|ze)&f>>>0<QA>>>0|r>>>0<ze>>>0)+i|0,KA=i=r>>>0>(Kt=r+ft|0)>>>0?i+1|0:i,o=Kt,r=i,At=bt(re,T,er=65536|At,Z),va=$,a=bt(Xr,O,Wr,T),s=$+va|0,f=s=a>>>0>(pr=a+At|0)>>>0?s+1|0:s,t=bt(hr=-2147483648|t,0,vA,T),i=$+s|0,i=t>>>0>(yr=t+pr|0)>>>0?i+1|0:i,t=bt(at,O,zr,T),Er=i,i=i+$|0,QA=t>>>0>(ze=t+yr|0)>>>0?i+1|0:i,s=r+ze|0,i=re=(t=0)>>>0>(vA=t+o|0)>>>0?s+1|0:s,r=(t=vA+oa|0)>>>0<vA>>>0?i+1|0:i,WA=((I+p|0)+WA|0)-16383|0,a=bt(hr,O,zr,T),c=$,s=bt(er,O,Wr,T),i=$+c|0,Z=(0|c)==(0|(i=s>>>0>(o=s+a|0)>>>0?i+1|0:i))&a>>>0>o>>>0|i>>>0<c>>>0,c=i,s=bt(at,O,Xr,O),i=$+i|0,s=i=(a=s+o|0)>>>0<s>>>0?i+1|0:i,o=(0|i)==(0|c)&a>>>0<o>>>0|i>>>0<c>>>0,i=0,i=(c=o)>>>0>(o=o+Z|0)>>>0?1:i,c=o,o=bt(hr,O,er,O),i=$+i|0,oa=c=c+o|0,o=o>>>0>c>>>0?i+1|0:i,c=a,T=s,s=(0|E)==(0|la)&le>>>0>Me>>>0|E>>>0<la>>>0,i=0,s=((Z=E=(0|E)==(0|Nt)&Me>>>0>ft>>>0|E>>>0>Nt>>>0)>>>0>(E=s+E|0)>>>0?1:i)+T|0,i=o,Z=s=(a=a+E|0)>>>0<E>>>0?s+1|0:s,le=a,s=a=(0|s)==(0|T)&a>>>0<c>>>0|s>>>0<T>>>0,E=a=a+oa|0,o=i=s>>>0>a>>>0?i+1|0:i,s=bt(at,O,er,O),T=$,a=bt(hr,O,Xr,O),i=$+T|0,a=i=a>>>0>(c=a+s|0)>>>0?i+1|0:i,s=(i=(0|T)==(0|i)&s>>>0>c>>>0|i>>>0<T>>>0)+o|0,o=s=a>>>0>(Me=a+E|0)>>>0?s+1|0:s,i=c+Z|0,s=i=(a=(s=0)+le|0)>>>0<s>>>0?i+1|0:i,c=(0|Z)==(0|i)&a>>>0<le>>>0|i>>>0<Z>>>0,i=o,i=(o=c+(T=Me)|0)>>>0<c>>>0?i+1|0:i,le=o,c=a,E=s,s=(a=(a=(a=(0|f)==(0|va)&At>>>0>pr>>>0|f>>>0<va>>>0)+(f=(0|f)==(0|Er)&pr>>>0>yr>>>0|f>>>0>Er>>>0)|0)+(s=(0|QA)==(0|Er)&ze>>>0<yr>>>0|QA>>>0<Er>>>0)|0)+E|0,i=o=i,E=o=(c=(0|(s=(a=f=(Z=QA)+c|0)>>>0<Z>>>0?s+1|0:s))==(0|E)&c>>>0>a>>>0|s>>>0<E>>>0)+le|0,o=i=c>>>0>o>>>0?i+1|0:i,c=a,i=0,f=s,s=s+((T=Z=(0|KA)==(0|re)&vA>>>0<Kt>>>0|KA>>>0>re>>>0)>>>0>(Z=Z+((0|KA)==(0|Nt)&ft>>>0>Kt>>>0|KA>>>0<Nt>>>0)|0)>>>0?1:i)|0,i=o,f=i=(o=c=(0|(s=(a=a+Z|0)>>>0<Z>>>0?s+1|0:s))==(0|f)&a>>>0<c>>>0|s>>>0<f>>>0)>>>0>(c=c+E|0)>>>0?i+1|0:i,65536&i?WA=WA+1|0:(E=hA>>>31|0,i=f<<1|c>>>31,c=c<<1|s>>>31,f=i,i=s<<1|a>>>31,a=a<<1|r>>>31,s=i,i=hA<<1|cA>>>31,cA<<=1,hA=i,i=r<<1|t>>>31,t=t<<1|E,r=i|(o=0)),(0|WA)>=32767)AA|=2147418112,t=0,r=0;else{e:{if((0|WA)<=0){if((o=1-WA|0)>>>0<=127){ta(m+48|0,cA,hA,t,r,i=WA+127|0),ta(m+32|0,a,s,c,f,i),Ha(m+16|0,cA,hA,t,r,o),Ha(m,a,s,c,f,o),cA=A[m+32>>2]|A[m+16>>2]|!!(A[m+48>>2]|A[m+56>>2]|A[m+52>>2]|A[m+60>>2]),hA=A[m+36>>2]|A[m+20>>2],t=A[m+40>>2]|A[m+24>>2],r=A[m+44>>2]|A[m+28>>2],a=A[m>>2],s=A[m+4>>2],o=A[m+8>>2],i=A[m+12>>2];break e}t=0,r=0;break A}o=c,i=65535&f|WA<<16}O|=o,AA|=i,(!t&(0|r)==-2147483648?!(cA|hA):(0|r)>0|(0|r)>=0)?t|cA|-2147483648^r|hA?(t=a,r=s):(E=AA,AA=(a=(0|(i=s))==(0|(r=(r=t=1&a)>>>0>(t=t+a|0)>>>0?i+1|0:i))&t>>>0<a>>>0|r>>>0<i>>>0)>>>0>(O=a+O|0)>>>0?E+1|0:E):(a=(0|s)==(0|(r=(t=a+1|0)?s:s+1|0))&t>>>0<a>>>0|r>>>0<s>>>0,s=AA,AA=(O=a+O|0)>>>0<a>>>0?s+1|0:s)}}A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=O,A[e+12>>2]=AA,J=m+96|0}function Zt(e,t,r,a,s,i,o){var c,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0;J=c=J-480|0,A[c+476>>2]=0,A[c+456>>2]=0,A[c+460>>2]=0,A[c+448>>2]=0,A[c+452>>2]=0,A[c+440>>2]=0,A[c+444>>2]=0,A[c+432>>2]=0,A[c+436>>2]=0,f=0;A:if(A[e+684>>2]){for(O=o?A[o>>2]:O;p=l[t+f|0],g[(c+112|0)+f|0]=p,m=f+1|0,p&&(p=f>>>0<158,f=m,p););if(g[m+(c+112|0)|0]=0,!((cA=268435456&i)|!(8&A[47197]))){m=0;e:if(223&(p=l[0|t]))for(f=0;;){if(g[(c+272|0)+f|0]=p,!(223&(p=l[(m=f+1|0)+t|0])))break e;if(I=f>>>0<118,f=m,!I)break}g[(f=c+272|0)+m|0]=0,A[c+48>>2]=f,fr(A[47195],(0|i)>=0?87019:86877,c+48|0)}A[c+464>>2]=t,A[e+8208>>2]=0,A[e+8212>>2]=0,s&&(g[0|s]=0);e:{r:if(223&(f=l[0|t]))for(hA=536870912&i,vA=4096&i,QA=c+105|0,m=t,p=0;;){I=Gt(c+476|0,m),AA=!!(0|rr(A[c+476>>2]))+AA|0,T=l[7668+(f=(E=255&f)+e|0)|0];s:if(!((Z=A[c+476>>2])-48>>>0<10|Z-2406>>>0<10)|(AA?l[e+170|0]:0)){i:if((p=A[c+476>>2]-A[e+600>>2]|0)>>>0>127||!(p=A[6192+((p<<2)+e|0)>>2])){if(T){for(Z=5168+((E<<2)+e|0)|0,T=T+(f=l[f+7924|0])|0,WA=E|l[m+1|0]<<8,p=0;A[7184+(m=(f<<2)+e|0)>>2]==(0|WA)&&(A[c+472>>2]=A[c+464>>2],Mt(e,c+472|0,t,2,A[m+6704>>2],c+432|0,i,O),(0|(m=A[c+432>>2]))>0&&(m=m+35|0,A[c+432>>2]=m),p=1,Mt(e,c+464|0,t,1,A[Z>>2],c+448|0,i,O),A[c+448>>2]>(0|m)||(m=A[c+444>>2],A[c+456>>2]=A[c+440>>2],A[c+460>>2]=m,m=A[c+436>>2],A[c+448>>2]=A[c+432>>2],A[c+452>>2]=m,A[c+464>>2]=A[c+472>>2])),T>>>0>(f=f+1|0)>>>0;);if(p)break i}c:{o:{if(!(f=A[5168+((E<<2)+e|0)>>2])){if(Mt(e,c+464|0,t,0,A[e+5168>>2],c+448|0,i,O),A[c+448>>2])break c;if(16&l[188808])break o;if(p=Gt(c+468|0,E=(m=A[c+464>>2])-1|0),f=A[c+468>>2],!(A[e+600>>2]<=0|(0|f)>577)){if(ki(f)){A[c+32>>2]=21,De(r,87049,c+32|0);break e}f=A[c+468>>2]}if((0|f)==57384&&((0|(T=A[e+92>>2]))<=A[47352]||(A[47352]=T)),ni(f)&&((0|(f=A[e+72>>2]))<=A[47352]||(A[47352]=f)),!((T=(f=A[c+468>>2])-192|0)>>>0>413)&&(T=l[T+94240|0])&&(p=p-1|0,!(l[m-2|0]==32&l[p+m|0]==32))){for(A[c+472>>2]=E,g[0|E]=T;I=l[(f=m)+p|0],g[0|f]=I,m=f+1|0,(0|I)!=32;);if((0|p)>0&&je(f,32,p),A[e+24>>2]&&!((0|En(94222,A[c+468>>2]))<=0)){A[c+464>>2]=E,p=0;break s}p=0,g[0|r]=0,A[c+464>>2]=t,A[e+8208>>2]=0,A[e+8212>>2]=0;break s}if(!(f=Os(f))||(0|(m=A[f+4>>2]))==A[e+600>>2])break o;if((0|m)==A[e+188>>2]){A[c+4>>2]=kn(c- -64|0,A[e+192>>2]),A[c>>2]=21,De(r,87218,c);break e}if(!(4&l[f+16|0]))break o;A[c+20>>2]=kn(c- -64|0,A[f+12>>2]),A[c+16>>2]=21,De(r,87218,c+16|0);break e}if(Mt(e,c+464|0,t,1,f,c+448|0,i,O),A[c+448>>2])break c}o:if(!((f=A[c+476>>2])-768>>>0<112)){if(rr(f)){if(g[(I+A[c+464>>2]|0)-1|0]<33&(0|AA)<=1)break o;if(g[0|r]=0,!o)break r;A[o>>2]=4096|A[o>>2];break r}jt(e,A[c+476>>2],-1,c+272|0,0),l[c+272|0]&&(A[c+448>>2]=1,A[c+452>>2]=c+272)}A[c+464>>2]=(I+A[c+464>>2]|0)-1;break i}A[e+288>>2]=0}else Mt(e,c+464|0,t,I,p,c+448|0,i,O);if(m=(f=A[c+452>>2])||86135,A[c+452>>2]=m,p=0,!(A[c+448>>2]<=0)){if(f=1|A[c+456>>2],(0|i)<0)break A;if(!(l[0|m]!=21|vA)){qe(r,m);break e}if(!(!(8&A[47197])|cA))i:if(f=A[47195],(0|(I=A[f+76>>2]))>=0&(!I|A[56823]!=(-1073741825&I)))E=A[(I=f+76|0)>>2],A[I>>2]=E||1073741823,A[f+80>>2]==10||(0|(E=A[f+20>>2]))==A[f+16>>2]?c0(f):(A[f+20>>2]=E+1,g[0|E]=10),A[I>>2]=0;else{if(A[f+80>>2]!=10&&(0|(I=A[f+20>>2]))!=A[f+16>>2]){A[f+20>>2]=I+1,g[0|I]=10;break i}c0(f)}if(I=-32769&(f=A[c+456>>2]),A[c+456>>2]=I,!(!s|!I|(1024&f?hA:0))){e=A[c+464>>2],qe(s,m),f=I|(KA=(r=e)-wt(t,e=c+112|0,He(e))|0,(1151&f)==1024?KA:0);break A}(f=A[c+460>>2])&&(g[0|f]=69),nn(e,r,a,m)}}else g[c+104|0]=95,wt(QA,m,I),f=1,g[105+(c+I|0)|0]=0,Re(e,c+104|0,c- -64|0),p-1>>>0<=4294967293&&(f=He(f=c- -64|0)+f|0,g[0|f]=11,g[f+1|0]=0,f=0),nn(e,r,a,c- -64|0),A[c+464>>2]=m+I,p=f;if(m=A[c+464>>2],!(223&(f=l[0|m])))break}wt(t,e=c+112|0,He(e))}f=0}return J=c+480|0,f}function Ra(e,t){var r,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0;J=r=J-2976|0,A[t>>2]=1,a=A[e+20>>2],A[(c=r+2960|0)>>2]=A[e+16>>2],A[c+4>>2]=a,a=A[e+12>>2],A[(c=r+2952|0)>>2]=A[e+8>>2],A[c+4>>2]=a,a=A[e+4>>2],A[r+2944>>2]=A[e>>2],A[r+2948>>2]=a,A[50303]||Ke();A:if(e=A[r+2948>>2],l[0|e]&&e||((e=A[r+2944>>2])||(e=(e=A[r+2952>>2])||85055,A[r+2944>>2]=e),ar(a=r+80|0,e,60),Fi(a,0),!(i=ha(201216,a))||(A[r+2948>>2]=A[i+4>>2]+1,l[r+2958|0]|l[r+2956|0]|l[r+2957|0]))){AA=r+1536|0,J=O=J-336|0;e:if(!(!(e=A[4+(Z=r+2944|0)>>2])|!l[0|e])){if((0|(cA=He(e)))>=0){for(a=cA>>>0>=79?79:cA,p=1;e=Ht(g[A[Z+4>>2]+s|0]),g[(O+256|0)+s|0]=e,p=((255&e)==45)+p|0,e=(0|a)!=(0|s),s=s+1|0,e;);if((0|p)!=1)break e}p=1}if((0|(I=A[50303]))<=0)A[AA>>2]=0,e=0;else{for(c=(0|p)>=0;;){m=A[201216+(QA<<2)>>2];e:if(Ba(A[m+8>>2],88032,3)){if((e=A[Z+4>>2])&&Ba(e,91687,3)){if(c){e=100;r:if(p){if(a=0,s=A[m+4>>2],!(hA=l[0|s])){if(!Ba(O+256|0,90013,9))break r;break e}for(;;){for(WA=1,f=s+1|0,vA=1,KA=0,s=0;(0|s)<(0|cA)&&(0|(e=g[(O+256|0)+s|0]))!=45||(e=0),KA=((E=(0|(T=l[s+f|0]))==45)&!!(0|(vA=(E?0:T)<<24>>24==(0|e)?vA:0)))+KA|0,s=s+1|0,WA=E+WA|0,T;);if(s=s+f|0,(E=vA+KA|0)&&(a=(0|(e=P((f=(0|(e=p-E|0))<=0?5:5-e|0)-((0|(e=WA-E|0))>0?e:0)|0,100)-(hA<<24>>24<<1)|0))>(0|a)?e:a),!(hA=l[0|s]))break}if(!(e=a))break e}(a=A[Z>>2])&&(e=vr(a,A[m>>2])?vr(a,A[m+8>>2])?e:e+400|0:e+500|0),((s=l[Z+12|0])-1&255)>>>0>1||((a=l[m+12|0])-1&255)>>>0>1||(e=(0|a)!=(0|s)?e-50|0:e+50|0),s=l[Z+13|0],e=l[m+12|0]!=2|s>>>0>12?e:l[m+13|0]>12?e+5|0:e,(a=l[m+13|0])&&((a=((s?P(s,100):3e3)>>>0)/(a>>>0)|0)>>>0<=99&&(a=1e4/(a>>>0)|0),e=(f=e)+((e=5-(((a-100&65535)>>>0)/10|0)|0)>>31&e)|0,e=s?e+10|0:e),e=(0|e)<=1?1:e}else{if(Ba(A[m+8>>2],O+256|0,cA))break e;e=100}A[AA+(o<<2)>>2]=m,A[m+16>>2]=e}else A[AA+(o<<2)>>2]=m;o=o+1|0}if((0|I)==(0|(QA=QA+1|0)))break}A[AA+(o<<2)>>2]=0,e=0,o&&($s(AA,o,8),e=o)}if(J=O+336|0,p=e,e||(A[t>>2]=0,e=ha(201216,85055),A[r+1536>>2]=e,p=!!(0|e)),t=l[r+2957|0],c=2,(0|(e=l[r+2956|0]))!=2&&(c=2,(t-1&255)>>>0<12||(le=(0|e)!=1,c=(0|e)==1)),I=(o=A[132136+(c<<2)>>2])+(T=t>>>0<60)|0,e=0,(0|p)>0)for(a=0;;){i=A[(r+1536|0)+(re<<2)>>2];e:{r:{s:{if(le){if(T||(t=0,a))break r}else{if(t=l[i+12|0],a|T)break s;t=(0|t)!=(0|c)}if(s=0,t|l[i+13|0]<60)break e;break r}if((0|t)!=(0|c)){s=a;break e}}A[(r+80|0)+(a<<2)>>2]=i,s=a+1|0}e:if(l[i+15|0]){if(E=0,t=e,a=s,!((0|e)>11))for(;;){if((s=l[0|I])||(I=o,s=l[0|o]),e=A[i+12>>2],f=P(t,24)+202624|0,A[f+8>>2]=A[i+8>>2],A[f+12>>2]=e,e=A[i+4>>2],A[f>>2]=A[i>>2],A[f+4>>2]=e,e=A[i+20>>2],A[f+16>>2]=A[i+16>>2],A[f+20>>2]=e,g[f+14|0]=s,A[(r+80|0)+(a<<2)>>2]=f,I=I+1|0,a=a+1|0,e=t+1|0,(E=E+1|0)>>>0>=l[i+15|0])break e;if(s=(0|t)<11,t=e,!s)break}}else a=s;if((0|(re=re+1|0))==(0|p))break}else{if(!i)break A;a=0}e:if(!(!(s=l[0|I])|(0|e)>=12))for(;;){if(t=A[i+12>>2],o=P(e,24)+202624|0,A[o+8>>2]=A[i+8>>2],A[o+12>>2]=t,t=A[i+4>>2],A[o>>2]=A[i>>2],A[o+4>>2]=t,t=A[i+20>>2],A[o+16>>2]=A[i+16>>2],A[o+20>>2]=t,g[o+14|0]=s,A[(r+80|0)+(a<<2)>>2]=o,a=a+1|0,!(s=l[0|(I=I+1|0)]))break e;if(t=(0|e)<11,e=e+1|0,!t)break}a?(e=A[(r+80|0)+(l[r+2958|0]%(0|a)<<2)>>2],(t=l[e+14|0])?(g[202976]=0,A[r+48>>2]=47,De(r+2971|0,91351,r+48|0),g[r+2971|0]=0,t>>>0<=9?(A[r+20>>2]=t,A[r+16>>2]=r+2971,De(202976,91378,r+16|0)):(A[r+36>>2]=t-10,A[r+32>>2]=r+2971,De(202976,91503,r+32|0)),e=A[e+8>>2],A[r+4>>2]=202976,A[r>>2]=e,e=202912,De(202912,87760,r)):e=A[e+8>>2]):e=0}else{if(e=A[i+8>>2],!l[202976])break A;A[r+64>>2]=e,A[r+68>>2]=202976,e=202912,De(202912,87760,r- -64|0)}return J=r+2976|0,e}function Za(e,t,r,a,s){var i,o,c=0,f=0,m=0,p=0,I=0,E=0,T=0;J=i=J-464|0,g[i+432|0]=0,g[i+368|0]=0,g[i+304|0]=0,g[i+292|0]=0,I=(0|t)/10|0,c=A[33273];A:{if(!(o=2&a)|A[33272]!=2){T=32&a?113:111,p=1&a,E=t-P(I,10)|0;e:{r:{s:{i:{c:{o:{u:{l:if(l[0|c])c=0;else{n:{if(8&a){if(A[i+288>>2]=t,De(f=i+452|0,91198,i+288|0),c=Re(e,f,i+304|0)){f=0;break l}A[i+272>>2]=t,De(f=i+452|0,91314,i+272|0),c=Re(e,f,i+304|0),f=0}else{if(!p)break n;if(m=qe(i+432|0,133104),4&a){if(A[i+260>>2]=T,A[i+256>>2]=t,De(f=i+452|0,91324,i+256|0),c=Re(e,f,i+304|0),l[133116]&&c)break u;if(f=c,c)break l}A[i+244>>2]=T,A[i+240>>2]=t,De(f=i+452|0,91384,i+240|0),f=c=Re(e,f,i+304|0)}if(c)break l}n:{if(o){if(!(1&g[133096]))break n;A[i+208>>2]=t,De(c=i+452|0,91498,i+208|0),c=Re(e,c,i+304|0)}else m=A[e+108>>2],A[i+224>>2]=t,De(c=i+452|0,(0|r)>=2?91700:(262144&m)>>>18|0?91534:91700,i+224|0),c=Re(e,c,i+304|0);if(c)break l}!p|!(32&l[e+109|0])?(A[i+192>>2]=t,De(c=i+452|0,91766,i+192|0),c=Re(e,c,i+304|0)):c=0}if(!(16&a)|(0|t)>9)break c;c=f;break o}if(qe(m,133116),!(16&a)|(0|t)>9)break i}Re(e,88875,i+368|0);break r}if(!c)break s;c=f}g[i+368|0]=0;break r}s:if(p&&(A[i+180>>2]=T,A[i+176>>2]=I,De(c=i+452|0,91846,i+176|0),Re(e,c,i+368|0))){if(f=1,!E|!(16&l[e+109|0]))break s;na(i+368|0,133104)}else f||(A[i+160>>2]=I,De(f=i+452|0,512&a?91936:92016,i+160|0),Re(e,f,i+368|0),f=0);if(c=E,l[i+368|0]||(c=E,16&l[e+106|0]&&(A[i+144>>2]=254&I,De(c=i+452|0,92016,i+144|0),Re(e,c,i+368|0),c=(0|t)%20|0)),g[i+304|0]=0,I=c,(0|c)<=0)c=f;else{if(o&&(c=A[33273],l[0|c])){qe(i+304|0,c),g[i+432|0]=0,m=p;break e}if(m=0,8&a&&(A[i+128>>2]=I,De(a=i+452|0,91314,i+128|0),m=Re(e,a,i+304|0)),!p|16&l[e+104|0]||(A[i+116>>2]=T,A[i+112>>2]=I,De(a=i+452|0,91384,i+112|0),f=(m=Re(e,a,i+304|0))?1:f),c=f,!m){s:{if(!o|!(1&A[33274])){if(!(16&l[e+104|0])&&o)break s;f=A[e+108>>2],A[i+96>>2]=I,De(a=i+452|0,(0|r)>=2?91700:(262144&f)>>>18|0?91534:91700,i+96|0),r=Re(e,a,i+304|0)}else A[i+80>>2]=I,De(r=i+452|0,91498,i+80|0),r=Re(e,r,i+304|0);if(r)break r}A[i+64>>2]=I,De(r=i+452|0,91766,i- -64|0),Re(e,r,i+304|0)}}}m=p,l[i+432|0]|c|!p||((0|t)<20|(16&l[e+104|0]?0:E)||(Re(e,92162,i+432|0),m=1,!l[i+432|0]))&&(Re(e,92205,i+432|0),m=1)}if(!(!(r=g[i+304|0])|!(48&(t=A[e+104>>2]))|!l[i+368|0])){if(Re(e,90824,i+292|0),!m|!(8&l[e+109|0])||(g[i+292|0]=0),16&l[e+104|0]){A[i+28>>2]=i+432,A[i+24>>2]=i+368,A[i+20>>2]=i+292,A[i+16>>2]=i+304,De(s,91059,i+16|0),a=1;break A}A[i+12>>2]=i+432,A[i+8>>2]=i+304,A[i+4>>2]=i+292,A[i>>2]=i+368,De(s,91059,i),a=1;break A}512&t&&(!r|(0|(t=He(i+368|0)-1|0))<0||(c=l[A[144464+(g[0|(t=t+(i+368|0)|0)]<<2)>>2]+11|0]!=2,(0|(a=l[A[144464+(r<<2)>>2]+11|0]))==1&&(a=l[A[144464+(g[i+305|0]<<2)>>2]+11|0]),c|(255&a)!=2||(g[0|t]=0))),!(8&l[e+110|0])|!l[i+432|0]?(A[i+56>>2]=i+432,A[i+52>>2]=i+304,A[i+48>>2]=i+368,De(s,92282,i+48|0)):(A[i+36>>2]=i+304,A[i+32>>2]=i+368,(0|(t=De(s,90368,i+32|0)))>0&&(t=l[A[144464+(l[(r=t-1|0)+s|0]<<2)>>2]+11|0]==2?r:t),qe(t+s|0,i+432|0))}else qe(s,c);a=0}A:if(268435456&(e=A[e+104>>2])){if((0|He(s))<=0)break A;for(t=0,e=0;l[0|(r=e+s|0)]==6&&(t&&(g[0|r]=5),t=1),e=e+1|0,(0|He(s))>(0|e););}else if(256&e&&(t=0,!((0|(e=(p=He(s))-1|0))<0))){if(e)for(E=-2&p,c=0;l[0|(f=e+s|0)]==6?(r=1,t&&(g[0|f]=5)):r=t,l[0|(f=f-1|0)]==6?(t=1,r&&(g[0|f]=5)):t=r,e=e-2|0,(0|E)!=(0|(c=c+2|0)););1&p&&(!t|l[0|(e=e+s|0)]!=6||(g[0|e]=5))}return J=i+464|0,a}function Qs(e,t,r,a){var s,i,o=0,c=0,f=0,m=0,p=0,I=0,E=0;if(J=s=J-352|0,g[s+304|0]=0,g[s+224|0]=0,g[s+64|0]=0,f=A[A[47192]+292>>2],E=Gt(s+348|0,t),(1048320&(o=A[s+348>>2]))==57344&&(o&=255,A[s+348>>2]=o),2&a&&ps(o)&&Re(e,85437,s+304|0),o=xi(A[s+348>>2],e),A[s+348>>2]=o,I=1&a,jt(e,o,g[0|(i=t+E|0)],s+224|0,I),!(t=l[s+224|0])){A:if((t=h0(A[s+348>>2]))&&(A[s+348>>2]=16383&t,4&a)){switch(1073741823&(t>>=14)){case 0:case 3:break A}Re(e,t=A[131232+(t<<2)>>2],s+304|0),l[s+304|0]||(g[s+306|0]=vi(84744),p=t,t=s+304|3,Re(A[47194],p,t),l[s+307|0]&&(b[s+304>>1]=5385,t=He(t)+(s+304|0)|0,g[t+5|0]=0,g[t+4|0]=f,g[t+3|0]=21))}jt(e,A[s+348>>2],g[0|i],s+224|0,I),t=l[s+224|0]}A:{e:{if(t&=255){if((0|t)!=21)break e;qe(r,s+224|0),E=0;break A}if(t=1632,!((0|(o=A[s+348>>2]))<1632)){for(m=103360;;){if((0|o)>=(t+10|0)){if(!(t=A[(m=m+4|0)>>2]))break e;if((0|t)<=(0|o))continue;break e}break}(0|(t=48+(o-t|0)|0))<=0||jt(e,t,0,s+224|0,I)}}e:{r:{s:{i:{if(t=Os(A[s+348>>2])){if(o=A[t+4>>2],!t|1&(m=A[t+16>>2])||(c=A[47192],A[c+600>>2]==(0|o)|A[c+188>>2]==(0|o)|A[c+184>>2]==(0|o)||(g[s+144|0]=0,Re(c,A[t>>2],s- -64|0)?(0|(c=A[47192]))!=(0|e)&&(f=A[e+292>>2],qe(s+144|0,s- -64|0),g[s+66|0]=A[c+292>>2]):(g[s+66|0]=vi(84744),Re(A[47194],A[t>>2],s+144|0)),l[s+144|0]&&(b[s+64>>1]=5385,qe(3|(c=s- -64|0),p=s+144|0),c=He(p)+c|0,g[c+5|0]=0,g[c+4|0]=f,g[c+3|0]=21))),l[s+224|0])break e;if(!o||(f=A[47192],A[f+188>>2]!=(0|o)))break i;t=A[f+192>>2];break r}if(l[s+224|0])break e;m=0,o=0;break s}if((t=A[t+12>>2])&&!(2&m))break r}t=25966}if((A[e+212>>2]==(0|t)&(0|t)!=27503||(g[s+226|0]=vi(kn(s+47|0,t)),(t=A[47194])&&((0|(f=A[s+348>>2]))>55215||(0|(c=f-44032|0))<0?jt(t,f,g[0|i],s+224|3,I):(g[s+52|0]=32,t=p=s+53|0,f-50500>>>0>=588&&(t=Pr(4352+((c>>>0)/588|0)|0,p)+p|0),Pr(4449+(((f=(c>>>0)/28|0)>>>0)%21|0)|0,t),Pr(4519+(c-P(f,28)|0)|0,t+3|0),g[t+6|0]=32,g[t+7|0]=0,g[s+227|0]=0,t=s+224|3,Zt(A[47194],p,t,77,0,0,0),$t(A[47194],t,0,-1,0)),t=s+224|3,l[s+227|0]==21&&(g[s+226|0]=vi(s+224|4),jt(A[47194],A[s+348>>2],g[0|i],t,I)),ia(A[A[32972]+60>>2]),l[s+227|0]&&(b[s+224>>1]=5385,t=He(t)+(s+224|0)|0,g[t+3|0]=21,I=A[e+292>>2],g[t+5|0]=0,g[t+4|0]=I)),!l[s+224|0]))&&(16&m||(is(A[s+348>>2])&&Re(A[47192],85683,s+224|0),l[s+224|0]||(Or(A[s+348>>2])||Re(A[47192],85778,s+224|0),l[s+224|0]||zs(85992,s+224|0,0))),!(8&m)||4&a)){if(t=A[s+348>>2],(0|o)!=10240?(A[s+32>>2]=t,De(s+52|0,86013,s+32|0)):(o=s+52|0,1&t&&(g[s+52|0]=49,o=s+53|0),2&t&&(g[0|o]=50,o=o+1|0),4&t&&(g[0|o]=51,o=o+1|0,t=A[s+348>>2]),8&t&&(g[0|o]=52,o=o+1|0,t=A[s+348>>2]),16&t&&(g[0|o]=53,o=o+1|0,t=A[s+348>>2]),32&t&&(g[0|o]=54,o=o+1|0,t=A[s+348>>2]),64&t&&(g[0|o]=55,o=o+1|0,t=A[s+348>>2]),128&t&&(g[0|o]=56,o=o+1|0),g[0|o]=0),t=s+224|0,m=l[s+52|0])for(o=s+52|0;t=He(t)+t|0,g[0|t]=23,t=t+1|0,jt(A[47192],m<<24>>24,0,t,1),(a=l[0|t])&&(0|a)!=21||(0|(a=g[0|o]))<97||zs(A[130860+((255&a)<<2)>>2],t,0),m=l[0|(o=o+1|0)];);t=He(t)+t|0,g[0|t]=9,g[t+1|0]=0}}t=He(r),2&l[e+144|0]?(A[s+16>>2]=255,A[s+28>>2]=s+304,A[s+24>>2]=s+224,A[s+20>>2]=s- -64,De(s+144|0,86210,s+16|0)):(A[s>>2]=255,A[s+12>>2]=s+224,A[s+8>>2]=s+304,A[s+4>>2]=s- -64,De(s+144|0,86210,s)),He(s+144|0)+t>>>0>199||qe(t+r|0,s+144|0)}return J=s+352|0,E}function bs(e,t,r,a,s,i,o){var c,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0,Me=0,ze=0,At=0,at=0,ft=0;J=c=J-528|0,cA=o?A[o>>2]:0,re=A[s+4>>2];A:{e:{if(A[e+220>>2]>0){ar(m=c+352|0,t,160),J=T=J-176|0,Z=1-(O=A[e+220>>2])|0,AA=A[e+224>>2],hA=A[e+216>>2],I=m;r:{s:{for(;;){if(vA=Gt(T+172|0,I),f=A[T+172>>2]){if((0|f)<(0|O)|(0|f)>(0|hA))break s;if(AA){if((0|(f=g[AA+(f-O|0)|0]))<=0)break s}else f=f+Z|0;if(I=I+vA|0,g[E+T|0]=f,f=160,(0|(E=E+1|0))!=160)continue}else f=E;break}if(AA=0,g[f+T|0]=0,Z=g[0|T],A[T+172>>2]=Z,Z){for(le=2+(hA-O|0)|0,O=f=T;;){hA=f+1|0;i:{if((vA=A[e+8180>>2])&&(E=0,!((0|(I=b[vA>>1]))>(0|(WA=(g[0|hA]<<8)+Z|0)))))for(;;){if((0|I)==(0|WA)){Z=E+le|0,A[T+172>>2]=Z,f=f+2|0;break i}if(!((0|WA)>=(0|(I=b[vA+((E=E+1|0)<<1)>>1]))))break}f=hA}if(QA=63&Z|QA<<6,(0|(E=AA+6|0))<8?AA=E:(AA=AA-2|0,g[0|O]=QA>>AA,O=O+1|0),Z=g[0|f],A[T+172>>2]=Z,!Z)break}(0|AA)<=0||(g[0|O]=QA<<8-AA,O=O+1|0)}else O=T;g[0|O]=0,wt(m,T,f=O-T|0),O=64|f;break r}O=He(m)}J=T+176|0,T=m}else O=He(t),T=t;if(m=l[0|T]){for(f=0,E=T;p=1023&(p=(p<<3)+m|0)^p>>>8,f=f+1|0,m=l[0|(E=E+1|0)];);f=f+p&1023}else f=0;if(p=A[692+((f<<2)+e|0)>>2]){if(f=l[0|p])break e;f=0;break A}if(f=0,!s)break A;A[s>>2]=0;break A}for(vA=1073741824&re,WA=2048&i,re=512&cA,le=65536&cA,Me=1&cA,ze=2&cA,cA=8&i,At=1024&i,hA=4&i,at=63&O,ft=e+8233|0;;){i=(255&f)+p|0;e:{r:if((127&(f=l[p+1|0]))==(0|O)&&!Ba(T,p+2|0,at)){p=2+((63&f)+p|0)|0;s:{if(f<<24>>24<0)AA=0,g[0|a]=0;else{if((0|(AA=He(p)))>=160)break s;qe(a,p),p=1+(p+AA|0)|0}if(m=0,i>>>0<=p>>>0)f=r,I=0;else{E=0,I=0;i:{for(;;){p=(f=p)+1|0;c:if((f=l[0|f])>>>0>=100){if(Z=A[e+320>>2],f>>>0>=132){E|=Z>>>f-132&1;break c}E|=!(Z>>>f-100&1)}else{if(f>>>0>=81){Z=f-80|0,QA=i-p|0;o:if(o)for(f=0;;){if(KA=P(f,12)+o|0,!l[KA+10|0])break o;if(E=!!(12&l[KA+1|0])|E,KA=(0|f)!=(0|Z),f=f+1|0,!KA)break}if(u0(r,p,QA)|1&E)break r;A[33264]=Z,f=r+QA|0,I|=128,p=i;break i}f>>>0>=65?(I=15&f|-16&I,I=12&~f?I:512|I):f>>>0>=32?m|=1<<f-32:I|=1<<f}if(!(i>>>0>p>>>0))break}if(f=r,1&E)break e}if(65536&m&&!hA||At&&49152&m)break e}if(hA&&(16384&m||!cA&&32768&m)||(ze?0:512&m)|(Me?0:1024&m)|(le?0:33554432&I)||!(!(131072&m)|uA[A[47192]+8204>>2]<=f>>>0|vA)|(re?0:262144&m)|(8&l[A[47192]+8242|0]?0:8192&m)||16&m&&(!A[e+8184>>2]&(!cA|!A[e+8192>>2])||!(!cA|A[e+212>>2]!=25966)&&2097152&A[e+8232>>2])||(A[e+8188>>2]?0:64&m)|(!A[e+8196>>2]|WA?32&m:0)||!(!(65536&I)|A[e+212>>2]!=26741|128&l[0|ft])|(A[47192]!=(0|e)?524288&m:0))break e;i:{c:{o:{if(!s){if(!AA)break o;break i}if(A[s+4>>2]=m,A[s>>2]=1073741824|I,AA)break c}if(f=0,!(8&l[188788]))break A;ln(s,e=c+272|0),A[c>>2]=t,A[c+4>>2]=e,fr(A[47195],89330,c);break A}A[s>>2]=-1073741824|I}if(8&l[188788]&&(Je(a,c- -64|0),l[A[47192]+172|0]==(I>>>29&1)&&(!o|!(128&I)?(A[c+48>>2]=t,fr(A[47195],89426,c+48|0)):(wt(e=c+352|0,a=r,r=f-r|0),g[351+(r+c|0)|0]=0,A[c+32>>2]=t,A[c+36>>2]=e,fr(A[47195],89397,c+32|0)),ln(s,e=c+272|0),t=A[47195],A[c+16>>2]=c- -64,A[c+20>>2]=e,fr(t,89534,c+16|0))),l[Gt(c- -64|0,T)+T|0]|!s||rr(A[c+64>>2]))break A;A[s>>2]=134217728|A[s>>2];break A}TA(89236,86634,2467,94846),kA()}p=i}if(!(f=l[0|p]))break}f=0}return J=c+528|0,f}function Is(e,t,r,a,s){var i,o=0,c=0;J=i=J-304|0,g[i+278|0]=0;A:{if((0|t)>0&&(1&a&&(2&a&&(A[i+164>>2]=r,A[i+160>>2]=t,De(o=i+290|0,89701,i+160|0),o=Re(e,o,i+224|0))||1&g[133096]&&(A[i+148>>2]=r,A[i+144>>2]=t,De(o=i+290|0,89757,i+144|0),o=Re(e,o,i+224|0))||(A[i+132>>2]=r,A[i+128>>2]=t,De(o=i+290|0,89894,i+128|0),o=Re(e,o,i+224|0)))||(A[i+116>>2]=r,A[i+112>>2]=t,De(o=i+290|0,89974,i+112|0),o=Re(e,o,i+224|0))))break A;if((0|(c=(0|t)%100|0))>=20&&Re(e,90022,i+278|0),1&a){if(2&a){o=c-11|0;e:{r:{s:switch((448&A[A[47192]+108>>2])-64>>>6|0){case 0:if(o>>>0<9)break r;if(a=90418,(0|(o=(0|t)%10|0))==1)break e;if(o-2>>>0>=3)break r;a=90453;break e;case 1:if(t-2>>>0>=3)break r;a=90453;break e;case 2:if(o>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;a=90453;break e;case 3:if(a=90508,o>>>0<9)break e;a=(a=(0|t)%10|0)?(0|a)==1?90453:90586:90508;break e;case 4:break s;default:break r}if(!(o>>>0<9)){if(a=90537,(0|(o=(0|t)%10|0))==1)break e;if(!(o-2>>>0>=3)){a=90453;break e}}}a=90586}if(A[i+100>>2]=r,A[i+96>>2]=a,De(a=i+290|0,90058,i+96|0),o=0,Re(e,a,i+224|0))break A}if(a=c-11|0,1&g[133096]){e:{r:{s:switch((448&A[A[47192]+108>>2])-64>>>6|0){case 0:if(a>>>0<9)break r;if(o=90418,(0|(c=(0|t)%10|0))==1)break e;if(c-2>>>0>=3)break r;o=90453;break e;case 1:if(t-2>>>0>=3)break r;o=90453;break e;case 2:if(a>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;o=90453;break e;case 3:if(o=90508,a>>>0<9)break e;o=(o=(0|t)%10|0)?(0|o)==1?90453:90586:90508;break e;case 4:break s;default:break r}if(!(a>>>0<9)){if(o=90537,(0|(c=(0|t)%10|0))==1)break e;if(!(c-2>>>0>=3)){o=90453;break e}}}o=90586}if(A[i+84>>2]=r,A[i+80>>2]=o,De(c=i+290|0,90110,i+80|0),o=0,Re(e,c,i+224|0))break A}e:{r:{s:switch((448&A[A[47192]+108>>2])-64>>>6|0){case 0:if(a>>>0<9)break r;if(o=90418,(0|(c=(0|t)%10|0))==1)break e;if(c-2>>>0>=3)break r;o=90453;break e;case 1:if(t-2>>>0>=3)break r;o=90453;break e;case 2:if(a>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;o=90453;break e;case 3:if(o=90508,a>>>0<9)break e;o=(o=(0|t)%10|0)?(0|o)==1?90453:90586:90508;break e;case 4:break s;default:break r}if(!(a>>>0<9)){if(o=90537,(0|(c=(0|t)%10|0))==1)break e;if(!(c-2>>>0>=3)){o=90453;break e}}}o=90586}if(A[i+68>>2]=r,A[i+64>>2]=o,De(c=i+290|0,90139,i- -64|0),o=0,Re(e,c,i+224|0))break A}else a=c-11|0;e:{r:{s:switch((448&A[A[47192]+108>>2])-64>>>6|0){case 0:if(a>>>0<9)break r;if(o=90418,(0|(a=(0|t)%10|0))==1)break e;if(a-2>>>0>=3)break r;o=90453;break e;case 1:if(t-2>>>0>=3)break r;o=90453;break e;case 2:if(a>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;o=90453;break e;case 3:if(o=90508,a>>>0<9)break e;o=(a=(0|t)%10|0)?(0|a)==1?90453:90586:90508;break e;case 4:break s;default:break r}if(!(a>>>0<9)){if(o=90537,(0|(a=(0|t)%10|0))==1)break e;if(!(a-2>>>0>=3)){o=90453;break e}}}o=90586}A[i+52>>2]=r,A[i+48>>2]=o,De(a=i+290|0,90218,i+48|0),o=0,Re(e,a,i+224|0)||((0|r)<4||(A[i+32>>2]=r-1,De(a=i+290|0,89026,i+32|0),Re(e,a,i+176|0)||(Re(e,90273,i+224|0),A[33275]=3)),l[i+224|0]||(A[i+16>>2]=t,De(a=i+290|0,90303,i+16|0),(o=Re(e,a,i+224|0))||Re(e,90347,i+224|0),A[33275]=2))}return A[i+4>>2]=i+224,A[i>>2]=i+278,De(s,90368,i),J=i+304|0,!((0|t)!=1|(0|r)!=1)&&(t=1,32&l[e+106|0])||(t=o),t}function Ts(e,t,r,a){var s,i=0,o=0,c=0,f=0,m=0,p=0,I=0;J=s=J+-64|0,b[s+48>>1]=0,A[s+40>>2]=0,A[s+44>>2]=0,A[s+32>>2]=0,A[s+36>>2]=0,A[s+24>>2]=0,A[s+28>>2]=0,A[s+16>>2]=0,A[s+20>>2]=0,A[s+8>>2]=0,A[s+12>>2]=0,A[s>>2]=0,A[s+4>>2]=0,i=t;A:{for(;;){e:{r:{if((0|(o=l[0|i]))!=69){if((0|o)!=32)break r;if(a&&(g[wt(o=a,t,a=(0|(a=i-t|0))>=159?159:a)+a|0]=0),a=63&r)break e;break A}g[0|i]=101}i=i+1|0;continue}break}if(1&r){e:if((i=i-1|0)>>>0<t>>>0)o=a;else for(o=a;;){if((192&l[0|i])!=128)break e;if(o=o+1|0,!((i=i-1|0)>>>0>=t>>>0))break}c=a-1|0}else c=a,o=a;if((0|a)!=1)for(;;){a=c;e:if(!((i=i-1|0)>>>0<t>>>0))for(;;){if((192&l[0|i])!=128)break e;if(o=o+1|0,!((i=i-1|0)>>>0>=t>>>0))break}e:if(!((i=i-1|0)>>>0<t>>>0))for(;;){if((192&l[0|i])!=128)break e;if(o=o+1|0,!((i=i-1|0)>>>0>=t>>>0))break}if(c=a-2|0,!((0|a)>2))break}if((0|o)<=0)c=0;else{if(f=3&(c=(a=(t=o-1|0)>>>0>=48?48:t)+1|0),t=0,o=0,a>>>0>=3)for(I=-4&c,a=0;m=i+o|0,g[o+s|0]=l[0|m],g[0|m]=32,m=(p=1|o)+i|0,g[s+p|0]=l[0|m],g[0|m]=32,m=(p=2|o)+i|0,g[s+p|0]=l[0|m],g[0|m]=32,m=(p=3|o)+i|0,g[s+p|0]=l[0|m],g[0|m]=32,o=o+4|0,(0|I)!=(0|(a=a+4|0)););if(f)for(;a=i+o|0,g[o+s|0]=l[0|a],g[0|a]=32,o=o+1|0,(0|f)!=(0|(t=t+1|0)););}}if(g[s+c|0]=0,f=65520&r,!(512&r)|l[0|(a=i-1|0)]!=105||(g[0|a]=121),o=4|f,256&r){A:{e:{r:{if((0|(t=A[e+212>>2]))!=25966){if((0|t)!=28268)break r;if(g[0|a]<0||128&(t=g[0|(c=i-2|0)]))break A;if(f=A[e+632>>2])t=!!(0|Lr(f,t));else{if((0|(f=A[e+600>>2]))>0&&(t=t-f|0)-1>>>0>254)break A;t=128&l[344+(e+t|0)|0]}if(!t)break A;if(t=g[0|a],f=A[e+612>>2])t=!!(0|Lr(f,t));else{s:{if((0|(f=A[e+600>>2]))>0){if((t=t-f|0)-1>>>0<255)break s;break A}if((0|t)<0)break A}t=4&l[344+(e+t|0)|0]}if(!t)break A;t=g[i-3|0];s:{if(f=A[e+632>>2])t=!!(0|Lr(f,t));else{i:{if((0|(f=A[e+600>>2]))>0){if((t=t-f|0)-1>>>0<255)break i;break s}if((0|t)<0)break s}t=128&l[344+(e+t|0)|0]}if(t)break A}g[0|i]=l[0|a],g[0|a]=l[0|c],g[i+1|0]=32;break A}if(c=g[i-2|0],t=A[e+632>>2])t=!!(0|Lr(t,c));else{s:{if((0|(t=A[e+600>>2]))>0){if((c=c-t|0)-1>>>0<255)break s;break e}if((0|c)<0)break e}t=128&l[344+(e+c|0)|0]}if(!t)break e;if(c=g[0|a],t=A[e+608>>2])t=!!(0|Lr(t,c));else{if((0|(t=A[e+600>>2]))>0){if((c=c-t|0)-1>>>0>=255)break e}else if((0|c)<0)break e;t=2&l[344+(e+c|0)|0]}if(!t)break e;o=Ba(87771,i-3|0,3)?20|f:o;break A}o=A[e+204>>2]?20|f:o;break A}(l[0|a]==99||(c=l[1+(t=i-2|0)|0]<<8,(l[0|t]|c)==29554|(c|l[0|t])==29289||(l[0|(t=i-2|0)]|l[t+1|0]<<8)==29301||!Ba(88115,i-3|0,3)||(l[0|(t=i-2|0)]|l[t+1|0]<<8)==29550|l[0|a]==117||!Ba(88384,i-5|0,5)||(l[0|(t=i-4|0)]|l[t+1|0]<<8|l[t+2|0]<<16|l[t+3|0]<<24)==1735287154||(l[0|t]|l[t+1|0]<<8|l[t+2|0]<<16|l[t+3|0]<<24)==1735549292))&&(o=20|f)}16&o&&(Pr(A[e+204>>2],i),8&l[188788]&&Pn(88683,6,A[47195]))}return A[e+8184>>2]|!(2048&r)||(A[e+8184>>2]=1),M[s>>1]!=115&&Ba(s,88850,3)||(o|=8),J=s- -64|0,l[0|s]==39?65531&o:o}function ea(e,t,r,a,s,i,o,c,f){var m,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0;J=m=J-112|0,p=2147483647&f;A:{if(E=!(t|r),(a|(I=2147483647&s)?I-2147418112>>>0<2147549184:E)||!(!c&(0|(O=p-2147418112|0))==-2147418112?i|o:(0|O)==-2147418112&!!(0|c)|O>>>0>2147549184)){if(!(!a&(0|I)==2147418112?E:I>>>0<2147418112)){c=a,f=32768|s,i=t,o=r;break A}if(!(!c&(0|p)==2147418112?!(i|o):p>>>0<2147418112)){f|=32768;break A}if(!(t|a|2147418112^I|r)){T=a,c=(a=!(t^i|a^c|r^o|s^f^-2147483648))?0:T,f=a?2147450880:s,i=a?0:t,o=a?0:r;break A}if(!(i|c|2147418112^p|o))break A;if(!(t|a|r|I)){if(i|c|o|p)break A;i&=t,o&=r,c&=a,f&=s;break A}if(!(i|c|o|p)){i=t,o=r,c=a,f=s;break A}}I=(E=cA=(T=(0|p)==(0|I))&(0|a)==(0|c)?(0|r)==(0|o)&t>>>0<i>>>0|r>>>0<o>>>0:T&a>>>0<c>>>0|p>>>0>I>>>0)?i:t,O=E?o:r,hA=T=E?f:s,E=E?c:a,AA=65535&T,a=cA?a:c,vA=s=cA?s:f,T=s>>>16&32767,(Z=hA>>>16&32767)||(f=s=!(E|AA),p=s?I:E,c=s<<=6,ta(m+96|0,I,O,E,AA,(s=s+((0|(f=YA(f?O:AA)))==32?YA(p)+32|0:f)|0)-15|0),E=A[m+104>>2],AA=A[m+108>>2],O=A[m+100>>2],Z=16-s|0,I=A[m+96>>2]),i=cA?t:i,o=cA?r:o,c=a,f=65535&vA,T||(s=t=!(c|f),p=t?i:c,r=t<<=6,ta(m+80|0,i,o,c,f,(t=t+((0|(s=YA(s?o:f)))==32?YA(p)+32|0:s)|0)-15|0),T=16-t|0,c=A[m+88>>2],f=A[m+92>>2],o=A[m+84>>2],i=A[m+80>>2]),r=f<<3|c>>>29,t=c<<3|o>>>29,r|=524288,c=E<<3|O>>>29,f=AA<<3|E>>>29,cA=hA^vA,s=o<<3|i>>>29,a=i<<3,(0|T)!=(0|Z)&&((i=Z-T|0)>>>0>127?(t=0,r=0,s=0,a=1):(ta(m- -64|0,a,s,t,r,128-i|0),Ha(m+48|0,a,s,t,r,i),t=A[m+56>>2],r=A[m+60>>2],s=A[m+52>>2],a=A[m+48>>2]|!!(A[m+64>>2]|A[m+72>>2]|A[m+68>>2]|A[m+76>>2]))),E=a,p=s,T=c,AA=524288|f,s=O<<3|I>>>29,O=I<<3,I=s;e:if((0|cA)<0){if(i=0,o=0,c=0,f=0,!(E^O|t^T|p^I|r^AA))break A;if(a=O-E|0,s=I-((E>>>0>O>>>0)+p|0)|0,c=(i=T-t|0)-(o=(0|p)==(0|I)&E>>>0>O>>>0|p>>>0>I>>>0)|0,f=t=(AA-((t>>>0>T>>>0)+r|0)|0)-(i>>>0<o>>>0)|0,t>>>0>524287)break e;i=t=!(c|f),o=t?a:c,r=t<<=6,ta(m+32|0,a,s,c,f,t=(t=t+((0|(i=YA(i?s:f)))==32?YA(o)+32|0:i)|0)-12|0),Z=Z-t|0,c=A[m+40>>2],f=A[m+44>>2],a=A[m+32>>2],s=A[m+36>>2]}else s=p+I|0,i=(0|p)==(0|(s=(a=E+O|0)>>>0<O>>>0?s+1|0:s))&a>>>0<E>>>0|s>>>0<p>>>0,p=r+AA|0,p=(t=t+T|0)>>>0<T>>>0?p+1|0:p,1048576&(f=(c=t+i|0)>>>0<t>>>0?p+1|0:p)&&(a=1&E|(1&s)<<31|a>>>1,s=c<<31|s>>>1,Z=Z+1|0,c=(1&f)<<31|c>>>1,f=f>>>1|0);if(r=0,I=-2147483648&hA,(0|Z)>=32767)c=r,f=2147418112|I,i=0,o=0;else if(T=0,(0|Z)>0?T=Z:(ta(m+16|0,a,s,c,f,Z+127|0),Ha(m,a,s,c,f,1-Z|0),a=A[m>>2]|!!(A[m+16>>2]|A[m+24>>2]|A[m+20>>2]|A[m+28>>2]),s=A[m+4>>2],c=A[m+8>>2],f=A[m+12>>2]),O=7&a,a=(0|(t=c<<29|s>>>3))==(0|(o=(a=(7&s)<<29|a>>>3)>>>0>(i=(O>>>0>4)+a|0)>>>0?t+1|0:t))&a>>>0>i>>>0|t>>>0>o>>>0,t=r|(7&f)<<29|c>>>3,f=I|f>>>3&65535|T<<16,f=t>>>0>(c=a+t|0)>>>0?f+1|0:f,(0|O)!=4){if(!O)break A}else p=o+(t=0)|0,f=(t=(0|t)==(0|(o=(a=i)>>>0>(i=i+(r=1&i)|0)>>>0?p+1|0:p))&r>>>0>i>>>0|t>>>0>o>>>0)>>>0>(c=t+c|0)>>>0?f+1|0:f}A[e>>2]=i,A[e+4>>2]=o,A[e+8>>2]=c,A[e+12>>2]=f,J=m+112|0}function xt(e){var t=0,r=0,a=0,s=0,i=0,o=0,c=0;A:if(e|=0){i=(a=e-8|0)+(e=-8&(t=A[e-4>>2]))|0;e:if(!(1&t)){if(!(3&t)||(a=a-(t=A[a>>2])|0)>>>0<uA[57156])break A;if(e=e+t|0,A[57157]==(0|a)){if(!(3&~(t=A[i+4>>2])))return A[57154]=e,A[i+4>>2]=-2&t,A[a+4>>2]=1|e,void(A[e+a>>2]=e)}else{if(t>>>0<=255){if(s=A[a+8>>2],t=t>>>3|0,(0|(r=A[a+12>>2]))==(0|s)){A[57152]=A[57152]&ma(-2,t);break e}A[s+12>>2]=r,A[r+8>>2]=s;break e}if(c=A[a+24>>2],(0|a)==(0|(t=A[a+12>>2])))if((r=A[(s=a+20|0)>>2])||(r=A[(s=a+16|0)>>2])){for(;o=s,(r=A[(s=(t=r)+20|0)>>2])||(s=t+16|0,r=A[t+16>>2]););A[o>>2]=0}else t=0;else r=A[a+8>>2],A[r+12>>2]=t,A[t+8>>2]=r;if(!c)break e;s=A[a+28>>2];r:{if(A[(r=228912+(s<<2)|0)>>2]==(0|a)){if(A[r>>2]=t,t)break r;A[57153]=A[57153]&ma(-2,s);break e}if(A[c+(A[c+16>>2]==(0|a)?16:20)>>2]=t,!t)break e}if(A[t+24>>2]=c,(r=A[a+16>>2])&&(A[t+16>>2]=r,A[r+24>>2]=t),!(r=A[a+20>>2]))break e;A[t+20>>2]=r,A[r+24>>2]=t}}if(!(a>>>0>=i>>>0)&&1&(t=A[i+4>>2])){e:{if(!(2&t)){if(A[57158]==(0|i)){if(A[57158]=a,e=A[57155]+e|0,A[57155]=e,A[a+4>>2]=1|e,A[57157]!=(0|a))break A;return A[57154]=0,void(A[57157]=0)}if(A[57157]==(0|i))return A[57157]=a,e=A[57154]+e|0,A[57154]=e,A[a+4>>2]=1|e,void(A[e+a>>2]=e);e=(-8&t)+e|0;r:if(t>>>0<=255){if(s=A[i+8>>2],t=t>>>3|0,(0|(r=A[i+12>>2]))==(0|s)){A[57152]=A[57152]&ma(-2,t);break r}A[s+12>>2]=r,A[r+8>>2]=s}else{if(c=A[i+24>>2],(0|i)==(0|(t=A[i+12>>2])))if((r=A[(s=i+20|0)>>2])||(r=A[(s=i+16|0)>>2])){for(;o=s,(r=A[(s=(t=r)+20|0)>>2])||(s=t+16|0,r=A[t+16>>2]););A[o>>2]=0}else t=0;else r=A[i+8>>2],A[r+12>>2]=t,A[t+8>>2]=r;if(c){s=A[i+28>>2];s:{if(A[(r=228912+(s<<2)|0)>>2]==(0|i)){if(A[r>>2]=t,t)break s;A[57153]=A[57153]&ma(-2,s);break r}if(A[c+(A[c+16>>2]==(0|i)?16:20)>>2]=t,!t)break r}A[t+24>>2]=c,(r=A[i+16>>2])&&(A[t+16>>2]=r,A[r+24>>2]=t),(r=A[i+20>>2])&&(A[t+20>>2]=r,A[r+24>>2]=t)}}if(A[a+4>>2]=1|e,A[e+a>>2]=e,A[57157]!=(0|a))break e;return void(A[57154]=e)}A[i+4>>2]=-2&t,A[a+4>>2]=1|e,A[e+a>>2]=e}if(e>>>0<=255)return t=228648+(-8&e)|0,(r=A[57152])&(e=1<<(e>>>3))?e=A[t+8>>2]:(A[57152]=e|r,e=t),A[t+8>>2]=a,A[e+12>>2]=a,A[a+12>>2]=t,void(A[a+8>>2]=e);s=31,e>>>0<=16777215&&(s=62+((e>>>38-(t=YA(e>>>8|0))&1)-(t<<1)|0)|0),A[a+28>>2]=s,A[a+16>>2]=0,A[a+20>>2]=0,o=228912+(s<<2)|0;e:{r:{if((r=A[57153])&(t=1<<s)){for(s=e<<((0|s)!=31?25-(s>>>1|0):0),t=A[o>>2];;){if(r=t,(-8&A[t+4>>2])==(0|e))break r;if(t=s>>>29|0,s<<=1,!(t=A[16+(o=r+(4&t)|0)>>2]))break}A[o+16>>2]=a,A[a+24>>2]=r}else A[57153]=t|r,A[o>>2]=a,A[a+24>>2]=o;A[a+12>>2]=a,A[a+8>>2]=a;break e}e=A[r+8>>2],A[e+12>>2]=a,A[r+8>>2]=a,A[a+24>>2]=0,A[a+12>>2]=r,A[a+8>>2]=e}e=A[57160]-1|0,A[57160]=e||-1}}}function Ma(e,t,r){var a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0;J=a=J-176|0;A:{if(32&t)T=r-((0|r)>1)|0;else{i=Ut(e,93302);e:{r:{s:{if((0|t)!=2){if(i)break s;t=0;break A}if(T=r+1|0,I=56+(O=P(r,76)+133152|0)|0,E=Ut(e,89360),o=Ut(e,93318),c=Ut(e,93426),f=Ut(e,93499),i)break r;break e}T=r+1|0,I=56+(O=P(r,76)+133152|0)|0,f=0}for(e=0,m=(0|(s=A[i-4>>2]))!=34?(0|s)==39?s:0:s,Z=P(r,76)+133208|0;;){if(s=e,!(e=A[i>>2]))break e;r:{if(!m){if((0|e)==32|e-9>>>0<5)break e;if((0|e)!=47)break r;break e}if((0|s)!=92&&(0|e)==(0|m))break e}if(i=i+4|0,!((0|(p=Pr(e,p+Z|0)+p|0))<16))break}}m=0,g[p+I|0]=0,p=P(r,76)+133168|0,i=0;e:if(E)for(e=0,I=(0|(s=A[E-4>>2]))!=34?(0|s)==39?s:0:s;;){if(s=e,!(e=A[E>>2]))break e;r:{if(!I){if((0|e)==32|e-9>>>0<5)break e;if((0|e)!=47)break r;break e}if((0|s)!=92&&(0|e)==(0|I))break e}if(E=E+4|0,!((0|(i=Pr(e,i+p|0)+i|0))<36))break}if(g[i+p|0]=0,!(!o|A[o>>2]-48>>>0>=10)){for(;m=(A[o>>2]+P(m,10)|0)-48|0,A[(o=o+4|0)>>2]-48>>>0<10;);(0|m)<=0||(m=m-1|0)}if(s=P(r,76)+133152|0,A[s+4>>2]=m,e=0,i=0,!(!c|A[c>>2]-48>>>0>=10))for(;i=(A[c>>2]+P(i,10)|0)-48|0,A[(c=c+4|0)>>2]-48>>>0<10;);A[s+12>>2]=i,i=P(r,76)+133152|0;e:{r:if(f){for(;r=g[e+93099|0],(s=A[(e<<2)+f>>2])&&(e=e+1|0,(0|r)==(0|s)););s:{i:switch(s-34|0){case 0:case 5:break i;default:break s}if(!r){e=0;break e}}for(e=0;r=g[e+93116|0],(s=A[(e<<2)+f>>2])&&(e=e+1|0,(0|r)==(0|s)););s:{i:switch(s-34|0){case 0:case 5:break i;default:break s}if(!r){e=1;break e}}for(e=0;r=g[e+93197|0],(s=A[(e<<2)+f>>2])&&(e=e+1|0,(0|r)==(0|s)););s:switch(s-34|0){case 0:case 5:break s;default:break r}if(!r){e=2;break e}}e=3}A[i+8>>2]=A[131156+(e<<3)>>2],A[O>>2]=t}if(qe(137776,133168),r=qe(a+96|0,133208),g[a+157|0]=A[33291],g[a+156|0]=A[33290],e=A[33289],A[a+152>>2]=0,g[a+158|0]=e,(0|T)>0)for(o=0;;){if(c=1,t=P(o,76)+133152|0,l[0|(e=t+16|0)]&&ha(0,e)&&(qe(137776,e),c=0,g[0|r]=0,g[a+158|0]=0,b[a+156>>1]=0),l[0|(e=t+56|0)]){f=qe(r,e),s=A[33679];e:if(l[0|(e=s)])for(;;){if(!vr(e=e+1|0,f)){qe(f,s+1|0);break e}if(e=1+(He(e)+e|0)|0,!l[0|e])break}c&&(g[137776]=0)}if((e=A[t+8>>2])&&(g[a+156|0]=e),(e=A[t+12>>2])&&(g[a+157|0]=e),(e=A[t+4>>2])&&(g[a+158|0]=e),(0|T)==(0|(o=o+1|0)))break}A[a+148>>2]=r,A[a+144>>2]=137776,(e=Ra(a+144|0,a+172|0))?$a(e,43)||(t=l[a+156|0],!l[134672]|((0|t)!=l[134724]?t:0)||(A[a>>2]=e,A[a+4>>2]=134672,De(t=a+16|0,93533,a),e=137776,ar(137776,t,40))):e=92003,t=0,vr(e,134784)&&(qe(134784,e),t=131072)}return J=a+176|0,t}function Dr(e,t){var r,a=0,s=0,i=0,o=0,c=0;r=e+t|0;A:{e:if(!(1&(a=A[e+4>>2]))){if(!(3&a))break A;t=(a=A[e>>2])+t|0;r:{if((0|(e=e-a|0))!=A[57157]){if(a>>>0<=255){if(i=A[e+8>>2],a=a>>>3|0,(0|(s=A[e+12>>2]))!=(0|i))break r;A[57152]=A[57152]&ma(-2,a);break e}if(c=A[e+24>>2],(0|(a=A[e+12>>2]))==(0|e))if((s=A[(i=e+20|0)>>2])||(s=A[(i=e+16|0)>>2])){for(;o=i,(s=A[(i=(a=s)+20|0)>>2])||(i=a+16|0,s=A[a+16>>2]););A[o>>2]=0}else a=0;else s=A[e+8>>2],A[s+12>>2]=a,A[a+8>>2]=s;if(!c)break e;i=A[e+28>>2];s:{if(A[(s=228912+(i<<2)|0)>>2]==(0|e)){if(A[s>>2]=a,a)break s;A[57153]=A[57153]&ma(-2,i);break e}if(A[c+(A[c+16>>2]==(0|e)?16:20)>>2]=a,!a)break e}if(A[a+24>>2]=c,(s=A[e+16>>2])&&(A[a+16>>2]=s,A[s+24>>2]=a),!(s=A[e+20>>2]))break e;A[a+20>>2]=s,A[s+24>>2]=a;break e}if(3&~(a=A[r+4>>2]))break e;return A[57154]=t,A[r+4>>2]=-2&a,A[e+4>>2]=1|t,void(A[r>>2]=t)}A[i+12>>2]=s,A[s+8>>2]=i}e:{if(!(2&(a=A[r+4>>2]))){if(A[57158]==(0|r)){if(A[57158]=e,t=A[57155]+t|0,A[57155]=t,A[e+4>>2]=1|t,A[57157]!=(0|e))break A;return A[57154]=0,void(A[57157]=0)}if(A[57157]==(0|r))return A[57157]=e,t=A[57154]+t|0,A[57154]=t,A[e+4>>2]=1|t,void(A[e+t>>2]=t);t=(-8&a)+t|0;r:if(a>>>0<=255){if(i=A[r+8>>2],a=a>>>3|0,(0|(s=A[r+12>>2]))==(0|i)){A[57152]=A[57152]&ma(-2,a);break r}A[i+12>>2]=s,A[s+8>>2]=i}else{if(c=A[r+24>>2],(0|r)==(0|(a=A[r+12>>2])))if((i=A[(s=r+20|0)>>2])||(i=A[(s=r+16|0)>>2])){for(;o=s,(i=A[(s=(a=i)+20|0)>>2])||(s=a+16|0,i=A[a+16>>2]););A[o>>2]=0}else a=0;else s=A[r+8>>2],A[s+12>>2]=a,A[a+8>>2]=s;if(c){i=A[r+28>>2];s:{if(A[(s=228912+(i<<2)|0)>>2]==(0|r)){if(A[s>>2]=a,a)break s;A[57153]=A[57153]&ma(-2,i);break r}if(A[c+(A[c+16>>2]==(0|r)?16:20)>>2]=a,!a)break r}A[a+24>>2]=c,(s=A[r+16>>2])&&(A[a+16>>2]=s,A[s+24>>2]=a),(s=A[r+20>>2])&&(A[a+20>>2]=s,A[s+24>>2]=a)}}if(A[e+4>>2]=1|t,A[e+t>>2]=t,A[57157]!=(0|e))break e;return void(A[57154]=t)}A[r+4>>2]=-2&a,A[e+4>>2]=1|t,A[e+t>>2]=t}if(t>>>0<=255)return a=228648+(-8&t)|0,(s=A[57152])&(t=1<<(t>>>3))?t=A[a+8>>2]:(A[57152]=t|s,t=a),A[a+8>>2]=e,A[t+12>>2]=e,A[e+12>>2]=a,void(A[e+8>>2]=t);i=31,t>>>0<=16777215&&(i=62+((t>>>38-(a=YA(t>>>8|0))&1)-(a<<1)|0)|0),A[e+28>>2]=i,A[e+16>>2]=0,A[e+20>>2]=0,o=228912+(i<<2)|0;e:{if((s=A[57153])&(a=1<<i)){for(i=t<<((0|i)!=31?25-(i>>>1|0):0),a=A[o>>2];;){if(s=a,(-8&A[a+4>>2])==(0|t))break e;if(a=i>>>29|0,i<<=1,!(a=A[16+(o=s+(4&a)|0)>>2]))break}A[o+16>>2]=e,A[e+24>>2]=s}else A[57153]=a|s,A[o>>2]=e,A[e+24>>2]=o;return A[e+12>>2]=e,void(A[e+8>>2]=e)}t=A[s+8>>2],A[t+12>>2]=e,A[s+8>>2]=e,A[e+24>>2]=0,A[e+12>>2]=s,A[e+8>>2]=t}}function Hr(e){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0;if(!(t=g[88105]))return e;if(e=$a(e,t)){if(!l[88106])return e;if(l[e+1|0]){if(!l[88107]){s=!!(0|(r=l[e+1|0]));A:if(r&&(0|(t=r|l[0|e]<<8))!=(0|(c=l[88106]|l[88105]<<8)))for(r=e+1|0;;){if(s=!!(0|(a=l[(e=r)+1|0])),!a)break A;if(r=e+1|0,(0|c)==(0|(t=a|t<<8&65280)))break}return s?e:0}if(l[e+2|0]){if(!l[88108]){r=e+2|0,s=!!(0|(t=l[e+2|0]));A:if(t&&(0|(t=l[e+1|0]<<16|l[0|e]<<24|t<<8))!=(0|(c=l[88106]<<16|l[88105]<<24|l[88107]<<8)))for(;;){if(e=r+1|0,s=!!(0|(a=l[r+1|0])),!a)break A;if(r=e,(0|c)==(0|(t=(t|a)<<8)))break}else e=r;return s?e-2|0:0}if(l[e+3|0]){if(!l[88109]){r=e+3|0,s=!!(0|(t=l[e+3|0]));A:if(t&&(0|(t=t|l[e+1|0]<<16|l[0|e]<<24|l[e+2|0]<<8))!=(0|(c=(e=l[88105]|l[88106]<<8|l[88107]<<16|l[88108]<<24)<<24|(65280&e)<<8|e>>>8&65280|e>>>24)))for(;;){if(e=r+1|0,s=!!(0|(a=l[r+1|0])),!a)break A;if(r=e,(0|c)==(0|(t=a|t<<8)))break}else e=r;return s?e-3|0:0}c=e,J=f=J-1056|0,A[(e=f+1048|0)>>2]=0,A[e+4>>2]=0,A[(e=f+1040|0)>>2]=0,A[e+4>>2]=0,A[f+1032>>2]=0,A[f+1036>>2]=0,A[f+1024>>2]=0,A[f+1028>>2]=0;A:{e:{r:{s:{if(t=l[88105]){for(;;){if(!l[i+c|0])break e;if(i=i+1|0,A[((255&t)<<2)+f>>2]=i,A[(e=(f+1024|0)+(t>>>3&28)|0)>>2]=A[e>>2]|1<<t,!(t=l[i+88105|0]))break}if(e=1,m=-1,i>>>0>1)break s}else m=-1,e=1;o=-1,r=1;break r}for(a=1,t=1;;){s:if((0|(o=l[88105+(t+m|0)|0]))!=(0|(s=l[e+88105|0])))s>>>0<o>>>0?(a=e-m|0,r=e,t=1):(m=r,r=r+1|0,a=1,t=1);else{if((0|t)==(0|a)){r=r+a|0,t=1;break s}t=t+1|0}if(!(i>>>0>(e=r+t|0)>>>0))break}if(r=1,o=-1,i>>>0<=1)e=a;else{for(e=0,s=1,t=1;;){s:if((0|(I=l[88105+(t+o|0)|0]))!=(0|(p=l[r+88105|0])))p>>>0>I>>>0?(s=r-o|0,e=r,t=1):(o=e,e=e+1|0,s=1,t=1);else{if((0|t)==(0|s)){e=e+s|0,t=1;break s}t=t+1|0}if(!(i>>>0>(r=e+t|0)>>>0))break}e=a,r=s}}for(t=e,Ba(88105,(a=(e=o+1>>>0>m+1>>>0)?r:t)+88105|0,I=(p=e?o:m)+1|0)?(a=((e=~p+i|0)>>>0<p>>>0?p:e)+1|0,s=0):s=i-a|0,T=i-1|0,E=63|i,o=0,e=c;;){if(!(c-e>>>0>=i>>>0))if(r=ei(c,0,E)){if(c=r,r-e>>>0<i>>>0)break e}else c=c+E|0;r=l[e+T|0],t=i;r:{if(A[(f+1024|0)+(r>>>3&28)>>2]>>>r&1)if((0|(r=A[(r<<2)+f>>2]))==(0|i)){s:{if(m=l[(r=(t=I)>>>0>o>>>0?t:o)+88105|0])for(;;){if(l[e+r|0]!=(255&m))break s;if(!(m=l[88105+(r=r+1|0)|0]))break}for(;;){if(t>>>0<=o>>>0)break A;if(l[88105+(t=t-1|0)|0]!=l[e+t|0])break}t=a,o=s;break r}t=r-p|0}else t=(r=i-r|0)>>>0>o>>>0?r:o;o=0}e=e+t|0}}e=0}J=f+1056|0,r=e}}}}return r}function cs(e,t,r,a,s,i){var o,c,f,m,p=0,I=0,E=0;if(J=o=J-560|0,g[o+448|0]=0,g[o+144|0]=0,g[o+120|0]=0,f=34&i,c=t-P(I=(0|t)/100|0,100)|0,1&(m=64&l[e+106|0]?(0|t)>999|i:0)|(0|t)>99){A:{e:{r:{if(!(!f|c)){if(!Re(e,90606,o+304|0))break r;break A}if(c)break e}if(Re(e,90691,o+304|0))break A}Re(e,90725,o+304|0)}p=i,(0|t)<1e3||(p=i,!(8&l[e+105|0])|t-2e3>>>0<4294967196&&(g[o+208|0]=0,Is(e,p=(I>>>0)/10|0,a=16384&A[e+108>>2]?0:s+1|0,!((t>>>0)%1e3|0)|f,o+272|0)||Za(e,p,s,A[e+212>>2]==28012?520:(0|a)<4?(A[e+108>>2]>>>a&1)<<3:0,o+208|0),2&l[e+109|0]?(A[o+108>>2]=15,A[o+100>>2]=15,A[o+104>>2]=o+208,A[o+96>>2]=o+272,De(o+144|0,90761,o+96|0)):(A[o+92>>2]=15,A[o+84>>2]=15,A[o+88>>2]=o+272,A[o+80>>2]=o+208,De(o+144|0,90761,o+80|0)),a=1,1&(!!(0|(I=I-P(p,10)|0))|m)||(g[o+304|0]=0),p=1|i)),g[o+208|0]=0;A:if(!(~m&(0|I)<=0))if(!(4&l[e+106|0])|!(1&p|l[o+144|0])||Re(e,90824,o+120|0),!f|(16&l[e+109|0]?0:c)||(A[o+64>>2]=I,De(a=o+548|0,90875,o- -64|0),E=Re(e,a,o+208|0),!(4096&A[e+108>>2])|(0|c)<=0||na(o+208|0,133104)),a=1,1&(~m|!!(0|I))){e:{r:{s:{i:{if(!(131072&A[e+108>>2])||1&p|(0|I)!=1){if(c|E||(A[o+48>>2]=I,De(a=o+548|0,90985,o+48|0),E=Re(e,a,o+208|0)),E||(A[o+32>>2]=I,De(a=o+548|0,91027,o+32|0),Re(e,a,o+208|0)))break i;if((0|I)!=1)break r;break s}if(!E)break s}g[o+304|0]=0;break e}if(a=1,4&l[e+105|0])break A}Za(e,I,s,0,o+208|0)}a=1}else Re(e,88875,o+208|0);A[o+28>>2]=o+304,A[o+24>>2]=o+208,A[o+20>>2]=o+120,A[o+16>>2]=o+144,De(o+448|0,91059,o+16|0)}else p=i;g[o+132|0]=0;A:{e:{if((0|c)>0)16&l[e+109|0]&&2&p||(!(1&p)|s&&(0|t)<=100||!(64&(a=A[e+104>>2]))&(!(8388608&a)|c>>>0>9)||Re(e,90824,o+132|0),!(1&p|l[o+144|0])|!(524288&A[e+104>>2])|I||Re(e,90824,o+132|0)),g[o+336|0]=0;else if(g[o+336|0]=0,!c&a)break e;if(s?(i=A[e+108>>2],t=(0|s)<4?(i>>>s&1)<<3:0):(a=f?3:2,t=32&i|((0|t)<100?1&p?a:4|a:a),i=A[e+108>>2]),t=(0|s)==1&&A[e+212>>2]==28012?520|t:t,1048576&i&&(a=16|t,t=(0|I)>0||1&p?a:t),!Za(e,c,s,256&p|t,o+336|0)|!(128&l[e+104|0]))break A;g[o+132|0]=0;break A}l[133104]&&((0|(e=He(o+448|0)))<=0||l[447+(e=e+o|0)|0]==10&&(g[e+447|0]=0),qe(o+336|0,133104))}A[o+8>>2]=15,A[o+12>>2]=o+336,A[o+4>>2]=o+132,A[o>>2]=o+448,De(r,91101,o),J=o+560|0}function Xt(e){var t,r,a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0;for(s=A[32972],A[s+64>>2]=290816,A[s+68>>2]=4104,A[s+96>>2]=0,A[s+100>>2]=0,A[s+120>>2]=90,A[s+124>>2]=100,A[s+112>>2]=64,A[s+116>>2]=256,A[s+104>>2]=5,A[s+108>>2]=0,A[s+84>>2]=100,A[s+88>>2]=64,i=A[50754],A[s+132>>2]=0,A[s+136>>2]=0,A[s+128>>2]=i,A[s+140>>2]=0,A[s+144>>2]=0,A[s+148>>2]=0,A[s+152>>2]=0,A[s+156>>2]=0,A[s+160>>2]=0,A[36435]=450,A[s+92>>2]=2,A[50870]=0,A[50871]=0,A[50872]=0,A[50873]=0,A[50880]=0,A[50881]=0,A[50882]=0,A[50883]=0,A[50890]=0,A[50891]=0,A[50892]=0,A[50893]=0,o=-3.141592653589793/+A[50754],D[25429]=o,f=-2*o,D[25430]=f,t=(o=zt(200*o))*-o,D[25434]=t,D[25439]=t,D[25444]=t,o=(f=o*Da(2e3*f))+f,D[25433]=o,D[25438]=o,D[25443]=o,f=1-o-t,D[25432]=f,D[25437]=f,D[25442]=f,A[50902]=0,A[50903]=0,A[50900]=0,A[50901]=0,D[25449]=t,D[25448]=o,A[50912]=0,A[50913]=0,D[25447]=f,A[50910]=0,A[50911]=0,D[25454]=t,D[25453]=o,A[50922]=0,A[50923]=0,D[25452]=f,A[50920]=0,A[50921]=0,D[25459]=t,D[25458]=o,A[50932]=0,A[50933]=0,D[25457]=f,A[50930]=0,A[50931]=0,D[25464]=t,D[25463]=o,D[25462]=f,A[50942]=0,A[50943]=0,A[50940]=0,A[50941]=0,D[25469]=t,D[25468]=o,D[25467]=f,A[50952]=0,A[50953]=0,A[50950]=0,A[50951]=0,D[25474]=t,D[25473]=o,D[25472]=f,r=A[32972],i=0;b[236+(m=(i<<1)+r|0)>>1]=256,b[m+164>>1]=256,s=l[i+105376|0]<<1,b[m+254>>1]=s,b[m+182>>1]=s,b[m+200>>1]=l[i+105385|0]<<1,A[308+(s=(c=i<<2)+r|0)>>2]=A[c+105408>>2],A[s+272>>2]=0,b[m+218>>1]=0,A[c+200944>>2]=(0|P(A[c+105456>>2],22050))/A[50754],(0|(i=i+1|0))!=9;);for(T=A[32961],i=0,a=r+344|0;;){if(s=p,I=T,m=i,(0|(p=A[(i=131840+(c=i<<2)|0)>>2]))==-1&&(p=8e3,A[i>>2]=8e3,m&&(A[131840+(4|c)>>2]=A[c+131836>>2])),T=A[131840+(4|c)>>2],!((0|s)>=(0|(p=(0|p)/8|0))||(0|(E=p-s|0))<=0||(c=s+1|0,i=s,1&E&&(g[344+(s+r|0)|0]=(0|I)>=255?255:I,i=c),(0|c)==(0|p))))for(O=T-I|0;c=((0|P(i-s|0,O))/(0|E)|0)+I|0,g[i+a|0]=(0|c)>=255?255:c,Z=((0|P((c=i+1|0)-s|0,O))/(0|E)|0)+I|0,g[c+a|0]=(0|Z)>=255?255:Z,(0|p)!=(0|(i=i+2|0)););if(i=m+2|0,!(m>>>0<10))break}i=A[32972],A[i+80>>2]=232,A[i+72>>2]=256,A[i+76>>2]=238,e||(A[49848]=0),b[i+200>>1]=(0|P(b[i+200>>1],105))/100}function Xa(e,t,r){var a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0;J=a=J-288|0,(0|t)!=132848&&Rr(132848,t,40),(0|(s=e+228|0))!=(0|t)&&Rr(s,t,40),A[a+88>>2]=t,A[a+84>>2]=47,A[a+80>>2]=137584,De(s=a+96|0,84089,a+80|0),i=ss(s),(s=A[e+688>>2])&&(xt(s),A[e+688>>2]=0),s=ka(a+96|0,84577);A:if((0|i)>0&&s)if(r=Ct(i),A[e+688>>2]=r,r)if(m=gn(r,i,s),aa(s),m>>>0<=1032)A[a+16>>2]=a+96,fr(A[30450],85164,a+16|0),r=2;else if(s=A[e+688>>2],r=A[s+4>>2],!((0|(i=A[s>>2]))!=1024|(0|r)<=0)&(0|r)<134217729){s=r+s|0,A[e+684>>2]=s,I=je(e+5168|0,0,1024),je(e+7664|0,0,260),je(e+7924|0,255,256),je(e+4788|0,0,380),je(e+6192|0,0,512);e:if((0|(r=l[0|s]))!=7)for(;;){if((0|(i=255&r))!=6){if(!i)break e;i=A[e+684>>2],A[a+72>>2]=r<<24>>24,A[a+64>>2]=132848,A[a+68>>2]=s-i,fr(A[30450],88950,a- -64|0);break}r:{s:{i:{c:{o:switch((i=l[0|(r=s+1|0)])-18|0){case 0:break c;case 2:break o;default:break i}for(r=4+(-4&r)|0,A[e+180>>2]=r;r=(s=r)+1|0,!Fn(s););for(;i=l[0|s],r=s,s=s+1|0,(0|i)!=7;);break r}if(r=s+3|0,(0|(s=((0|(s=g[s+2|0]))<65?191:-65)+s|0))>94)break s;A[4788+((s<<2)+e|0)>>2]=r;break s}switch(r=1+((c=He(r))+r|0)|0,0|c){case 1:A[5168+((i<<2)+e|0)>>2]=r;break s;case 0:A[I>>2]=r;break s}c=l[s+2|0],(0|i)!=1?(s=A[e+7664>>2],l[0|(p=7924+(o=e+i|0)|0)]==255&&(g[0|p]=s),g[0|(o=o+7668|0)]=l[0|o]+1,A[6704+(o=(s<<2)+e|0)>>2]=r,A[e+7664>>2]=s+1,A[o+7184>>2]=i|c<<8):A[6188+((c<<2)+e|0)>>2]=r}if(l[0|r]!=7)for(;r=1+(He(r)+r|0)|0,l[0|r]!=7;);}r=l[0|(s=r+1|0)]}for(s=A[e+688>>2]+8|0;;){for(A[692+((r=f<<2)+e|0)>>2]=s;i=l[0|s];)s=s+i|0;for(s=s+1|0,A[692+((4|r)+e|0)>>2]=s;r=l[0|s];)s=r+s|0;if(s=s+1|0,(0|(f=f+2|0))==1024)break}r=0,(0|(e=A[e+324>>2]))<=0|e>>>0<=m>>>0||(A[a+48>>2]=t,fr(A[30450],85519,a+48|0))}else A[a+40>>2]=r,A[a+36>>2]=i,A[a+32>>2]=a+96,fr(A[30450],85349,a+32|0),r=2;else aa(s),r=3;else{if(r||(A[a>>2]=a+96,fr(A[30450],84963,a)),r=1,!s)break A;aa(s)}return J=a+288|0,r}function gs(e){var t,r=0,a=0;for(t=je(e+344|0,0,256),g[e+364|0]=1,g[e+356|0]=1,g[e+357|0]=1,g[e+358|0]=1,g[e+359|0]=1,g[e+360|0]=1,g[e+361|0]=1,g[e+362|0]=1,g[e+363|0]=1,g[e+348|0]=1,g[e+349|0]=1,g[e+350|0]=1,g[e+351|0]=1,g[e+352|0]=1,g[e+353|0]=1,g[e+354|0]=1,g[e+355|0]=1,g[e+431|0]=3,g[e+429|0]=3,g[e+430|0]=3,g[e+406|0]=3,g[e+407|0]=3,g[e+408|0]=3,g[e+409|0]=3,g[e+410|0]=3,g[e+411|0]=3,g[e+412|0]=3,g[e+413|0]=3,g[e+414|0]=3,g[e+415|0]=3,g[e+416|0]=3,g[e+417|0]=3,g[e+418|0]=3,g[e+419|0]=3,g[e+420|0]=3,g[e+421|0]=3,g[e+440|0]=3,g[e+441|0]=3,g[e+442|0]=3,g[e+443|0]=3,a=21;g[344+(r=e+a|0)|0]=4|l[r+344|0],(0|(r=a+1|0))!=58;)g[0|(r=r+t|0)]=4|l[0|r],g[2+(r=a+t|0)|0]=4|l[r+2|0],g[r+3|0]=4|l[r+3|0],a=a+4|0;g[e+346|0]=4|l[e+346|0],g[e+347|0]=4|l[e+347|0],g[e+432|0]=4|l[e+432|0],g[e+433|0]=4|l[e+433|0],g[e+434|0]=4|l[e+434|0],g[e+435|0]=4|l[e+435|0],g[e+436|0]=4|l[e+436|0],g[e+437|0]=4|l[e+437|0],g[e+438|0]=4|l[e+438|0],g[e+439|0]=4|l[e+439|0],g[e+467|0]=4|l[e+467|0],g[e+468|0]=4|l[e+468|0],g[e+470|0]=4|l[e+470|0],g[e+471|0]=4|l[e+471|0],g[e+348|0]=64|l[e+348|0],g[e+349|0]=64|l[e+349|0],g[e+350|0]=64|l[e+350|0],g[e+351|0]=64|l[e+351|0],g[e+352|0]=64|l[e+352|0],g[e+353|0]=64|l[e+353|0],g[e+354|0]=64|l[e+354|0],g[e+355|0]=64|l[e+355|0],g[e+356|0]=64|l[e+356|0],g[e+357|0]=64|l[e+357|0],g[e+358|0]=64|l[e+358|0],g[e+359|0]=64|l[e+359|0],g[e+360|0]=64|l[e+360|0],g[e+361|0]=64|l[e+361|0],g[e+362|0]=64|l[e+362|0],g[e+363|0]=64|l[e+363|0],g[e+364|0]=64|l[e+364|0],g[e+406|0]=64|l[e+406|0],g[e+407|0]=64|l[e+407|0],g[e+408|0]=64|l[e+408|0],g[e+409|0]=64|l[e+409|0],g[e+410|0]=64|l[e+410|0],g[e+411|0]=64|l[e+411|0],g[e+412|0]=64|l[e+412|0],g[e+413|0]=64|l[e+413|0],g[e+414|0]=64|l[e+414|0],g[e+415|0]=64|l[e+415|0],g[e+416|0]=64|l[e+416|0],g[e+417|0]=64|l[e+417|0],g[e+418|0]=64|l[e+418|0],g[e+419|0]=64|l[e+419|0],g[e+420|0]=64|l[e+420|0],g[e+440|0]=64|l[e+440|0],g[e+441|0]=64|l[e+441|0],g[e+429|0]=64|l[e+429|0],g[e+430|0]=64|l[e+430|0],g[e+431|0]=64|l[e+431|0],g[e+442|0]=64|l[e+442|0],g[e+443|0]=64|l[e+443|0],A[e+40>>2]=1,A[e+204>>2]=A[e+600>>2]+77}function di(e,t,r,a,s,i,o,c,f){var m,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0;J=m=J-128|0;A:{e:{if(ge(i,o,c,f,0,0,0,0)){I=65535&f;r:s:{if((0|(T=f>>>16&32767))!=32767){if(p=4,T)break s;p=i|c|o|I?3:2;break r}p=!(i|c|o|I)}if((0|(O=32767&(hA=s>>>16|0)))!=32767&&p)break e}Ne(m+16|0,t,r,a,s,i,o,c,f),Sr(m,t=A[m+16>>2],a=A[m+20>>2],s=A[m+24>>2],r=A[m+28>>2],t,a,s,r),a=A[m+8>>2],s=A[m+12>>2],c=A[m>>2],f=A[m+4>>2];break A}if(T=c,(0|ge(t,r,p=a,Z=2147483647&s,i,o,c,E=2147483647&f))<=0){if(ge(t,r,p,Z,i,o,T,E)){c=t,f=r;break A}Ne(m+112|0,t,r,a,s,0,0,0,0),a=A[m+120>>2],s=A[m+124>>2],c=A[m+112>>2],f=A[m+116>>2]}else{if(AA=f>>>16&32767,O?(f=r,c=t):(Ne(m+96|0,t,r,p,Z,0,0,0,1081540608),p=A[m+104>>2],Z=c=A[m+108>>2],O=(c>>>16|0)-120|0,f=A[m+100>>2],c=A[m+96>>2]),AA||(Ne(m+80|0,i,o,T,E,0,0,0,1081540608),T=A[m+88>>2],E=i=A[m+92>>2],AA=(i>>>16|0)-120|0,o=A[m+84>>2],i=A[m+80>>2]),cA=T,vA=65535&E|65536,Z=65535&Z|65536,(0|O)>(0|AA)){for(;;){if(T=(E=p-cA|0)-(I=(0|o)==(0|f)&i>>>0>c>>>0|o>>>0>f>>>0)|0,(0|(I=(Z-((p>>>0<cA>>>0)+vA|0)|0)-(I>>>0>E>>>0)|0))>0|(0|I)>=0){if(p=c,!((c=c-i|0)|T|(f=f-((i>>>0>p>>>0)+o|0)|0)|I)){Ne(m+32|0,t,r,a,s,0,0,0,0),a=A[m+40>>2],s=A[m+44>>2],c=A[m+32>>2],f=A[m+36>>2];break A}I=I<<1|T>>>31,p=T<<1|f>>>31}else I=Z<<1|p>>>31,p=p<<1|f>>>31;if(Z=I,I=f<<1|c>>>31,c<<=1,f=I,!((0|(O=O-1|0))>(0|AA)))break}O=AA}if(T=(E=p-cA|0)-(I=(0|o)==(0|f)&i>>>0>c>>>0|o>>>0>f>>>0)|0,E=I=(Z-((p>>>0<cA>>>0)+vA|0)|0)-(I>>>0>E>>>0)|0,(0|I)<0)T=p,E=Z;else if(p=c,!((c=c-i|0)|T|(f=f-((i>>>0>p>>>0)+o|0)|0)|E)){Ne(m+48|0,t,r,a,s,0,0,0,0),a=A[m+56>>2],s=A[m+60>>2],c=A[m+48>>2],f=A[m+52>>2];break A}if((0|E)==65535|E>>>0<65535)for(;t=f>>>31|0,O=O-1|0,Z=f<<1|c>>>31,c<<=1,f=Z,r=t,t=E<<1|T>>>31,T=r|T<<1,E=t,t>>>0<65536;);t=32768&hA,(0|O)<=0?(Ne(m- -64|0,c,f,T,65535&E|(t|O+120)<<16,0,0,0,1065811968),a=A[m+72>>2],s=A[m+76>>2],c=A[m+64>>2],f=A[m+68>>2]):(a=T,s=65535&E|(t|O)<<16)}}A[e>>2]=c,A[e+4>>2]=f,A[e+8>>2]=a,A[e+12>>2]=s,J=m+128|0}function qs(e,t,r){var a,s,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0;if(J=a=J-1040|0,(0|(o=g0(e,589824,0)))>=0&&((i=b0(1,2072))?A[i+8>>2]=o:(Ge(0|o),i=0)),s=i,i){A:if(i=o0(s))for(T=A[30450],E=(a+96|0)+t|0;;){if((0|(o=A[50303]))>=348){A[a+4>>2]=350,A[a>>2]=o+1,fr(T,91860,a);break A}if(l[i+19|0]!=46)if(A[a+88>>2]=i+19,A[a+84>>2]=47,A[a+80>>2]=e,De(i=a+96|0,91924,a+80|0),(0|(i=ss(i)))!=-31){if(!((0|i)<=0)&&(I=ka(a+96|0,85712))){c=0,g[a+832|0]=0,g[a+752|0]=0,A[a+360>>2]=0,A[a+356>>2]=4,m=0;e:for(;;){for(p=299-m|0;Jt(a+912|0,120,I);){i=a+912|0;r:{if(l[a+912|0]!=35){s:if(!((0|(i=He(a+912|0)-1|0))<=0))for(;;){if(!((0|(o=g[0|(f=(a+912|0)+i|0)]))==32|o-9>>>0<5))break s;if(g[0|f]=0,!((0|(i=i-1|0))>0))break}if(!(i=Hr(a+912|0)))break r}g[0|i]=0}i=a+912|0;r:if(o=l[a+912|0])for(;;){if(Or(o<<24>>24))break r;if(!(o=l[0|(i=i+1|0)]))break}if(g[0|i]=0,l[a+912|0]){i=i+1|0;r:switch(ms(131904,a+912|0)-1|0){case 0:for(;o=i,i=i+1|0,(0|(f=g[0|o]))==32|f-9>>>0<5;);ar(a+832|0,o,80);continue;case 1:if(g[a+672|0]=0,A[a+364>>2]=5,o=a+672|0,A[a+16>>2]=o,A[a+20>>2]=a+364,dt(i,86237,a+16|0),(o=He(o)+2|0)>>>0>=p>>>0)continue;g[0|(i=(a+368|0)+m|0)]=A[a+364>>2],qe(i+1|0,a+672|0),c=c+1|0,m=o+m|0;continue e;case 2:if(A[a+52>>2]=a+360,A[a+48>>2]=a+752,dt(i,86237,a+48|0),!r)continue;A[a+32>>2]=E,fr(T,92042,a+32|0);continue;case 5:break r;default:continue}A[a+64>>2]=a+356,dt(i,87268,a- -64|0)}}break}g[(a+368|0)+m|0]=0,o=ms(132112,a+752|0),c?(f=He(E)+m|0,p=wt((c=b0(28+(He(a+832|0)+f|0)|0,1))+24|0,a+368|0,i=m+1|0),A[c+4>>2]=p,i=qe(i+p|0,E),A[c>>2]=i,A[c+8>>2]=i,l[a+832|0]&&(A[c>>2]=qe(2+(f+p|0)|0,a+832|0)),i=A[a+360>>2],g[c+14|0]=0,g[c+12|0]=o,g[c+13|0]=i,g[c+15|0]=A[a+356>>2],aa(I),i=A[50303],A[50303]=i+1,A[201216+(i<<2)>>2]=c):aa(I)}}else qs(a+96|0,t,r);if(!(i=o0(s)))break}x0(A[s+8>>2]),xt(s)}J=a+1040|0}function Js(e,t){var r,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0;J=r=J-352|0;A:if(e||(e=A[136284+(t<<4)>>2])){l[0|e]!=47&&(A[r+12>>2]=e,A[r+4>>2]=47,A[r+8>>2]=47,A[r>>2]=137584,De(e=r+16|0,84114,r)),g[r+240|0]=0;e:{r:{if(a=ka(e,84577)){if((0|I0(a,20))==-1)break e;if(i=Dn(a),s=Dn(a),c=Dn(a),!((0|i)!=65537|(0|s)!=A[50754])&(0|c)==s<<1)break r;aa(a),b[r+256>>1]=l[84864]|l[84865]<<8,e=l[84852]|l[84853]<<8|l[84854]<<16|l[84855]<<24,A[r+240>>2]=l[84848]|l[84849]<<8|l[84850]<<16|l[84851]<<24,A[r+244>>2]=e,e=l[84860]|l[84861]<<8|l[84862]<<16|l[84863]<<24,A[r+248>>2]=l[84856]|l[84857]<<8|l[84858]<<16|l[84859]<<24,A[r+252>>2]=e,J=i=J-16|0;s:{if((a=He(e=r+240|0))>>>0>=6&&!Ba(c=(e+a|0)-6|0,84274,6)){for(m=100;;){for(f=0,J=a=J-16|0,l[227196]||(g[227197]=ae(),g[227196]=1),I=+UA(),SA(o=I/1e3)<9223372036854776e3?(p=SA(o)>=1?~~(o>0?qA(ee(23283064365386963e-26*o),4294967295):xe(23283064365386963e-26*(o-+(~~o>>>0>>>0))))>>>0:0,s=~~o>>>0):(p=-2147483648,s=0),A[a>>2]=s,A[a+4>>2]=p,o=1e3*(I-(+(bt(s,p,1e3,0)>>>0)+4294967296*+(0|$)))*1e3,s=SA(o)<2147483648?~~o:-2147483648,A[a+8>>2]=s,s=c+(a>>>4|0)^P(A[a+8>>2],65537);g[c+f|0]=65+(15&s|s<<1&32),s=s>>>5|0,(0|(f=f+1|0))!=6;);if(J=a+16|0,A[i>>2]=384,(0|(a=g0(e,194,i)))>=0)break s;if(m=m-1|0,A[56798]!=20||!m)break}wt(c,84274,6)}else A[56798]=28;a=-1}J=i+16|0,(0|a)<0||x0(a)}if(!(a=ka(e,84577))){e=fs(0,A[56798],e);break A}}if((0|(i=ss(e)))<0){aa(a),e=fs(0,0-i|0,e);break A}if((0|I0(a,0))==-1){t=A[56798],aa(a),e=fs(0,t,e);break A}if(!(s=Ur(A[(c=136280+(t<<4)|0)>>2],i))){aa(a),e=48;break A}if((0|gn(s,i,a))!=(0|i)){t=A[56798],aa(a),l[r+240|0]&&Gn(r+240|0),xt(s),e=fs(0,t,e);break A}aa(a),l[r+240|0]&&Gn(r+240|0),A[136276+(t<<4)>>2]=(l[s+40|0]|l[s+41|0]<<8|l[s+42|0]<<16|l[s+43|0]<<24)/2,A[c>>2]=s,e=0;break A}t=A[56798],aa(a),e=fs(0,t,e)}else e=28;return J=r+352|0,e}function fi(e,t,r,a,s,i){var o,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0;for(g[0|r]=1,o=1&i,vA=1,Z=-1,AA=-1,p=1,i=t;;){QA=hA-2|0,cA=I,T=AA;A:{e:{for(;;){if(!(E=l[0|i])){AA=T,I=cA;break A}if(i=i+1|0,O=A[144464+(E<<2)>>2]){r:{if((0|(c=l[O+11|0]))!=1){if(16&l[O+6|0]|(0|c)!=2)break r;g[0|(I=r+p|0)]=Z,c=(0|Z)<4|(0|T)>(0|Z),!(2&l[O+4|0])|!o|(0|Z)>=0||(g[0|I]=1),I=c?cA:p,AA=c?T:Z,Z=-1,p=p+1|0;break e}if(!M[O+8>>1]){c=0,m=p;s:if((0|E)!=8)c=l[O+14|0],A[s>>2]&&c>>>0>=4||(T=(0|c)<(0|T)?T:c,Z=c);else{for(;;){if(E=c,m=m-1|0,A[s>>2]|(0|m)<=0||(0|(O=g[0|(f=r+m|0)]))>3)break s;if(c=E+1|0,!(O>>>0<2))break}if(g[0|f]=4,cA=(0|T)<4?m:cA,T=(0|T)<=4?4:T,m>>>0<2)break s;if(O=3&(m=~E+hA|0),c=1,QA-E>>>0>=3)for(E=-4&m,m=0;l[0|(f=r+c|0)]==4&&(g[0|f]=3),l[f+1|0]==4&&(g[f+1|0]=3),l[f+2|0]==4&&(g[f+2|0]=3),l[f+3|0]==4&&(g[f+3|0]=3),c=c+4|0,(0|E)!=(0|(m=m+4|0)););if(f=0,!O)break s;for(;l[0|(E=r+c|0)]==4&&(g[0|E]=3),c=c+1|0,(0|O)!=(0|(f=f+1|0)););}if(vA)continue;break A}}break}}AA=T,I=cA,(0|E)==20&&(g[r+p|0]=o&&(0|Z)<0?1:Z,p=p+1|0)}if(g[0|t]=E,hA=p-1|0,t=t+1|0,vA=(0|p)<99)continue}break}g[r+p|0]=1,g[0|t]=0;A:if((0|(t=A[s>>2]))>0)AA=4,(0|t)>=(0|p)&&(A[s>>2]=hA,t=hA),g[t+r|0]=4,I=A[s>>2];else if((0|AA)==5&&(AA=4,!((0|p)<2))){if(i=1,T=1&(t=p-1|0),(0|p)!=2)for(cA=-2&t,m=0;;){f=4;e:{r:{s:switch(l[0|(t=(c=i)+r|0)]-4|0){case 1:break r;case 0:break s;default:break e}f=2&l[e+14|0]?1:3,c=I}g[0|t]=f,I=c}f=4;e:{r:{s:switch(l[0|(t=(c=i+1|0)+r|0)]-4|0){case 1:break r;case 0:break s;default:break e}f=2&l[e+14|0]?1:3,c=I}g[0|t]=f,I=c}if(i=i+2|0,(0|cA)==(0|(m=m+2|0)))break}if(T){f=4;e:{r:switch(l[0|(t=r+i|0)]-4|0){case 1:break e;case 0:break r;default:break A}f=2&l[e+14|0]?1:3,i=I}g[0|t]=f,I=i}}return A[s>>2]=I,A[a>>2]=p,AA}function Ur(e,t){var r,a,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0;if(!e)return Ct(t);if(t>>>0>=4294967232)return A[56798]=48,0;r=t>>>0<11?16:t+11&-8,o=-8&(a=A[4+(c=e-8|0)>>2]);A:if(3&a){f=o+c|0;e:if(o>>>0>=r>>>0){if((i=o-r|0)>>>0<16)break e;A[c+4>>2]=1&a|r|2,A[4+(s=c+r|0)>>2]=3|i,A[f+4>>2]=1|A[f+4>>2],Dr(s,i)}else if(A[57158]!=(0|f))if(A[57157]!=(0|f)){if(2&(i=A[f+4>>2])||(p=o+(-8&i)|0)>>>0<r>>>0)break A;E=p-r|0;r:if(i>>>0<=255){if(o=A[f+8>>2],s=i>>>3|0,(0|(i=A[f+12>>2]))==(0|o)){A[57152]=A[57152]&ma(-2,s);break r}A[o+12>>2]=i,A[i+8>>2]=o}else{if(I=A[f+24>>2],(0|(m=A[f+12>>2]))==(0|f))if((s=A[(o=f+20|0)>>2])||(s=A[(o=f+16|0)>>2])){for(;i=o,m=s,(s=A[(o=s+20|0)>>2])||(o=m+16|0,s=A[m+16>>2]););A[i>>2]=0}else m=0;else s=A[f+8>>2],A[s+12>>2]=m,A[m+8>>2]=s;if(I){i=A[f+28>>2];s:{if(A[(s=228912+(i<<2)|0)>>2]==(0|f)){if(A[s>>2]=m,m)break s;A[57153]=A[57153]&ma(-2,i);break r}if(A[(A[I+16>>2]==(0|f)?16:20)+I>>2]=m,!m)break r}A[m+24>>2]=I,(s=A[f+16>>2])&&(A[m+16>>2]=s,A[s+24>>2]=m),(s=A[f+20>>2])&&(A[m+20>>2]=s,A[s+24>>2]=m)}}E>>>0<=15?(A[c+4>>2]=1&a|p|2,A[4+(s=c+p|0)>>2]=1|A[s+4>>2]):(A[c+4>>2]=1&a|r|2,A[4+(i=c+r|0)>>2]=3|E,A[4+(s=c+p|0)>>2]=1|A[s+4>>2],Dr(i,E))}else{if((i=o+A[57154]|0)>>>0<r>>>0)break A;(s=i-r|0)>>>0>=16?(A[c+4>>2]=1&a|r|2,A[4+(o=c+r|0)>>2]=1|s,A[(i=i+c|0)>>2]=s,A[i+4>>2]=-2&A[i+4>>2]):(A[c+4>>2]=i|1&a|2,A[4+(s=i+c|0)>>2]=1|A[s+4>>2],s=0,o=0),A[57157]=o,A[57154]=s}else{if((o=o+A[57155]|0)>>>0<=r>>>0)break A;A[c+4>>2]=1&a|r|2,s=o-r|0,A[4+(i=c+r|0)>>2]=1|s,A[57155]=s,A[57158]=i}s=c}else{if(r>>>0<256||o>>>0>=r+4>>>0&&(s=c,o-r>>>0<=A[57272]<<1>>>0))break A;s=0}return s?s+8|0:(c=Ct(t))?(wt(c,e,t>>>0>(s=(3&(s=A[e-4>>2])?-4:-8)+(-8&s)|0)>>>0?s:t),xt(e),c):0}function ts(){var e,t,r=0,a=0;return e=Fa(12),A[e>>2]=22050,t=Fa(432),A[(a=t)+4>>2]=0,A[a+8>>2]=0,A[a>>2]=132304,A[a+32>>2]=0,A[a+12>>2]=0,A[a+16>>2]=0,A[a+20>>2]=0,A[a+24>>2]=0,je(a+40|0,0,376),A[a+420>>2]=0,A[a+424>>2]=-1,g[a+416|0]=1,r=je(Fa(408),0,408),A[a+28>>2]=r,g[r+8|0]=1,A[e+4>>2]=a,r=Fa(1096),A[r+8>>2]=22050,A[r+4>>2]=22050,A[r>>2]=132352,A[r+64>>2]=22050,A[r+56>>2]=0,A[r+60>>2]=0,A[r+32>>2]=0,A[r+36>>2]=0,A[r+24>>2]=22050,A[r+16>>2]=0,A[r+20>>2]=0,A[r+40>>2]=0,A[r+44>>2]=0,g[r+48|0]=0,A[r+128>>2]=0,A[r+132>>2]=0,b[r+96>>1]=0,A[r+72>>2]=22050,A[r+136>>2]=0,A[r+140>>2]=0,b[r+168>>1]=0,A[r+144>>2]=22050,A[r+200>>2]=0,A[r+204>>2]=0,A[r+208>>2]=0,A[r+212>>2]=0,A[r+216>>2]=22050,b[r+240>>1]=0,A[r+280>>2]=0,A[r+284>>2]=0,A[r+272>>2]=0,A[r+276>>2]=0,A[r+288>>2]=22050,b[r+312>>1]=0,A[r+344>>2]=0,A[r+348>>2]=0,A[r+352>>2]=0,A[r+356>>2]=0,A[r+360>>2]=22050,b[r+384>>1]=0,A[r+416>>2]=0,A[r+420>>2]=0,A[r+424>>2]=0,A[r+428>>2]=0,A[r+432>>2]=22050,b[r+456>>1]=0,A[r+488>>2]=0,A[r+492>>2]=0,A[r+496>>2]=0,A[r+500>>2]=0,A[r+504>>2]=22050,b[r+528>>1]=1,A[r+560>>2]=0,A[r+564>>2]=0,A[r+568>>2]=0,A[r+572>>2]=0,b[r+600>>1]=0,A[r+576>>2]=22050,A[r+640>>2]=0,A[r+644>>2]=0,A[r+632>>2]=0,A[r+636>>2]=0,b[r+680>>1]=0,A[r+656>>2]=22050,A[r+648>>2]=22050,A[r+720>>2]=0,A[r+724>>2]=0,A[r+712>>2]=0,A[r+716>>2]=0,b[r+752>>1]=0,A[r+728>>2]=22050,A[r+792>>2]=0,A[r+796>>2]=0,A[r+784>>2]=0,A[r+788>>2]=0,b[r+824>>1]=0,A[r+800>>2]=22050,A[r+864>>2]=0,A[r+868>>2]=0,A[r+856>>2]=0,A[r+860>>2]=0,A[r+872>>2]=22050,b[r+896>>1]=0,A[r+936>>2]=0,A[r+940>>2]=0,A[r+928>>2]=0,A[r+932>>2]=0,b[r+968>>1]=0,A[r+944>>2]=22050,A[r+1008>>2]=0,A[r+1012>>2]=0,A[r+1e3>>2]=0,A[r+1004>>2]=0,b[r+1040>>1]=0,A[r+1016>>2]=22050,A[r+1088>>2]=0,A[(a=r+1080|0)>>2]=0,A[a+4>>2]=0,A[(a=r+1072|0)>>2]=0,A[a+4>>2]=0,A[e+8>>2]=r,lt[A[A[r>>2]+4>>2]](r,t),e}function us(e,t,r){var a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0;A:if(I=A[50759]){if(a=A[50980],s=P(a,80)+222176|0,(0|(f=(0|(s=(0|(s=(A[s+12>>2]+A[s>>2]|0)/(0|e)|0))<(0|(p=((0|P(A[50754],19))/40<<16)/(0|e)|0))?s:p))>=399?399:s))>=0&&(je(t,0,4+(f<<2)|0),a=A[50980]),(0|a)>=0)for(E=A[50801];;){if(i=P(o,80)+222176|0,A[i+4>>2]&&(c=A[i>>2])){if(T=c+A[i+12>>2]|0,a=1+((c-A[i+8>>2]|0)/(0|e)|0)|0,(0|c)>(0|(a=P(s=(0|a)<=1?1:a,e))))for(;A[(m=(s<<2)+t|0)>>2]=A[m>>2]+P(A[i+4>>2],l[((c-a|0)/(A[i+8>>2]>>8)|0)+E|0]),s=s+1|0,(0|c)>(0|(a=e+a|0)););if(!((0|a)>=(0|T)))for(;A[(m=(s<<2)+t|0)>>2]=A[m>>2]+P(A[i+4>>2],l[((a-c|0)/(A[i+12>>2]>>8)|0)+E|0]),s=s+1|0,(0|T)>(0|(a=e+a|0)););}if(!((0|(o=o+1|0))<=A[50980]))break}if(s=1,!((0|(i=65536e3/(0|e)|0))<=0||(0|(a=P(A[55565],10)))<=0))for(i=(0|a)/(0|i)|0;A[(c=(s<<2)+t|0)>>2]=A[c>>2]+a,s=s+1|0,(0|(a=a-i|0))>0;);if((0|o)<=8)for(;s=203216+(a=o<<2)|0,i=P(o,80)+222176|0,c=A[i+4>>2]>>14,A[s>>2]=(0|P(P(c,c),5))/2,r?a=A[a+203264>>2]:(c=a+203264|0,a=A[i>>2]/(0|e)|0,A[c>>2]=a),(0|a)>=(0|p)&&(A[s>>2]=0),(0|(o=o+1|0))!=9;);if(s=0,(0|f)>=0)for(a=0;i=A[(o=(a<<2)+t|0)>>2]>>15,i=P(i,i)>>8,A[o>>2]=i,(0|s)<=524287999&&(A[o>>2]=P(i,l[344+((s>>19)+I|0)|0])>>13),s=e+s|0,o=(0|a)!=(0|f),a=a+1|0,o;);if(A[t+4>>2]=(0|P(A[t+4>>2],l[203300]?6:10))/8,1&r)for(e=A[50826],a=1;;){if(A[203312+(r=a<<2)>>2]=A[t+r>>2]-A[e+r>>2]>>3,(0|(r=a+1|0))==30)break A;A[203312+(r<<=2)>>2]=A[t+r>>2]-A[e+r>>2]>>3,a=a+2|0}}else f=1;return f}function _s(e,t,r,a){var s,i=0,o=0;J=s=J-176|0,g[0|e]=0,b[s+80>>1]=24320,A[s+104>>2]=0,A[s+108>>2]=0,g[82+(Pr(r,i=s+80|2)+s|0)|0]=0;A:{e:{if(!a){if(a=s+80|1,A[s+12>>2]=a,kr(t,s+12|0,s+16|0,s+104|0,0,0)||(A[s+12>>2]=i,kr(t,s+12|0,s+16|0,s+104|0,0,0)||(g[s+81|0]=32,Zt(t,i,s+16|0,60,0,0,0))),(r=l[s+16|0])&&(0|r)!=21)break e;r:{if(A[t+212>>2]!=25966){if(pn(85719,188772,189296),g[s+81|0]=95,A[s+12>>2]=a,kr(A[47193],s+12|0,s+16|0,s+104|0,0,0)||(A[s+12>>2]=i,kr(A[47193],s+12|0,s+16|0,s+104|0,0,0)),l[s+16|0])break r;ia(A[A[32972]+60>>2]),r=l[s+16|0]}if(255&r)break e;t=l[87124]|l[87125]<<8|l[87126]<<16|l[87127]<<24,r=l[87120]|l[87121]<<8|l[87122]<<16|l[87123]<<24,g[0|e]=r,g[e+1|0]=r>>>8,g[e+2|0]=r>>>16,g[e+3|0]=r>>>24,g[e+4|0]=t,g[e+5|0]=t>>>8,g[e+6|0]=t>>>16,g[e+7|0]=t>>>24,g[e+16|0]=l[87136],t=l[87132]|l[87133]<<8|l[87134]<<16|l[87135]<<24,r=l[87128]|l[87129]<<8|l[87130]<<16|l[87131]<<24,g[e+8|0]=r,g[e+9|0]=r>>>8,g[e+10|0]=r>>>16,g[e+11|0]=r>>>24,g[e+12|0]=t,g[e+13|0]=t>>>8,g[e+14|0]=t>>>16,g[e+15|0]=t>>>24;break A}a=s+16|0,i=s+104|0,J=r=J-112|0,(o=A[47193])?($t(o,a,i,-1,0),Je(i=a,a=r+48|0),t=A[t+212>>2],g[r+43|0]=t>>>24,g[0|(o=(i=r+43|0)+(t>>>0>16777215)|0)]=t>>>16,g[0|(o=o+!!(16711680&t)|0)]=t>>>8,g[0|(o=o+!!(65280&t)|0)]=t,g[o+!!(255&t)|0]=0,A[r+16>>2]=85719,A[r+24>>2]=i,A[r+20>>2]=a,De(e,85662,r+16|0)):($t(t,a,i,-1,0),Je(a,t=r+48|0),A[r>>2]=t,De(e,85451,r)),J=r+112|0,ia(A[A[32972]+60>>2]);break A}if(A[s+12>>2]=i,kr(t,s+12|0,s+16|0,s+104|0,0,0),!l[s+16|0])break A}$t(r=t,t=s+16|0,s+104|0,-1,0),Je(r=t,t=s+112|0),A[s>>2]=t,De(e,85451,s)}return J=s+176|0,e}function qa(e,t){var r,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0;if(J=r=J-112|0,A[r+72>>2]=-1,A[(a=r- -64|0)>>2]=-1,A[a+4>>2]=-1,A[r+56>>2]=-1,A[r+60>>2]=-1,A[r+48>>2]=-1,A[r+52>>2]=-1,A[r+40>>2]=-1,A[r+44>>2]=-1,A[r+32>>2]=-1,A[r+36>>2]=-1,A[r+24>>2]=-1,A[r+28>>2]=-1,A[r+16>>2]=-1,A[r+20>>2]=-1,(0|t)>0){for(i=A[r+72>>2],o=A[r+68>>2],c=A[r+64>>2],f=A[r+60>>2],m=A[r+56>>2],p=A[r+52>>2],I=A[r+48>>2],E=A[r+44>>2],T=A[r+40>>2],O=A[r+36>>2],Z=A[r+32>>2],AA=A[r+28>>2],cA=A[r+24>>2],hA=A[r+20>>2],vA=A[r+16>>2];s=i,i=(0|(i=A[60+(a=134912+(QA<<6)|0)>>2]))<0?s:i,s=o,o=(0|(o=A[a+56>>2]))<0?s:o,s=c,c=(0|(c=A[a+52>>2]))<0?s:c,s=f,f=(0|(f=A[a+48>>2]))<0?s:f,s=m,m=(0|(m=A[a+44>>2]))<0?s:m,s=p,p=(0|(p=A[a+40>>2]))<0?s:p,s=I,I=(0|(I=A[a+36>>2]))<0?s:I,s=E,E=(0|(E=A[a+32>>2]))<0?s:E,s=T,T=(0|(T=A[a+28>>2]))<0?s:T,s=O,O=(0|(O=A[a+24>>2]))<0?s:O,s=Z,Z=(0|(Z=A[a+20>>2]))<0?s:Z,s=AA,AA=(0|(AA=A[a+16>>2]))<0?s:AA,s=cA,cA=(0|(cA=A[a+12>>2]))<0?s:cA,s=hA,hA=(0|(hA=A[a+8>>2]))<0?s:hA,vA=(0|(a=A[a+4>>2]))<0?vA:a,(0|(QA=QA+1|0))!=(0|t););A[r+72>>2]=i,A[r+68>>2]=o,A[r+64>>2]=c,A[r+60>>2]=f,A[r+56>>2]=m,A[r+52>>2]=p,A[r+48>>2]=I,A[r+44>>2]=E,A[r+40>>2]=T,A[r+36>>2]=O,A[r+32>>2]=Z,A[r+28>>2]=AA,A[r+24>>2]=cA,A[r+20>>2]=hA,A[r+16>>2]=vA}for(t=0;;){if((0|(a=A[(i=t<<2)+(r+16|0)>>2]))!=A[(i=i+134848|0)>>2]){g[r+80|0]=0;A:{e:switch(t-1|0){case 4:A[47201]=a-1;break A;case 5:A[47200]=a;break A;case 0:case 1:case 2:case 3:case 11:break e;default:break A}A[r+4>>2]=a,A[r>>2]=1,A[r+8>>2]=g[t+102812|0],De(r+80|0,91942,r)}A[i>>2]=a,a=r+80|0,qe(A[e>>2]+189424|0,a),A[e>>2]=A[e>>2]+He(a)}if((0|(t=t+1|0))==15)break}J=r+112|0}function ws(e){var t,r,a,s=0,i=0,o=0,c=0;for(s=17,A[e+328>>2]=17,A[e+224>>2]=0,A[e+216>>2]=1105,A[e+220>>2]=1072,A[e+600>>2]=1056,A[e+8180>>2]=105296,o=je(e+344|0,0,256),g[e+393|0]=1,g[e+365|0]=1,g[e+360|0]=1,g[e+545|0]=1,g[e+529|0]=1,g[e+391|0]=1,g[e+379|0]=1,g[e+374|0]=1,g[e+489|0]=1,g[e+487|0]=1,g[e+398|0]=1,g[e+387|0]=1,g[e+388|0]=2,g[e+389|0]=1,g[e+390|0]=1,g[e+385|0]=2,g[e+383|0]=2,g[e+368|0]=1,g[e+369|0]=2,i=104224;g[0|(s=s+o|0)]=4|l[0|s],s=o+l[i+1|0]|0,g[0|s]=4|l[0|s],s=o+l[i+2|0]|0,g[0|s]=4|l[0|s],s=l[0|(i=i+3|0)],(0|i)!=104251;);g[e+386|0]=8|l[e+386|0],g[e+382|0]=8|l[e+382|0],g[e+384|0]=8|l[e+384|0],g[e+369|0]=16|l[e+369|0],g[e+370|0]=16|l[e+370|0],g[e+371|0]=16|l[e+371|0],i=l[e+361|0],o=l[e+362|0],s=l[e+363|0],c=l[e+364|0],t=l[e+366|0],r=l[e+367|0],g[e+372|0]=16|l[e+372|0],g[e+373|0]=16|l[e+373|0],g[e+375|0]=16|l[e+375|0],g[e+376|0]=16|l[e+376|0],g[e+377|0]=16|l[e+377|0],g[e+378|0]=16|l[e+378|0],g[e+380|0]=16|l[e+380|0],g[e+381|0]=16|l[e+381|0],g[e+383|0]=16|l[e+383|0],g[e+385|0]=16|l[e+385|0],a=l[e+388|0],g[e+367|0]=48|r,g[e+366|0]=40|t,g[e+364|0]=48|c,g[e+363|0]=48|s,g[e+362|0]=48|o,g[e+361|0]=48|i,g[e+388|0]=80|a,i=l[e+390|0],o=l[e+391|0],s=l[e+393|0],g[e+360|0]=128|l[e+360|0],c=l[e+365|0],g[e+393|0]=192|s,g[e+365|0]=128|c,g[e+368|0]=128|l[e+368|0],g[e+374|0]=128|l[e+374|0],g[e+379|0]=128|l[e+379|0],g[e+387|0]=128|l[e+387|0],s=l[e+389|0],g[e+391|0]=192|o,g[e+390|0]=192|i,g[e+389|0]=128|s,g[e+529|0]=128|l[e+529|0],g[e+545|0]=128|l[e+545|0],g[e+489|0]=128|l[e+489|0],g[e+487|0]=128|l[e+487|0],g[e+398|0]=128|l[e+398|0]}function kr(e,t,r,a,s,i){var o,c=0,f=0,m=0,p=0,I=0,E=0;J=o=J-192|0,c=I=A[t>>2];A:{e:{for(;f=1,(0|(m=g[0|c]))>=0||(f=2,m>>>0<4294967264||(f=m>>>0<4294967280?3:4)),!(l[0|(m=f+c|0)]!=32|l[m+1|0]!=46);){if(p-160>>>0<4294967135)break e;wt((E=o+32|0)+p|0,c,f),g[(f=f+p|0)+E|0]=46,c=m+3|0,p=f+1|0}if(p){for(f=0;m=f,f=f+1|0,223&l[c+m|0];);if(!(1+(E=m+p|0)>>>0>160)&&(wt((f=o+32|0)+p|0,c,m),g[f+E|0]=0,bs(e,f,c,r,a,s,i))){A[a>>2]=128|A[a>>2],A[33264]=p,e=1;break A}}}for(c=0;;){if(I=(f=I)+1|0,223&(f=l[0|f]))if(!c|(0|f)!=46|g[31+(c+o|0)|0]-48>>>0>=10){if(g[(o+32|0)+c|0]=f,f=159,(0|(c=c+1|0))!=159)continue}else f=c;else f=c;break}g[(c=o+32|0)+f|0]=0,c=bs(e,c,I,r,a,s,i);e:if(8&l[a+3|0]){if(!vr(r,m=e+268|0)){if(m=A[e+288>>2]+1|0,A[e+288>>2]=m,(0|m)<4)break e;g[0|r]=0;break e}ar(m,r,20),A[e+288>>2]=1}else A[e+288>>2]=0;e:{if(!c){if(c=0,8&l[a+5|0]&&(m=Gt(o+28|0,c=o+32|l[o+32|0]==95),te(e,A[o+28>>2],r),c=c+m|0),!(f>>>0<2|c)){if(g[0|r]=0,!(16&s&&l[0|(c=31+(f+o|0)|0)]==101)&&(!(4096&s)||l[0|(c=(f=(o+32|0)+f|0)-1|0)]!=l[f-2|0]))break e;g[0|c]=0,c=bs(e,o+32|0,I,r,a,s,i)}if(!c)break e}if(p=A[a>>2],l[e+172|0]&&(p^=536870912,A[a>>2]=p),e=1,!(536870912&p))break A;2&s&&(b[66448]=8192,A[o+16>>2]=r,De(132898,87470,o+16|0),e=A[t>>2],A[t>>2]=132898,8&l[188788]&&(wt(t=o+32|0,a=e,e=c-e|0),g[e+t|0]=0,A[o+4>>2]=132898,e=A[47195],A[o>>2]=t,fr(e,87652,o)))}g[0|r]=0,e=0}return J=o+192|0,e}function Ps(e,t){var r=0,a=0,s=0;r=31&e;A:{e:{r:{if((0|(e&=96))==96)e=-1;else{if((0|e)!=64)break r;e=1}if(r>>>0>=15)break A;t=A[203136+(r<<2)>>2]+P(e,t)|0;break e}if(r>>>0>=15)break A}e=A[105616+(a=r<<2)>>2],A[a+203136>>2]=(0|t)>=0?(0|e)>(0|t)?t:e:0}A:{e:{r:{s:{i:switch(r-1|0){case 5:if(!(e=A[50759]))break e;A[54728]=A[50982],t=A[50979],r=A[50978],je(205184,0,11e3),A[51293]=0,t=(r=(s=(0|(a=A[50789]))>0)?130:(0|r)>=5499?5499:r)?s?a:(0|t)>=100?100:t:0,A[50755]=t,r=(0|P(r,A[50754]))/1e3|0,A[51292]=r,A[54729]=(0|t)>20?r<<1:t?r:0,A[33037]=(0|P(500-t|0,(0|P(l[A[50797]+105596|0],(0|P(A[50787],55))/100|0))/16|0))/500;break s;case 0:break i;case 2:case 12:break A;case 4:break r;default:break e}if(!(e=A[50759]))break e}return t=256,(0|(r=(0|(r=A[50785]))>=101?101:r))>=51&&(t=256+(((P(r,25)-1250&65535)>>>0)/50|0)|0),b[e+164>>1]=(0|P(b[e+236>>1],t))/256,b[e+166>>1]=(0|P(b[e+238>>1],t))/256,b[e+168>>1]=(0|P(b[e+240>>1],t))/256,b[e+170>>1]=(0|P(b[e+242>>1],t))/256,b[e+172>>1]=(0|P(b[e+244>>1],t))/256,b[e+174>>1]=(0|P(b[e+246>>1],t))/256,e=A[50790],b[102e3]=(0|P(b[102036],P(e,-3)+256|0))/256,void(b[101999]=(0|P(b[102035],P(e,-6)+256|0))/256)}A[50759]&&(A[54728]=A[50982],e=A[50979],t=A[50978],je(205184,0,11e3),A[51293]=0,e=(t=(a=(0|(r=A[50789]))>0)?130:(0|t)>=5499?5499:t)?a?r:(0|e)>=100?100:e:0,A[50755]=e,t=(0|P(t,A[50754]))/1e3|0,A[51292]=t,A[54729]=(0|e)>20?t<<1:e?t:0,A[33037]=(0|P(500-e|0,(0|P(l[A[50797]+105596|0],(0|P(A[50787],55))/100|0))/16|0))/500)}return}A[33037]=(0|P(l[A[50797]+105596|0],(0|P(A[50787],55))/100|0))/16}function zs(e,t,r){var a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0;r&&(A[r>>2]=0);A:{e:if(!((0|(a=g[0|e]))<0)){for(;;){if((0|(i=255&a))==32|i-9>>>0<5){if((0|(a=g[0|(e=e+1|0)]))>=0)continue;break e}break}if(!(255&a))break A}for(;;){if((0|(a=f=255&a))==32|a-9>>>0<5)break A;if((0|f)!=124||(0|(a=l[0|(i=e+1|0)]))==124){e:{if((0|(I=A[36115]))>=2){for(a=1,i=-1,m=0;;){r:if(!(!(p=A[144464+(a<<2)>>2])|l[p+11|0]==15)){c=A[p>>2];s:{i:{if(f>>>0>=33){if(E=0,o=0,(255&c)==(0|f)&&(o=1,(s=l[e+1|0])>>>0<33|(0|s)!=(c>>>8&255)||(o=2,(s=l[e+2|0])>>>0<33|(0|s)!=(c>>>16&255)||(o=(s=(s=l[e+3|0])>>>0>32&(0|s)==(c>>>24|0))?4:3,E=0-s|0))),(0|i)>=(0|o))break r;if(s=4,!(1&E))break i;break s}if(o=0,(0|i)>=0)break r}if(c>>>((s=o)<<3)&255)break r}m=l[p+10|0],i=s}if((0|I)==(0|(a=a+1|0)))break}if(m)break e}return r&&Gt(r,e),void(g[0|t]=0)}g[0|t]=m,e=((0|i)<=1?1:i)+e|0,t=i=t+1|0;e:if((0|m)==21){r:if((0|(s=l[0|e]))==32|s-9>>>0<5)a=i;else if(a=i,s)for(;;){if(g[0|a]=Ht(s),a=a+1|0,(0|(s=l[0|(e=e+1|0)]))==32|s-9>>>0<5)break r;if(!s)break}if(g[0|a]=0,!s){if(t=a,vr(i,85593))break e;return void(g[0|i]=0)}g[0|a]=124,t=a+1|0}a=l[0|e]}else e=i;if(!(255&a))break}}g[0|t]=0}function pi(e,t){var r=0,a=0,s=0,i=0,o=0;A:{e:{r:{s:{i:switch((0|(r=A[e+4>>2]))==A[e+104>>2]?r=Ce(e):(A[e+4>>2]=r+1,r=l[0|r]),r-43|0){case 0:case 2:break i;default:break s}if(i=(0|r)==45,o=!t,(0|(r=A[e+4>>2]))==A[e+104>>2]?r=Ce(e):(A[e+4>>2]=r+1,r=l[0|r]),o|(t=r-58|0)>>>0>4294967285)break r;if(A[e+116>>2]<0)break e;A[e+4>>2]=A[e+4>>2]-1;break e}t=r-58|0}if(!(t>>>0<4294967286)){if((t=r-48|0)>>>0<10){for(;s=(0|(a=(a=P(a,10)+r|0)-48|0))<214748364,(0|(t=A[e+4>>2]))==A[e+104>>2]?r=Ce(e):(A[e+4>>2]=t+1,r=l[0|t]),s&(t=r-48|0)>>>0<=9;);s=a>>31}r:if(!(t>>>0>=10))for(;;){if(t=(a=bt(a,s,10,0))+r|0,r=$,r=t>>>0<a>>>0?r+1|0:r,a=t-48|0,s=r-(t>>>0<48)|0,(0|(t=A[e+4>>2]))==A[e+104>>2]?r=Ce(e):(A[e+4>>2]=t+1,r=l[0|t]),(t=r-48|0)>>>0>9)break r;if(!(a>>>0<2061584302&(0|s)<=21474836|(0|s)<21474836))break}if(t>>>0<10)for(;(0|(t=A[e+4>>2]))==A[e+104>>2]?t=Ce(e):(A[e+4>>2]=t+1,t=l[0|t]),t-48>>>0<10;);(0|(t=A[e+116>>2]))>0|(0|t)>=0&&(A[e+4>>2]=A[e+4>>2]-1),e=a,a=i?0-e|0:e,s=i?0-(!!(0|e)+s|0)|0:s;break A}}if(s=-2147483648,!(A[e+116>>2]<0))return A[e+4>>2]=A[e+4>>2]-1,$=-2147483648,0}return $=s,a}function Fs(e){var t=0,r=0,a=0,s=0;if(A[36432]=110,A[36433]=100,A[36434]=450,A[36430]=5,t=A[203136+((0|e)==2?32:8)>>2],a=A[32972],(0|(r=A[a+84>>2]))>0&&(t=(0|P(t,r))/100|0),r=(0|t)>=359?359:t,r=(0|(t=(0|t)>=450?450:t))>399?6:(0|t)>379?7:l[((0|r)<=80?80:r)+101856|0],1&e&&(A[32526]=(0|P(r,A[a+72>>2]))/256,A[32527]=(0|P(r,A[a+76>>2]))/256,A[32528]=(0|P(r,A[a+80>>2]))/256,r>>>0>7||(s=r-1|0,A[32528]=s,A[32526]=r,A[32527]=s)),2&e){e=A[a+72>>2];A:{e:{r:{s:{i:{c:{o:{u:{if((0|t)>=351)a=t-350|0,A[36432]=85-(((255&a)>>>0)/3|0)&255,a=60-(a>>>3|0)|0;else{if((0|t)<251)break u;a=t-250|0,A[36432]=110-(a>>>2|0),a=110-(a>>>1|0)|0}if(A[36433]=a,e=(0|P(e,r))/256|0,A[36431]=110+((0|P(e,150))/128|0),t>>>0<=349)break o;if(r=t-350|0,A[36431]=l[r+102224|0],t>>>0<390)break i;if(A[36434]=450+((t+112<<24>>24)/-2<<24>>24),t>>>0<441)break c;A[36434]=860-t,e=12;break e}e=(0|P(e,r))/256|0,A[36431]=(0|t)>=170?110+((0|P(e,150))/128|0)|0:128+((e<<7)/130|0)|0}e=(e<<8)/115|0;break e}if(e=12,t>>>0>430)break e;if(e=13,t>>>0<=400)break s;break e}if(e=(e<<8)/115|0,A[36428]=e,t>>>0<375)break r}e=14;break e}if((0|t)<351)break A;e=l[r+102336|0]}A[36428]=e}A[36429]=(0|e)<=16?16:e}}function ks(e,t,r){var a,s,i,o;a=.000244140625*+A[50767],D[r>>3]=a,D[r+40>>3]=.015625*+A[e+112>>2],D[r+48>>3]=.015625*+A[e+276>>2],D[r+56>>3]=.00390625*+(0|P(b[e+166>>1],b[t+4>>1]))+ +b[e+220>>1],D[r+64>>3]=.00390625*+(0|P(b[e+168>>1],b[t+6>>1]))+ +b[e+222>>1],D[r+72>>3]=.00390625*+(0|P(b[e+170>>1],b[t+8>>1]))+ +b[e+224>>1],D[r+80>>3]=.00390625*+(0|P(b[e+172>>1],b[t+10>>1]))+ +b[e+226>>1],D[r+88>>3]=.00390625*+(0|P(b[e+174>>1],b[t+12>>1]))+ +b[e+228>>1],s=b[e+230>>1],i=b[e+176>>1],o=b[t+14>>1],A[r+112>>2]=0,A[r+116>>2]=1080623104,A[r+104>>2]=0,A[r+108>>2]=1081032704,D[r+96>>3]=.00390625*+(0|P(i,o))+ +(0|s),l[t+40|0]?(A[r+184>>2]=0,A[r+188>>2]=1072693248,D[r+104>>3]=l[t+40|0]<<1):(A[r+184>>2]=0,A[r+188>>2]=0),D[r+120>>3]=.00390625*+b[e+202>>1]*+(l[t+35|0]<<1),D[r+128>>3]=.00390625*+b[e+204>>1]*+(l[t+36|0]<<1),D[r+136>>3]=.00390625*+b[e+206>>1]*+(l[t+37|0]<<1),t=l[t+38|0],e=b[e+208>>1],A[r+176>>2]=0,A[r+180>>2]=1079574528,A[r+160>>2]=0,A[r+164>>2]=1083129856,A[r+152>>2]=0,A[r+156>>2]=1083129856,A[r+352>>2]=0,A[r+356>>2]=1072693248,A[r+168>>2]=0,A[r+172>>2]=1079574528,D[r+144>>3]=.00390625*+(0|e)*+(t<<1),e=A[50779],D[r+368>>3]=a,D[r+360>>3]=+(0|e)/100*3}function Ss(e){var t=0;OA(e,Wa(e));A:{e:{r:{s:{i:{c:{o:{u:{l:{n:{if((0|(e=-1048576&$))<268435455|(0|e)<=268435455){p:{C:{if((0|e)<33554431|(0|e)<=33554431){if((0|e)<8388607|(0|e)<=8388607){if(t=524328,!0&(0|e)==-2147483648)break A;if(0|(0|e)!=-2143289344)break e;return 557096}if(!0&(0|e)==8388608)break C;if(0|(0|e)!=16777216)break e;return 524358}if((0|e)>71303167)break p;if(!0&(0|e)==33554432)break r;if(0|(0|e)!=67108864)break e}return 266270}if(!0&(0|e)==71303168)break n;if(!0&(0|e)==134217728)break s;if(0|(0|e)!=138412032)break e;return 294942}if((0|e)<542113791|(0|e)<=542113791){if((0|e)<536870911|(0|e)<=536870911){if(!0&(0|e)==268435456)break i;if(0|(0|e)!=272629760)break e;return 299028}if(!0&(0|e)==536870912)break o;if(!0&(0|e)==538968064)break c;if(0|(0|e)!=541065216)break e;return 569389}if((0|e)<1075838975|(0|e)<=1075838975){if(!0&(0|e)==542113792)break n;if(0|(0|e)!=1073741824)break e;return 532520}if(!0&(0|e)==1075838976)break u;if(!0&(0|e)==1077936128)break l;if(0|(0|e)!=1078984704)break e}return 299038}return 565288}return 1581096}return 536621}return 1585197}return 266260}return 262174}return 2396190}t=16384}return t}function xs(e,t,r,a,s,i){var o,c,f=0,m=0,p=0,I=0;if(c=8388607&e,m=A[34456],f=l[0|(e=c+m|0)]|l[e+1|0]<<8){o=!(p=l[e+2|0]),e=A[36434]<<o,(0|r)<=0?r=f:(r=(0|P(A[50754],r))/1e3<<o,e=(0|e)<(0|(I=(0|P(r,e))/(0|f)|0))?I:e),s=(0|s)>0?(0|P(r,s))/256|0:r,r=(0|P(s,A[36431]))/256|0,r=(0|e)<(0|(r=(4&a)>>>2|0&&(0|r)>(0|s)?s:r))?r:e,p||(f=f>>>1|0,r=(0|r)/2|0);A:if(!((0|i)<0)){if(a=c+4|0,256&t)e=A[50758],A[36439]=e,A[(t=216192+(e<<4)|0)>>2]=7,A[t+8>>2]=a+m,A[t+4>>2]=f<<16|r,i=p|i<<8;else{if(e=A[50758],A[36439]=e,A[(e=216192+(e<<4)|0)>>2]=6,i=p|i<<8,A[e+12>>2]=i,A[e+8>>2]=a+m,m=e,e=P(t=f>>>2|0,3),s=(0|r)>(0|f),A[m+4>>2]=s?e:r,m=A[50758]+1|0,A[50758]=(0|m)<=169?m:0,(0|e)<(0|(r=s?r-e|0:0)))for(s=t<<1,p=a+(p?t:s)|0;t=A[50758],A[36439]=t,A[(t=216192+(t<<4)|0)>>2]=6,A[t+4>>2]=s,A[t+12>>2]=i,A[t+8>>2]=p+A[34456],t=A[50758]+1|0,A[50758]=(0|t)<=169?t:0,(0|e)<(0|(r=r-s|0)););if((0|r)<=0)break A;e=A[50758],A[36439]=e,A[(t=216192+(e<<4)|0)>>2]=6,A[t+4>>2]=r,A[t+8>>2]=A[34456]+(a+(f-r<<o)|0)}A[12+(216192+(e<<4)|0)>>2]=i,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0}}}function wt(e,t,r){var a,s=0,i=0;if(r>>>0>=512)return oe(0|e,0|t,0|r),e;a=e+r|0;A:if(3&(e^t))if(a>>>0<4)r=e;else if((s=a-4|0)>>>0<e>>>0)r=e;else for(r=e;g[0|r]=l[0|t],g[r+1|0]=l[t+1|0],g[r+2|0]=l[t+2|0],g[r+3|0]=l[t+3|0],t=t+4|0,s>>>0>=(r=r+4|0)>>>0;);else{e:if(3&e)if(r)for(r=e;;){if(g[0|r]=l[0|t],t=t+1|0,!(3&(r=r+1|0)))break e;if(!(r>>>0<a>>>0))break}else r=e;else r=e;if(!((s=-4&a)>>>0<64||(i=s+-64|0)>>>0<r>>>0))for(;A[r>>2]=A[t>>2],A[r+4>>2]=A[t+4>>2],A[r+8>>2]=A[t+8>>2],A[r+12>>2]=A[t+12>>2],A[r+16>>2]=A[t+16>>2],A[r+20>>2]=A[t+20>>2],A[r+24>>2]=A[t+24>>2],A[r+28>>2]=A[t+28>>2],A[r+32>>2]=A[t+32>>2],A[r+36>>2]=A[t+36>>2],A[r+40>>2]=A[t+40>>2],A[r+44>>2]=A[t+44>>2],A[r+48>>2]=A[t+48>>2],A[r+52>>2]=A[t+52>>2],A[r+56>>2]=A[t+56>>2],A[r+60>>2]=A[t+60>>2],t=t- -64|0,i>>>0>=(r=r- -64|0)>>>0;);if(r>>>0>=s>>>0)break A;for(;A[r>>2]=A[t>>2],t=t+4|0,s>>>0>(r=r+4|0)>>>0;);}if(r>>>0<a>>>0)for(;g[0|r]=l[0|t],t=t+1|0,(0|a)!=(0|(r=r+1|0)););return e}function zt(e){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0;CA(+e),t=0|X(1),X(0);A:{if((a=(t=t>>>20&2047)-969|0)>>>0<63)f=t;else{if((0|a)<0)return e+1;if(!(t>>>0<1033)){if(CA(+e),a=0|X(1),r=0,!(0|X(0))&(0|a)==-1048576)break A;return t>>>0>=2047?e+1:(0|a)<0?(D[8+(t=J-16|0)>>3]=12882297539194267e-247,12882297539194267e-247*D[t+8>>3]):(D[8+(t=J-16|0)>>3]=3105036184601418e216,3105036184601418e216*D[t+8>>3])}}if(r=D[14409],i=(r=(e=(r=(s=D[14408]*e+r)-r)*D[14411]+(r*D[14410]+e))*e)*r*(e*D[14415]+D[14414]),r*=e*D[14413]+D[14412],CA(+s),X(1),c=0|X(0),e=i+(r+(D[115376+(a=c<<4&2032)>>3]+e)),o=A[(a=a+115384|0)>>2],t=(c<<13)+(t=A[a+4>>2])|0,t=(a=(a=o)+(o=0)|0)>>>0<o>>>0?t+1|0:t,!f)return-2147483648&c?(R(0,0|a),R(1,t+1071644672|0),(e=(s=(r=+aA())*e)+r)<1&&(A[8+(t=J-16|0)>>2]=0,A[t+12>>2]=1048576,D[t+8>>3]=22250738585072014e-324*D[t+8>>3],e=(e=(i=e+1)+(s+(r-e)+(e+(1-i)))+-1)==0?0:e),e*=22250738585072014e-324):(R(0,0|a),R(1,t-1058013184|0),e=5486124068793689e288*((r=+aA())*e+r)),e;R(0,0|a),R(1,0|t),r=(r=+aA())*e+r}return r}function ka(e,t){var r,a=0,s=0,i=0,o=0;J=r=J-16|0;A:{if($a(84270,g[0|t])){if(s=2,$a(t,43)||(s=l[0|t]!=114),s=$a(t,120)?128|s:s,i=s=$a(t,101)?524288|s:s,o=64|s,i=(0|(s=l[0|t]))==114?i:o,i=(0|s)==119?512|i:i,A[r>>2]=438,A[r+4>>2]=0,(e=0|PA(-100,0|e,32768|((0|s)==97?1024|i:i),0|r))>>>0>=4294963201&&(A[56798]=0-e,e=-1),(0|e)<0)break A;J=s=J-32|0;e:{r:{if($a(84270,g[0|t])){if(a=Ct(1176))break r}else A[56798]=28;t=0;break e}je(a,0,144),$a(t,43)||(A[a>>2]=l[0|t]==114?8:4),l[0|t]==97?(1024&(t=0|bA(0|e,3,0))||(t|=1024,A[s+16>>2]=t,A[s+20>>2]=t>>31,bA(0|e,4,s+16|0)),t=128|A[a>>2],A[a>>2]=t):t=A[a>>2],A[a+80>>2]=-1,A[a+48>>2]=1024,A[a+60>>2]=e,A[a+44>>2]=a+152,8&t||(A[s>>2]=s+24,A[s+4>>2]=0,0|ke(0|e,21523,0|s)||(A[a+80>>2]=10)),A[a+40>>2]=10,A[a+36>>2]=11,A[a+32>>2]=12,A[a+12>>2]=13,l[227205]||(A[a+76>>2]=-1),A[a+56>>2]=A[56816],(t=A[56816])&&(A[t+52>>2]=a),A[56816]=a,t=a}if(J=s+32|0,a=t)break A;Ge(0|e)}else A[56798]=28;a=0}return J=r+16|0,a}function $s(e,t,r){var a,s=0,i=0,o=0,c=0,f=0;if(o=e,J=a=J-208|0,A[a+8>>2]=1,A[a+12>>2]=0,c=t<<2){for(A[a+16>>2]=4,A[a+20>>2]=4,t=4,s=4,i=2;e=t,t=(s+4|0)+t|0,A[(a+16|0)+(i<<2)>>2]=t,i=i+1|0,s=e,t>>>0<c>>>0;);if((e=(o+c|0)-4|0)>>>0<=o>>>0)i=0,t=1,e=0;else{for(i=1,t=1;3&~i?(uA[(a+16|0)+((s=t-1|0)<<2)>>2]>=e-o>>>0?Qr(o,r,a+8|0,t,0,a+16|0):fn(o,r,t,a+16|0),(0|t)!=1?(ji(a+8|0,s),t=1):(ji(a+8|0,1),t=0)):(fn(o,r,t,a+16|0),wi(a+8|0,2),t=t+2|0),i=1|(s=A[a+8>>2]),A[a+8>>2]=i,e>>>0>(o=o+4|0)>>>0;);i=s>>>0>1,e=A[a+12>>2]!=0}if(Qr(o,r,a+8|0,t,0,a+16|0),i|(0|t)!=1|e)for(;(0|t)<=1?(wi(s=a+8|0,e=Bn(s)),i=A[a+8>>2],e=e+t|0):(ji(s=a+8|0,2),A[a+8>>2]=7^A[a+8>>2],wi(s,1),Qr((f=o-4|0)-A[(c=a+16|0)+((e=t-2|0)<<2)>>2]|0,r,s,t-1|0,1,c),ji(s,1),i=1|A[a+8>>2],A[a+8>>2]=i,Qr(f,r,s,e,1,c)),t=e,o=o-4|0,A[a+12>>2]|(0|t)!=1|(0|i)!=1;);}J=a+208|0}function Bs(e,t,r,a){var s,i=0,o=0,c=0;J=s=J-32|0,c=i=2147483647&a,o=i-1006698496|0;A:if(0|(i=i-1140785152|0)>>>0>o>>>0){if(i=r<<4|t>>>28,r=a<<4|r>>>28,(0|(t&=268435455))==134217728&!!(0|e)|t>>>0>134217728){o=r+1073741824|0,o=(i=i+1|0)?o:o+1|0;break A}if(o=r+1073741824|0,e|(0|t)!=134217728)break A;o=(e=1&i)>>>0>(i=e+i|0)>>>0?o+1|0:o}else(!r&(0|c)==2147418112?!(e|t):c>>>0<2147418112)?(i=0,o=2146435072,c>>>0>1140785151||(o=0,(c=c>>>16|0)>>>0<15249||(ta(s+16|0,e,t,r,i=65535&a|65536,c-15233|0),Ha(s,e,t,r,i,15361-c|0),i=(t=A[s+8>>2])<<4,t=A[s+12>>2]<<4|t>>>28,r=A[s>>2],c=o=A[s+4>>2],i|=o>>>28,o=t,(0|(e=268435455&c))==134217728&!!(0|(t=r|!!(A[s+16>>2]|A[s+24>>2]|A[s+20>>2]|A[s+28>>2])))|e>>>0>134217728?o=(i=i+1|0)?o:o+1|0:t|(0|e)!=134217728||(o=(e=i)>>>0>(i=i+(1&i)|0)>>>0?o+1|0:o)))):(i=r<<4|t>>>28,o=524287&(e=a<<4|r>>>28)|2146959360);return J=s+32|0,R(0,0|i),R(1,-2147483648&a|o),+aA()}function Ns(e){var t,r=0,a=0,s=0,i=0,o=0;if(CA(+e),o=0|X(1),s=0|X(0),(0|(i=o>>>20&2047))==2047)return(e*=1)/e;if(!(a=s<<1)&(0|(r=o<<1|s>>>31))==2145386496|r>>>0<2145386496)return!a&(0|r)==2145386496?0*e:e;if(i)r=1048575&o|1048576;else{if(i=0,a=s<<12,(0|(r=o<<12|s>>>20))>0|(0|r)>=0)for(;i=i-1|0,r=r<<1|a>>>31,a<<=1,(0|r)>0|(0|r)>=0;);a=31&(r=1-i|0),(63&r)>>>0>=32?(r=s<<a,s=0):(r=(1<<a)-1&s>>>32-a|o<<a,s<<=a)}if(a=s,(0|i)>1023){for(;;){if(!((0|(s=r+-1048576|0))<0||(r=s)|a))return 0*e;if(r=r<<1|a>>>31,a<<=1,!((0|(i=i-1|0))>1023))break}i=1023}if(!((0|(s=r+-1048576|0))<0||(r=s)|a))return 0*e;if((0|r)==1048575|r>>>0<1048575)for(;i=i-1|0,s=r>>>0<524288,r=r<<1|a>>>31,a<<=1,s;);return t=-2147483648&o,(0|i)>0?r=r+-1048576|i<<20:(s=1-i|0,o=r,i=a,a=31&s,(63&s)>>>0>=32?(r=0,a=o>>>a|0):(r=o>>>a|0,a=((1<<a)-1&o)<<32-a|i>>>a)),R(0,0|a),R(1,r|t),+aA()}function rs(e,t,r,a,s){var i,o=0,c=0;J=i=J-160|0;A:{e:{r:{s:switch((o=l[t+10|0])-15|0){case 6:break r;case 0:break s;default:break e}g[0|e]=0;break A}A[i>>2]=P(l[r+7|0],44)+137856,De(e,86002,i),e=He(e)+e|0;break A}if(a){if(g[i+140|0]=0,r?Ar(0,0,r,i+8|0,0):Li(o,i+8|0),r=i+140|0,o=l[i+140|0]){if((0|o)==32){g[0|e]=0;break A}224&(o=o<<24>>24)||(s&&(A[s>>2]=o),r=i+141|0)}if(!((0|(s=He(r)))<=0)){e=qe(e,r)+s|0,g[0|e]=0;break A}}s=0;e:if(!(!(r=255&(o=A[t>>2]))|(0|r)==47)){if(a){if((0|(c=255&o))==95)break e;r:{s:{if((0|c)==35){if(c=3,l[t+11|0]!=2)break s;break e}if((c=r-32|0)>>>0>95)break r}r=M[93952+(c<<1)>>1]}s=Pr(r,e)}else g[0|e]=o,s=1;for(;;){if(!(r=255&(o>>=8))|(0|r)==47)break e;if(a){if((0|r)==35&l[t+11|0]==2)break e;if(r-48>>>0<10)continue;(c=r-32|0)>>>0<=95&&(r=M[93952+(c<<1)>>1]),s=Pr(r,e+s|0)+s|0}else g[e+s|0]=o,s=s+1|0}}g[0|(e=e+s|0)]=0}return J=i+160|0,e}function Os(e){var t,r=0;t=e,r=131280;A:{e:{if(!((0|e)<=1023||(r=131300,e>>>0<1328||(r=131320,e>>>0<1424||(r=131340,e>>>0<1536||(r=131360,e>>>0<1792||(r=131380,e>>>0<1872||(r=131400,e>>>0<2432||(r=131420,e>>>0<2560||(r=131440,e>>>0<2688||(r=131460,e>>>0<2816||(r=131480,e>>>0<2944||(r=131500,e>>>0<3072||(r=131520,e>>>0<3200||(r=131540,e>>>0<3328||(r=131560,e>>>0<3456||(r=131580,e>>>0<3584||(r=131600,e>>>0<3712||(r=131620,e>>>0<3840||(r=131640,e>>>0<4096||(r=131660,e>>>0<4256||(r=131680,e>>>0<4352||(r=131700,e>>>0<4608||(r=131720,e>>>0<5024||(r=131740,e>>>0<10496||(r=131760,e>>>0<12544||(r=131780,e>>>0<40960))))))))))))))))))))))))))){if(e>>>0>=55296)break e;r=131800}if((0|t)>=M[(e=r)+8>>1])break A}e=0}return e}function te(e,t,r){var a,s=0,i=0,o=0,c=0;J=a=J-208|0,g[a+80|0]=0;A:{if((s=t-224|0)>>>0<=158)t=101072+(s<<1)|0;else{if((t=t-592|0)>>>0>88)break A;t=101392+(t<<1)|0}if(t=M[t>>1]){if(o=t<<16>>16,c=(s=63&t)>>>0>37?s+59|0:b[101584+(s<<1)>>1],s=t>>>6|0,(0|o)<0)s=59+(63&s)|0,t=t>>>12&7;else{if(!(i=31&s))break A;s=0,t=t>>>11&15}(i=Re(e,A[129920+(i<<3)>>2],a+112|0))&&p0(e,c,a+176|0)&&(t&&4096&Re(e,A[129920+(t<<3)>>2],a+80|0)&&(r=He(t=qe(r,a+80|0)),g[a+80|0]=0,r=t+r|0),s?(p0(t=e,s,e=a+144|0),A[a+68>>2]=a+80,A[a- -64>>2]=e,A[a+60>>2]=6,A[a+52>>2]=23,A[a+56>>2]=a+176,A[a+48>>2]=a+112,De(r,84101,a+48|0)):(0|o)<0?qe(r,a+176|0):1&A[e+144>>2]|4096&i?(A[a+36>>2]=23,A[a+40>>2]=6,A[a+44>>2]=a+176,A[a+32>>2]=a+112,De(r,84430,a+32|0)):(A[a+16>>2]=23,A[a+8>>2]=23,A[a>>2]=4,A[a+12>>2]=a+112,A[a+4>>2]=a+176,De(r,84802,a)))}}J=a+208|0}function _(){Wi(),A[55928]=0,A[55926]=0,A[55927]=0,A[55924]=0,A[56244]=0,A[56245]=0,A[56246]=0,A[56247]=0,A[56260]=0,A[56261]=0,A[56262]=0,A[56263]=0,A[56276]=0,A[56277]=0,A[56278]=0,A[56279]=0,A[55974]=0,A[55975]=0,A[55972]=0,A[55973]=0,A[55988]=0,A[55989]=0,A[55990]=0,A[55991]=0,A[56004]=0,A[56005]=0,A[56006]=0,A[56007]=0,A[56020]=0,A[56021]=0,A[56022]=0,A[56023]=0,A[56036]=0,A[56037]=0,A[56038]=0,A[56039]=0,A[56052]=0,A[56053]=0,A[56054]=0,A[56055]=0,A[56068]=0,A[56069]=0,A[56070]=0,A[56071]=0,A[56086]=0,A[56087]=0,A[56084]=0,A[56085]=0,A[56102]=0,A[56103]=0,A[56100]=0,A[56101]=0,A[56118]=0,A[56119]=0,A[56116]=0,A[56117]=0,A[56134]=0,A[56135]=0,A[56132]=0,A[56133]=0,A[56150]=0,A[56151]=0,A[56148]=0,A[56149]=0,A[56166]=0,A[56167]=0,A[56164]=0,A[56165]=0,A[56182]=0,A[56183]=0,A[56180]=0,A[56181]=0,A[56198]=0,A[56199]=0,A[56196]=0,A[56197]=0,A[56214]=0,A[56215]=0,A[56212]=0,A[56213]=0,A[56230]=0,A[56231]=0,A[56228]=0,A[56229]=0}function BA(e,t){var r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0;A:{if((0|(i=A[e+4>>2]))==A[e>>2])if((o=A[e+8>>2])>>>0<(r=A[e+12>>2])>>>0)r=(s=(1+(r-o>>2)|0)/2<<2)+o|0,(0|i)!=(0|o)&&(Yt(r=r-(a=o-i|0)|0,i,a),i=A[e+8>>2]),A[e+4>>2]=r,A[e+8>>2]=s+i;else{if((a=(0|r)==(0|i)?1:r-i>>1)>>>0>=1073741824)break A;if(p=(f=Fa(r=a<<2))+r|0,c=r=(a+3&-4)+f|0,(0|i)!=(0|o)){if(I=-4&(o=o-i|0),s=r,a=i,o=1+((m=o-4|0)>>>2|0)&7)for(c=0;A[s>>2]=A[a>>2],a=a+4|0,s=s+4|0,(0|o)!=(0|(c=c+1|0)););if(c=r+I|0,!(m>>>0<28))for(;A[s>>2]=A[a>>2],A[s+4>>2]=A[a+4>>2],A[s+8>>2]=A[a+8>>2],A[s+12>>2]=A[a+12>>2],A[s+16>>2]=A[a+16>>2],A[s+20>>2]=A[a+20>>2],A[s+24>>2]=A[a+24>>2],A[s+28>>2]=A[a+28>>2],a=a+32|0,(0|c)!=(0|(s=s+32|0)););}A[e+12>>2]=p,A[e+8>>2]=c,A[e+4>>2]=r,A[e>>2]=f,i&&(xt(i),r=A[e+4>>2])}else r=i;return A[r-4>>2]=A[t>>2],void(A[e+4>>2]=A[e+4>>2]-4)}Ui(),kA()}function NA(e,t,r){var a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0;A:{e:{r:{s:{i:{c:{o:{u:{l:{if(t){if(!r)break l;break u}return Oe=(t=e)-P(e=(e>>>0)/(r>>>0)|0,r)|0,gA=0,$=0,e}if(!e)break o;break c}if(!((a=r-1|0)&r))break i;i=0-(o=(YA(r)+33|0)-YA(t)|0)|0;break r}return Oe=0,gA=t-P(e=(t>>>0)/0|0,0)|0,$=0,e}if((a=32-YA(t)|0)>>>0<31)break s;break e}if(Oe=e&a,gA=0,(0|r)==1)break A;return r=31&(a=Bi(r)),(63&a)>>>0>=32?e=t>>>r|0:(s=t>>>r|0,e=((1<<r)-1&t)<<32-r|e>>>r),$=s,e}o=a+1|0,i=63-a|0}if(a=31&(s=63&o),s>>>0>=32?(s=0,c=t>>>a|0):(s=t>>>a|0,c=((1<<a)-1&t)<<32-a|e>>>a),a=31&(i&=63),i>>>0>=32?(t=e<<a,e=0):(t=(1<<a)-1&e>>>32-a|t<<a,e<<=a),o)for(p=(0|(a=r-1|0))==-1?-1:0;f=s<<1|c>>>31,c=(s=c<<1|t>>>31)-(m=r&(i=p-(f+(s>>>0>a>>>0)|0)>>31))|0,s=f-(s>>>0<m>>>0)|0,t=t<<1|e>>>31,e=I|e<<1,I=f=1&i,o=o-1|0;);return Oe=c,gA=s,$=t<<1|e>>>31,f|e<<1}Oe=e,gA=t,e=0,t=0}return $=t,e}function VA(e,t){var r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0;A:{if((0|(r=A[e+8>>2]))==A[e+12>>2])if((a=A[e+4>>2])>>>0>(o=A[e>>2])>>>0)s=Yt((i=(1+(a-o>>2)|0)/-2<<2)+a|0,a,r=r-a|0)+r|0,A[e+8>>2]=s,A[e+4>>2]=i+A[e+4>>2];else{if((i=(0|r)==(0|o)?1:r-o>>1)>>>0>=1073741824)break A;if(p=(c=Fa(s=i<<2))+s|0,s=i=(-4&i)+c|0,(0|r)!=(0|a)){if(I=-4&(r=r-a|0),m=1+((f=r-4|0)>>>2|0)&7)for(s=0,r=i;A[r>>2]=A[a>>2],a=a+4|0,r=r+4|0,(0|m)!=(0|(s=s+1|0)););else r=i;if(s=i+I|0,!(f>>>0<28))for(;A[r>>2]=A[a>>2],A[r+4>>2]=A[a+4>>2],A[r+8>>2]=A[a+8>>2],A[r+12>>2]=A[a+12>>2],A[r+16>>2]=A[a+16>>2],A[r+20>>2]=A[a+20>>2],A[r+24>>2]=A[a+24>>2],A[r+28>>2]=A[a+28>>2],a=a+32|0,(0|s)!=(0|(r=r+32|0)););}A[e+12>>2]=p,A[e+8>>2]=s,A[e+4>>2]=i,A[e>>2]=c,o&&(xt(o),s=A[e+8>>2])}else s=r;return A[s>>2]=A[t>>2],void(A[e+8>>2]=A[e+8>>2]+4)}Ui(),kA()}function $A(e,t){var r,a=0,s=0,i=0,o=0,c=0;s=189088,J=r=J-320|0,A[r+312>>2]=0,i=fi(e,o=qe(r+112|0,189088),r,r+316|0,r+312|0,0),a=A[r+316>>2];A:if((0|t)<=3){if((0|a)<2)break A;if(i=3&(t=a-1|0),e=1,a-2>>>0>=3)for(c=-4&t,t=0;g[0|(a=e+r|0)]>=4&&(g[0|a]=3),g[1+(a=e+r|0)|0]>=4&&(g[a+1|0]=3),g[a+2|0]>=4&&(g[a+2|0]=3),g[a+3|0]>=4&&(g[a+3|0]=3),e=e+4|0,(0|c)!=(0|(t=t+4|0)););if(!i)break A;for(t=0;g[0|(a=e+r|0)]>=4&&(g[0|a]=3),e=e+1|0,(0|i)!=(0|(t=t+1|0)););}else if(e=1,!((0|a)<=1)){for(;;){if((0|i)>g[0|(c=e+r|0)]){if((0|a)!=(0|(e=e+1|0)))continue;break A}break}g[0|c]=t}if(e=l[0|o])for(t=1;a=A[144464+((255&e)<<2)>>2],l[a+11|0]!=2|16&l[a+6|0]||(i=255&(a=g[t+r|0]),(0|a)<2&&i||(g[0|s]=l[i+94151|0],s=s+1|0,e=l[0|o]),t=t+1|0),g[0|s]=e,s=s+1|0,e=l[0|(o=o+1|0)];);g[0|s]=0,J=r+320|0}function de(e){var t=0,r=0,a=0,s=0,i=0,o=0;r=t=A[(e|=0)>>2],A[e>>2]=t+1;A:{e:{r:{s:{i:{c:{o:switch(((i=l[0|t])>>>4|0)-8|0){case 0:case 1:case 2:case 3:break e;case 7:break i;case 6:break c;case 4:case 5:break o;default:break A}if((a=t+2|0)>>>0>=(s=A[e+4>>2])>>>0)break s;if(A[e>>2]=a,(192&(r=l[r+1|0]))!=128)break r;return 63&r|i<<6&1984}if((a=t+3|0)>>>0>=(s=A[e+4>>2])>>>0)break s;if(r=t+2|0,A[e>>2]=r,(192&(t=l[t+1|0]))!=128){a=r;break r}if(A[e>>2]=a,(192&(r=l[0|r]))!=128)break r;return 63&r|(63&t|i<<6&960)<<6}if(!((s=A[e+4>>2])>>>0<=(r=t+4|0)>>>0)){if(a=t+2|0,A[e>>2]=a,(192&(s=l[t+1|0]))!=128||(a=t+3|0,A[e>>2]=a,(192&(o=l[t+2|0]))!=128)||(A[e>>2]=r,t=l[0|a],a=r,(192&t)!=128))break r;return 0|((e=63&t|o<<6&4032|(63&s|i<<6&960)<<12)>>>0>=1114112?65533:e)}}A[e>>2]=s;break e}A[e>>2]=a-1}i=65533}return 0|i}function Se(e,t,r,a){var s,i,o=0,c=0,f=0,m=0,p=0,I=0;if(J=s=J-432|0,!(!a|!(536870912&(i=Te(e,t,r,a))))&&(b[s+48>>1]=8192,a=qe(s+48|2,a),l[0|a])){for(f=s+224|0,o=1,m=200;;){if(Gt(s+44|0,a),t=ps(A[s+44>>2]),c=A[r>>2],t?(A[r>>2]=2|c,Pr(Ht(A[s+44>>2]),a)):A[r>>2]=-3&c,I=A[33264],Te(e,a,r,0),1&o?(A[s+16>>2]=189088,c=as(f,m,84130,s+16|0)):(A[s+32>>2]=15,A[s+36>>2]=189088,c=as(f,m,84434,s+32|0)),o=(t=A[33264])+1|0,A[33264]=o,t>>>0<=2147483646){for(;;)if(t=a,a=a+1|0,(0|(p=g[0|t]))==32|p-9>>>0<5){for(;t=(a=t)+1|0,(0|(p=g[0|a]))==32|p-9>>>0<5;);if(o=o-1|0,A[33264]=o,!((0|o)>0))break}}if(f=f+c|0,A[33264]=I,!(l[0|a]&&(o=0,(0|(m=m-c|0))>1)))break}(s+224|0)!=(0|f)&&(A[s>>2]=s+224,as(189088,200,84130,s))}return J=s+432|0,i}function HA(e,t,r,a,s,i,o,c){var f,m;f=A[32972],m=A[f+116>>2],b[e+8>>1]=M[e+8>>1]+i,i=32&c?0-i|0:i,b[e+10>>1]=i+M[e+10>>1],b[e+12>>1]=i+M[e+12>>1],a=(0|a)>(0|(i=((i=(0|P(t,m))/256|0)-(t=b[e+6>>1])|0)/2|0))?i:a,b[e+6>>1]=((0|r)<(0|a)?a:r)+t;A:{e:switch(s-1|0){case 0:t=(0|(t=235-(r=b[e+4>>1])|0))<=-100?-100:t,b[e+4>>1]=((0|t)>=-60?-60:t)+r;break A;case 1:t=(0|(t=(0|(t=235-(r=b[e+4>>1])|0))<=-300?-300:t))>=-150?-150:t,b[e+4>>1]=t+r,b[e+2>>1]=t+M[e+2>>1];break A;case 2:break e;default:break A}t=(0|(t=(0|(t=100-(r=b[e+4>>1])|0))<=-400?-400:t))>-300?-400:t,b[e+4>>1]=t+r,b[e+2>>1]=t+M[e+2>>1]}A[f+132>>2]||(g[e+20|0]=(P(l[e+20|0],o)>>>0)/100,g[e+21|0]=(P(l[e+21|0],o)>>>0)/100,g[e+22|0]=(P(l[e+22|0],o)>>>0)/100,g[e+23|0]=(P(l[e+23|0],o)>>>0)/100,g[e+24|0]=(P(l[e+24|0],o)>>>0)/100,g[e+25|0]=(P(l[e+25|0],o)>>>0)/100)}function Ve(e){var t,r=0,a=0,s=0,i=0;J=t=J-48|0;A:{if(e){l[0|e]||(e=ti(84285),l[0|e]&&e||(e=ti(121696),l[0|e]&&e||(e=ti(84614),l[0|e]&&e||(e=84891))));e:{for(;;){if(!(!(a=l[e+r|0])|(0|a)==47)){if(s=23,(0|(r=r+1|0))!=23)continue;break e}break}s=r}a=84891;e:{r:{if(r=l[0|e],(l[e+s|0]|(0|r)==46||(a=e,(0|r)==67))&&!l[a+1|0]||!vr(a,84891)||!vr(a,85136)){if(r=121652,l[a+1|0]==46)break r;e=0;break e}if(r=A[56851])for(;;){if(!vr(a,r+8|0))break r;if(!(r=A[r+32>>2]))break}(e=Ct(36))&&(r=A[30414],A[e>>2]=A[30413],A[e+4>>2]=r,wt(r=e+8|0,a,s),g[r+s|0]=0,A[e+32>>2]=A[56851],A[56851]=e),r=e||121652}e=r}if((0|e)==-1)break A;A[56809]=e}else e=A[56809];i=e?e+8|0:84309}return J=t+48|0,i}function Ce(e){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0;f=!!((t=A[e+112>>2])|(a=A[e+116>>2])),s=t,o=t=(i=A[e+4>>2])-(c=A[e+44>>2])|0,r=t+A[e+120>>2]|0,t=A[e+124>>2]+(t>>31)|0;A:{if(!(((0|(t=r>>>0<o>>>0?t+1|0:t))>=(0|a)&r>>>0>=s>>>0|(0|t)>(0|a))&f)){if((0|(f=Vi(e)))>=0)break A;i=A[e+4>>2],c=A[e+44>>2]}return A[e+112>>2]=-1,A[e+116>>2]=-1,A[e+104>>2]=i,a=(o=r)+(r=c-i|0)|0,t=(r>>31)+t|0,A[e+120>>2]=a,A[e+124>>2]=r>>>0>a>>>0?t+1|0:t,-1}return t=(a=r+1|0)?t:t+1|0,i=A[e+4>>2],c=A[e+8>>2],o=s=A[e+116>>2],s|(r=A[e+112>>2])&&(s=r-a|0,(0|(r=o-(t+(r>>>0<a>>>0)|0)|0))>=(0|(o=(m=c-i|0)>>31))&s>>>0>=m>>>0|(0|r)>(0|o)||(c=s+i|0)),A[e+104>>2]=c,a=(s=(r=A[e+44>>2])-i|0)+a|0,t=(s>>31)+t|0,A[e+120>>2]=a,A[e+124>>2]=a>>>0<s>>>0?t+1|0:t,r>>>0>=i>>>0&&(g[i-1|0]=f),f}function Yt(e,t,r){var a=0,s=0;A:if((0|e)!=(0|t)){if(t-(s=e+r|0)>>>0<=0-(r<<1)>>>0)return wt(e,t,r);if(a=3&(e^t),e>>>0<t>>>0){if(a)a=e;else{if(3&e)for(a=e;;){if(!r)break A;if(g[0|a]=l[0|t],t=t+1|0,r=r-1|0,!(3&(a=a+1|0)))break}else a=e;if(!(r>>>0<=3))for(;A[a>>2]=A[t>>2],t=t+4|0,a=a+4|0,(r=r-4|0)>>>0>3;);}if(r)for(;g[0|a]=l[0|t],a=a+1|0,t=t+1|0,r=r-1|0;);}else{if(!a){if(3&s)for(;;){if(!r)break A;if(g[0|(a=(r=r-1|0)+e|0)]=l[t+r|0],!(3&a))break}if(!(r>>>0<=3))for(;A[(r=r-4|0)+e>>2]=A[t+r>>2],r>>>0>3;);}if(!r)break A;for(;g[(r=r-1|0)+e|0]=l[t+r|0],r;);}}return e}function Vt(e,t,r,a){switch(t-9|0){case 0:return t=A[r>>2],A[r>>2]=t+4,void(A[e>>2]=A[t>>2]);case 6:return t=A[r>>2],A[r>>2]=t+4,t=b[t>>1],A[e>>2]=t,void(A[e+4>>2]=t>>31);case 7:return t=A[r>>2],A[r>>2]=t+4,A[e>>2]=M[t>>1],void(A[e+4>>2]=0);case 8:return t=A[r>>2],A[r>>2]=t+4,t=g[0|t],A[e>>2]=t,void(A[e+4>>2]=t>>31);case 9:return t=A[r>>2],A[r>>2]=t+4,A[e>>2]=l[0|t],void(A[e+4>>2]=0);case 16:return t=A[r>>2]+7&-8,A[r>>2]=t+8,void(D[e>>3]=D[t>>3]);case 17:lt[0|a](e,r);default:return;case 1:case 4:case 14:return t=A[r>>2],A[r>>2]=t+4,t=A[t>>2],A[e>>2]=t,void(A[e+4>>2]=t>>31);case 2:case 5:case 11:case 15:return t=A[r>>2],A[r>>2]=t+4,A[e>>2]=A[t>>2],void(A[e+4>>2]=0);case 3:case 10:case 12:case 13:}t=A[r>>2]+7&-8,A[r>>2]=t+8,r=A[t+4>>2],A[e>>2]=A[t>>2],A[e+4>>2]=r}function cr(e,t,r,a,s,i){var o;J=o=J-80|0;A:if((0|i)>=16384){if(Ne(o+32|0,t,r,a,s,0,0,0,2147352576),a=A[o+40>>2],s=A[o+44>>2],t=A[o+32>>2],r=A[o+36>>2],i>>>0<32767){i=i-16383|0;break A}Ne(o+16|0,t,r,a,s,0,0,0,2147352576),i=((0|i)>=49149?49149:i)-32766|0,a=A[o+24>>2],s=A[o+28>>2],t=A[o+16>>2],r=A[o+20>>2]}else(0|i)>-16383||(Ne(o- -64|0,t,r,a,s,0,0,0,7471104),a=A[o+72>>2],s=A[o+76>>2],t=A[o+64>>2],r=A[o+68>>2],i>>>0>4294934644?i=i+16269|0:(Ne(o+48|0,t,r,a,s,0,0,0,7471104),i=((0|i)<=-48920?-48920:i)+32538|0,a=A[o+56>>2],s=A[o+60>>2],t=A[o+48>>2],r=A[o+52>>2]));Ne(o,t,r,a,s,0,0,0,i+16383<<16),t=A[o+12>>2],A[e+8>>2]=A[o+8>>2],A[e+12>>2]=t,t=A[o+4>>2],A[e>>2]=A[o>>2],A[e+4>>2]=t,J=o+80|0}function sr(e,t){var r,a,s=0;J=r=J+-64|0,s=A[e>>2],a=A[s-4>>2],s=A[s-8>>2],A[r+32>>2]=0,A[r+36>>2]=0,A[r+40>>2]=0,A[r+44>>2]=0,A[r+48>>2]=0,A[r+52>>2]=0,g[r+55|0]=0,g[r+56|0]=0,g[r+57|0]=0,g[r+58|0]=0,g[r+59|0]=0,g[r+60|0]=0,g[r+61|0]=0,g[r+62|0]=0,A[r+24>>2]=0,A[r+28>>2]=0,A[r+20>>2]=0,A[r+16>>2]=125084,A[r+12>>2]=e,A[r+8>>2]=t,e=e+s|0,s=0;A:if(_a(a,t,0))A[r+56>>2]=1,lt[A[A[a>>2]+20>>2]](a,r+8|0,e,e,1,0),s=A[r+32>>2]==1?e:0;else{lt[A[A[a>>2]+24>>2]](a,r+8|0,e,1,0);e:switch(A[r+44>>2]){case 0:s=A[r+48>>2]==1&&A[r+36>>2]==1&&A[r+40>>2]==1?A[r+28>>2]:0;break A;case 1:break e;default:break A}A[r+32>>2]!=1&&A[r+48>>2]|A[r+36>>2]!=1|A[r+40>>2]!=1||(s=A[r+24>>2])}return J=r- -64|0,s}function jt(e,t,r,a,s){var i,o,c=0;J=i=J-80|0,b[i+72>>1]=0,A[i+64>>2]=0,A[i+68>>2]=0,g[0|a]=0,c=Pr(t,o=2|(c=i- -64|0))+c|0,g[c+2|0]=32;A:if((0|r)!=-1)t>>>0>=33&&!Or(t)?(g[c+3|0]=(0|r)==32?32:31,g[i+65|0]=95,Re(e,i- -64|1,i+16|0)||(g[i+65|0]=32,Re(e,o,i+16|0)||Zt(e,o,i+16|0,40,0,268435456,0)),l[i+16|0]||te(e,t,i+16|0),t=qe(a,i+16|0),!(r=l[0|t])|(0|r)==21||(A[i+56>>2]=0,A[i+60>>2]=0,$t(e,t,i+56|0,-1,1&s))):(A[i>>2]=t,De(t=i- -64|1,85485,i),Re(e,t,a));else{if(Re(e,o,a)||(g[i+65|0]=95,Re(e,i- -64|1,i+16|0)|A[e+212>>2]==25966))break A;vi(85055),Re(A[47194],o,i+16|0)&&(g[0|a]=21,g[a+1|0]=0),ia(A[A[32972]+60>>2])}J=i+80|0}function je(e,t,r){var a=0,s=0,i=0,o=0;if(r&&(g[0|e]=t,g[(a=e+r|0)-1|0]=t,!(r>>>0<3||(g[e+2|0]=t,g[e+1|0]=t,g[a-3|0]=t,g[a-2|0]=t,r>>>0<7||(g[e+3|0]=t,g[a-4|0]=t,r>>>0<9||(s=(a=0-e&3)+e|0,t=P(255&t,16843009),A[s>>2]=t,A[(r=(a=r-a&-4)+s|0)-4>>2]=t,a>>>0<9||(A[s+8>>2]=t,A[s+4>>2]=t,A[r-8>>2]=t,A[r-12>>2]=t,a>>>0<25||(A[s+24>>2]=t,A[s+20>>2]=t,A[s+16>>2]=t,A[s+12>>2]=t,A[r-16>>2]=t,A[r-20>>2]=t,A[r-24>>2]=t,A[r-28>>2]=t,(r=a-(o=4&s|24)|0)>>>0<32))))))))for(a=bt(t,0,1,1),i=$,t=s+o|0;A[t+24>>2]=a,A[t+28>>2]=i,A[t+16>>2]=a,A[t+20>>2]=i,A[t+8>>2]=a,A[t+12>>2]=i,A[t>>2]=a,A[t+4>>2]=i,t=t+32|0,(r=r-32|0)>>>0>31;);return e}function Ke(){var e,t=0,r=0,a=0,s=0,i=0;if(J=e=J-208|0,(0|(a=A[50303]))>0)for(;(s=A[(r=201216+(t<<2)|0)>>2])&&(xt(s),A[r>>2]=0),(0|a)!=(0|(t=t+1|0)););if(A[50303]=0,A[e+16>>2]=137584,A[e+20>>2]=47,De(t=e+32|0,87827,e+16|0),qs(t,He(t)+1|0,0),A[e+4>>2]=47,A[e>>2]=137584,De(t,87933,e),qs(t,He(t)+1|0,1),t=A[50303],A[201216+(r=t<<2)>>2]=0,r=Ur(a=A[50741],r+4|0)){if(A[50741]=r,$s(201216,t,7),a=A[50741],r=0,t=A[50304])for(s=0;i=A[t+4>>2],l[0|i]&&vr(i+1|0,86589)&&Ba(A[t+8>>2],88032,3)&&(A[(r<<2)+a>>2]=t,r=r+1|0),t=A[201216+((s=s+1|0)<<2)>>2];);A[(r<<2)+a>>2]=0}return J=e+208|0,a}function Jt(e,t,r){var a=0,s=0,i=0,o=0;if(i=t-1|0,(0|t)>=2){t=e;A:{for(;;){e:{r:{if((0|(a=A[r+4>>2]))!=(0|(s=A[r+8>>2]))){if((o=ei(a,10,s-a|0))?s=1+(o-(a=A[r+4>>2])|0)|0:(a=A[r+4>>2],s=A[r+8>>2]-a|0),wt(t,a,a=s>>>0<i>>>0?s:i),s=a+A[r+4>>2]|0,A[r+4>>2]=s,t=t+a|0,o||!(i=i-a|0))break e;if((0|s)!=A[r+8>>2]){A[r+4>>2]=s+1,a=l[0|s];break r}}if(!((0|(a=Vi(r)))>=0)){if(a=0,(0|e)==(0|t))break A;if(16&l[0|r])break e;break A}}if(g[0|t]=a,t=t+1|0,(255&a)!=10&&(i=i-1|0))continue}break}e?(g[0|t]=0,a=e):a=0}}else if(t=A[r+72>>2],A[r+72>>2]=t-1|t,!i)return g[0|e]=0,e;return a}function Ya(e){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0;if(t=P(e,44),(0|(e=A[t+137896>>2]))>0&&Ya(e-1|0),e=A[36115],!((0|(t=A[36+(r=t+137856|0)>>2]))<=0)){if(s=A[r+32>>2],c=1&t,(0|t)!=1)for(f=-2&t,r=0;t=l[10+(i=(a=r<<4)+s|0)|0],A[144464+(t<<2)>>2]=i,(0|e)>=(0|t)?t=e:je(144464+((e=e+1|0)<<2)|0,0,t-e<<2),e=l[10+(a=(16|a)+s|0)|0],A[144464+(e<<2)>>2]=a,(0|e)<=(0|t)?e=t:je(144464+((t=t+1|0)<<2)|0,0,e-t<<2),r=r+2|0,(0|f)!=(0|(o=o+2|0)););else r=0;c&&(t=l[10+(r=(r<<4)+s|0)|0],A[144464+(t<<2)>>2]=r,(0|e)>=(0|t)||(je(144464+((e=e+1|0)<<2)|0,0,t-e<<2),e=t))}A[36115]=e}function pa(e,t,r,a,s){var i,o=0,c=0,f=0;J=i=J-16|0;A:if(1&g[e+106|0]&&(o=l[0|r],!(!(1&g[a+2|0])&(0|o)!=46||256&(f=A[a+12>>2])|!(!(2&f)||s)||(Gt(i+12|0,(0|o)!=46?r:r+2|0),!(o=l[0|r])|!l[r+1|0])))){if(!(!(f=A[i+12>>2])|2&l[a+2|0])){if(!rr(f))break A;o=l[0|r]}(0|o)==46&&(g[0|r]=32),c=2,A[e+212>>2]!=26741|s||(r=rr(A[i+12>>2])?Se(e,r+2|0,0,0):0,128&l[e+8233|0]&&(!(!(s=A[i+12>>2])|2&l[a+2|0])&s-48>>>0>=10||(c=0)),c=32768&r?0:c,131072&r&&(c=163840&A[e+8232>>2]?34:l[t-2|0]!=45?c:0))}return J=i+16|0,c}function ir(e,t,r,a,s){var i,o=0,c=0;if(J=i=J-208|0,A[i+204>>2]=r,je(r=i+160|0,0,40),A[i+200>>2]=A[i+204>>2],(0|$e(0,t,i+200|0,i+80|0,r,a,s))<0)s=-1;else{A[e+76>>2],o=A[e>>2],A[e+72>>2]<=0&&(A[e>>2]=-33&o);A:{e:{if(A[e+48>>2]){if(A[e+16>>2])break e}else A[e+48>>2]=80,A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,c=A[e+44>>2],A[e+44>>2]=i;if(r=-1,In(e))break A}r=$e(e,t,i+200|0,i+80|0,i+160|0,a,s)}c&&(lt[A[e+36>>2]](e,0,0),A[e+48>>2]=0,A[e+44>>2]=c,A[e+28>>2]=0,t=A[e+20>>2],A[e+16>>2]=0,A[e+20>>2]=0,r=t?r:-1),t=e,e=A[e>>2],A[t>>2]=e|32&o,s=32&e?-1:r}return J=i+208|0,s}function rt(e,t,r,a){var s,i=0,o=0,c=0,f=0,m=0,p=0,I=0;if(J=s=J-208|0,o=l[0|t])for(;g[i+s|0]=o,f=((255&o)==6&(0|c)!=21)+f|0,c=o<<24>>24,o=l[(i=i+1|0)+t|0];);if(g[i+s|0]=0,i=l[0|s])for(p=f-2|0,c=0,I=(0|a)<2,o=0;;){A:{e:if((255&i)!=6|I|(0|o)==21){if((0|(a=255&i))==255){if(!m|(0|r)<2)break A;a=r>>>0>2?11:(0|c)%3|0?23:11}o=a,a=c}else{if(i=c+1|0,l[e+169|0]){o=(0|i)>1?5:6,a=i;break e}if(o=6,a=f,(0|i)==(0|f))break e;o=(0|i)%3|0||(0|c)==(0|p)?5:6,a=i}c=a,g[0|t]=o,t=t+1|0}if(!(i=l[(m=m+1|0)+s|0]))break}(0|r)>=2&&(g[0|t]=11,t=t+1|0),g[0|t]=0,J=s+208|0}function dr(e,t){var r=0;r=0,e&&(r=A[50754],r=(e=(e=(0|P(A[145712+(t?12:((0|e)>199)<<2)>>2],e))/256|0)>>>0>(t=A[36430])>>>0?e:t)>>>0<=89999?(P(e,r)>>>0)/1e3|0:(P(e,(0|r)/25|0)>>>0)/40|0),(0|(e=A[36440]))<=0||(0|(t=A[36424]))<0||(A[4+(t=216192+(t<<4)|0)>>2]||(A[t+4>>2]=e),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],La(),A[36427]=-1,e=216192+(A[50758]<<4)|0,A[e>>2]=5,A[e+4>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,A[36426]=0,A[36438]&&(A[36438]=0,e=216192+(A[50758]<<4)|0,A[e>>2]=14,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)}function ge(e,t,r,a,s,i,o,c){var f,m=0,p=0,I=0;m=1,f=p=2147483647&a;A:if(!((I=(0|p)==2147418112)&!r?e|t:I&!!(0|r)|p>>>0>2147418112)&&!((I=(0|(p=2147483647&c))==2147418112)&!o?s|i:I&!!(0|o)|p>>>0>2147418112)){if(!(e|s|r|o|t|i|p|f))return 0;if((0|(m=a&c))>0|(0|m)>=0){if(m=-1,(0|r)==(0|o)&(0|a)==(0|c)?(0|t)==(0|i)&e>>>0<s>>>0|t>>>0<i>>>0:r>>>0<o>>>0&(0|a)<=(0|c)|(0|a)<(0|c))break A;return!!(e^s|r^o|t^i|a^c)}m=-1,((0|r)==(0|o)&(0|a)==(0|c)?(0|t)==(0|i)&e>>>0>s>>>0|t>>>0>i>>>0:r>>>0>o>>>0&(0|a)>=(0|c)|(0|a)>(0|c))||(m=!!(e^s|r^o|t^i|a^c))}return m}function Je(e,t){var r=0,a=0,s=0,i=0;for(r=l[85836]|l[85837]<<8,g[0|t]=r,g[t+1|0]=r>>>8,g[t+2|0]=l[85838];;)if(s=l[0|e],e=r=e+1|0,(0|s)!=255){if(!s)break;if(!(a=A[144464+(s<<2)>>2]))continue;if(l[a+11|0]==1&&(i=l[a+14|0],!(M[a+8>>1]|i>>>0>4))){if(i>>>0<2)continue;g[0|t]=l[i+93943|0],t=t+1|0;continue}if(255&(e=A[a>>2]))for(;g[0|t]=e,t=t+1|0,a=65280&e,e=e>>>8|0,a;);if(e=r,(0|s)!=21||(32|(r=g[0|e]))-97>>>0>=26)continue;for(;g[0|t]=r,t=t+1|0,(32|(r=g[0|(e=e+1|0)]))-97>>>0<26;);}g[0|t]=0}function ha(e,t){var r,a,s=0,i=0,o=0;J=r=J-112|0,e||(A[50303]||Ke(),e=201216),ar(s=r+16|0,t,40),A[r>>2]=47,A[r+4>>2]=s,De(t=r- -64|0,87599,r),a=He(t),o=-1;A:{e:{r:{if(i=A[e>>2]){t=0,s=-1;s:{for(;;){if(cn(r+16|0,A[i>>2])){if(cn(r+16|0,i=A[i+8>>2])?o=cn(r- -64|0,i+(He(i)-a|0)|0)?o:t:s=t,i=A[((t=t+1|0)<<2)+e>>2])continue;break s}break}if((0|t)>=0)break e;t=(0|s)<0?o:s;break r}if((0|(t=s))>=0)break r}t=o}if(s=0,(0|t)<0)break A}s=A[(t<<2)+e>>2]}return J=r+112|0,s}function Nr(e,t){var r,a,s=0,i=0,o=0,c=0,f=0;J=r=J-16|0,CA(+t),a=0|X(1),i=0|X(0),(0|(o=(s=2147483647&a)-1048576|0))==2145386495|o>>>0<2145386495?(c=i<<28,o=s>>>4|0,s=(15&s)<<28|i>>>4,i=o+1006632960|0):(0|s)==2146435072|s>>>0>2146435072?(c=i<<28,s=(15&a)<<28|i>>>4,i=a>>>4|2147418112):s|i?(ta(r,i,o=s,0,0,(s=s?YA(s):YA(i)+32|0)+49|0),f=A[r>>2],c=A[r+4>>2],o=15372-s<<16,s=A[r+8>>2],i=o|65536^A[r+12>>2]):(s=0,i=0),A[e>>2]=f,A[e+4>>2]=c,A[e+8>>2]=s,A[e+12>>2]=-2147483648&a|i,J=r+16|0}function Rr(e,t,r){var a=0,s=0;A:{e:{r:{if(!(3&((s=e)^t))){a=!!(0|r);s:if(!(!(3&t)|!r))for(;;){if(a=l[0|t],g[0|s]=a,!a)break A;if(s=s+1|0,a=!!(0|(r=r-1|0)),!(3&(t=t+1|0)))break s;if(!r)break}if(!a)break e;if(!l[0|t])break A;if(!(r>>>0<4))for(;;){if(~(a=A[t>>2])&a-16843009&-2139062144)break r;if(A[s>>2]=a,s=s+4|0,t=t+4|0,!((r=r-4|0)>>>0>3))break}}if(!r)break e}for(;;){if(a=l[0|t],g[0|s]=a,!a)break A;if(s=s+1|0,t=t+1|0,!(r=r-1|0))break}}r=0}return je(s,0,r),e}function Qr(e,t,r,a,s,i){var o,c=0,f=0,m=0;J=o=J-240|0,c=A[r>>2],A[o+232>>2]=c,r=A[r+4>>2],A[o>>2]=e,A[o+236>>2]=r,m=1;A:{e:{r:{if(r|(0|c)!=1){for(c=e;;){if((0|Es(r=c-A[(f=(a<<2)+i|0)>>2]|0,e,t))<=0){r=c;break r}s:{if(!((0|a)<2|s)&&(s=A[f-8>>2],(0|Es(f=c-4|0,r,t))>=0||(0|Es(f-s|0,r,t))>=0))break s;if(A[(m<<2)+o>>2]=r,wi(c=o+232|0,s=Bn(c)),m=m+1|0,a=a+s|0,s=0,c=r,A[o+236>>2]|A[o+232>>2]!=1)continue;break e}break}r=c;break e}r=e}if(s)break A}Rs(o,m),fn(r,t,a,i)}J=o+240|0}function Cr(e,t){var r=0;A[4+(134912+(r=e<<2)|0)>>2]=t,A[r+136192>>2]=t,r=28;A:{e:{r:switch(e-1|0){case 0:A[50792]=t,A[50786]=t,Fs(3);break e;case 1:A[50787]=t,A[33037]=(0|P(l[A[50797]+105596|0],(0|P(A[50787],55))/100|0))/16;break e;case 2:e=(0|t)>=99?99:t,A[50785]=(0|e)>0?e:0;break e;case 3:A[50788]=(0|t)>=99?99:t;break e;case 12:A[47268]=t;break e;case 6:A[47205]=t;break e;case 9:break e;case 8:break r;default:break A}(e=255&t)&&(A[A[47192]+152>>2]=e),A[47196]=t}r=0}return r}function Ut(e,t){var r=0,a=0,s=0;A:if(A[e>>2])for(;;){if(Or(A[e-4>>2])){if(a=0,(0|(r=g[0|t]))==A[e>>2])for(;(0|(r=g[(a=a+1|0)+t|0]))==A[(e=e+4|0)>>2];);if(!r){for(;t=e,e=e+4|0,Or(A[t>>2]););for(s=t+((A[t>>2]==61)<<2)|0;s=(e=s)+4|0,Or(A[e>>2]););switch((t=A[e>>2])-34|0){case 0:case 5:break A}return Or(t)||A[e>>2]==47?102808:e}}if(!A[(e=e+4|0)>>2])break}return s}function xr(e,t,r,a){var s,i,o=0,c=0,f=0;return!l[e+25|0]|D[e+8>>3]!=r|D[e+16>>3]!=a?(D[e+16>>3]=a,D[e+8>>3]=r,a=(o=zt(-3.141592653589793/(c=+A[e>>2])*a))*-o,D[e+48>>3]=a,o*=Da(-6.283185307179586/c*r),o+=o,D[e+40>>3]=o,c=1-o-a,D[e+32>>3]=c,!(f=l[e+24|0])|r==0||(c=1/c,D[e+32>>3]=c,a*=r=-c,D[e+48>>3]=a,o*=r,D[e+40>>3]=o,f=1)):(f=l[e+24|0],a=D[e+48>>3],o=D[e+40>>3],c=D[e+32>>3]),g[e+25|0]=1,r=D[e+64>>3],s=D[e+56>>3],D[e+64>>3]=s,i=t,t=a*r+(c*t+o*s),D[e+56>>3]=f?i:t,t}function Ai(e,t,r,a,s){var i,o=0,c=0,f=0,m=0;if((i=A[34388])&&!((0|(c=A[34436]))>=(A[34393]-2|0))){if(A[34436]=c+1,o=P(c,36)+i|0,A[o>>2]=e,A[o+4>>2]=A[34437],m=A[34438],A[o+12>>2]=t>>>24,A[o+8>>2]=16777215&t,A[o+24>>2]=m,t=A[50754],s=A[34439]+((s-A[34392]|0)/2|0)|0,A[o+20>>2]=s,t=SA(f=1e3*+(0|s)/+(0|t))<2147483648?~~f:-2147483648,A[o+16>>2]=t,e-3>>>0<=1)return void(A[28+(P(c,36)+i|0)>>2]=A[33282]+r);t=28+(P(c,36)+i|0)|0,A[t>>2]=r,(0|e)==7&&(A[t+4>>2]=a)}}function Ha(e,t,r,a,s,i){var o=0,c=0,f=0,m=0;64&i?(t=31&(r=i+-64|0),(63&r)>>>0>=32?(r=0,t=s>>>t|0):(r=s>>>t|0,t=((1<<t)-1&s)<<32-t|a>>>t),a=0,s=0):i&&(f=a,o=31&(c=64-i|0),(63&c)>>>0>=32?(c=f<<o,m=0):(c=(1<<o)-1&f>>>32-o|s<<o,m=f<<o),f=t,t=31&i,(63&i)>>>0>=32?(o=0,t=r>>>t|0):(o=r>>>t|0,t=((1<<t)-1&r)<<32-t|f>>>t),t|=m,r=o|c,o=a,a=31&i,(63&i)>>>0>=32?(c=0,a=s>>>a|0):(c=s>>>a|0,a=((1<<a)-1&s)<<32-a|o>>>a),s=c),A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=a,A[e+12>>2]=s}function Pi(e){var t=0,r=0;if(!e){if(A[33174]&&(t=Pi(A[33174])),A[33136]&&(t=Pi(A[33136])|t),e=A[56816])for(;A[e+20>>2]!=A[e+28>>2]&&(t=Pi(e)|t),e=A[e+56>>2];);return t}return A[e+76>>2],A[e+20>>2]==A[e+28>>2]||(lt[A[e+36>>2]](e,0,0),A[e+20>>2])?((0|(t=A[e+8>>2]))!=(0|(r=A[e+4>>2]))&&(t=r-t|0,lt[A[e+40>>2]](e,t,t>>31,1)),t=0,A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,A[e+4>>2]=0,A[e+8>>2]=0):t=-1,t}function Ga(e,t){var r=0,a=0,s=0,i=0,o=0;if((192&(r=l[0|t]))==128)for(;(192&(r=l[0|(t=t-1|0)]))==128;);A:if(128&(r=r<<24>>24)){if(a=1,(0|(s=224&r))!=192)if((240&r)!=224){if(a=3,(248&r)!=240){r&=255,a=0;break A}}else a=2,o=1;r=l[a+93846|0]&r,(i=l[t+1|0])?(r=63&i|r<<6,(0|s)!=192&&((s=l[t+2|0])?(r=63&s|r<<6,o||((t=l[t+3|0])?r=63&t|r<<6:a=2)):a=1)):a=0}return A[e>>2]=r,a+1|0}function zi(e,t,r,a){var s,i=0,o=0;return J=s=J-224|0,e?(A[s>>2]=137584,A[s+4>>2]=47,A[s+8>>2]=t,De(t=s+16|0,85430,s),(0|(i=ss(t)))<0?t=fs(a,0-i|0,s+16|0):(t=ka(s+16|0,85659))?((o=A[e>>2])&&xt(o),i?(o=Ct(i),A[e>>2]=o,o?(0|gn(o,i,t))==(0|i)?(aa(t),t=0,r&&(A[r>>2]=i)):(r=A[56798],aa(t),xt(A[e>>2]),A[e>>2]=0,t=fs(a,r,s+16|0)):(aa(t),t=48)):(t=0,A[e>>2]=0)):t=fs(a,A[56798],s+16|0)):t=28,J=s+224|0,t}function Gt(e,t){var r=0,a=0,s=0,i=0,o=0;if((192&(r=l[0|t]))==128)for(;(192&(r=l[0|(t=t+1|0)]))==128;);A:if(128&(r=r<<24>>24)){if(a=1,(0|(s=224&r))!=192)if((240&r)!=224){if(a=3,(248&r)!=240){r&=255,a=0;break A}}else a=2,o=1;r=l[a+93846|0]&r,(i=l[t+1|0])?(r=63&i|r<<6,(0|s)!=192&&((s=l[t+2|0])?(r=63&s|r<<6,o||((t=l[t+3|0])?r=63&t|r<<6:a=2)):a=1)):a=0}return A[e>>2]=r,a+1|0}function ta(e,t,r,a,s,i){var o=0,c=0,f=0;64&i?(a=t,t=31&(s=i+-64|0),(63&s)>>>0>=32?(s=a<<t,a=0):(s=(1<<t)-1&a>>>32-t|r<<t,a<<=t),t=0,r=0):i&&(o=a,a=31&i,(63&i)>>>0>=32?(c=o<<a,f=0):(c=(1<<a)-1&o>>>32-a|s<<a,f=o<<a),o=t,a=31&(s=64-i|0),(63&s)>>>0>=32?(s=0,t=r>>>a|0):(s=r>>>a|0,t=((1<<a)-1&r)<<32-a|o>>>a),a=f|t,s|=c,t=31&i,(63&i)>>>0>=32?(c=o<<t,t=0):(c=(1<<t)-1&o>>>32-t|r<<t,t=o<<t),r=c),A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=a,A[e+12>>2]=s}function Wa(e){var t=0;return e>>>0<=55295?t=l[A[125552+(e>>>6&67108860)>>2]+(255&e)|0]:(t=4,e>>>0<57344||(e>>>0<63488?t=3:e>>>0<=195327?t=l[A[126416+(e-63488>>>6&67108860)>>2]+(255&e)|0]:(t=2,e>>>0<917504||(e>>>0<=918015?t=l[A[128476+(e-917504>>>6&67108860)>>2]+(255&e)|0]:e>>>0<983040||(e>>>0<1048574?t=3:e>>>0<1048576||(t=3,e>>>0<1114110||(t=e>>>0<1114112?2:5))))))),255&t}function e0(e,t){var r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0;if(!((0|(r=A[33709]))<=0)){if(s=(0|e)>31?e-32|0:e,e=0,r>>>0>=4)for(p=-4&r;c=2|e,f=1|e,a=A[134912+((o=3|e)<<6)>>2]==(0|s)?o:A[134912+(c<<6)>>2]==(0|s)?c:A[134912+(f<<6)>>2]==(0|s)?f:A[134912+(e<<6)>>2]==(0|s)?e:a,e=e+4|0,(0|p)!=(0|(i=i+4|0)););if(i=3&r)for(;a=A[134912+(e<<6)>>2]==(0|s)?e:a,e=e+1|0,(0|i)!=(0|(m=m+1|0)););(0|a)<=0||(A[33709]=a,r=a)}qa(t,r)}function t0(e){var t,r=0,a=0,s=0;for(J=t=J-96|0,ar(t,e,60),Fi(t,1);s=Ht(g[0|(a=t+r|0)]),g[0|a]=s,r=r+1|0,255&s;);A[t+92>>2]=0,A[t+84>>2]=0,A[t+88>>2]=0,A[t+76>>2]=0,A[t+80>>2]=0,A[t+72>>2]=e;A:{e:{r:{if(Tt(t,1)){if(l[202976])break r;break e}if(A[50303]||Ke(),r=268437247,!(e=ha(201216,t))||!Tt(A[e+8>>2],0))break A;if(!l[202976])break e}Tt(202976,2)}yn(A[32972]),A[t+76>>2]=A[32972]+40,hi(t+72|0,202976),r=0}return J=t+96|0,r}function r0(e,t){if(!e)return 0;A:{e:{if(e){if(t>>>0<=127)break e;if(A[A[56841]>>2]){if(t>>>0<=2047){g[e+1|0]=63&t|128,g[0|e]=t>>>6|192,e=2;break A}if(!((-8192&t)!=57344&t>>>0>=55296)){g[e+2|0]=63&t|128,g[0|e]=t>>>12|224,g[e+1|0]=t>>>6&63|128,e=3;break A}if(t-65536>>>0<=1048575){g[e+3|0]=63&t|128,g[0|e]=t>>>18|240,g[e+2|0]=t>>>6&63|128,g[e+1|0]=t>>>12&63|128,e=4;break A}}else if((-128&t)==57216)break e;A[56798]=25,e=-1}else e=1;break A}g[0|e]=t,e=1}return e}function a0(e){var t=0,r=0,a=0,s=0;if(A[e+20>>2]=0,(a=(r=A[e+8>>2])-(t=A[e+4>>2])|0)>>>0>=9)for(;xt(A[t>>2]),t=A[e+4>>2]+4|0,A[e+4>>2]=t,(a=(r=A[e+8>>2])-t|0)>>>0>8;);switch(s=512,(a>>>2|0)-1|0){case 1:s=1024;case 0:A[e+16>>2]=s}if((0|t)!=(0|r)){for(;xt(A[t>>2]),(0|r)!=(0|(t=t+4|0)););(0|(t=A[e+8>>2]))!=(0|(r=A[e+4>>2]))&&(A[e+8>>2]=t+(3+(r-t|0)&-4))}(e=A[e>>2])&&xt(e)}function ei(e,t,r){var a=0,s=0;a=!!(0|r);A:{e:{r:if(!(!(3&e)|!r))for(s=255&t;;){if((0|s)==l[0|e])break e;if(a=!!(0|(r=r-1|0)),!(3&(e=e+1|0)))break r;if(!r)break}if(!a)break A;if(!(l[0|e]==(255&t)|r>>>0<4))for(a=P(255&t,16843009);;){if(~(s=a^A[e>>2])&s-16843009&-2139062144)break e;if(e=e+4|0,!((r=r-4|0)>>>0>3))break}if(!r)break A}for(t&=255;;){if((0|t)==l[0|e])return e;if(e=e+1|0,!(r=r-1|0))break}}return 0}function Ls(e,t){var r=0,a=0;A:{if(a=255&t){if(3&e)for(;;){if(!(r=l[0|e])|(0|r)==(255&t))break A;if(!(3&(e=e+1|0)))break}e:if(!(~(r=A[e>>2])&r-16843009&-2139062144))for(a=P(a,16843009);;){if(~(r^=a)&r-16843009&-2139062144)break e;if(r=A[e+4>>2],e=e+4|0,r-16843009&~r&-2139062144)break}for(;(a=l[0|(r=e)])&&(e=r+1|0,(0|a)!=(255&t)););return r}return He(e)+e|0}return e}function s0(e,t,r,a,s){var i,o=0,c=0;c=-1;A:if(!(((o=(0|(i=2147483647&a))==2147418112)&!r?e|t:o&!!(0|r)|i>>>0>2147418112)||(o=2147483647&s)>>>0>2147418112&(0|o)!=2147418112)){if(!(e|r|o|i|t))return 0;if((0|(o=a&s))>0|(0|o)>=0){if((!!(0|r)|(0|a)!=(0|s))&(0|a)<(0|s))break A;return!!(e|r|a^s|t)}(!r&(0|a)==(0|s)?e|t:!!(0|r)&(0|a)>=(0|s)|(0|a)>(0|s))||(c=!!(e|r|a^s|t))}return c}function Fi(e,t){var r,a=0;J=r=J+-64|0,g[202976]=0,A[r+48>>2]=47,De(r+59|0,91351,r+48|0),t||(g[r+59|0]=0);A:{e:{if(e&&(e=$a(e,43))){if(g[0|e]=0,g[0|(e=e+1|0)]-48>>>0>=10)break e;a=Hs(e)}if((0|a)<=0)break A;if(a>>>0<=9){A[r+4>>2]=a,A[r>>2]=r+59,De(202976,91378,r);break A}A[r+20>>2]=a-10,A[r+16>>2]=r+59,De(202976,91503,r+16|0);break A}A[r+36>>2]=e,A[r+32>>2]=r+59,De(202976,85425,r+32|0)}J=r- -64|0}function Ta(e){var t,r=0,a=0,s=0;J=t=J-80|0,r=Ra(e,t+12|0),A[t+12>>2]?(ar(a=t+16|0,r,60),r=0,Fi(a,1),!Tt(a,0)|!l[202976]||Tt(202976,2),yn(A[32972]),hi(e,86012)):r=268437247,J=t+80|0;A:{e:{r:{s:{if((0|r)<=268437502){if(!r)break A;if((0|r)==268436479)break e;if((0|r)!=268437247)break s;return 2}if((0|r)==268437503|(0|r)==268437759)break r;if((0|r)==268439295)break A}return-1}return 2}s=1}return s}function Kr(e,t,r,a,s,i,o,c,f){var m,p,I;f=bt(t,r,c,f),c=$,s=bt(a,s,i,o),a=$+c|0,c=s>>>0>(f=s+f|0)>>>0?a+1|0:a,m=o,p=r,o=(r=bt(o,s=0,r,a=0))+f|0,f=$+c|0,I=o,r=r>>>0>o>>>0?f+1|0:f,o=bt(i,0,t,0),c=$,a=bt(i,f=0,p,a),i=$+f|0,i=a>>>0>(c=c+a|0)>>>0?i+1|0:i,a=r,i=i>>>0>(f=i+I|0)>>>0?a+1|0:a,r=bt(t,0,m,s)+c|0,s=$,c=(s=r>>>0<c>>>0?s+1|0:s)+f|0,f=i,A[e+8>>2]=c,A[e+12>>2]=s>>>0>c>>>0?f+1|0:f,A[e>>2]=o,A[e+4>>2]=r}function qe(e,t){var r=0,a=0;A:{if(3&((a=e)^t))r=l[0|t];else{if(3&t)for(;;){if(r=l[0|t],g[0|a]=r,!r)break A;if(a=a+1|0,!(3&(t=t+1|0)))break}if(!(~(r=A[t>>2])&r-16843009&-2139062144))for(;A[a>>2]=r,r=A[t+4>>2],a=a+4|0,t=t+4|0,!(r-16843009&~r&-2139062144););}if(g[0|a]=r,255&r)for(;r=l[t+1|0],g[a+1|0]=r,a=a+1|0,t=t+1|0,r;);}return e}function Da(e){var t,r=0,a=0;J=t=J-16|0,CA(+e),a=0|X(1),X(0);A:if((a&=2147483647)>>>0<=1072243195){if(r=1,a>>>0<1044816030)break A;r=bi(e,0)}else if(r=e-e,!(a>>>0>=2146435072)){switch(3&wa(e,t)){case 0:r=bi(D[t>>3],D[t+8>>3]);break A;case 1:r=-vs(D[t>>3],D[t+8>>3],1);break A;case 2:r=-bi(D[t>>3],D[t+8>>3]);break A}r=vs(D[t>>3],D[t+8>>3],1)}return J=t+16|0,r}function nn(e,t,r,a){var s=0,i=0,o=0;if(!((He(a)+He(t)|0)>=(0|r))){for(o=A[36115],r=a;s=l[0|r];)if(r=r+1|0,!((0|s)>=(0|o))){A:{e:switch(s=A[144464+(s<<2)>>2],l[s+11|0]-1|0){case 1:break A;case 0:break e;default:continue}i=l[s+14|0]<4|i;continue}1&(l[s+4|0]>>>1|i)||(A[e+8212>>2]=A[e+8212>>2]+1),A[e+8208>>2]=A[e+8208>>2]+1,i=0}t&&na(t,a)}}function Si(e){var t,r=0;J=t=J-16|0,CA(+e),r=0|X(1),X(0);A:if((r&=2147483647)>>>0<=1072243195){if(r>>>0<1045430272)break A;e=vs(e,0,0)}else if(r>>>0>=2146435072)e-=e;else{switch(3&wa(e,t)){case 0:e=vs(D[t>>3],D[t+8>>3],1);break A;case 1:e=bi(D[t>>3],D[t+8>>3]);break A;case 2:e=-vs(D[t>>3],D[t+8>>3],1);break A}e=-bi(D[t>>3],D[t+8>>3])}return J=t+16|0,e}function on(e){var t=0;A[e+296>>2]=303173648,A[e+300>>2]=370677780,t=A[26341],A[e+304>>2]=A[26340],A[e+308>>2]=t,t=A[26343],A[e+312>>2]=A[26342],A[e+316>>2]=t,ws(e),A[e+56>>2]=2,A[e+36>>2]=3,A[e+40>>2]=1074,g[e+168|0]=5,A[e+132>>2]=32,A[e+104>>2]=1032,A[e+108>>2]=66,A[e+8>>2]=5,A[e+12>>2]=32,g[e+365|0]=64|l[e+365|0],g[e+368|0]=64|l[e+368|0],g[e+396|0]=64|l[e+396|0],g[e+399|0]=64|l[e+399|0]}function i0(e,t,r){var a=0,s=0,i=0;A:{if(!(a=A[r+16>>2])){if(In(r))break A;a=A[r+16>>2]}if(a-(i=A[r+20>>2])>>>0<t>>>0)return 0|lt[A[r+36>>2]](r,e,t);e:if(A[r+80>>2]<0)a=0;else{for(s=t;;){if(!(a=s)){a=0;break e}if(l[(s=a-1|0)+e|0]==10)break}if((s=0|lt[A[r+36>>2]](r,e,a))>>>0<a>>>0)break A;e=e+a|0,t=t-a|0,i=A[r+20>>2]}wt(i,e,t),A[r+20>>2]=A[r+20>>2]+t,s=t+a|0}return s}function n0(e){var t,r=0,a=0;A:{if((0|(t=A[34064]))>0)for(;;){if((a=A[136284+(r<<4)>>2])&&!vr(e,a)){if(A[136276+(r<<4)>>2])return r;if(a=-1,Js(0,r))break A;return r}if((0|t)==(0|(r=r+1|0)))break}a=-1,Js(e,t)||(r=Ur(A[12+(136272+(A[34064]<<4)|0)>>2],He(e)+1|0),a=A[34064],A[12+(136272+(a<<4)|0)>>2]=r,qe(r,e),A[34064]=a+1)}return a}function ln(e,t){var r,a=0,s=0,i=0,o=0;for(J=r=J-16|0,g[0|t]=0,(a=15&A[e>>2])&&(t=(s=He(t=qe(t,Ii(128496,64|a))))+t|0),a=8;;){A:{e:{if(a>>>0<=29){if(A[e>>2]>>>a&1)break e;break A}if(!(A[e+4>>2]>>>a-32&1)|a>>>0<32)break A}(0|(s=(o=He(i=Ii(128496,a))+1|0)+s|0))>=80||(A[r>>2]=i,De(t,84439,r),t=t+o|0)}if((0|(a=a+1|0))==64)break}J=r+16|0}function R0(e,t,r){var a,s=0,i=0,o=0;if(J=a=J-16|0,l[0|e]){for(o=A[30450];;)if(i=e,e=e+1|0,!((0|(s=g[0|i]))==32|s-9>>>0<5)){for((0|(s=Hs(i)))>0&&((0|s)<32?A[t>>2]=A[t>>2]|1<<s:(i=Ii(129568,r),A[a+4>>2]=s,A[a>>2]=i,fr(o,84902,a)),i=e);i=(e=i)+1|0,(s=g[0|e])-48>>>0<10|(32|s)-97>>>0<26;);if(!s)break}}J=a+16|0}function Pa(e,t,r){var a=0,s=0,i=0,o=0;A:if(t&&!((0|(s=r-4|0))<=0))for(i=(0|(r=A[t-4>>2]))!=34?(0|r)==39?r:0:r,r=0;;){if(o=r,!(r=A[t>>2]))break A;e:{if(!i){if((0|r)==32|r-9>>>0<5)break A;if((0|r)!=47)break e;break A}if((0|o)!=92&&(0|r)==(0|i))break A}if(t=t+4|0,!((0|s)>(0|(a=Pr(r,e+a|0)+a|0))))break}return g[e+a|0]=0,a}function rr(e){var t=0;A:if(!is(e)){t=0;e:if(!(e>>>0<768)){if(e-2305>>>0<=1270){if((124&e)>>>0<100)break A;if(t=1,En(93850,e))break e;return e-3450>>>0<6}if((0|e)==1541|e-1456>>>0<19|(0|e)==1648||(0|(t=-256&e))==10240|(0|t)==4352|e-3904>>>0<125|e>>>0<880)break A;t=1,e-1611>>>0<20||(t=e-12353>>>0<30400)}return t}return 1}function hi(e,t){var r=0;e?((r=A[e+4>>2])&&qe(133208,r),(r=A[e>>2])&&ar(133168,r,40),A[33289]=l[e+14|0],A[33291]=l[e+13|0],A[33290]=l[e+12|0],ar(134672,l[0|t]!=33|l[t+1|0]!=118?t:(l[t+2|0]==47?3:0)+t|0,40),e=A[50298],A[33678]=A[50297],A[33679]=e,e=A[50302],A[33682]=A[50301],A[33683]=e,e=A[50300],A[33680]=A[50299],A[33681]=e):je(133152,0,76)}function mi(e,t,r,a){g[e+53|0]=1;A:if(A[e+4>>2]==(0|r)){g[e+52|0]=1;e:{if(!(r=A[e+16>>2])){if(A[e+36>>2]=1,A[e+24>>2]=a,A[e+16>>2]=t,(0|a)!=1)break A;if(A[e+48>>2]==1)break e;break A}if((0|t)==(0|r)){if((0|(r=A[e+24>>2]))==2&&(A[e+24>>2]=a,r=a),A[e+48>>2]!=1)break A;if((0|r)==1)break e;break A}A[e+36>>2]=A[e+36>>2]+1}g[e+54|0]=1}}function xa(e,t){var r=0,a=0,s=0,i=0,o=0;A:if(r=A[t>>2])for(;;){a=0;e:if(e){for(;o=g[a+r|0],(s=A[(a<<2)+e>>2])&&(a=a+1|0,(0|o)==(0|s)););r:switch(s-34|0){case 0:case 5:break r;default:break e}if(!o)break A}if(!(r=A[((i=i+1|0)<<3)+t>>2]))break}return A[4+((i<<3)+t|0)>>2]}function Ys(e,t){A:if((0|t)>=1024){if(e*=898846567431158e293,t>>>0<2047){t=t-1023|0;break A}e*=898846567431158e293,t=((0|t)>=3069?3069:t)-2046|0}else(0|t)>-1023||(e*=2004168360008973e-307,t>>>0>4294965304?t=t+969|0:(e*=2004168360008973e-307,t=((0|t)<=-2960?-2960:t)+1938|0));return R(0,0),R(1,t+1023<<20),e*+aA()}function as(e,t,r,a){var s,i,o,c=0;return J=i=J-16|0,A[i+12>>2]=a,J=s=J-160|0,o=t?e:s+158|0,A[s+144>>2]=o,c=-1,e=t-1|0,A[s+148>>2]=e>>>0<=t>>>0?e:0,e=je(s,0,144),A[e+76>>2]=-1,A[e+36>>2]=17,A[e+80>>2]=-1,A[e+44>>2]=e+159,A[e+84>>2]=e+144,(0|t)<0?A[56798]=61:(g[0|o]=0,c=ir(e,r,a,15,16)),J=e+160|0,J=i+16|0,c}function cn(e,t){var r=0,a=0,s=0;A:if(r=l[0|e])for(;;){if(!(a=l[0|t])){s=r;break A}if((0|r)!=(0|a)&&(0|(a=r-65>>>0<26?32|r:r))!=(0|((r=l[0|t])-65>>>0<26?32|r:r))){s=l[0|e];break A}if(t=t+1|0,r=l[e+1|0],e=e+1|0,!r)break}return(s=(e=255&s)-65>>>0<26?32|e:e)-((e=l[0|t])-65>>>0<26?32|e:e)|0}function gn(e,t,r){var a=0,s=0;if(a=A[r+72>>2],A[r+72>>2]=a-1|a,(0|(a=A[r+4>>2]))==(0|(s=A[r+8>>2]))?a=t:(wt(e,a,a=t>>>0>(a=s-a|0)>>>0?a:t),A[r+4>>2]=a+A[r+4>>2],e=e+a|0,a=t-a|0),a)for(;;){if(Oi(r)||!(s=0|lt[A[r+32>>2]](r,e,a)))return t-a|0;if(e=e+s|0,!(a=a-s|0))break}return t}function Hs(e){for(var t=0,r=0,a=0,s=0;e=(t=e)+1|0,(0|(r=g[0|t]))==32|r-9>>>0<5;);A:{e:{r:switch((r=g[0|t])-43|0){case 0:break e;case 2:break r;default:break A}s=1}r=g[0|e],t=e}if(r-48>>>0<10)for(;a=48+(P(a,10)-g[0|t]|0)|0,e=g[t+1|0],t=t+1|0,e-48>>>0<10;);return s?a:0-a|0}function un(e,t){var r,a,s,i=0;return J=r=J-32|0,A[t>>2]=0,A[t+4>>2]=0,A[(i=a=t+24|0)>>2]=0,A[i+4>>2]=0,A[(i=s=t+16|0)>>2]=0,A[i+4>>2]=0,A[(i=t+8|0)>>2]=0,A[i+4>>2]=0,A[r+28>>2]=t+28,A[r+24>>2]=a,A[r+20>>2]=t+20,A[r+16>>2]=s,A[r+12>>2]=t+12,A[r+8>>2]=i,A[r+4>>2]=t+4,A[r>>2]=t,e=dt(e,84553,r),J=r+32|0,e}function dn(e){var t=0,r=0,a=0;if((t=l[0|e])&&((r=l[e+1|0])?(r=t|r<<8,(t=l[e+2|0])&&(r|=t<<16,(e=l[e+3|0])&&(r|=e<<24))):r=t),(0|(t=A[36115]))>0)for(e=0;;){if(!(!(a=A[144464+(e<<2)>>2])|A[a>>2]!=(0|r)))return l[a+10|0];if((0|t)==(0|(e=e+1|0)))break}return 0}function fn(e,t,r,a){var s,i=0,o=0,c=0,f=0,m=0;J=s=J-240|0,A[s>>2]=e,c=1;A:if(!((0|r)<2))for(i=e;;){if((0|Es(e,o=(i=i-4|0)-A[((f=r-2|0)<<2)+a>>2]|0,t))>=0&&(0|Es(e,i,t))>=0)break A;if(m=o,i=(o=(0|Es(o,i,t))>=0)?m:i,A[(c<<2)+s>>2]=i,c=c+1|0,!((0|(r=o?r-1|0:f))>1))break}Rs(s,c),J=s+240|0}function De(e,t,r){var a,s,i,o=0;return J=s=J-16|0,A[s+12>>2]=r,J=a=J-160|0,wt(i=a+8|0,124528,144),A[a+52>>2]=e,A[a+28>>2]=e,o=(o=-2-e|0)>>>0>2147483647?2147483647:o,A[a+56>>2]=o,e=e+o|0,A[a+36>>2]=e,A[a+24>>2]=e,e=Cs(i,t,r),o&&(t=A[a+28>>2],g[t-((0|t)==A[a+24>>2])|0]=0),J=a+160|0,J=s+16|0,e}function Rs(e,t){var r,a=0,s=0,i=0,o=0,c=0;if(a=4,J=r=J-256|0,(0|t)>=2)for(A[(c=(t<<2)+e|0)>>2]=r;;){for(i=a>>>0>=256?256:a,wt(A[c>>2],A[e>>2],i),s=0;o=(s<<2)+e|0,s=s+1|0,wt(A[o>>2],A[(s<<2)+e>>2],i),A[o>>2]=A[o>>2]+i,(0|t)!=(0|s););if(!(a=a-i|0))break}J=r+256|0}function Re(e,t,r){var a,s=0;return J=a=J-96|0,A[a+88>>2]=0,A[a+92>>2]=1073741824,A[a+84>>2]=t,t=kr(e,a+84|0,r,a+88|0,2,0),536870912&(s=A[a+88>>2])?(t=A[47202],A[47202]=0,g[a+2|0]=32,b[a>>1]=8192,ar(s=3|a,A[a+84>>2],77),e=Se(e,s,0,0),qe(r,189088),A[47202]=t):e=t?s:0,J=a+96|0,e}function pn(e,t,r){var a=0,s=0,i=0;s=Ci(e),a=A[t>>2];A:{e:if((0|s)>=0){if(a){if(!vr(e,r))break e;(i=A[a+688>>2])&&xt(i),xt(a),A[t>>2]=0}A[t>>2]=_A(e),e=qe(r,e),Xa(r=A[t>>2],r+228|0,0)&&(ia(A[A[32972]+60>>2]),g[0|e]=0,s=-1),a=A[t>>2],A[a+292>>2]=s}else if(!a)break A;g[a+268|0]=0}return s}function Ni(e){var t=0,r=0;return(0|(t=A[e+76>>2]))>=0&(!t|A[56823]!=(-1073741825&t))?(r=A[(t=e+76|0)>>2],A[t>>2]=r||1073741823,(0|(r=A[e+4>>2]))==A[e+8>>2]?e=Vi(e):(A[e+4>>2]=r+1,e=l[0|r]),A[t>>2]=0,e):(0|(t=A[e+4>>2]))!=A[e+8>>2]?(A[e+4>>2]=t+1,l[0|t]):Vi(e)}function Ba(e,t,r){var a=0,s=0;A:{e:{if(r>>>0>=4){if(3&(e|t))break e;for(;;){if(A[e>>2]!=A[t>>2])break e;if(t=t+4|0,e=e+4|0,!((r=r-4|0)>>>0>3))break}}if(!r)break A}for(;;){if((0|(a=l[0|e]))==(0|(s=l[0|t]))){if(t=t+1|0,e=e+1|0,r=r-1|0)continue;break A}break}return a-s|0}return 0}function za(e,t){var r,a=0,s=0,i=0;J=r=J-16|0,t?(ta(r,s=((a=t>>31)^t)-a|0,0,0,0,(a=YA(s))+81|0),s=0+A[r+8>>2]|0,a=(65536^A[r+12>>2])+(16414-a<<16)|0,i=-2147483648&t|(a=s>>>0<i>>>0?a+1|0:a),a=A[r+4>>2],t=A[r>>2]):t=0,A[e>>2]=t,A[e+4>>2]=a,A[e+8>>2]=s,A[e+12>>2]=i,J=r+16|0}function ti(e){var t,r=0,a=0,s=0;if((0|(r=Ls(e,61)))==(0|e))return 0;A:if(!l[(t=r-e|0)+e|0]&&(r=A[56800])&&(a=A[r>>2])){for(;;){if(u0(e,a,t)||(a=A[r>>2]+t|0,l[0|a]!=61)){if(a=A[r+4>>2],r=r+4|0,a)continue;break A}break}s=a+1|0}return s}function Ci(e){var t=0,r=0;A:if(!((0|(r=A[34461]))<=0)){for(;;){if(!vr(e,P(t,44)+137856|0)){A[34457]=t;break A}if((0|r)==(0|(t=t+1|0)))break}return-1}return(e=(0|t)==(0|r))?-1:((0|(e=e?-1:t))!=A[36114]&&(A[36115]=0,Ya(e),A[36114]=e,A[36115]=A[36115]+1),t)}function hn(e,t,r,a){var s=0,i=0;A:if((32|l[0|t])!=32){if(s=((0|a)>2)<<1,i=Qs(e,t,r,s=(0|a)>1?4|s:s),l[0|r]!=21)for(s|=1,t=t+i|0,i=1;;){if((32|l[0|t])==32)break A;if(t=Qs(e,t,r,s)+t|0,i=i+1|0,l[0|r]==21)break}return qe(189088,r),0}return rt(e,r,a,i),t}function Pr(e,t){var r,a=0,s=0,i=0;if(e>>>0<=127)return g[0|t]=e,1;if(e>>>0>=1114112)return g[0|t]=32,1;for(a=P(r=e>>>0<2048?1:e>>>0<65536?2:3,6),g[0|t]=l[r+93842|0]|e>>>a;a=a-6|0,g[(s=s+1|0)+t|0]=e>>>a&63|128,(0|(i=i+1|0))!=(0|r););return r+1|0}function o0(e){var t=0,r=0;A:{if((0|(t=A[e+12>>2]))>=A[e+16>>2]){if(t=0,(0|(r=0|zA(A[e+8>>2],e+24|0,2048)))<=0){if(!r|(0|r)==-44)break A;return A[56798]=0-r,0}A[e+16>>2]=r}r=t,t=e+t|0,A[e+12>>2]=r+M[t+40>>1],r=A[t+36>>2],A[e>>2]=A[t+32>>2],A[e+4>>2]=r,t=t+24|0}return t}function l0(e,t){var r,a=0;if(a=A[e+632>>2])return!!(0|Lr(a,t));A:{e:{if((0|(r=A[e+600>>2]))>0){if(a=0,(t=t-r|0)-1>>>0<255)break e;break A}if((a=t-192|0)>>>0<=413)return 128&l[344+(l[a+94240|0]+e|0)|0];if(a=0,t>>>0>255)break A}a=128&l[344+(e+t|0)|0]}return a}function vs(e,t,r){var a,s,i;return i=(a=e*e)*(a*a)*(158969099521155e-24*a-25050760253406863e-24)+(a*(27557313707070068e-22*a-.0001984126982985795)+.00833333333332249),s=a*e,r?e-(a*(.5*t-i*s)-t+.16666666666666632*s):s*(a*i-.16666666666666632)+e}function ri(e,t){var r,a=0,s=0,i=0;J=r=J-16|0,t?(ta(r,a=t,0,0,0,(t=YA(t))+81|0),a=0+A[r+8>>2]|0,t=(65536^A[r+12>>2])+(16414-t<<16)|0,i=s>>>0>a>>>0?t+1|0:t,s=A[r+4>>2],t=A[r>>2]):t=0,A[e>>2]=t,A[e+4>>2]=s,A[e+8>>2]=a,A[e+12>>2]=i,J=r+16|0}function c0(e){var t,r=0;J=t=J-16|0,g[t+15|0]=10;A:{if(!(r=A[e+16>>2])){if(In(e))break A;r=A[e+16>>2]}(0|r)==(0|(r=A[e+20>>2]))|A[e+80>>2]==10?lt[A[e+36>>2]](e,t+15|0,1):(A[e+20>>2]=r+1,g[0|r]=10)}J=t+16|0}function Oi(e){var t,r=0;return r=A[e+72>>2],A[e+72>>2]=r-1|r,A[e+20>>2]!=A[e+28>>2]&&lt[A[e+36>>2]](e,0,0),A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,4&(r=A[e>>2])?(A[e>>2]=32|r,-1):(t=A[e+44>>2]+A[e+48>>2]|0,A[e+8>>2]=t,A[e+4>>2]=t,r<<27>>31)}function ai(e){var t=0;A:{e:{r:{s:{if((0|(e=t0(e)))<=268437502){if(!e)break A;if((0|e)==268436479)break e;if((0|e)!=268437247)break s;return 2}if((0|e)==268437503|(0|e)==268437759)break r;if((0|e)==268439295)break A}return-1}return 2}t=1}return t}function He(e){var t=0,r=0,a=0;A:{if(3&(t=e))for(;;){if(!l[0|t])break A;if(!(3&(t=t+1|0)))break}for(;r=t,t=t+4|0,!(~(a=A[r>>2])&a-16843009&-2139062144););for(;r=(t=r)+1|0,l[0|t];);}return t-e|0}function Ja(e,t,r){var a,s=0,i=0,o=0;A[e+112>>2]=t,A[e+116>>2]=r,a=A[e+4>>2],s=A[e+44>>2]-a|0,A[e+120>>2]=s,A[e+124>>2]=s>>31,s=A[e+8>>2],t|r&&((0|r)>=(0|(o=(i=s-a|0)>>31))&t>>>0>=i>>>0|(0|r)>(0|o)||(s=t+a|0)),A[e+104>>2]=s}function mn(e,t){var r,a,s=0;if(CA(+e),r=0|X(1),a=0|X(0),(0|(s=r>>>20&2047))!=2047){if(!s)return e==0?s=0:(e=mn(18446744073709552e3*e,t),s=A[t>>2]+-64|0),A[t>>2]=s,e;A[t>>2]=s-1022,R(0,0|a),R(1,-2146435073&r|1071644672),e=+aA()}return e}function bi(e,t){var r,a,s=0;return(a=1-(s=.5*(r=e*e)))+(1-a-s+(r*(r*(r*(2480158728947673e-20*r-.001388888888887411)+.0416666666666666)+(s=r*r)*s*(r*(-11359647557788195e-27*r+2087572321298175e-24)-27557314351390663e-23))-e*t))}function ds(e,t,r){var a=0,s=0;if(t)for(;r=r-1|0,s=e,e=oi(e,t,10),a=$,g[0|r]=s-bt(e,a,10,0)|48,s=t>>>0>9,t=a,s;);if(e)for(;t=(e>>>0)/10|0,g[0|(r=r-1|0)]=e-P(t,10)|48,a=e>>>0>9,e=t,a;);return r}function Cn(e,t){var r=0,a=0,s=0;A:if(e){for(;s=g[t+r|0],(a=A[(r<<2)+e>>2])&&(r=r+1|0,(0|s)==(0|a)););e:switch(a-34|0){case 0:case 5:break e;default:break A}if(!s)return 0}return 1}function g0(e,t,r){var a,s=0;return J=a=J-16|0,!(64&t)&&(s=0,4259840&~t)||(A[a+12>>2]=r+4,s=A[r>>2]),A[a>>2]=s,A[a+4>>2]=0,(e=0|PA(-100,0|e,32768|t,0|a))>>>0>=4294963201&&(A[56798]=0-e,e=-1),J=a+16|0,e}function u0(e,t,r){var a=0,s=0,i=0;if(!r)return 0;A:if(a=l[0|e]){for(;;){if((s=l[0|t])&&!(!(r=r-1|0)|(0|a)!=(0|s))){if(t=t+1|0,a=l[e+1|0],e=e+1|0,a)continue;break A}break}i=a}return(255&i)-l[0|t]|0}function Li(e,t){var r,a=0;J=a=J-128|0,a=je(a,0,128),g[a+98|0]=9,g[a+66|0]=9,g[a+34|0]=e,b[a+68>>1]=1,r=A[36125],A[a+104>>2]=r,A[a+72>>2]=r,A[a+40>>2]=A[144464+(e<<2)>>2],g[a+2|0]=9,A[a+8>>2]=r,Ar(0,0,a+32|0,t,0),J=a+128|0}function d0(e){var t=0,r=0,a=0;if(g[A[e>>2]]-48>>>0>=10)return 0;for(;a=A[e>>2],r=-1,t>>>0<=214748364&&(r=(0|(r=g[0|a]-48|0))>(2147483647^(t=P(t,10)))?-1:r+t|0),A[e>>2]=a+1,t=r,g[a+1|0]-48>>>0<10;);return t}function f0(e,t){var r=0;if(!(!e|A[e>>2]-48>>>0>=10)){if(A[e>>2]-48>>>0<10)for(;r=(A[e>>2]+P(r,10)|0)-48|0,A[(e=e+4|0)>>2]-48>>>0<10;);(0|t)==1&&(r=(0|Ht(A[e>>2]))==115?P(r,1e3):r)}return r}function Or(e){var t=0;t=1;A:{switch(0|Wa(e)){case 30:if(t=0,(0|e)==160|(0|e)==8199|(0|e)==8239)break A;return 1;case 0:if(e-9>>>0<5)return 1;if((0|e)==133)break A;break;case 28:case 29:break A}t=0}return t}function p0(e,t,r){var a,s=0;return J=a=J-16|0,g[a+6|0]=0,g[a+7|0]=95,s=Pr(s=t,t=a+8|0)+a|0,g[s+8|0]=32,g[s+9|0]=0,Re(e,a+7|0,r)||(g[a+7|0]=32,Re(e,t,r)||Zt(e,t,r,20,0,0,0)),J=a+16|0,g[0|r]}function h0(e){var t=0,r=0;r=170;A:if(!((0|e)<170))for(;;){if((0|e)==(0|r))return M[101616+(t<<1|2)>>1];if((2147483646&(t=t+2|0))==124)break A;if(!((0|(r=M[101616+(t<<1)>>1]))<=(0|e)))break}return 0}function bt(e,t,r,a){var s,i,o,c,f=0,m=0;return c=P(f=r>>>16|0,m=e>>>16|0),f=(65535&(m=((o=P(s=65535&r,i=65535&e))>>>16|0)+P(m,s)|0))+P(f,i)|0,$=(P(t,r)+c|0)+P(e,a)+(m>>>16)+(f>>>16)|0,65535&o|f<<16}function Ht(e){var t=0,r=0,a=0,s=0;for(t=2778;;){if((0|(r=A[1040+((a=(t+s|0)/2|0)<<4)>>2]))==(0|e))return(t=A[1048+(a<<4)>>2])||e;if(!((0|(s=(r=e>>>0>r>>>0)?a+1|0:s))<=(0|(t=r?t:a-1|0))))break}return e}function bn(e){var t=0,r=0,a=0,s=0;for(t=2778;;){if((0|(r=A[1040+((a=(t+s|0)/2|0)<<4)>>2]))==(0|e))return(t=A[1044+(a<<4)>>2])||e;if(!((0|(s=(r=e>>>0>r>>>0)?a+1|0:s))<=(0|(t=r?t:a-1|0))))break}return e}function ss(e){var t,r=0;return J=t=J-112|0,(e=0|XA(0|e,0|t))>>>0>=4294963201&&(A[56798]=0-e,e=-1),r=0-A[56798]|0,e||(r=-31,(61440&A[t+12>>2])!=16384&&(r=A[t+40>>2])),J=t+112|0,r}function m0(e,t,r){var a;if(!(a=A[e+16>>2]))return A[e+36>>2]=1,A[e+24>>2]=r,void(A[e+16>>2]=t);A:{if((0|t)==(0|a)){if(A[e+24>>2]!=2)break A;return void(A[e+24>>2]=r)}g[e+54|0]=1,A[e+24>>2]=2,A[e+36>>2]=A[e+36>>2]+1}}function ra(e,t,r,a,s){var i;if(J=i=J-256|0,!(73728&s|(0|r)<=(0|a))){if(je(i,255&t,(r=(a=r-a|0)>>>0<256)?a:256),!r)for(;Zr(e,i,256),(a=a-256|0)>>>0>255;);Zr(e,i,a)}J=i+256|0}function fs(e,t,r){var a=0;A:{if(e){if(a=A[e>>2]){xt(A[a+4>>2]),a=A[e>>2];break A}if(a=Ct(16),A[e>>2]=a,a)break A;t=48}return t}return A[a>>2]=0,A[a+4>>2]=Ki(r),e=A[e>>2],A[e+8>>2]=0,A[e+12>>2]=0,t}function aa(e){var t=0,r=0;Pi(e),lt[A[e+12>>2]](e),1&g[0|e]||((t=A[e+52>>2])&&(A[t+56>>2]=A[e+56>>2]),(r=A[e+56>>2])&&(A[r+52>>2]=t),A[56816]==(0|e)&&(A[56816]=r),xt(A[e+96>>2]),xt(e))}function ps(e){var t=0,r=0;t=1;A:{e:{r:{s:switch((r=Wa(e))-9|0){case 1:break A;case 6:case 18:break r;case 0:break s;default:break e}return(0|Ht(e))!=(0|e)}return OA(e,r)>>>15&1}t=0}return t}function Yi(e){var t,r,a,s=0,i=0;if(a=He(e)+1|0,s=A[33282],(0|(r=(t=A[33287])+a|0))>=A[33286]){if(!(s=Ur(s,i=r+1e3|0)))return-1;A[33286]=i,A[33282]=s}return wt(s+t|0,e,a),A[33287]=r,t}function In(e){var t=0;return t=A[e+72>>2],A[e+72>>2]=t-1|t,8&(t=A[e>>2])?(A[e>>2]=32|t,-1):(A[e+4>>2]=0,A[e+8>>2]=0,t=A[e+44>>2],A[e+28>>2]=t,A[e+20>>2]=t,A[e+16>>2]=t+A[e+48>>2],0)}function C0(e,t,r,a){A:if(e){e:switch(t+2|0){case 0:return void(g[0|e]=r);case 1:return void(b[e>>1]=r);case 2:case 3:return void(A[e>>2]=r);case 5:break e;default:break A}A[e>>2]=r,A[e+4>>2]=a}}function Hi(e,t,r,a,s,i,o,c,f){var m;J=m=J-16|0,ea(m,t,r,a,s,i,o,c,-2147483648^f),a=A[m>>2],r=A[m+4>>2],t=A[m+12>>2],A[e+8>>2]=A[m+8>>2],A[e+12>>2]=t,A[e>>2]=a,A[e+4>>2]=r,J=m+16|0}function vr(e,t){var r=0,a=0;A:if(!(!(r=l[0|e])|(0|r)!=(0|(a=l[0|t]))))for(;;){if(a=l[t+1|0],!(r=l[e+1|0]))break A;if(t=t+1|0,e=e+1|0,(0|r)!=(0|a))break}return r-a|0}function Ii(e,t){var r=0,a=0,s=0;if(!(r=A[e>>2]))return 84399;if(A[e+4>>2]!=(0|t))for(;;){if(!(r=A[(a=e+8|0)>>2]))return 84399;if(s=e,e=a,A[s+12>>2]==(0|t))break}return r}function wn(e,t,r){var a=0,s=0,i=0;A:if(r){for(;;){if(!(!(a=A[t>>2])|!(s=A[e>>2])|(0|a)!=(0|s))){if(t=t+4|0,e=e+4|0,r=r-1|0)continue;break A}break}i=s-a|0}return i}function sa(e){var t,r=0,a=0;if((0|(t=A[36115]))>0)for(;;){if(!(!(a=A[144464+(r<<2)>>2])|A[a>>2]!=(0|e)))return l[a+10|0];if((0|t)==(0|(r=r+1|0)))break}return 0}function si(e){var t,r;return(e=(t=A[33175])+(r=e+7&-8)|0)>>>0<=t>>>0&&r||e>>>0>xA.byteLength/65536<<16>>>0&&!(0|FA(0|e))?(A[56798]=48,-1):(A[33175]=e,t)}function hs(e){var t=0;A:if(!((t=Wa(e))>>>0>27)){if(!(1<<t&134259072)){if((0|t)==6)return 1;if((0|t)!=9)break A;return(0|bn(e))!=(0|e)}return OA(e,t)>>>14&1}return 0}function kn(e,t){var r=0;return g[0|e]=t>>>24,g[0|(r=(t>>>0>16777215)+e|0)]=t>>>16,g[0|(r=r+!!(16711680&t)|0)]=t>>>8,g[0|(r=r+!!(65280&t)|0)]=t,g[r+!!(255&t)|0]=0,e}function xn(e,t){A:if((0|(e=Cr(e,t)))<=268437502){if(!e|(0|e)==268436479|(0|e)!=268437247)break A;return}}function Bn(e){var t=0;return t=A[e>>2]-1|0,(t=g[121600+(P(0-t&t,124511785)>>>27|0)|0])||(e=A[e+4>>2],t=(e=g[121600+(P(0-e&e,124511785)>>>27|0)|0])?e+32|0:0),t}function Ri(e){var t=0,r=0,a=0;A:{if(!((t=Wa(e))>>>0>27)){if(r=1,116672&(a=1<<t))break A;if(134227968&a)return OA(e,t)>>>10&1}r=0}return r}function is(e){var t=0,r=0,a=0;A:{if(!((t=Wa(e))>>>0>27)){if(r=1,34752&(a=1<<t))break A;if(134227968&a)return OA(e,t)>>>10&1}r=0}return r}function Wi(){var e,t=0;(e=A[56797])&&((t=A[e+8>>2])&&lt[A[A[t>>2]+12>>2]](t),(t=A[e+4>>2])&&lt[A[A[t>>2]+16>>2]](t),xt(e)),A[56797]=0,A[56797]=ts()}function b0(e,t){var r=0;return e&&(r=bt(e,0,t,0),(e|t)>>>0<65536||(r=$?-1:r)),!(e=Ct(r))|!(3&l[e-4|0])||je(e,0,r),e}function vn(e,t){var r,a;a=A[130128+(t-P(r=(0|t)/100|0,100)<<2)>>2],A[e+100>>2]=a,A[e+96>>2]=a,t+99>>>0>=199&&(A[e+100>>2]=A[130128+(r<<2)>>2])}function yn(e){var t=0;(t=Ct(1344))&&(e=wt(t,e,1344),t=216192+(A[50758]<<4)|0,A[t>>2]=11,A[t+8>>2]=e,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)}function ms(e,t){var r=0;A:if(r=A[e>>2])for(;;){if(t&&!vr(t,r))break A;if(!(r=A[(e=e+8|0)>>2]))break}return A[e+4>>2]}function Vi(e){var t,r=0;return J=t=J-16|0,r=-1,Oi(e)||(0|lt[A[e+32>>2]](e,t+15|0,1))==1&&(r=l[t+15|0]),J=t+16|0,r}function Lr(e,t){var r=0,a=0;if(t){for(;a=e,(r=A[e>>2])&&(e=a+4|0,(0|t)!=(0|r)););return r?a:0}return(w0(e)<<2)+e|0}function En(e,t){var r=0,a=0;if(r=M[e>>1])for(;;){if(a=a+1|0,(0|t)==(0|r))return a;if(!(r=M[(a<<1)+e>>1]))break}return 0}function ji(e,t){var r=0,a=0;t>>>0<=31?(a=A[e>>2],r=e+4|0):(t=t-32|0,r=e),r=A[r>>2],A[e>>2]=a<<t,A[e+4>>2]=r<<t|a>>>32-t}function wi(e,t){var r=0,a=0;r=A[e+4>>2],t>>>0<=31?a=A[e>>2]:(t=t-32|0,a=r,r=0),A[e+4>>2]=r>>>t,A[e>>2]=r<<32-t|a>>>t}function Fa(e){var t=0;e=e||1;A:{for(;;){if(t=Ct(e))break A;if(!(t=A[57276]))break;lt[0|t]()}ie(),kA()}return t}function ki(e){return e>>>0<=131071?l[117424+(e>>>3&31|l[117424+(e>>>8|0)|0]<<5)|0]>>>(7&e)&1:e>>>0<196606}function Mn(e,t,r,a,s,i,o,c,f){A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=a,A[e+12>>2]=65535&s|(f>>>16&32768|s>>>16&32767)<<16}function _a(e,t,r){return r?(0|e)==(0|t)?1:!vr(A[e+4>>2],A[t+4>>2]):A[e+4>>2]==A[t+4>>2]}function Gn(e){var t=0;(0|(t=0|be(-100,0|e,0)))==-31&&(t=0|me(0|e)),t>>>0>=4294963201&&(A[56798]=0-t)}function Ui(){var e;e=Ct(84)+80|0,A[e>>2]=125420,A[e>>2]=125380,A[e>>2]=125400,Ye(0|e,125512,9),kA()}function Dn(e){var t,r;return t=Ni(e),r=Ni(e),Ni(e)<<16&16711680|r<<8&65280|255&t|Ni(e)<<24}function ii(e){var t=0;return e?(t=1,e-9472>>>0<160|e-65529>>>0<7||(t=Or(e)),t):0}function I0(e,t){var r;return r=t>>31,A[e+76>>2],function(a,s,i){return A[a+20>>2]!=A[a+28>>2]&&(lt[A[a+36>>2]](a,0,0),!A[a+20>>2])||(A[a+28>>2]=0,A[a+16>>2]=0,A[a+20>>2]=0,lt[A[a+40>>2]](a,s,i,0),(0|$)<0)?-1:(A[a+4>>2]=0,A[a+8>>2]=0,A[a>>2]=-17&A[a>>2],0)}(e,t,r)}function w0(e){var t=0,r=0;for(r=e;r=(t=r)+4|0,A[t>>2];);return t-e>>2}function Qn(e,t){return g[0|e]=t,g[e+4|0]=0,g[e+3|0]=t>>>24,g[e+2|0]=t>>>16,g[e+1|0]=t>>>8,e}function ma(e,t){var r=0;return(-1>>>(r=31&t)&e)<<r|((r=e)&-1<<(e=0-t&31))>>>e}function xi(e,t){var r=0;return(0|e)==73&&(r=305,l[t+173|0])||(r=Ht(e)),r}function ia(e){A[36114]!=(0|e)&&(A[36115]=0,Ya(e),A[36114]=e,A[36115]=A[36115]+1)}function Tn(e){return e?A[34460]+e|0:(Pn(85328,20,A[30450]),A[32320])}function Ki(e){var t,r;return(r=Ct(t=He(e)+1|0))?wt(r,e,t):0}function Va(){var e;A[33287]=0,(e=A[33282])&&(xt(e),A[33286]=0,A[33282]=0)}function fr(e,t,r){var a;J=a=J-16|0,A[a+12>>2]=r,Cs(e,t,r),J=a+16|0}function Pn(e,t,r){A[r+76>>2],e=i0(e,t,r)}function ys(e,t){return t?e<<24|(65280&e)<<8|e>>>8&65280|e>>>24:e}function ni(e){return e-8212>>>0>=12?En(93856,e):1}function k0(e){var t=0;e&&((t=A[e+688>>2])&&xt(t),xt(e))}function zn(e){return(0|e)<=127?$a(87712,e):0}function Fn(e){return!(e=l[0|e]?1:Ba(e,e+1|0,3))}function x0(e){(e=(0|(e=0|Ge(0|e)))!=27?e:0)&&(A[56798]=e)}function Es(e,t,r){return e|=0,t|=0,0|lt[0|(r|=0)](e,t)}function $a(e,t){return e=Ls(e,t),l[0|e]==(255&t)?e:0}function Sn(e,t){return NA(e,t,2147483647),$=gA,Oe}function Bi(e){return e?31-YA(e-1^e)|0:32}function Zr(e,t,r){32&l[0|e]||i0(t,r,e)}function ar(e,t,r){g[(Rr(e,t,r)+r|0)-1|0]=0}function vi(e){return pn(e,188776,189328)}function B0(e,t){t|=0,A[8+(e|=0)>>2]=t}function Cs(e,t,r){return ir(e,t,r,0,0)}function Ws(e){return A[12+(e|=0)>>2]}function Vs(e){return A[16+(e|=0)>>2]}function Nn(e){return A[20+(e|=0)>>2]}function Ca(e){return A[8+(e|=0)>>2]}function On(e){return A[4+(e|=0)>>2]}function v0(e){return A[(e|=0)>>2]}function oi(e,t,r){return NA(e,t,r)}function yi(e){(e|=0)&&xt(e)}function na(e,t){qe(He(e)+e|0,t)}function Zi(e){return 0|e}function Ln(e){return 0}function js(e){xt(e|=0)}function y0(e){}L(k=l,1024,""),L(k,45536,"HhYWFhgWFhYXExYaFhIWFg4ODg4ODg4ODg4WFhoaGhYWCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoXFhMZERkGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBhcaExo="),L(k,45664,""),L(k,81428,"ggAAAAAAAAIAAAAAAAAAAgAAAAAAAAAC"),L(k,81475,"AgAAAAAAACAAAAAAAAAAIA=="),L(k,81506,"IA=="),L(k,81522,"IAAAAAAAAAAg"),L(k,81618,"IA=="),L(k,81634,"IA=="),L(k,81650,"IAAAAAAAAAAg"),L(k,81682,"IAAAAAAAAAAgAAAAAAAAACAAAAAAAIAAAAAAAAAAgA=="),L(k,81728,"gAAAAAAAAACAAAAAAAAAAIA="),L(k,81760,"gAAAAAAAAACA"),L(k,81904,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAU"),L(k,81961,"FAAAAAAAAAAU"),L(k,81985,"FAAAAAAAAAAE"),L(k,82009,"BAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),L(k,82097,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),L(k,82169,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAACA"),L(k,82224,"gAAAAAAAAACA"),L(k,82272,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),L(k,82353,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),L(k,82393,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAABAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),L(k,82625,"BAAAAAAAAAAE"),L(k,82649,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),L(k,83033,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),L(k,83097,"BAAAAAAAAAAE"),L(k,83121,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAQAAAEAAAAAFAAAAQAAAAgEAAABAAAAAQQAAAAAAAACBAAAAAAAAAgEAAAAAAAAAAQAAAAAAAAABAAAAQAAAAgEAAAAAAAAAQQAAAAAAAAARAAAAAAAAAAEAAAAAAAAAAQA=="),L(k,83288,"QA=="),L(k,83303,"AkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAACEA="),L(k,83352,"QAAAAAAAABBAAAAQAAAAgAAg"),L(k,83379,"gAAAAABAAACQggAAIEAAAJAAAAAAAAAAgAAAAABAAACQggAAIEAAAJCCAAAgAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkAAAAEBAAACQAAAAYEAAAJCCAABgQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkIIAACBAAACQggAAIAAAAIAAAAAEAAAAAAAAAIAAAAAAAAAACAAAAAAAAAAEAAAAAAAAACAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAABEAAAAAAAAAIAAAAgIIAAAAAAACAgAAAAAAAAIAAAAAAAAAAgIYAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAgAAAAAAAAICAAAAAAAAAgJIAAACAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgIIAAAAAAACAhgAAAAAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgJIAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAhg=="),L(k,83999,""),L(k,93904,"ICAgICAgICAgICYlKyNTRFpBTCEgQD9KTktWP1RYP1dBQkNIRkdZPT0sLCcqICAAIAAhACIAsAIkACUA5gDIAigAKQB+AisAzAItAC4ALwBSAjEAMgBcAjQANQA2ADcAdQI5ANACsgI8AD0APgCUAlkCUQKyA+cA8ABbAkYAYgInAWoCXwJLAGsCcQJLAVQCpgNjAoACgwK4A4oCjAJTAccD+ACSAioDXABdAF4AXwBgAGEAYgBjAGQAZQBmAGECaABpAGoAawBsAG0AbgBvAHAAcQByAHMAdAB1AHYAdwB4AHkAegB7AHwAfQADA38APT0sLCcnAAMCBAUGBxoAAAAAAQECAwMEBQYHBwgJCgsAAAEBAgIDAwQFBgcHCAkKAAABAgMDAwQFBgcHBwgJClNldFdvcmRTdHJlc3MA5ADrAO8A9gD8AP8AAAAAAAAAYWFhYWFhYWNlZWVlaWlpaWRub29vb28Ab3V1dXV5dHNhYWFhYWFhY2VlZWVpaWlpZG5vb29vbwBvdXV1dXl0eWFhYWFhYWNjY2NjY2NjZGRkZGVlZWVlZWVlZWVnZ2dnZ2dnZ2hoaGhpaWlpaWlpaWlpaWlqamtra2xsbGxsbGxsbGxubm5ubm5ubm5vb29vb29vb3JycnJycnNzc3Nzc3NzdHR0dHR0dXV1dXV1dXV1dXV1d3d5eXl6enp6enpzYmJiYgAAb2NjZGRkZGRlZWVmZmdnaGlpa2tsbG1ubm9vb29vcHB5AABzc3R0dHR1dXV2eXl6enp6enp6AAAAd3R0dGtkZGRsbGxubm5hYWlpb291dXV1dXV1dXV1ZWFhYWFhYWdnZ2dra29vb296empkZGRnZ3d3bm5hYWFhb29hYWFhZWVlZWlpaWlvb29vcnJycnV1dXVzc3R0eXloaG5kb296emFhZWVvb29vb29vb3l5bG50amRxYWNjbHRzegAAYnV2ZWVqanFxcnJ5eWFhYWJvY2RkZWVlZWVl"),L(k,94846,"TG9va3VwRGljdDIAAAAAAAAAgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAoQCiAKMApAClAKYApwCoAKkAqgCrAKwArQCuAK8AsACxALIAswC0ALUAtgC3ALgAuQC6ALsAvAC9AL4AvwDAAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPANAA0QDSANMA1ADVANYA1wDYANkA2gDbANwA3QDeAN8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wDwAPEA8gDzAPQA9QD2APcA+AD5APoA+wD8AP0A/gD/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAQB2AJBAaQAPQFaAacAqABgAV4BZAF5Aa0AfQF7AbAABQHbAkIBtAA+AVsBxwK4AGEBXwFlAXoB3QJ+AXwBVAHBAMIAAgHEADkBBgHHAAwByQAYAcsAGgHNAM4ADgEQAUMBRwHTANQAUAHWANcAWAFuAdoAcAHcAN0AYgHfAFUB4QDiAAMB5AA6AQcB5wANAekAGQHrABsB7QDuAA8BEQFEAUgB8wD0AFEB9gD3AFkBbwH6AHEB/AD9AGMB2QKAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAmAdgCowCkAP3/JAGnAKgAMAFeAR4BNAGtAP3/ewGwACcBsgCzALQAtQAlAbcAuAAxAV8BHwE1Ab0A/f98AcAAwQDCAP3/xAAKAQgBxwDIAMkAygDLAMwAzQDOAM8A/f/RANIA0wDUACAB1gDXABwB2QDaANsA3ABsAVwB3wDgAOEA4gD9/+QACwEJAecA6ADpAOoA6wDsAO0A7gDvAP3/8QDyAPMA9AAhAfYA9wAdAfkA+gD7APwAbQFdAdkCgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAE4AVYBpAAoATsBpwCoAGABEgEiAWYBrQB9Aa8AsAAFAdsCVwG0ACkBPAHHArgAYQETASMBZwFKAX4BSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgAqARABRQFMATYB1ADVANYA1wDYAHIB2gDbANwAaAFqAd8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4AKwERAUYBTQE3AfQA9QD2APcA+ABzAfoA+wD8AGkBawHZAoAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEEAgQDBAQEBQQGBAcECAQJBAoECwQMBK0ADgQPBBAEEQQSBBMEFAQVBBYEFwQYBBkEGgQbBBwEHQQeBB8EIAQhBCIEIwQkBCUEJgQnBCgEKQQqBCsELAQtBC4ELwQwBDEEMgQzBDQENQQ2BDcEOAQ5BDoEOwQ8BD0EPgQ/BEAEQQRCBEMERARFBEYERwRIBEkESgRLBEwETQROBE8EFiFRBFIEUwRUBFUEVgRXBFgEWQRaBFsEXASnAF4EXwSAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAD9//3//f+kAP3//f/9//3//f/9//3/DAatAP3//f/9//3//f/9//3//f/9//3//f/9//3/Gwb9//3//f8fBv3/IQYiBiMGJAYlBiYGJwYoBikGKgYrBiwGLQYuBi8GMAYxBjIGMwY0BjUGNgY3BjgGOQY6Bv3//f/9//3//f9ABkEGQgZDBkQGRQZGBkcGSAZJBkoGSwZMBk0GTgZPBlAGUQZSBv3//f/9//3//f/9//3//f/9//3//f/9//3/gACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAGCAZIKMArCCvIKYApwCoAKkAegOrAKwArQD9/xUgsACxALIAswCEA4UDhgO3AIgDiQOKA7sAjAO9AI4DjwOQA5EDkgOTA5QDlQOWA5cDmAOZA5oDmwOcA50DngOfA6ADoQP9/6MDpAOlA6YDpwOoA6kDqgOrA6wDrQOuA68DsAOxA7IDswO0A7UDtgO3A7gDuQO6A7sDvAO9A74DvwPAA8EDwgPDA8QDxQPGA8cDyAPJA8oDywPMA80DzgP9/4AAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAP3/ogCjAKQApQCmAKcAqACpANcAqwCsAK0ArgCvALAAsQCyALMAtAC1ALYAtwC4ALkA9wC7ALwAvQC+AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f8XINAF0QXSBdMF1AXVBdYF1wXYBdkF2gXbBdwF3QXeBd8F4AXhBeIF4wXkBeUF5gXnBegF6QXqBf3//f8OIA8g/f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAChAKIAowCkAKUApgCnAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwQDCAMMAxADFAMYAxwDIAMkAygDLAMwAzQDOAM8AHgHRANIA0wDUANUA1gDXANgA2QDaANsA3AAwAV4B3wDgAOEA4gDjAOQA5QDmAOcA6ADpAOoA6wDsAO0A7gDvAB8B8QDyAPMA9AD1APYA9wD4APkA+gD7APwAMQFfAf8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAESASIBKgEoATYBpwA7ARABYAFmAX0BrQBqAUoBsAAFARMBIwErASkBNwG3ADwBEQFhAWcBfgEVIGsBSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgDPANAARQFMAdMA1ADVANYAaAHYAHIB2gDbANwA3QDeAN8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4A7wDwAEYBTQHzAPQA9QD2AGkB+ABzAfoA+wD8AP0A/gA4AYAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEOAg4DDgQOBQ4GDgcOCA4JDgoOCw4MDg0ODg4PDhAOEQ4SDhMOFA4VDhYOFw4YDhkOGg4bDhwOHQ4eDh8OIA4hDiIOIw4kDiUOJg4nDigOKQ4qDisOLA4tDi4OLw4wDjEOMg4zDjQONQ42DjcOOA45DjoO/f/9//3//f8/DkAOQQ5CDkMORA5FDkYORw5IDkkOSg5LDkwOTQ5ODk8OUA5RDlIOUw5UDlUOVg5XDlgOWQ5aDlsO/f/9//3//f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAdIKIAowCkAB4gpgCnANgAqQBWAasArACtAK4AxgCwALEAsgCzABwgtQC2ALcA+AC5AFcBuwC8AL0AvgDmAAQBLgEAAQYBxADFABgBEgEMAckAeQEWASIBNgEqATsBYAFDAUUB0wBMAdUA1gDXAHIBQQFaAWoB3AB7AX0B3wAFAS8BAQEHAeQA5QAZARMBDQHpAHoBFwEjATcBKwE8AWEBRAFGAfMATQH1APYA9wBzAUIBWwFrAfwAfAF+ARkggACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAAh4DHqMACgELAQoepwCAHqkAgh4LHvIerQCuAHgBHh4fHiABIQFAHkEetgBWHoEeVx6DHmAe8x6EHoUeYR7AAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPAHQB0QDSANMA1ADVANYAah7YANkA2gDbANwA3QB2Ad8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wB1AfEA8gDzAPQA9QD2AGse+AD5APoA+wD8AP0AdwH/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAKEAogCjAKwgpQBgAacAYQGpAKoAqwCsAK0ArgCvALAAsQCyALMAfQG1ALYAtwB+AbkAugC7AFIBUwF4Ab8AwADBAMIAwwDEAMUAxgDHAMgAyQDKAMsAzADNAM4AzwDQANEA0gDTANQA1QDWANcA2ADZANoA2wDcAN0A3gDfAOAA4QDiAOMA5ADlAOYA5wDoAOkA6gDrAOwA7QDuAO8A8ADxAPIA8wD0APUA9gD3APgA+QD6APsA/AD9AP4A/wCAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAEAQUBQQGsIB4gYAGnAGEBqQAYAqsAeQGtAHoBewGwALEADAFCAX0BHSC2ALcAfgENARkCuwBSAVMBeAF8AcAAwQDCAAIBxAAGAcYAxwDIAMkAygDLAMwAzQDOAM8AEAFDAdIA0wDUAFAB1gBaAXAB2QDaANsA3AAYARoC3wDgAOEA4gADAeQABwHmAOcA6ADpAOoA6wDsAO0A7gDvABEBRAHyAPMA9ABRAfYAWwFxAfkA+gD7APwAGQEbAv8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAEFAUEBrCAeIGABpwBhAakAGAKrAHkBrQB6AXsBsACxAAwBQgF9AR0gtgC3AH4BDQEZArsAUgFTAXgBfAHAAMEAwgACAcQABgHGAMcAyADJAMoAywDMAM0AzgDPABABQwHSANMA1ABQAdYAWgFwAdkA2gDbANwAGAEaAt8A4ADhAOIAAwHkAAcB5gDnAOgA6QDqAOsA7ADtAO4A7wARAUQB8gDzAPQAUQH2AFsBcQH5APoA+wD8ABkBGwL/AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9/wEJAgkDCQUJBgkHCQgJCQkKCQsJDgkPCRAJDQkSCRMJFAkRCRUJFgkXCRgJGQkaCRsJHAkdCR4JHwkgCSEJIgkjCSQJJQkmCScJKAkpCSoJKwksCS0JLgkvCV8JMAkxCTIJMwk0CTUJNgk3CTgJOQkgAD4JPwlACUEJQglDCUYJRwlICUUJSglLCUwJSQlNCTwJZAn9//3//f/9//3/IAAwADEAMgAzADQANQA2ADcAOAA5AP3//f/9//3//f8CAAAAAAAAAAEAAAADAAAA//36+Pb08vDu7Oro5uTi4N7c2tjW1NLQzszKyMbEwsC+vLq4trSysK6sqqimpKKgnpyamJaUkpCOjIqIhoSCgH58enh2dHJwbmxqaGZkYmBeXFpYVlRSUE5MSkhGREJAPjw6ODY0MjAuLCooJiQiIB4cGhgWFBIQDgwKCAYEAgAAAgQGCAoMDhASFBYYGhweICIkJigqLC4wMjQ2ODo8PkBCREZISkxOUFJUVlhaXF5gYmRmaGpsbnBydHZ4enx+gIKEhoiKjI6QkpSWmJqcnqCipKaoqqyusLK0tri6vL7AwsTGyMrMztDS1NbY2tze4OLk5ujq7O7w8vT2+Pr9///06uDWzMO6saifl4+Hf3hxamNcVlBKRD85NC8rJiIeGhcTEA0LCAYEAgEAAAAAAAAAAQIDBAUHCAoMDhATFRcaHR8iJSgsLjAyNDY5Oz1AQkVHSkxPUVRXWl1fYmVoa25xdHh7foGFiIuPkpaZnaCkqKyvs7e7v8PHy8/T19vgz8zJxsPAvbm0sKunopyXkoyGgXt1b2ljXVdQSkQ+ODMtJyIcFxINCAQCAgEAAAAAAAEBAgMEBQcICgwNDxIUFhkbHiEkJyotMDQ2ODo8P0FDRkhLTVBSVVhaXWBjZmlsb3J1eHt+gYWIi4+SlpmdoKSorK+zt7u/w8fLz9PX2+D/+fTu6eTf2tXQy8bBvbizr6qmoZ2ZlZCMiISAfXl1cW5qZ2NgXVlWU1BNSkdEQT48OTc0Mi8tKygmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),L(k,99845,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4g0M7NzMrIx8XDwcC9u7i1s7CtqqejoJ2ZlpKPi4eEgHx4dHBtaWVhXVlVUU1KRkI+Ozc0MS8tKigmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),L(k,99973,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4gmJmZmpydn6Gkp6mssLO2ur7BxcnN0dTY3N/j5urt8PL19/n7/P3+/v////////79+/r49vPx7uzp5uTg3drX09DMyMTAvLi0sKyno5+alpGNiIR/e3ZybWllYFxYVFBMSERAPDk1Mi8rKCYjIB0aFxUSDw0KCAcFAwIBAAAAAAD+///////+/fz6+Pb08e7r6OXh3trW0s3JxL+6trCrpqGclpGLhoB7dW9qZF9ZVE9JRD86NTArJiIdGRURDQoHBAMBAAAAAAAAAAABAQIEBQcJCw0QEhUYGx4iJSktMTU6PkNITFFXW15iZWhrbnF0dnh7fH6AgYKDg4SEg4OCgXJycXFwb21samhmZGFfXFpXVFFOS0hFQj87ODUyLywpJiMgHRsYFhQSEA4MCwoJCAcHBwcHBgUFBQUFBQUFBQYHBwgJCgwNDxASFBYYGx0gIyYpLC8zNzs/Q0dMUVZbYGVqb3R5f4SJj5Wboaets7rAx87V3OPq8fX3+vz9/v///v79/fz7+/r6+fj49/f29vX09PPz8vLx8PDv7u7t7Ovq6uno5+bl5OPi4eDe3dzb2djW1dPS0M7My8nHxcPAvry5t7Wyr62qp6ShnpqXlJCNiYWBfXl1cW1oZGFeW1dUUU1KRkNAPDk1Mi4qJyMfHBgUEQ0LCQcFBAMCAQAAAAAAAAAAAQEBAgIDAwQEBQYGBwgICQoLDAwNDg8QERITFBYXGBkbHB0fICIjJSYoKSstLzAyNDY4Ojw+QEJER0lLTlBSVVdaXV9iZWdqbXBzdnl8f4KGiYyQk5aanaCjpqmsr7K1uLu+wcTHys3Q09bZ3N/i5Ofp7O7w8vT2+Pr7/X9/f4CBg4SHiYyPkpaZnaGlqq6yt7vAxcnN0tba3uLm6u3w8/X4+vv8/f7+/fz7+ff08Ozn4tzVzsa9tKmekoiCfXdybGZgWlROSUI8NzItKCQfGxgUEQ4MCQcGBQQEBAQFBggKDRAUGB0jKS83PkdQWmRwfIOFiIqMjo+RkpOTAEAIAEYSAAAAAAAAGAwAAARQEgZOFgAAAAAAACI0AAAEWBYGUhYAAAAAAAAiQAAAAFwIAFxQAAAAAAAATAgBAABWBABeQgAAAAAAACIKAAAAPgoAPhQAAAAAAAAcEAAABEQSBkQWAAAAAAAAHiwAAAZAEABCIAAAAAAAACASAAACRC4AKiAAAAAAAAAuOgAABE4YBkgWAAAAAAAAKjQAAARYIgBAIAAAAAAAAC5SAAAAOAwAOBQAAAAAAAAYDAAAAEYSAEYYAAAAAAAAIBQAAAkAAAAJAAAAEAAAABAAAAAQAAAAFwAAADcAAAAgAAAAACgYCAAKNCAUCgYmGA4EAAYAAAAHAAAACQAAAAkAAAAUAAAAFAAAABQAAAAZAAAA5iAUCA=="),L(k,101072,"ZgNmAWYCpgSmAiYEpoooAmoDagFqAqoCbgNuAW4CrgIpALMEdAN0AXQCtAS0AgAAdAR6A3oBegK6An4BOQC+AgAApgMAAKYBAADmAwAAaAEAAGgCAAAoAwAA6AEAAOkBAABpBAAAqgMAAKoBAAAqAwAA6gMAAOoBAABsAgAArAEAACwDAAAsAgAAbQIAAG0EAACuBAAArgMAAK4BAADuAwAALgAAAO6LAABvAgAAMAIwAAAAcQEAADECAADxAQAAMQMAAHEEAABzAQAAMwIAAPMBMwAAADMAAAC0AwAAtAEAAPQCAAC0igAAdwEAADcCAAD3AQAAeAEAAHgCAAA4AgAA+AEAADkCAAD5AQAAeQQAALoEAAC6AwAAugEAADoEAAD6AgAA+gMAAHwCAAB+AgAAAAB/AQAAPwMAAP8BOACmAAEAgQBnBQAAKAEpBWkF6gAAAEIFAADDAEMdAADvBGwFLABsAAQAAACtAG0FAADuBAUAbgCxBPEEMQXxj7IAAAByBQAAMwVzAPQEtJoAAAgAtwCOADcVAAA3BQAAzQB3ALcIOAUAAG8FyQAJAbkAOQX6BAoAewW7ALwAvgB+AD8FPwEAAAsBAADMAIwAAAAAAGcAAABsDW0ALwGwAHEAdgVMBEwc6Y8AAOnPOY4AADnO"),L(k,101586,"sQNZAlsCswO5A1MByQPGA4MCxQOSApQCfgJ8AgAAqgBhgLIAMoCzADOAuQAxgLoAb4CwAmiAsQJmgrICaoCzAnKAtAJ5grUCe4K2AoGCtwJ3gLgCeYDAApSCwQKVguACY4LhAmyA4gJzgOMCeIBwIDCAcSBpgHQgNIB1IDWAdiA2gHcgN4B4IDiAeSA5gHogK4B7IC2AfCA9gH0gKIB+ICmAfyBugIAgMECBIDFAgiAyQIMgM0CEIDRAhSA1QIYgNkCHIDdAiCA4QIkgOUCKICtAiyAtQIwgPUCNIChAjiApQJAgYUCRIGVAkiBvQJMgeECUIFlClSBoQJYga0CXIGxAmCBtQJkgbkCaIHBAmyBzQJwgdEAAAAAAaXhjbXZsZA=="),L(k,101888,"AQAAAAoAAABkAAAA6AMAAAUAAAAyAAAA9AEAAAAXCgkYExgY"),L(k,101936,"///////9+fXy7uvo5OHe2tjV0s/MycbEwb+8ure1s7CurKmopaOhn56bmZiWlJKRj42LiYiHhYOCgX9+fHt6eHd2dXNycXBvbm1ramloZ2ZlZGNiYWBfXl1cW1pZWVhXVlVUU1JSUVBQT05NTExLS0pJSEdHRkVFRENDQkJBQEA/Pj49PTw7Ozo6OTk4ODc2NjU1NDQ0MzIyMTEwMC8vLi4uLS0sLCwrKyopKCgoJycnJiYmJSUlJCQjIyMjIiIiISEhICAfHx8eHh4dHR0dHBwbGxsbGhoaGhkZGRgYGBgXFxcXFhYWFRUVFRQUFBQTExMSEhERERAQEBAQEA8PDw8ODg4NDQ0MDAwMCwsLCwoKCgkJCQgICAAAAAAAAAAAeHl4d3d2dnV0dHNycXBwb29ubWxrampoZ2dmZmZlZWNiYmFgYF9eXVtaW1pZWFZVVlVVVFJRUE9NTk5MTUtLSklHSEZFRUVDQUA/Pz89PTs7Ozo4OTo4NjU0NDU0NDIwLy8tLi0="),L(k,102336,"FhYWFhYWFhUVFRUUFBMTEhEQDw8PDw8PDwAAAAAAAABkeGRpZG5uZF9kaXhpbn2Ch3N9ZGl4S2RLaXhVS2RpeFVpX3N4ZF9kbnhfaWRzeGRkZGl4ZGlfc3huX2RpeGRpaXp9bmlkaXhkaWl6fW5pZGl4X2lkc3huZGRkeGRkZGRkZGRk"),L(k,102480,"ZJZkaW5zbm5uZGmWaW59h4xzh2RpllppWnqHZFpkaZZkaWR6h2RkZGmWZGlpc4duaWRplmRpaXqCeH1kaZZkaW56fXNuZGmWZGlpeod4aWRplmRpaXOHbmlkZGRkZGRkZGRkZA=="),L(k,102592,"bnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRuZG5ubmRubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubg=="),L(k,102708,"rwAAAGQAAAAyAAAAMg=="),L(k,102744,"ZA=="),L(k,102764,"MjIoRlpkZGRGboeWZGRLZHiWAAAAAAAABwAAAA4AAAAVAAAAKAAAAFAAAAAAAAAAAFNBUFIAQwAAAAAARgAAAAAAAAABAAAAAgAAAAQAAAAPAAAAAAEAAAEBAAEBAgQAAAAAAPMAEAEAAQABAAEAAQAB8ADwAPA="),L(k,102898,"QABaAG4AgACPAJwAqQC1AMAAygDUAN0A5gDvAPcAAAEHAQ8BFgEeASUBLAEyATkBQAFGAUwBUgFYAV4BZAFqAW8BdQF6AYABhQGKAY8BlAGZAZ4BowGoAa0BsgG2AbsBwAHEAckBzQHRAdYB2gHeAeMB5wHrAe8B8wH3AfsBAAIDAgcCCwIPAhMCFwIbAh8CIgImAioCLQIxAjUCOAI8AkACQwJHAkoCTgJRAlQCWAJbAl8CYgJlAmkCbAJvAnMCdgJ5AnwCgAKDAoYCiQKMAo8CkgKWApkCnAKfAqICpQKoAqsCrgKxArQCtwK6Ar0CwALCAsUCyALLAs4C0QLUAtYC2QLcAt8C4gLkAucC6gLtAu8C8gL1AvcC+gL9AgADAgMFAwcDCgMNAw8DEgMVAxcDGgMcAx8DIQMkAycDKQMsAy4DMQMzAzYDOAM7Az0DQANCA0QDRwNJA0wDTgNRA1MDVQNYA1oDXQNfA2EDZANmA2gDawNtA28DcgN0A3YDeQN7A30DgAOCA4QDhgMAAAGqAqytAwQFsLGys7S0tgYHCLkJCrwMDQ4PEBESYWJjZGVmZ2hpamtsbW5vcHFyc3R1"),L(k,103360,"YAYAAPAGAABmCQAA5gkAAGYKAADmCgAAZgsAAOYLAABmDAAA5gwAAGYNAABQDgAA0A4AACAPAABAEAAAkBA="),L(k,103440,"5gDmAOYA5gAAAAAA5gDmAL4AqgC+AMgAAAAAAL4A8AC+AL4A0gDSAAAAAADSANIAyADIANIA0gAAAAAA5gDmAOYA5gDwAPAAAAAAAAQBBAGqAIwA3ADcAAAAAAD6AA4BoACMAMgAjAAAAAAA8ACgALQAtADSANIAAAAAAOYA8ACqANwAtAC0AAAAAAD6AA4BlgCCAMgAyAAAAAAADgEOAbYAjADcANwAAAAAAPgAEwGbALQA0gDSAAAAAAAOASwBwwMAAAAAAABsAAAAAAAAAKAAkQCbAJYAAAAAAMgA9QAnAAAAtwAAAAAAAADCugAAyADIAMgAyAAAAAAA0gDmAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGgAAAAAAABscHR4fICEiIyQlJicoKSorAAAs"),L(k,103790,"LQAAAAAAAAAu"),L(k,103816,"Lw=="),L(k,103833,"MAAAAAAAMQ=="),L(k,103856,"Mg=="),L(k,103868,"MwAAAK0AAQBABgEADCAtAAAAAAC+AL4A0gDSAAAAAADmAPoAoACWAMgAyAAAAAAA+gAEAbkAwwDDAL4AAAAAANIA3AD6AMgA+gD6AAAAAAD6APoAMjM0Njk6PD0+P0BBQkNERkdJSktMTU5PUFFSU1RWAACWAIwAtAC0AAAAAADIAMgAbA=="),L(k,104016,"oADIALQAtAAAAAAA3ADwALQAoADIAMgAAAAAAPAA+gBjAAAAZgAAAGgAAABrAAAAcAAAAHQAAAB4AAAA/g=="),L(k,104096,"oACMAJYApQAAAAAA2gAxAZEAkQCqAKAAAAAAAEoBXgEuAAAALAAAACcAAADIAg=="),L(k,104160,"MTIzNTY3OTo7PD4/QEFCREVGR0hJSktMTU5PUFFSU1RW"),L(k,104208,"vgC0AOYA5gAAAAAA+gD6ABESExQWFxkaGxwdHyAhIiQlJicoKSosc3uDmwAAAAAAtAC0AL4AtAAAAAAA5gDwALQAtAC0AKAAAAAAAOYAtABABAAAMAQAADUEAAA4BAAAOQQAAD4EAABDBAAASwQAAE0EAABOBAAATwQAAFAEAABRBAAAVgQAAFcEAABdBAAAXgQ="),L(k,104368,"tACgAMgAyAAAAAAA3ADmAKAAhwDSANIAAAAAAAQBGAGgAIwAyADIAAAAAADcAOYAyADIAMgAyAAAAAAAyADIAKAAvgCvAK8AAAAAAMgA0gCqAHMA0gDwAAAAAAAEARgBqgCqALQAtAAAAAAA8AAEAZYAtADIAMgAAAAAANIA+gCWAJYAtAC0AAAAAAAsASwBoACHANwA3AAAAAAA+gAYAaAAqgDIAMgAAAAAAEABVAG0AKAA8ADwAAAAAAAEAQQBvgC0AMgA5gAAAAAA8AD6AJYAlgC0ALQA0gDmAOYA8ABhAAAA4AAAAOEAAACjHgAA4wAAAKEeAAADAQAAsR4AAK8eAACzHgAAtR4AALceAADiAAAApx4AAKUeAACpHgAAqx4AAK0eAABlAAAA6AAAAOkAAAC7HgAAvR4AALkeAADqAAAAwR4AAL8eAADDHgAAxR4AAMceAABpAAAA7AAAAO0AAADJHgAAKQEAAMseAABvAAAA8gAAAPMAAADPHgAA9QAAAM0eAAD0AAAA0x4AANEeAADVHgAA1x4AANkeAAChAQAA3R4AANseAADfHgAA4R4AAOMeAAB1AAAA+QAAAPoAAADnHgAAaQEAAOUeAACwAQAA6x4AAOkeAADtHgAA7x4AAPEeAAB5AAAA8x4AAP0AAAD3HgAA+R4AAPUe"),L(k,104896,"5gCWAOYA5gDmAAAA8AD6AAAAAAAnAAAAAAAAAAABAgM="),L(k,104945,"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRo="),L(k,105072,"GxwdAAAeHyAhIiMkACUmAAAAACcAACgAKQAqACsAAAAAAAAsAC0ALgAAAAAALwAAADAAAAAAAAAAMQ=="),L(k,105170,"MgAz"),L(k,105195,"NAAAAAAANQA2"),L(k,105226,"NwA4ADkArQABAAwgAQ=="),L(k,105249,"AQIDAAQAAQIDAAQFBgIDAAQFBwEDAAQICQoDAAAICAoDAAALCwsLAAAMDAwMAAAMAQ4BEwEBAw8DDgYRBgMJAQsPCwEMCQwBDgYOCQ4ODg8OHA4DDxEPEg8PEBEQAREGEQkRDxETEiAS/38AAAAAlgCMANwA3AAAAAAABAEYAYKAeHRkZICAgIyAgKCrq4CAgA=="),L(k,105412,"yAAAAMgAAACQAQAAkAEAAJABAABYAgAAWAIAAFgC"),L(k,105456,"8AAAAKoAAACqAAAAqgAAAKoAAACqAAAAqgAAAKoAAACqAAAAAQIMAw0EDgULAAAAAQIDBAUGAAAAAAAACwwNDg=="),L(k,105540,"MgAAAK8AAABkAAAAMg=="),L(k,105568,"rw=="),L(k,105596,"EBAKEBY="),L(k,105620,"/38AANAHAAAsAQAAYwAAAGMAAABjAAAAAAAAANAH"),L(k,105668,"BA=="),L(k,105680,"QEFCQ0RFRkdISUpLTE1OT1BRUlNUVldYWVtcXV5gYWJkZWdoaWtsbm9xc3R2d3l7fH6AgoSFh4mLjY+Rk5WXmZueoKKkp6mrrrCztbi6vb/CxcfKzdDT1tnc3+Ll6Ozv8vb5/P7/"),L(k,105792,"//7+/v7+/v7+/v39/f38/Pz7+/v6+vn5+Pj39/b19fTz8/Lx7+3r6efl4+Hf3drY1dPQzcvIxcK/u7i1sq6rp6OgnJiUkIyIhH97d3JuaWRgXltYVlNRTkxKR0VCQD48OTc1MzEvLCooJiQiIB4dGxkXFRMSEA4MCwkHBgQDAQ=="),L(k,106064,"//7+/v7+/f38+/v6+fj39vX08vHv7uzq6efl4+Hf3NrY1dPRz83LycfFw8G/vbu5t7SysK2rqaakoZ+cmpeUko+MioeEgX57eHZzcGxpZmNgX11bWlhWVVNSUE9NTEpJSEZFRENCQD8+PTw7Ojk4Nzc2NTQ0MzIyMTAwLy8uLi4tLS0sLCwsLCwsKysrKywrKiopKCgnJiYlJCQjIyIhISAgHx4eHR0cHBsaGhkZGBgXFxYWFRUUFBMTEhISEREQEA8PDw4ODQ0NDAwLCwsKCgoJCQkICAgHBwcHBgYGBQUFBQQEBAQEAwMDAwICAgICAgEBAQEBAQ=="),L(k,106341,"RvIpAC8ALwBF8ikALwAuAEXyKAAuAC0ANPIoAC0tLAA08igAKysrADTyKAAqKioANPIoACkpKQA08igAAOf/zv+1/5z/g/9q/1H/N/8e/wX/7P7T/rr+of6I/m/+Vf48/iP+Cv7x/dj9v/2m/Y39dP1b/UL9Kf0Q/ff83vzF/Kz8k/x6/GH8SPwv/Bb8/fvk+8v7svuZ+4D7Z/tP+zb7HfsE++v60vq6+qH6iPpv+lf6Pvol+g369Pnb+cP5qvmR+Xn5YPlH+S/5Fvn++OX4zfi0+Jz4g/hr+FP4Ovgi+Ar48ffZ98H3qPeQ93j3YPdH9y/3F/f/9uf2z/a39p/2h/Zv9lf2P/Yn9g/29/Xf9cf1sPWY9YD1aPVR9Tn1IfUK9fL02/TD9Kz0lPR99GX0TvQ29B/0CPTw89nzwvOr85TzfPNl807zN/Mg8wnz8vLb8sTyrvKX8oDyafJS8jzyJfIO8vjx4fHL8bTxnvGH8XHxW/FE8S7xGPEB8evw1fC/8Knwk/B98GfwUfA78CXwEPD67+Tvzu+576Pvje9472LvTe847yLvDe/47uLuze647qPuju557mTuT+467iXuEO777eft0u297antlO2A7WvtV+1C7S7tGu0F7fHs3ezJ7LXsoeyN7HnsZexR7D3sKuwW7ALs7+vb68jrtOuh643reutn61TrQest6xrrB+v06uLqz+q86qnqluqE6nHqX+pM6jrqJ+oV6gPq8One6czpuumo6ZbphOly6WHpT+k96SzpGukI6ffo5ujU6MPosuig6I/ofuht6FzoS+g76CroGegI6Pjn5+fX58bntuel55Xnhed152XnVedF5zXnJecV5wXn9ubm5tfmx+a45qjmmeaK5nvma+Zc5k3mPuYw5iHmEuYD5vXl5uXY5cnlu+Wt5Z7lkOWC5XTlZuVY5UrlPOUv5SHlE+UG5fjk6+Te5NDkw+S25KnknOSP5ILkdeRo5FzkT+RD5DbkKuQd5BHkBeT54+3j4ePV48njveOx46XjmuOO44Pjd+Ns42HjVuNL4z/jNOMq4x/jFOMJ4//i9OLq4t/i1eLK4sDituKs4qLimOKO4oTie+Jx4mfiXuJU4kviQuI54i/iJuId4hTiDOID4vrh8eHp4eDh2OHQ4cfhv+G34a/hp+Gf4Zfhj+GI4YDheOFx4WrhYuFb4VThTeFG4T/hOOEx4SrhJOEd4RbhEOEK4QPh/eD34PHg6+Dl4N/g2eDU4M7gyeDD4L7guOCz4K7gqeCk4J/gmuCV4JHgjOCH4IPgfuB64HbgcuBu4GrgZuBi4F7gWuBX4FPgT+BM4EngReBC4D/gPOA54DbgM+Ax4C7gK+Ap4CfgJOAi4CDgHuAc4BrgGOAW4BTgEuAR4A/gDuAN4AvgCuAJ4AjgB+AG4AXgBeAE4APgA+AC4ALgAuAC4ALgAeAC4ALgAuAC4ALgA+AD4ATgBeAF4AbgB+AI4AngCuAL4A3gDuAP4BHgEuAU4BbgGOAa4BzgHuAg4CLgJOAn4CngK+Au4DHgM+A24DngPOA/4ELgReBJ4EzgT+BT4FfgWuBe4GLgZuBq4G7gcuB24HrgfuCD4IfgjOCR4JXgmuCf4KTgqeCu4LPguOC+4MPgyeDO4NTg2eDf4OXg6+Dx4Pfg/eAD4QrhEOEW4R3hJOEq4THhOOE/4UbhTeFU4VvhYuFq4XHheOGA4Yjhj+GX4Z/hp+Gv4bfhv+HH4dDh2OHg4enh8eH64QPiDOIU4h3iJuIv4jniQuJL4lTiXuJn4nHie+KE4o7imOKi4qzituLA4sri1eLf4uri9OL/4gnjFOMf4yrjNOM/40vjVuNh42zjd+OD447jmuOl47HjvePJ49Xj4ePt4/njBeQR5B3kKuQ25EPkT+Rc5GjkdeSC5I/knOSp5Lbkw+TQ5N7k6+T45AblE+Uh5S/lPOVK5VjlZuV05YLlkOWe5a3lu+XJ5djl5uX15QPmEuYh5jDmPuZN5lzma+Z75ormmeao5rjmx+bX5ubm9uYF5xXnJec150XnVedl53XnheeV56XntufG59fn5+f45wjoGegq6DvoS+hc6G3ofuiP6KDosujD6NTo5uj36AjpGuks6T3pT+lh6XLphOmW6ajpuunM6d7p8OkD6hXqJ+o66kzqX+px6oTqluqp6rzqz+ri6vTqB+sa6y3rQetU62freuuN66HrtOvI69vr7+sC7BbsKuw97FHsZex57I3soey17Mns3ezx7AXtGu0u7ULtV+1r7YDtlO2p7b3t0u3n7fvtEO4l7jruT+5k7nnuju6j7rjuze7i7vjuDe8i7zjvTe9i73jvje+j77nvzu/k7/rvEPAl8DvwUfBn8H3wk/Cp8L/w1fDr8AHxGPEu8UTxW/Fx8YfxnvG08cvx4fH48Q7yJfI88lLyafKA8pfyrvLE8tvy8vIJ8yDzN/NO82XzfPOU86vzwvPZ8/DzCPQf9Db0TvRl9H30lPSs9MP02/Ty9Ar1IfU59VH1aPWA9Zj1sPXH9d/19/UP9if2P/ZX9m/2h/af9rf2z/bn9v/2F/cv90f3YPd495D3qPfB99n38fcK+CL4OvhT+Gv4g/ic+LT4zfjl+P74Fvkv+Uf5YPl5+ZH5qvnD+dv59PkN+iX6PvpX+m/6iPqh+rr60vrr+gT7Hfs2+0/7Z/uA+5n7svvL++T7/fsW/C/8SPxh/Hr8k/ys/MX83vz3/BD9Kf1C/Vv9dP2N/ab9v/3Y/fH9Cv4j/jz+Vf5v/oj+of66/tP+7P4F/x7/N/9R/2r/g/+c/7X/zv/n/wAAGQAyAEsAZAB9AJYArwDJAOIA+wAUAS0BRgFfAXgBkQGrAcQB3QH2AQ8CKAJBAloCcwKMAqUCvgLXAvACCQMiAzsDVANtA4YDnwO4A9ED6gMDBBwENQROBGcEgASZBLEEygTjBPwEFQUuBUYFXwV4BZEFqQXCBdsF8wUMBiUGPQZWBm8GhwagBrkG0QbqBgIHGwczB0wHZAd9B5UHrQfGB94H9gcPCCcIPwhYCHAIiAigCLkI0QjpCAEJGQkxCUkJYQl5CZEJqQnBCdkJ8QkJCiEKOQpQCmgKgAqYCq8KxwrfCvYKDgslCz0LVAtsC4MLmwuyC8oL4Qv4CxAMJww+DFUMbAyEDJsMsgzJDOAM9wwODSUNPA1SDWkNgA2XDa4NxA3bDfINCA4fDjUOTA5iDnkOjw6lDrwO0g7oDv8OFQ8rD0EPVw9tD4MPmQ+vD8UP2w/wDwYQHBAyEEcQXRBzEIgQnhCzEMgQ3hDzEAgRHhEzEUgRXRFyEYcRnBGxEcYR2xHwEQUSGRIuEkMSVxJsEoASlRKpEr4S0hLmEvsSDxMjEzcTSxNfE3MThxObE68TwxPWE+oT/hMRFCUUOBRMFF8UcxSGFJkUrBS/FNMU5hT5FAwVHhUxFUQVVxVqFXwVjxWhFbQVxhXZFesV/RUQFiIWNBZGFlgWahZ8Fo4WnxaxFsMW1BbmFvgWCRcaFywXPRdOF2AXcReCF5MXpBe1F8UX1hfnF/gXCBgZGCkYOhhKGFsYaxh7GIsYmxirGLsYyxjbGOsY+xgKGRoZKRk5GUgZWBlnGXYZhRmVGaQZsxnCGdAZ3xnuGf0ZCxoaGigaNxpFGlMaYhpwGn4ajBqaGqgathrEGtEa3xrtGvoaCBsVGyIbMBs9G0obVxtkG3EbfhuLG5gbpBuxG70byhvWG+Mb7xv7GwccExwfHCscNxxDHE8cWxxmHHIcfRyJHJQcnxyqHLUcwRzMHNYc4RzsHPccAR0MHRYdIR0rHTYdQB1KHVQdXh1oHXIdfB2FHY8dmR2iHawdtR2+Hccd0R3aHeMd7B30Hf0dBh4PHhceIB4oHjAeOR5BHkkeUR5ZHmEeaR5xHngegB6IHo8elh6eHqUerB6zHroewR7IHs8e1h7cHuMe6h7wHvYe/R4DHwkfDx8VHxsfIR8nHywfMh83Hz0fQh9IH00fUh9XH1wfYR9mH2sfbx90H3kffR+CH4Yfih+OH5Iflh+aH54foh+mH6kfrR+xH7Qftx+7H74fwR/EH8cfyh/NH88f0h/VH9cf2R/cH94f4B/iH+Qf5h/oH+of7B/uH+8f8R/yH/Mf9R/2H/cf+B/5H/of+x/7H/wf/R/9H/4f/h/+H/4f/h//H/4f/h/+H/4f/h/9H/0f/B/7H/sf+h/5H/gf9x/2H/Uf8x/yH/Ef7x/uH+wf6h/oH+Yf5B/iH+Af3h/cH9kf1x/VH9Ifzx/NH8ofxx/EH8Efvh+7H7cftB+xH60fqR+mH6Ifnh+aH5Yfkh+OH4ofhh+CH30feR90H28fax9mH2EfXB9XH1IfTR9IH0IfPR83HzIfLB8nHyEfGx8VHw8fCR8DH/0e9h7wHuoe4x7cHtYezx7IHsEeuh6zHqwepR6eHpYejx6IHoAeeB5xHmkeYR5ZHlEeSR5BHjkeMB4oHiAeFx4PHgYe/R30Hewd4x3aHdEdxx2+HbUdrB2iHZkdjx2FHXwdch1oHV4dVB1KHUAdNh0rHSEdFh0MHQEd9xzsHOEc1hzMHMEctRyqHJ8clByJHH0cchxmHFscTxxDHDccKxwfHBMcBxz7G+8b4xvWG8obvRuxG6QbmBuLG34bcRtkG1cbShs9GzAbIhsVGwgb+hrtGt8a0RrEGrYaqBqaGowafhpwGmIaUxpFGjcaKBoaGgsa/RnuGd8Z0BnCGbMZpBmVGYUZdhlnGVgZSBk5GSkZGhkKGfsY6xjbGMsYuxirGJsYixh7GGsYWxhKGDoYKRgZGAgY+BfnF9YXxRe1F6QXkxeCF3EXYBdOFz0XLBcaFwkX+BbmFtQWwxaxFp8WjhZ8FmoWWBZGFjQWIhYQFv0V6xXZFcYVtBWhFY8VfBVqFVcVRBUxFR4VDBX5FOYU0xS/FKwUmRSGFHMUXxRMFDgUJRQRFP4T6hPWE8MTrxObE4cTcxNfE0sTNxMjEw8T+xLmEtISvhKpEpUSgBJsElcSQxIuEhkSBRLwEdsRxhGxEZwRhxFyEV0RSBEzER4RCBHzEN4QyBCzEJ4QiBBzEF0QRxAyEBwQBhDwD9sPxQ+vD5kPgw9tD1cPQQ8rDxUP/w7oDtIOvA6lDo8OeQ5iDkwONQ4fDggO8g3bDcQNrg2XDYANaQ1SDTwNJQ0ODfcM4AzJDLIMmwyEDGwMVQw+DCcMEAz4C+ELyguyC5sLgwtsC1QLPQslCw4L9grfCscKrwqYCoAKaApQCjkKIQoJCvEJ2QnBCakJkQl5CWEJSQkxCRkJAQnpCNEIuQigCIgIcAhYCD8IJwgPCPYH3gfGB60HlQd9B2QHTAczBxsHAgfqBtEGuQagBocGbwZWBj0GJQYMBvMF2wXCBakFkQV4BV8FRgUuBRUF/ATjBMoEsQSZBIAEZwROBDUEHAQDBOoD0QO4A58DhgNtA1QDOwMiAwkD8ALXAr4CpQKMAnMCWgJBAigCDwL2Ad0BxAGrAZEBeAFfAUYBLQEUAfsA4gDJAK8AlgB9AGQASwAyABkAMAAAADAAAABAAAAAUAAAAJAAAACgAAAAsAAAAMAAAACAm7XL3Ojt7Obczr+wo5iQjIuMj5KUlZKMg3hpWUk8MSopLTZEVml9j5+qsbKtpJaHeGlcU09PVV5reoiWoquwsa6ooJiRi4iJjZSdqLK7wMG9tKWSfGNKMh4OBQIFDx4wRFltf4yWnJ+fnZuZmZyhqbO/ytXc4N7YzLumj3dgSzouKCkvOkhZanqGkJSVkYmAdWtiXFpcYWl0gIqUmp6dmJCGfHFoYmBja3iIm6/C0t/m5+LXxrKchG9bS0A5Nzg9Q0pQVFZVUk1IQj8+QUlWZ3yTq8PZ6vb8+/Tn1cCqlIBxZF1aXGFocHd9f397dGthV05IRkhOWWZ1hJOfp6uqpJmLe2pbTkZDRU1aa3+SprjFz9PSzcS5raGWjomHh4qNkZKRjIR4aFVBLhwOBQEFDx80TWiBmrDBzdPT0Mi/taukn5ydoKWqrrGwq6OWh3ZjUUI2Ly0xOkhZa36OnKaqqaOYintsXVJKSEpQWmd1gi0AAAAmAAAALQAAAC0AAAA3AAAALQ=="),L(k,110928,"yv5w/hICZAHgAFkAFwD2/8b/8P/NAVcCGAK9AgIDXQLxAc0BMAKUAW4A4ACDAGgAn/+bABYBZv9z+6r94QJ9ALD9KQALAAn/9v9BAFwAUADQ/kcApwD//3oA6QChANX/FgHfAeUBlwEKAYoChgBQAOwARAAEAQ0BswA1AIwAEwElASgBaAABAZgANwG2AAcB9QB9ADoBjAAsAMsA5gAV/+L+FwBrAFwApf8mANABuwGwAGIA8Pxv9p346/vA+Ur6mPoT+0v8Jv0="),L(k,111162,"BgAHAAgACQAKAAsADQAOABAAEgAUABYAGQAcACAAIwAoAC0AMwA5AEAARwBQAFoAZQByAIAAjgCfALMAygDjAAABHAE+AWcBlQHHAQACOAJ+As8CcQOPAwAEcQT8BJ4FVgYfBwAI4Qj4CTsLrAw9DgAQwxHwE3cWWBl7HAAghSPfJ+4ssDL2OABArkekUIVbZmYzc/9/"),L(k,111324,"qMtoQQAAAACoy2jBAAAAAAAAAAAXCtQJkglQCQ8JzgiPCE8IEwjVB5oHYgcoB/MGvgaLBloGKwb9BdMFqQWBBVwFOAUWBfcE1wS7BKAEhgRuBFcEQQQtBBkEBwT1A+QD1APFA7YDqAOZA40DfwNxA2UDVwNLAz4DMgMkAxgDCwP+AvIC5ALYAssCvgKxAqQClwKLAn0CcgJkAlkCTAJAAjQCKAIcAhICBQL7AfAB5QHbAdABxgG7AbIBqAGeAZQBigGBAXcBbgFjAVsBUAFIAT0BNAErASABGAENAQQB+gDwAOcA3ADUAMgAwAC1AKwAoQCYAI4AhQB7AHEAaQBeAFYATABDADkAMQAnAB4AFgALAAQA+//y/+n/4P/X/87/xP+7/7L/qf+g/5X/jf+C/3r/cP9m/1z/Uv9J/z//Nf8r/yL/F/8O/wT/+v7x/uf+3f7T/sr+wP62/q3+o/6b/pD+h/59/nP+av5f/lb+TP5C/jj+Lf4j/hn+Df4D/vf97P3h/dX9yf29/bH9pf2Y/Yz9f/1z/Wb9Wf1M/T/9M/0k/Rn9Cv3//PH85fzY/Mz8vvyz/KT8mPyL/H78cfxi/FX8Rfw4/Cb8GfwG/Pb74vvQ+7r7pfuO+3b7XPtB+yT7Bvvl+sT6n/p5+lP6KPr++dD5oflw+Tz5CfnR+Jr4YPgm+Oj3q/ds9yz36/aq9mj2Jvbj9bAEdgRABA4E3wO0A4sDZQNBAx8DAAPiAsYCqwKSAnoCZAJOAjoCJwIVAgMC8wHjAdQBxgG4AasBnwGTAYcBfAFyAWgBXgFVAUwBQwE7ATMBLAEkAR0BFgEQAQkBAwH9APcA8gDtAOcA4gDdANkA1ADQAMwAxwDDAMAAvAC4ALQAsQCuAKoApwCkAKEAngCbAJkAlgCTAJEAjgCMAIkAhwCFAIMAgAB+AHwAegB4AHcAdQBzAHEAbwBuAGwAagBpAGcAZgBkAGMAYQBgAF8AXQBcAFsAWgBYAFcAVgBVAFQAUwBSAFAATwBOAE0ATABLAEsASgBJAEgARwBGAEUARABEAEMAQgBBAEAAQAA/AD4APQA9ADwAOwA7ADoAOQA5ADgAOAA3ADcANgA2ADUANQA0ADQAMwAzADIAMgAxADEAMAAwAC8ALwAuAC4ALQAtACwALAArACsAKgAqACkAKQApACkAKAAoACcAJwAmACYAJgAmACUAJQAkACQAJAAkACMAIwAjACMAIgAiACEAIQAhACEAIAAgACAAIAAfAB8AHwAfAB4AHgAeAB4AHQAdAB0AHQAcABwAHAAcABsAGwAxNkZyYW1lTWFuYWdlckltcGwAMTJGcmFtZU1hbmFnZXIAMjNTcGVlY2hXYXZlR2VuZXJhdG9ySW1wbAAxOVNwZWVjaFdhdmVHZW5lcmF0b3IAMTNXYXZlR2VuZXJhdG9y"),L(k,112416,"AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA"),L(k,115203,"QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNf6CK2VHFWdAAAAAAAAAOEMAAPr+Qi52vzo7nrya9wy9vf3/////3z88VFVVVVXFP5ErF89VVaU/F9CkZxERgT8AAAAAAADIQu85+v5CLuY/JMSC/72/zj+19AzXCGusP8xQRtKrsoM/hDpOm+DXVT8="),L(k,115390,"8D9uv4gaTzubPDUz+6k99u8/XdzYnBNgcbxhgHc+muzvP9FmhxB6XpC8hX9u6BXj7z8T9mc1UtKMPHSFFdOw2e8/+o75I4DOi7ze9t0pa9DvP2HI5mFO92A8yJt1GEXH7z+Z0zNb5KOQPIPzxso+vu8/bXuDXaaalzwPiflsWLXvP/zv/ZIatY4890dyK5Ks7z/RnC9wPb4+PKLR0zLso+8/C26QiTQDarwb0/6vZpvvPw69LypSVpW8UVsS0AGT7z9V6k6M74BQvMwxbMC9iu8/FvTVuSPJkbzgLamumoLvP69VXOnj04A8UY6lyJh67z9Ik6XqFRuAvHtRfTy4cu8/PTLeVfAfj7zqjYw4+WrvP79TEz+MiYs8dctv61tj7z8m6xF2nNmWvNRcBITgW+8/YC86PvfsmjyquWgxh1TvP504hsuC54+8Hdn8IlBN7z+Nw6ZEQW+KPNaMYog7Ru8/fQTksAV6gDyW3H2RST/vP5SoqOP9jpY8OGJ1bno47z99SHTyGF6HPD+msk/OMe8/8ucfmCtHgDzdfOJlRSvvP14IcT97uJa8gWP14d8k7z8xqwlt4feCPOHeH/WdHu8/+r9vGpshPbyQ2drQfxjvP7QKDHKCN4s8CwPkpoUS7z+Py86JkhRuPFYvPqmvDO8/tquwTXVNgzwVtzEK/gbvP0x0rOIBQoY8MdhM/HAB7z9K+NNdOd2PPP8WZLII/O4/BFuOO4Cjhrzxn5JfxfbuP2hQS8ztSpK8y6k6N6fx7j+OLVEb+AeZvGbYBW2u7O4/0jaUPujRcbz3n+U02+fuPxUbzrMZGZm85agTwy3j7j9tTCqnSJ+FPCI0Ekym3u4/imkoemASk7wcgKwERdruP1uJF0iPp1i8Ki73IQrW7j8bmklnmyx8vJeoUNn10e4/EazCYO1jQzwtiWFgCM7uP+9kBjsJZpY8VwAd7UHK7j95A6Ha4cxuPNA8wbWixu4/MBIPP47/kzze09fwKsPuP7CvervOkHY8Jyo21dq/7j934FTrvR2TPA3d/ZmyvO4/jqNxADSUj7ynLJ12srnuP0mjk9zM3oe8QmbPotq27j9fOA+9xt54vIJPnVYrtO4/9lx77EYShrwPkl3KpLHuP47X/RgFNZM82ie1Nkev7j8Fm4ovt5h7PP3Hl9QSre4/CVQc4uFjkDwpVEjdB6vuP+rGGVCFxzQ8t0ZZiiap7j81wGQr5jKUPEghrRVvp+4/n3aZYUrkjLwJ3Ha54aXuP6hN7zvFM4y8hVU6sH6k7j+u6SuJeFOEvCDDzDRGo+4/WFhWeN3Ok7wlIlWCOKLuP2QZfoCqEFc8c6lM1FWh7j8oIl6/77OTvM07f2aeoO4/grk0h60Sary/2gt1EqDuP+6pbbjvZ2O8LxplPLKf7j9RiOBUPdyAvISUUfl9n+4/zz5afmQfeLx0X+zodZ/uP7B9i8BK7oa8dIGlSJqf7j+K5lUeMhmGvMlnQlbrn+4/09QJXsuckDw/Xd5PaaDuPx2lTbncMnu8hwHrcxSh7j9rwGdU/eyUPDLBMAHtoe4/VWzWq+HrZTxiTs8286LuP0LPsy/FoYi8Eho+VCek7j80NzvxtmmTvBPOTJmJpe4/Hv8ZOoRegLytxyNGGqfuP25XcthQ1JS87ZJEm9mo7j8Aig5bZ62QPJlmitnHqu4/tOrwwS+3jTzboCpC5azuP//nxZxgtmW8jES1FjKv7j9EX/NZg/Z7PDZ3FZmuse4/gz0epx8Jk7zG/5ELW7TuPykebIu4qV285cXNsDe37j9ZuZB8+SNsvA9SyMtEuu4/qvn0IkNDkrxQTt6fgr3uP0uOZtdsyoW8ugfKcPHA7j8nzpEr/K9xPJDwo4KRxO4/u3MK4TXSbTwjI+MZY8juP2MiYiIExYe8ZeVde2bM7j/VMeLjhhyLPDMtSuyb0O4/Fbu809G7kbxdJT6yA9XuP9Ix7pwxzJA8WLMwE57Z7j+zWnNuhGmEPL/9eVVr3u4/tJ2Ol83fgrx689O/a+PuP4czy5J3Gow8rdNamZ/o7j/62dFKj3uQvGa2jSkH7u4/uq7cVtnDVbz7FU+4ovPuP0D2pj0OpJC8OlnljXL57j80k6049NZovEde+/J2/+4/NYpYa+LukbxKBqEwsAXvP83dXwrX/3Q80sFLkB4M7z+smJL6+72RvAke11vCEu8/swyvMK5uczycUoXdmxnvP5T9n1wy4448etD/X6sg7z+sWQnRj+CEPEvRVy7xJ+8/ZxpOOK/NYzy15waUbS/vP2gZkmwsa2c8aZDv3CA37z/StcyDGIqAvPrDXVULP+8/b/r/P12tj7x8iQdKLUfvP0mpdTiuDZC88okNCIdP7z+nBz2mhaN0PIek+9wYWO8/DyJAIJ6RgryYg8kW42DvP6ySwdVQWo48hTLbA+Zp7z9LawGsWTqEPGC0AfMhc+8/Hz60ByHVgrxfm3szl3zvP8kNRzu5Kom8KaH1FEaG7z/TiDpgBLZ0PPY/i+cukO8/cXKdUezFgzyDTMf7UZrvP/CR048S94+82pCkoq+k7z99dCPimK6NvPFnji1Ir+8/CCCqQbzDjjwnWmHuG7rvPzLrqcOUK4Q8l7prNyvF7z/uhdExqWSKPEBFblt20O8/7eM75Lo3jrwUvpyt/dvvP53NkU07iXc82JCegcHn7z+JzGBBwQVTPPFxjyvC8+8/EhETFBUWFxgZGhscHR4fICERIiMkESUmJygpKissES0uLxAQMBAQEBAQEBAxMjMQNDUQEBERERERERERERERERERERERERERERERERE2ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERNxERERE4ETk6Ozw9PhERERERERERERERERERERERERERERERERERERERERERERERERERERERERE/EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEUBBEUJDREVGR0hJShFLTE1OT1BREFJTVFVWV1hZWltcXRBeX2AQERERYWJjEBAQEBAQEBAQEBERERFkEBAQEBAQEBAQEBAQEBAQERFlEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQERFmZxAQaGkREREREREREREREREREREREREREREREWoREWsQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEWxtEBAQEBAQEBAQbhAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQb3BxchAQEBAQEBAQc3R1EBAQEBB2dxAQEBB4EBB5EBAQEBAQEBAQEBAQEBA="),L(k,117968,"//////////////////////////////////////////8AAAAAAAAAAP7//wf+//8HAAAAAAAEIAT//3////9//////////////////////////////////8P/AwAfUA=="),L(k,118072,"IAAAAAAA37xA1///+////////////7///////////////////////wP8///////////////////////////+////fwL//////wEAAAAA/7+2AP///4cHAAAA/wf//////////v/D////////////////7x/+4f+fAAD///////8A4P///////////////wMA//////8HMAT////8/x8AAP///wH/BwAAAAAAAP//3z8AAPD/+AP////////////v/9/h/8///v/vn/n///3F459ZgLDP/wMQ7of5///9bcOHGQJewP8/AO6/+////e3jvxsBAM//AB7un/n///3t458ZwLDP/wIA7Mc91hjH/8PHHYEAwP8AAO/f/f///f/j3x1gB8//AADv3/3///3v498dYEDP/wYA79/9/////+ffXfCAz/8A/Oz/f/z///svf4Bf/8D/DAD+/////3//Bz8g/wMAAAAA1vf//6///ztfIP/zAAAAAAEAAAD/AwAA//7///8f/v8D///+////HwAAAAAAAAAA////////f/n/A////////////z//////vyD///////f///////////89fz3//////z3/////PX89/3//////////Pf//////////BwAAAAD//wAA/////////////z8//v//////////////////////////////////////////////////////////n////v//B////////////8f/Af/fDwD//w8A//8PAP/fDQD////////P//8BgBD/AwAAAAD/A///////////////Af//////B///////////PwD///9//w//AcD/////Px8A//////8P////A/8DAAAAAP///w//////////f/7/HwD/A/8DgA=="),L(k,118768,"////////7//vD/8DAAAAAP//////8////////7//AwD///////9/AP/j//////8//wH//////+cAAAAAAN5vBP///////////////////////////////wAAAACA/x8A//8/P/////8/P/+q////P////////99f3B/PD/8f3B8="),L(k,118910,"AoAAAP8f"),L(k,118928,"hPwvPlC9//PgQwAA//////8B"),L(k,118982,"wP///////wMAAP//////f///////f/////////////////////8feAwA/////78g/////////4AAAP//fwB/f39/f39/f/////8AAAAAAIA="),L(k,119088,"4AAAAP4DPh/+////////////f+D+//////////////fg///////+/////////////38AAP///wcAAAAAAAD///////////////////////////////8/"),L(k,119184,"////////////////////////////////////////AAD//////////////////////x8AAAAAAAAAAP//////P/8f////DwAA//////9/8I///////////////////wAAAACA//z////////////////5////////fAAAAAAAgP+//////wAAAP///////w8A//////////8vAP8DAAD86P//////B/////8HAP///x/////////3/wCA/wP///9/////////fwD/P/8D//9//P////////9/BQAAOP//PAB+fn4Af3////////f/AP///////////////////wf/A///////////////////////////DwD//3/4//////8P/////////////////z//////////////////AwAAAAB/APjg//1/X9v/////////////////AwAAAPj///////////////8/AAD///////////z///////8AAAAAAP8P"),L(k,119582,"3/////////////////////8fAAD/A/7//wf+//8HwP////////////9//Pz8HAAAAAD/7///f///t/8//z8AAAAA////////////////////BwAAAAAAAAAA////////Hw=="),L(k,119712,"////H////////wEAAAAAAP////8A4P///wf//////wf///8//////w//PgAAAAAA/////////////////////////z//A/////8P/////w///////wD///////8P"),L(k,119824,"////////fwD//z8A/w=="),L(k,119856,"P/3/////v5H//z8A//9/AP///38AAAAAAAAAAP//NwD//z8A////AwAAAAAAAAAA/////////8AAAAAAAAAAAG/w7/7//z8AAAAAAP///x////8fAAAAAP/+//8fAAAA////////PwD//z8A//8HAP//Aw=="),L(k,119984,"////////////AQAAAAAAAP///////wcA////////BwD//////wD/Aw=="),L(k,120048,"////H4AA//8/"),L(k,120076,"//9/AP//////////PwAAAMD/AAD8////////AQAA////Af8D////////x/9wAP////9HAP//////////HgD/FwAAAAD///v///+fQAAAAAAAAAAAf73/v/8B/////////wH/A++f+f///e3jnxmB4A8="),L(k,120208,"//////////+7B/+DAAAAAP//////////swD/Aw=="),L(k,120256,"////////P38AAAA/AAAAAP////////9/EQD/AwAAAAD///////8/Af8DAAAAAAAA////5/8H/wM="),L(k,120336,"/////////wE="),L(k,120356,"////////////AwCA"),L(k,120388,"//z///////waAAAA////////538AAP///////////yAAAAAA/////////wH//f////9/fwEA/wMAAPz////8///+fw=="),L(k,120464,"f/v/////f7TLAP8Dv/3///9/ewH/Aw=="),L(k,120524,"//9/AP////////////////////////8D"),L(k,120560,"/////////////////38AAP///////////////////////////////w8="),L(k,120624,"//////9/"),L(k,120656,"//////////9/"),L(k,120688,"/////////wH///9//wM="),L(k,120714,"////PwAA////////AAAPAP8D+P//4P//"),L(k,120760,"//////////8="),L(k,120784,"////////////h/////////+A//8AAAAAAAAAAAsAAAD/////////////////////////////////////////AP///////////////////////////////////////wcA////fwAAAAAAAAcA8AD/////////////////////////////////////////////////////////////////D/////////////////8H/x//Af9D"),L(k,120976,"/////////////9///////////99k3v/r7/////////+/59/f////e1/8/f//////////////////////////////////////////////////////P/////3///f////3///f////3///f////3/////9/////f//98////////9////52wc="),L(k,121136,"//////8fgD//Qw=="),L(k,121192,"//////8P/wP///////////////////////////////8fAAAAAAAAAP//////////jwj/Aw=="),L(k,121264,"7////5b+9wqE6paqlvf3Xv/7/w/u+/8P"),L(k,121302,"////A////wP///8D"),L(k,121328,"/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8="),L(k,121601,"ARcCHRgTAx4bGQsUCAQNHxYcEhoKBwwVEQkGEAUPDt4SBJUAAAAA////////////////INsBABQAAABDLlVURi04"),L(k,121696,"TENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVM="),L(k,121776,"Qy5VVEYtOA=="),L(k,121800,"MAUCAE5vIGVycm9yIGluZm9ybWF0aW9uAElsbGVnYWwgYnl0ZSBzZXF1ZW5jZQBEb21haW4gZXJyb3IAUmVzdWx0IG5vdCByZXByZXNlbnRhYmxlAE5vdCBhIHR0eQBQZXJtaXNzaW9uIGRlbmllZABPcGVyYXRpb24gbm90IHBlcm1pdHRlZABObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5AE5vIHN1Y2ggcHJvY2VzcwBGaWxlIGV4aXN0cwBWYWx1ZSB0b28gbGFyZ2UgZm9yIGRhdGEgdHlwZQBObyBzcGFjZSBsZWZ0IG9uIGRldmljZQBPdXQgb2YgbWVtb3J5AFJlc291cmNlIGJ1c3kASW50ZXJydXB0ZWQgc3lzdGVtIGNhbGwAUmVzb3VyY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUASW52YWxpZCBzZWVrAENyb3NzLWRldmljZSBsaW5rAFJlYWQtb25seSBmaWxlIHN5c3RlbQBEaXJlY3Rvcnkgbm90IGVtcHR5AENvbm5lY3Rpb24gcmVzZXQgYnkgcGVlcgBPcGVyYXRpb24gdGltZWQgb3V0AENvbm5lY3Rpb24gcmVmdXNlZABIb3N0IGlzIGRvd24ASG9zdCBpcyB1bnJlYWNoYWJsZQBBZGRyZXNzIGluIHVzZQBCcm9rZW4gcGlwZQBJL08gZXJyb3IATm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzcwBCbG9jayBkZXZpY2UgcmVxdWlyZWQATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAUHJldmlvdXMgb3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABEZXZpY2Ugbm90IGEgc3RyZWFtAE5vIGRhdGEgYXZhaWxhYmxlAERldmljZSB0aW1lb3V0AE91dCBvZiBzdHJlYW1zIHJlc291cmNlcwBMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UARmlsZSBkZXNjcmlwdG9yIGluIGJhZCBzdGF0ZQBOb3QgYSBzb2NrZXQARGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZABNZXNzYWdlIHRvbyBsYXJnZQBQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQAUHJvdG9jb2wgbm90IGF2YWlsYWJsZQBQcm90b2NvbCBub3Qgc3VwcG9ydGVkAFNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWQATm90IHN1cHBvcnRlZABQcm90b2NvbCBmYW1pbHkgbm90IHN1cHBvcnRlZABBZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkIGJ5IHByb3RvY29sAEFkZHJlc3Mgbm90IGF2YWlsYWJsZQBOZXR3b3JrIGlzIGRvd24ATmV0d29yayB1bnJlYWNoYWJsZQBDb25uZWN0aW9uIHJlc2V0IGJ5IG5ldHdvcmsAQ29ubmVjdGlvbiBhYm9ydGVkAE5vIGJ1ZmZlciBzcGFjZSBhdmFpbGFibGUAU29ja2V0IGlzIGNvbm5lY3RlZABTb2NrZXQgbm90IGNvbm5lY3RlZABDYW5ub3Qgc2VuZCBhZnRlciBzb2NrZXQgc2h1dGRvd24AT3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MAT3BlcmF0aW9uIGluIHByb2dyZXNzAFN0YWxlIGZpbGUgaGFuZGxlAFJlbW90ZSBJL08gZXJyb3IAUXVvdGEgZXhjZWVkZWQATm8gbWVkaXVtIGZvdW5kAFdyb25nIG1lZGl1bSB0eXBlAE11bHRpaG9wIGF0dGVtcHRlZABSZXF1aXJlZCBrZXkgbm90IGF2YWlsYWJsZQBLZXkgaGFzIGV4cGlyZWQAS2V5IGhhcyBiZWVuIHJldm9rZWQAS2V5IHdhcyByZWplY3RlZCBieSBzZXJ2aWNl"),L(k,123730,"pQJbAPABtQWMBSUBgwYdA5QE/wDHAzEDCwa8AY8BfwPKBCsA2gavAEIDTgPcAQ4EFQChBg0BlAILAjgGZAK8Av8CXQPnBAsHzwLLBe8F2wXhAh4GRQKFAIICbANvBPEA8wMYBdkA2gNMBlQCewGdA70EAABRABUCuwCzA20A/wGFBC8F+QQ4AGUBRgGfALcGqAFzAlMB"),L(k,123928,"IQQAAAAAAAAAAC8C"),L(k,123960,"NQRHBFYE"),L(k,123982,"oAQ="),L(k,124002,"RgVgBW4FYQYAAM8BAAAAAAAAAADJBukG+QYeBzkHSQdeBw=="),L(k,124048,"GQAKABkZGQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAAZABEKGRkZAwoHAAEACQsYAAAJBgsAAAsABhkAAAAZGRk="),L(k,124129,"DgAAAAAAAAAAGQAKDRkZGQANAAACAAkOAAAACQAOAAAO"),L(k,124187,"DA=="),L(k,124199,"EwAAAAATAAAAAAkMAAAAAAAMAAAM"),L(k,124245,"EA=="),L(k,124257,"DwAAAAQPAAAAAAkQAAAAAAAQAAAQ"),L(k,124303,"Eg=="),L(k,124315,"EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa"),L(k,124370,"GgAAABoaGgAAAAAAAAk="),L(k,124419,"FA=="),L(k,124431,"FwAAAAAXAAAAAAkUAAAAAAAUAAAU"),L(k,124477,"Fg=="),L(k,124489,"FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG"),L(k,124564,"EQ=="),L(k,124604,"//////////8="),L(k,124672,"0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNsAAAAAIAAAAAkAAAAKAAAADQAAAAsAAAAMAAAAhQAAAAAgAAABIAAAAiAAAAMgAAAEIAAABSAAAAYgAAAIIAAACSAAAAogAAAoIAAAKSAAAF8gAAAAMAAAAAAAAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAAAAAGjpAQB46AEAZOoBAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAAGjpAQCo6AEAnOgBAE4xMF9fY3h4YWJpdjExN19fcGJhc2VfdHlwZV9pbmZvRQAAAGjpAQDY6AEAnOgBAE4xMF9fY3h4YWJpdjExOV9fcG9pbnRlcl90eXBlX2luZm9FAGjpAQAI6QEA/OgBAAAAAADM6AEAFAAAABUAAAAWAAAAFwAAABgAAAAZAAAAGgAAABsAAAAAAAAAsOkBABQAAAAcAAAAFgAAABcAAAAYAAAAHQAAAB4AAAAfAAAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAGjpAQCI6QEAzOgBAAAAAAAg6gEACQAAACAAAAAhAAAAAAAAAEjqAQAJAAAAIgAAACMAAAAAAAAACOoBAAkAAAAkAAAAJQAAAFN0OWV4Y2VwdGlvbgAAAABA6QEA+OkBAFN0OWJhZF9hbGxvYwAAAABo6QEAEOoBAAjqAQBTdDIwYmFkX2FycmF5X25ld19sZW5ndGgAAAAAaOkBACzqAQAg6gEAU3Q5dHlwZV9pbmZvAAAAAEDpAQBU6gE="),L(k,125552,"wLEAAMCyAADAswAAwLQAAMC1AADAtgAAwLcAAMC4AADAuQAAwLoAAMC7AADAvAAAwL0AAMC+AADAvwAAwMAAAMDBAADAwgAAwMMAAMDEAADAxQAAwMIAAMDGAADAxwAAwMgAAMDJAADAygAAwMsAAMDMAADAzQAAwM4AAMDPAADA0AAAwNEAAMDSAADA0wAAwNQAAMDVAADA1gAAwNcAAMDYAADA2QAAwNIAAMDaAADA2wAAwNwAAMDdAADA3gAAwN8AAMDgAADA4QAAwNgAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA4gAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwOMAAMDkAADAwgAAwMIAAMDCAADA5QAAwMIAAMDmAADA5wAAwOgAAMDpAADA6gAAwOsAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA7AAAwO0AAMDCAADA7gAAwO8AAMDCAADA8AAAwPEAAMDyAADA8wAAwPQAAMD1AADA9gAAwPcAAMD4AADAwgAAwPkAAMD6AADA+wAAwPwAAMD9AADA/gAAwP8AAMAAAQDAAQEAwAIBAMADAQDABAEAwAUBAMAGAQDABwEAwAgBAMAJAQDACgEAwAsBAMAMAQDACwEAwA0BAMAOAQDADwEAwAsBAMDCAADAwgAAwMIAAMAQAQDAEQEAwBIBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMDCAADAwgAAwBMBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBQBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBUBAMAWAQDACwEAwAsBAMAXAQDAGAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAGQEAwMIAAMDCAADAGgEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAGwEAwBwBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMAdAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwB4BAMAfAQDAIAEAwCEBAMAiAQDAIwEAwCQBAMAlAQDA2AAAwNgAAMAmAQDACwEAwAsBAMALAQDACwEAwAsBAMAnAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwCgBAMApAQDACwEAwAsBAMAqAQDACwEAwCsBAMALAQDALAEAwC0BAMAuAQDALwEAwNgAAMDYAADAMAEAwDEBAMAyAQDAMwEAwDQBAMALAQDACwEAwAsBAMALAQDACwEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA1AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwDYBAMA3AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAOAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA5AQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMA6AQDAOwEAwDwB"),L(k,128496,"oVcBAEEAAADdVwEAQgAAACZYAQBDAAAAa1gBAEQAAADSWAEARQAAABNZAQBGAAAAfFkBAEcAAACEWQEASAAAADBaAQBJAAAAZ1oBAEoAAADuWgEASwAAAC5bAQBMAAAAcVsBAE0AAADZWwEATgAAAGtcAQBPAAAAh1wBAAgAAADcXAEACQAAAB9dAQAKAAAAZ10BAAsAAACVXQEADAAAAMpdAQANAAAAD14BAA4AAAAqXgEADwAAAIZeAQAPAAAAvV4BABAAAABDXwEAEQAAAH1fAQASAAAAq18BABMAAADZXwEAFAAAAAVgAQAVAAAAMGABABcAAABgYAEAGAAAAHlgAQAZAAAAtWABABsAAADdYAEAHAAAAPBgAQAdAAAAI2EBACAAAABEYQEAIQAAAG9hAQAiAAAAnWEBACMAAADRYQEAJAAAAPNhAQAlAAAAFWIBACYAAABZYgEAKAAAAH1iAQApAAAArmIBACoAAADoYgEAKwAAADVjAQAtAAAAb2MBAC4AAACnYwEALwAAAOZjAQAwAAAAeGQBADEAAACdZAEAMgAAAM9kAQAzAAAA/mQBAGQAAABgZQEAyAAAAN1lAQDJAAAAAAAAAP////8iZgEAAQAAAD5mAQACAAAABVUBAAMAAADNZgEAEQAAADRnAQASAAAAg2cBABMAAAD7ZwEAFAAAADtoAQAVAAAATGgBABYAAAB0aAEAEQAAALdoAQAhAAAAymgBACIAAAD+aAEAIwAAAEtpAQAkAAAAaWkBACUAAACfaQEAJgAAAOJpAQAhAAAAAAAAAP////8AAAAAAAAAACYAAAAAAAAAAQAAAJByAQABAAAAkHMBAAEAAACQdAEAAQAAAJB1AQABAAAAkHYBAAEAAACQdwEAAQAAAJB4AQABAAAAkHkBAAEAAACQegEAAQAAAJB7AQABAAAAkHwBAAEAAACQfQEAAQAAAJB+AQABAAAAkH8BAAEAAACQgAEAAQAAAJCBAQABAAAAkIIBAAUAAAAAAAAABg=="),L(k,129280,"oIMBAKCDAQAghAEAIIQBAKCEAQAghQEAoIUBACCGAQCghgEAoIYBACCHAQAghwEAoIcBAKCHAQAgiAEAIIgBAKCIAQCgiAEAIIkBACCJAQAuOU4ycIoBAAMHBQCQigEALjlOLnCKAQADBwUAkIoBAC45Ti5wigEAAwcFAJCKAQAuOVoycIoBAAMJBQCVigEALjlOMnCKAQADBwUAkIoBAC45SjdwigEABAcFAJqKAQAuOUo3cIoBAAQHBQCaigEALjlKN3CKAQAEBwUAmooBAC45TjJwigEAAwcFAJCKAQAuOU4ucIoBAAMHBQCQigEALjlOMnCKAQADBwUAkIoBACIpKSBwigEAAwcFAJqKAQAuOTcycIoBAAMHBQCaigEAo1MBABABAAAAVAEADAEAANJUAQARAQAAClUBACMAAAB/VQEAGwAAADRWAQAVAAAAxVYBAAABAAABVwEAAgEAAE1XAQADAQAAvVcBAAQBAAD7VwEABQEAAE5YAQATAAAAkVgBAB4AAADVWAEAFwAAAF9ZAQAaAAAAkVkBABkAAAD0WQEAGAAAADhaAQAdAAAAzloBABwAAAAPWwEAFgAAADdbAQAU"),L(k,129744,"Q1gBABABAACIWAEADAEAAPNYAQARAQAAM1kBACMAAACHWQEAGwAAAOBZAQAVAAAAQloBAAABAACcWgEAAgEAAABbAQADAQAAT1sBAAQBAACnWwEABQEAAEhcAQATAAAAc1wBAB4AAADEXAEAFwAAABVdAQAaAAAAXV0BABkAAACIXQEAGAAAANJdAQAdAAAABF4BABwAAAAvXgEAFgAAAF9eAQAU"),L(k,129920,"u08BAAEAAABcUAEAAAAAAM9QAQAAAAAAOFIBAAAAAABBUwEAAAAAAIFTAQAAAAAA+1MBAAAAAADnVAEAAAAAACVVAQAAAAAAiVUBAAAAAABUVgEAAAAAAPxWAQAAAAAADlcBAAAAAABIVwEAAAAAAKdXAQAAAAAA9lcBAAAAAAA3WAEAAAAAAKNYAQAAAAAA6FgBAAAAAAAuWQEAAAAAAH9ZAQAAAAAA61kBAAAAAAD/////g00BAIIAAAB5AAAAdg=="),L(k,130128,"4I8BAOCPAQBQkAEAwJABAMCQAQDAkAEAAQAAANQKAwCMCgMAROcC"),L(k,130176,"I0sBAAEAAAAAAAAA/////1dMAQABAAAA+0wBAAIAAADGTQEAAwAAAAAAAAD/////Vk4BAAAAAADSTgEAAQAAALJPAQACAAAAGFABABQAAAAAAAAA/////wAAAAAAAAAAt1ABABIAAABNUgEAFAAAAN5SAQAkAAAAhlMBAEAAAAARVAEAwQAAAAAAAAD/////q1QBAAEAAAAAAAAA/////1dMAQAAAAAAGVUBAAEAAACRVQEAAgAAAENWAQADAAAA31YBAAQAAAAgVwEABQAAAAAAAAD/////AAAAAAAAAABXTAEAAQAAAIlXAQACAAAAr1cBAAMAAADfVgEABAAAACBXAQAFAAAAAAAAAP////8AAAAAClgBADxYAQAYUAEAqFgB"),L(k,130480,"8l8BAAEAAAA5YAEAAgAAAFhgAQADAAAAgWABAAQAAACwYAEABQAAANNgAQAGAAAABWEBAAcAAAAqYQEACAAAAFFhAQAJAAAAdmEBAAoAAACQYQEACwAAAMNhAQAMAAAA+WEBAA0AAAAuYgEADgAAAE5iAQAPAAAAhmIBAA8AAADUYgEADwAAABljAQAPAAAAP2MBAA8AAACkYwEABwAAANpjAQAHAAAAO2QBAAcAAACEZAEABwAAAK9kAQAHAAAAw2QBAA4AAADnZAEADgAAAAplAQAQAAAA9GUBABAAAAArZgEAEAAAAN9WAQAQAAAAbmYBABAAAADBZgEAEA=="),L(k,130752,"f20BAD4AAACjbQEAPOAAAM1tAQAmAAAA1G0BACIAAAA6bgEAIAAAAHhuAQAnAAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAxWcBAAAAAAAJaAEAHgAAAEJoAQBBAAAAQ1YBAGQAAACGaAEAlgAAAKVoAQDmAAAAAAAAAP////9jZwEAZAAAAL5oAQA8AAAA6WgBAFAAAABDVgEAZAAAABJpAQB9AAAAUmkBAKAAAAAAAAAA/////wAAAAAAAAAAY2cBAGQAAACUaQEARgAAAN5pAQBVAAAAQ1YBAGQAAAAoagEAbgAAAGdqAQB4AAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAlGkBABQAAADeaQEAMgAAAENWAQBkAAAAKGoBAIwAAABnagEAtAAAAAAAAAD/////"),L(k,131076,"QP8BAAD/AQCA/wEAwP8B"),L(k,131104,"wmoBACDgAAALawEACeAAAEFrAQBf4AAAe2sBACI="),L(k,131152,"q2sBAAEAAAC8awEAAgAAAA1sAQAD"),L(k,131184,"+EwBAMJNAQBTTgEACU8BAOVPAQBkUAEA2lABAGdSAQDyUgEA1FMBAGFUAQ=="),L(k,131236,"iFIBADlTAQAAAAAAnlMBAGRUAQDwVAEAL1UBAJpVAQBQVgE="),L(k,131280,"Y1IBAIADAACAA/8DbGUAAAcAAAA0UwEAIAQAAAAELwUAAAAAAAAAAHNTAQAwBQAAMAWPBXloAAAEAAAAG1QBAJAFAACQBf8FAAAAAAAAAAC3VAEAAAYAAAAG/wYAAAAAAAAAACpVAQAABwAAAAdPBwAAAAAAAAAAllUBAAAJAAAACX8JaWgAAAQAAAA/VgEAgAkAAIAJ/wluYgAABAAAANZWAQAACgAAAAp/CmFwAAAEAAAAClcBAIAKAACACv8KdWcAAAQAAABfVwEAAAsAAAALfwsAAAAAAAAAAM5XAQCACwAAgAv/C2F0AAAEAAAAD1gBAAAMAAAADH8MZXQAAAAAAAAsWAEAgAwAAIAM/wxuawAABAAAAJ9YAQAADQAAAA1/DWxtAAAEAAAA5FgBAIANAACADf8NaXMAAAQAAAA8WQEAAA4AAAAOfw4AAAAAAAAAAJtZAQCADgAAgA7/DgAAAAAAAAAA8FkBAAAPAAAAD/8PAAAAAAAAAAA0WgEAABAAAAAQnxAAAAAAAAAAANlaAQCgEAAAoBD/EGFrAAAEAAAAGFsBAAARAAAAEf8Rb2sAAAQAAABKWwEAABIAAAASnxMAAAAAAAAAALlbAQAAKAAAACj/KAAAAAAQAAAAWlwBAEAwAABAMP8wAAAAAAgAAACDXAEAADEAAAAx/58AAAAACAAAABhbAQAApwAAAKf/129rAAAM"),L(k,131840,"WAIAAKoAAACwBAAAhwAAANAHAABuAAAAuAsAAG4AAAD/////"),L(k,131888,"qAsD"),L(k,131904,"mF4BAAEAAAA4XwEAAgAAAGFfAQADAAAAnV8BAAYAAADCXwEACQAAAPhfAQAKAAAAJ2ABAAQAAABNYAEABQAAAI1gAQAkAAAAq2ABAAsAAADVYAEADAAAAPZgAQANAAAAFmEBAA4AAABMYQEADwAAAGdhAQAQAAAAlmEBABEAAAC7YQEAEgAAAAJiAQAfAAAAG2IBACUAAABIYgEAIAAAAJJiAQAhAAAAzmIBACIAAADwYgEABwAAAC5jAQAI"),L(k,132112,"jmMBAAEAAAC8YwEAAgAAAAAAAAABAAAAFJwBACCcAQAsnAEAPAAAABo="),L(k,132163,"AgMFCAsOEhYbICUrMTc+RUxTWmJpcXmAiJCYn6autbzCyc/V2uDk6e3w9Pb5+/z9/f39/Pv59vTw7enk4NrVz8nCvLWupp+YkIiAeXFpYlpTTEU+NzErJSAbFhIOCwgFAwI="),L(k,132288,"QAAAAAABAAAAAAAA7AQCACcAAAAoAAAAKQAAACoAAAArAAAAQOkBAMO2AQBo6QEAsLYBAOQEAgAAAAAAJAUCACwAAAAtAAAALgAAAC8AAABA6QEAArcBAGjpAQDstgEAEAUCAGjpAQDStgEAGAUCAAU="),L(k,132412,"DQ=="),L(k,132436,"CwAAAAoAAADoeAM="),L(k,132460,"Ag=="),L(k,132476,"//////////8="),L(k,132544,"MAUCAAAAAAAF"),L(k,132564,"MA=="),L(k,132588,"CwAAADEAAAD4eAMAAAQ="),L(k,132612,"AQ=="),L(k,132628,"/////wo="),L(k,132696,"yAUCAAB/BA==");var li,lt=(li=[null,function(e){var t,r=0;return r=A[(e|=0)>>2],A[e>>2]=r+1,r=255&(t=g[0|r]),(0|t)<0&&(r=M[(A[e+12>>2]+(r<<1)|0)-256>>1]),0|r},Ln,function(e){var t,r;return t=A[(e|=0)>>2],r=A[t>>2],A[e>>2]=t+4,0|r},function(e){var t=0,r=0;return t=A[(e|=0)>>2],(0|(r=de(e)))==65533&&(A[e>>2]=t+1,A[e+8>>2]=1,r=255&(t=g[0|t]),(0|t)>=0||(r=M[(A[e+12>>2]+(r<<1)|0)-256>>1])),0|r},de,function(e){var t,r,a=0;return(a=A[4+(e|=0)>>2])>>>0<=(r=(t=A[e>>2])+1|0)>>>0?(A[e>>2]=a,65533):(A[e>>2]=r,a=l[0|t],A[e>>2]=t+2,a|l[t+1|0]<<8)},function(e,t){var r,a,s;return t|=0,e=A[(e|=0)>>2],r=A[e+4>>2],a=A[t>>2],(t=vr(r+1|0,(s=A[a+4>>2])+1|0))||(t=g[0|r]-g[0|s]|0)||(t=vr(A[e>>2],A[a>>2])),0|t},function(e,t){var r;return e|=0,t=A[(t|=0)>>2],r=A[e>>2],(e=A[t+16>>2]-A[r+16>>2]|0)||(e=vr(A[r>>2],A[t>>2])),0|e},Zi,function(e,t,r,a){var s;return t|=0,r|=0,a|=0,J=s=J-16|0,(e=0|ve(A[60+(e|=0)>>2],0|t,0|r,255&a,s+8|0))?(A[56798]=e,e=-1):e=0,J=s+16|0,$=e?-1:A[s+12>>2],0|(e?-1:A[s+8>>2])},function(e,t,r){t|=0,r|=0;var a,s=0,i=0,o=0,c=0,f=0,m=0;J=a=J-32|0,s=A[28+(e|=0)>>2],A[a+16>>2]=s,o=A[e+20>>2],A[a+28>>2]=r,A[a+24>>2]=t,t=o-s|0,A[a+20>>2]=t,o=t+r|0,f=2;A:{e:{t=a+16|0,(s=0|GA(A[e+60>>2],0|t,2,a+12|0))?(A[56798]=s,s=-1):s=0;r:{if(s)s=t;else for(;;){if((0|(i=A[a+12>>2]))==(0|o))break r;if((0|i)<0){s=t;break e}if(c=i-((m=(c=A[t+4>>2])>>>0<i>>>0)?c:0)|0,A[(s=(m<<3)+t|0)>>2]=c+A[s>>2],A[(t=(m?12:4)+t|0)>>2]=A[t>>2]-c,o=o-i|0,t=s,f=f-m|0,(i=0|GA(A[e+60>>2],0|t,0|f,a+12|0))?(A[56798]=i,i=-1):i=0,i)break}if((0|o)!=-1)break e}t=A[e+44>>2],A[e+28>>2]=t,A[e+20>>2]=t,A[e+16>>2]=t+A[e+48>>2],e=r;break A}A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,A[e>>2]=32|A[e>>2],e=0,(0|f)!=2&&(e=r-A[s+4>>2]|0)}return J=a+32|0,0|e},function(e,t,r){e|=0,t|=0,r|=0;var a,s=0,i=0,o=0;J=a=J-32|0,A[a+16>>2]=t,s=A[e+48>>2],A[a+20>>2]=r-!!(0|s),i=A[e+44>>2],A[a+28>>2]=s,A[a+24>>2]=i;A:{e:{if((s=0|Pe(A[e+60>>2],a+16|0,2,a+12|0))?(A[56798]=s,s=-1):s=0,s)t=32;else{if((0|(s=A[a+12>>2]))>0)break e;t=s?32:16}A[e>>2]=t|A[e>>2];break A}o=s,(i=A[a+20>>2])>>>0>=s>>>0||(s=A[e+44>>2],A[e+4>>2]=s,A[e+8>>2]=s+(o-i|0),A[e+48>>2]&&(A[e+4>>2]=s+1,g[(t+r|0)-1|0]=l[0|s]),o=r)}return J=a+32|0,0|o},function(e){return 0|Ge(A[60+(e|=0)>>2])},Es,function(e,t,r,a,s,i){e|=0,t=+t,r|=0,a|=0,s|=0,i|=0;var o,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0,le=0;J=o=J-560|0,A[o+44>>2]=0,CA(+t),c=0|X(1),X(0),(0|c)<0?(hA=1,re=84997,CA(+(t=-t)),c=0|X(1),X(0)):2048&s?(hA=1,re=85e3):(re=(hA=1&s)?85003:84998,le=!hA);A:if(2146435072&~c){QA=o+16|0;e:{r:{s:{if(t=mn(t,o+44|0),(t+=t)!=0){if(c=A[o+44>>2],A[o+44>>2]=c-1,(0|(WA=32|i))!=97)break s;break e}if((0|(WA=32|i))==97)break e;I=A[o+44>>2],E=(0|a)<0?6:a;break r}I=c-29|0,A[o+44>>2]=I,t*=268435456,E=(0|a)<0?6:a}for(f=AA=(o+48|0)+((0|I)>=0?288:0)|0;a=t<4294967296&t>=0?~~t>>>0:0,A[f>>2]=a,f=f+4|0,(t=1e9*(t-+(a>>>0)))!=0;);if((0|I)<=0)a=I,c=f,m=AA;else for(m=AA,a=I;;){if(O=(0|a)>=29?29:a,!(m>>>0>(c=f-4|0)>>>0)){for(a=0;p=A[c>>2],KA=a,a=31&O,(63&O)>>>0>=32?(T=p<<a,a=0):(T=(1<<a)-1&p>>>32-a,a=p<<a),p=T+Z|0,a=oi(KA=KA+a|0,a>>>0>KA>>>0?p+1|0:p,1e9),A[c>>2]=KA-bt(a,$,1e9,0),m>>>0<=(c=c-4|0)>>>0;);a&&(A[(m=m-4|0)>>2]=a)}for(;m>>>0<(c=f)>>>0&&!A[(f=c-4|0)>>2];);if(a=A[o+44>>2]-O|0,A[o+44>>2]=a,f=c,!((0|a)>0))break}if((0|a)<0)for(vA=1+((E+25>>>0)/9|0)|0,Z=(0|WA)==102;;){if(T=(0|(a=0-a|0))>=9?9:a,c>>>0<=m>>>0)f=A[m>>2];else{for(O=1e9>>>T|0,p=~(-1<<T),a=0,f=m;KA=a,a=A[f>>2],A[f>>2]=KA+(a>>>T|0),a=P(O,a&p),(f=f+4|0)>>>0<c>>>0;);f=A[m>>2],a&&(A[c>>2]=a,c=c+4|0)}if(a=T+A[o+44>>2]|0,A[o+44>>2]=a,m=(!f<<2)+m|0,c=c-(f=Z?AA:m)>>2>(0|vA)?f+(vA<<2)|0:c,!((0|a)<0))break}if(a=0,!(c>>>0<=m>>>0||(a=P(AA-m>>2,9),f=10,(p=A[m>>2])>>>0<10)))for(;a=a+1|0,p>>>0>=(f=P(f,10))>>>0;);if((0|(f=(E-((0|WA)!=102?a:0)|0)-((0|WA)==103&!!(0|E))|0))<(P(c-AA>>2,9)-9|0)){if(I=((((0|I)<0?4:292)+o|0)+((p=(0|(O=f+9216|0))/9|0)<<2)|0)-4048|0,f=10,(0|(T=O-P(p,9)|0))<=7)for(;f=P(f,10),(0|(T=T+1|0))!=8;);if(!(!(Z=(O=A[I>>2])-P(f,vA=(O>>>0)/(f>>>0)|0)|0)&(0|(p=I+4|0))==(0|c))&&(!(1&vA)&&(t=9007199254740992,!(1&g[I-4|0])|(0|f)!=1e9|m>>>0>=I>>>0)||(t=9007199254740994),cA=(0|c)==(0|p)?1:1.5,cA=(p=f>>>1|0)>>>0>Z>>>0?.5:(0|p)==(0|Z)?cA:1.5,l[0|re]!=45|le||(cA=-cA,t=-t),p=O-Z|0,A[I>>2]=p,t+cA!=t)){if(a=f+p|0,A[I>>2]=a,a>>>0>=1e9)for(;A[I>>2]=0,(I=I-4|0)>>>0<m>>>0&&(A[(m=m-4|0)>>2]=0),a=A[I>>2]+1|0,A[I>>2]=a,a>>>0>999999999;);if(a=P(AA-m>>2,9),f=10,!((p=A[m>>2])>>>0<10))for(;a=a+1|0,p>>>0>=(f=P(f,10))>>>0;);}c=c>>>0>(f=I+4|0)>>>0?f:c}for(;p=c,!(O=c>>>0<=m>>>0)&&!A[(c=p-4|0)>>2];);if((0|WA)==103){if(E=((c=(0|(f=E||1))>(0|a)&(0|a)>-5)?~a:-1)+f|0,i=(c?-1:-2)+i|0,!(I=8&s)){if(c=-9,!O&&(I=A[p-4>>2])&&(T=10,c=0,!((I>>>0)%10|0))){for(;f=c,c=c+1|0,!((I>>>0)%((T=P(T,10))>>>0)|0););c=~f}f=P(p-AA>>2,9),(-33&i)!=70?(I=0,E=(0|(c=(0|(c=((a+f|0)+c|0)-9|0))>0?c:0))>(0|E)?E:c):(I=0,E=(0|(c=(0|(c=(c+f|0)-9|0))>0?c:0))>(0|E)?E:c)}}else I=8&s;if(T=-1,(0|((O=I|E)?2147483645:2147483646))<(0|E))break A;if(Z=1+(!!(0|O)+E|0)|0,(0|(f=-33&i))!=70){if((QA-(c=ds(((c=a>>31)^a)-c|0,0,QA))|0)<=1)for(;g[0|(c=c-1|0)]=48,(QA-c|0)<2;);if(g[0|(vA=c-2|0)]=i,g[c-1|0]=(0|a)<0?45:43,(0|(c=QA-vA|0))>(2147483647^Z))break A}else{if((2147483647^Z)<(0|a))break A;c=(0|a)>0?a:0}if((0|(a=c+Z|0))>(2147483647^hA))break A;ra(e,32,r,Z=a+hA|0,s),Zr(e,re,hA),ra(e,48,r,Z,65536^s);r:{s:{i:{if((0|f)==70){for(a=8|(i=o+16|0),I=9|i,m=f=m>>>0>AA>>>0?AA:m;;){c=ds(A[m>>2],0,I);c:if((0|f)==(0|m))(0|c)==(0|I)&&(g[o+24|0]=48,c=a);else{if(o+16>>>0>=c>>>0)break c;for(;g[0|(c=c-1|0)]=48,o+16>>>0<c>>>0;);}if(Zr(e,c,I-c|0),!(AA>>>0>=(m=m+4|0)>>>0))break}if(O&&Zr(e,85998,1),(0|E)<=0|m>>>0>=p>>>0)break i;for(;;){if((c=ds(A[m>>2],0,I))>>>0>o+16>>>0)for(;g[0|(c=c-1|0)]=48,o+16>>>0<c>>>0;);if(Zr(e,c,(0|E)>=9?9:E),c=E-9|0,p>>>0<=(m=m+4|0)>>>0)break s;if(a=(0|E)>9,E=c,!a)break}break s}c:if(!((0|E)<0))for(AA=m>>>0<p>>>0?p:m+4|0,a=8|(i=o+16|0),p=9|i,f=m;;){(0|p)==(0|(c=ds(A[f>>2],0,p)))&&(g[o+24|0]=48,c=a);o:if((0|f)==(0|m))Zr(e,c,1),c=c+1|0,I|E&&Zr(e,85998,1);else{if(o+16>>>0>=c>>>0)break o;for(;g[0|(c=c-1|0)]=48,o+16>>>0<c>>>0;);}if(Zr(e,c,(0|(i=p-c|0))>(0|E)?E:i),E=E-i|0,AA>>>0<=(f=f+4|0)>>>0)break c;if(!((0|E)>=0))break}ra(e,48,E+18|0,18,0),Zr(e,vA,QA-vA|0);break r}c=E}ra(e,48,c+9|0,9,0)}ra(e,32,r,Z,8192^s),T=(0|r)<(0|Z)?Z:r;break A}if(I=(i<<26>>31&9)+re|0,!(a>>>0>11)){for(c=12-a|0,cA=16;cA*=16,c=c-1|0;);t=l[0|I]!=45?t+cA-cA:-(cA+(-t-cA))}for((0|QA)==(0|(c=ds(((c=A[o+44>>2])^(f=c>>31))-f|0,0,QA)))&&(g[o+15|0]=48,c=o+15|0),AA=2|hA,m=32&i,f=A[o+44>>2],g[0|(E=c-2|0)]=i+15,g[c-1|0]=(0|f)<0?45:43,c=8&s,f=o+16|0;i=f,p=SA(t)<2147483648?~~t:-2147483648,g[0|f]=m|l[p+124512|0],!((0|a)>0|c)&(t=16*(t-+(0|p)))==0|((f=i+1|0)-(o+16|0)|0)!=1||(g[i+1|0]=46,f=i+2|0),t!=0;);T=-1,(2147483645-(i=(c=QA-E|0)+AA|0)|0)<(0|a)||(ra(e,32,r,i=(a=!a||((m=f-(o+16|0)|0)-2|0)>=(0|a)?m=f-(o+16|0)|0:a+2|0)+i|0,s),Zr(e,I,AA),ra(e,48,r,i,65536^s),Zr(e,o+16|0,m),ra(e,48,a-m|0,0,0),Zr(e,E,c),ra(e,32,r,i,8192^s),T=(0|r)<(0|i)?i:r)}else ra(e,32,r,c=hA+3|0,-65537&s),Zr(e,re,hA),a=32&i,Zr(e,t!=t?a?85596:85774:a?85247:85460,3),ra(e,32,r,c,8192^s),T=(0|r)<(0|c)?c:r;return J=o+560|0,0|T},function(e,t){var r;e|=0,r=t|=0,t=A[t>>2]+7&-8,A[r>>2]=t+16,D[e>>3]=Bs(A[t>>2],A[t+4>>2],A[t+8>>2],A[t+12>>2])},function(e,t,r){t|=0,r|=0;var a,s,i=0,o=0;return a=A[84+(e|=0)>>2],o=A[a+4>>2],s=A[e+28>>2],(i=(i=A[e+20>>2]-s|0)>>>0>o>>>0?o:i)&&(wt(A[a>>2],s,i),A[a>>2]=i+A[a>>2],o=A[a+4>>2]-i|0,A[a+4>>2]=o),i=A[a>>2],(o=r>>>0>o>>>0?o:r)&&(wt(i,t,o),i=o+A[a>>2]|0,A[a>>2]=i,A[a+4>>2]=A[a+4>>2]-o),g[0|i]=0,t=A[e+44>>2],A[e+28>>2]=t,A[e+20>>2]=t,0|r},function(e,t,r){r|=0;var a,s,i=0;return wt(t|=0,a=A[84+(e|=0)>>2],r=r>>>0>(i=(s=ei(a,0,i=r+256|0))?s-a|0:i)>>>0?i:r),t=a+i|0,A[e+84>>2]=t,A[e+8>>2]=t,A[e+4>>2]=r+a,0|r},function(e,t,r){t|=0,r|=0;var a,s=0,i=0,o=0;s=A[84+(e|=0)>>2],a=A[s>>2]?s:84412,s=0;A:if(A[e+48>>2])for(;;){if(!(i=A[(s<<2)+a>>2]))break A;if(g[A[e+44>>2]+s|0]=(0|i)>=128?64:i,!((s=s+1|0)>>>0<uA[e+48>>2]))break}return i=A[e+44>>2],A[e+4>>2]=i,A[e+84>>2]=(s<<2)+a,A[e+8>>2]=s+i,!r|!s||(A[e+4>>2]=i+1,g[0|t]=l[0|i],o=1),0|o},Zi,js,y0,y0,function(e,t,r){r|=0;var a,s=0;return J=a=J+-64|0,s=1,_a(e|=0,t|=0,0)||(s=0,t&&(s=0,(t=sr(t,125132))&&(je(4|(s=a+8|0),0,52),A[a+56>>2]=1,A[a+20>>2]=-1,A[a+16>>2]=e,A[a+8>>2]=t,lt[A[A[t>>2]+28>>2]](t,s,A[r>>2],1),(0|(e=A[a+32>>2]))==1&&(A[r>>2]=A[a+24>>2]),s=(0|e)==1))),J=a- -64|0,0|s},function(e,t,r,a,s,i){r|=0,a|=0,s|=0,i|=0,_a(e|=0,A[8+(t|=0)>>2],i)&&mi(t,r,a,s)},function(e,t,r,a,s){if(r|=0,a|=0,s|=0,_a(e|=0,A[8+(t|=0)>>2],s))A[t+28>>2]==1|A[t+4>>2]!=(0|r)||(A[t+28>>2]=a);else A:if(_a(e,A[t>>2],s)){if(!(A[t+16>>2]!=(0|r)&A[t+20>>2]!=(0|r))){if((0|a)!=1)break A;return void(A[t+32>>2]=1)}A[t+20>>2]=r,A[t+32>>2]=a,A[t+40>>2]=A[t+40>>2]+1,A[t+36>>2]!=1|A[t+24>>2]!=2||(g[t+54|0]=1),A[t+44>>2]=4}},function(e,t,r,a){r|=0,a|=0,_a(e|=0,A[8+(t|=0)>>2],0)&&m0(t,r,a)},js,function(e,t,r,a,s,i){r|=0,a|=0,s|=0,i|=0,_a(e|=0,A[8+(t|=0)>>2],i)?mi(t,r,a,s):(e=A[e+8>>2],lt[A[A[e>>2]+20>>2]](e,t,r,a,s,i))},function(e,t,r,a,s){if(r|=0,a|=0,s|=0,_a(e|=0,A[8+(t|=0)>>2],s))A[t+28>>2]==1|A[t+4>>2]!=(0|r)||(A[t+28>>2]=a);else A:{if(_a(e,A[t>>2],s)){if(!(A[t+16>>2]!=(0|r)&A[t+20>>2]!=(0|r))){if((0|a)!=1)break A;return void(A[t+32>>2]=1)}A[t+32>>2]=a;e:if(A[t+44>>2]!=4){if(b[t+52>>1]=0,e=A[e+8>>2],lt[A[A[e>>2]+20>>2]](e,t,r,r,1,s),l[t+53|0]){if(A[t+44>>2]=3,!l[t+52|0])break e;break A}A[t+44>>2]=4}if(A[t+20>>2]=r,A[t+40>>2]=A[t+40>>2]+1,A[t+36>>2]!=1|A[t+24>>2]!=2)break A;return void(g[t+54|0]=1)}e=A[e+8>>2],lt[A[A[e>>2]+24>>2]](e,t,r,a,s)}},function(e,t,r,a){r|=0,a|=0,_a(e|=0,A[8+(t|=0)>>2],0)?m0(t,r,a):(e=A[e+8>>2],lt[A[A[e>>2]+28>>2]](e,t,r,a))},js,function(e){return 84787},js,function(e){return 85058},js,function(e){return 84147},function(e){var t;return t=e|=0,e=A[e>>2],A[t>>2]=e+1,0|((0|(e=g[0|e]))<0?65533:255&e)},function(e,t,r,a,s,i){e|=0,t|=0,r|=0,a|=0,s|=0,i|=0;var o,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0;if(o=Fa(408),A[o+4>>2]=a,A[o>>2]=r,t?(wt(o+16|0,t,376),D[o+392>>3]=(D[t+368>>3]-D[t>>3])/+(r>>>0),t=0):t=1,A[o+400>>2]=s,g[o+8|0]=t,i){if(r=A[e+24>>2])for(t=A[e+20>>2],a=A[e+8>>2];(s=A[A[(t>>>8&16777212)+a>>2]+((1023&t)<<2)>>2])&&(xt(s),r=A[e+24>>2],a=A[e+8>>2],t=A[e+20>>2]),t=t+1|0,A[e+20>>2]=t,r=r-1|0,A[e+24>>2]=r,t>>>0>=2048&&(xt(A[a>>2]),a=A[e+8>>2]+4|0,A[e+8>>2]=a,t=A[e+20>>2]-1024|0,A[e+20>>2]=t,r=A[e+24>>2]),r;);t=A[e+28>>2],A[e+420>>2]=A[t>>2],(r=A[e+32>>2])&&(g[t+8|0]=l[r+8|0],wt(t+16|0,e+40|0,376),(t=A[e+32>>2])&&xt(t),A[e+32>>2]=0)}if(r=(a=A[e+24>>2])+A[e+20>>2]|0,s=A[e+12>>2],(0|r)==(0|((0|(t=A[e+8>>2]))!=(0|s)?(s-t<<8)-1:0))){J=c=J-32|0;A:{e:{r:{s:{if((t=A[16+(i=e+4|0)>>2])>>>0>=1024){if(A[i+16>>2]=t-1024,t=A[i+4>>2],E=A[t>>2],s=t+4|0,A[i+4>>2]=s,(0|(t=A[i+8>>2]))==A[i+12>>2])if((f=A[i>>2])>>>0<s>>>0)r=Yt((a=(1+(s-f>>2)|0)/-2<<2)+s|0,s,t=t-s|0)+t|0,A[i+8>>2]=r,A[i+4>>2]=a+A[i+4>>2];else{if((r=(0|t)==(0|f)?1:t-f>>1)>>>0>=1073741824)break s;if(T=(a=r<<2)+(m=Fa(a))|0,r=a=m+(-4&r)|0,(0|t)!=(0|s)){if(O=-4&(t=t-s|0),I=1+((p=t-4|0)>>>2|0)&7)for(r=0,t=a;A[t>>2]=A[s>>2],s=s+4|0,t=t+4|0,(0|I)!=(0|(r=r+1|0)););else t=a;if(r=a+O|0,!(p>>>0<28))for(;A[t>>2]=A[s>>2],A[t+4>>2]=A[s+4>>2],A[t+8>>2]=A[s+8>>2],A[t+12>>2]=A[s+12>>2],A[t+16>>2]=A[s+16>>2],A[t+20>>2]=A[s+20>>2],A[t+24>>2]=A[s+24>>2],A[t+28>>2]=A[s+28>>2],s=s+32|0,(0|r)!=(0|(t=t+32|0)););}A[i+12>>2]=T,A[i+8>>2]=r,A[i+4>>2]=a,A[i>>2]=m,f&&(xt(f),r=A[i+8>>2])}else r=t;A[r>>2]=E,A[i+8>>2]=A[i+8>>2]+4;break A}if((f=(s=A[i+8>>2])-A[i+4>>2]>>2)>>>0<(a=(t=A[i+12>>2])-(r=A[i>>2])|0)>>2>>>0){if((0|t)!=(0|s)){A[c+8>>2]=Fa(4096),VA(i,c+8|0);break A}if(A[c+8>>2]=Fa(4096),BA(i,c+8|0),t=A[i+4>>2],E=A[t>>2],s=t+4|0,A[i+4>>2]=s,(0|(t=A[i+8>>2]))==A[i+12>>2])if((f=A[i>>2])>>>0<s>>>0)r=Yt((a=(1+(s-f>>2)|0)/-2<<2)+s|0,s,t=t-s|0)+t|0,A[i+8>>2]=r,A[i+4>>2]=a+A[i+4>>2];else{if((r=(0|t)==(0|f)?1:t-f>>1)>>>0>=1073741824)break s;if(T=(a=r<<2)+(m=Fa(a))|0,r=a=m+(-4&r)|0,(0|t)!=(0|s)){if(O=-4&(t=t-s|0),I=1+((p=t-4|0)>>>2|0)&7)for(r=0,t=a;A[t>>2]=A[s>>2],s=s+4|0,t=t+4|0,(0|I)!=(0|(r=r+1|0)););else t=a;if(r=a+O|0,!(p>>>0<28))for(;A[t>>2]=A[s>>2],A[t+4>>2]=A[s+4>>2],A[t+8>>2]=A[s+8>>2],A[t+12>>2]=A[s+12>>2],A[t+16>>2]=A[s+16>>2],A[t+20>>2]=A[s+20>>2],A[t+24>>2]=A[s+24>>2],A[t+28>>2]=A[s+28>>2],s=s+32|0,(0|r)!=(0|(t=t+32|0)););}A[i+12>>2]=T,A[i+8>>2]=r,A[i+4>>2]=a,A[i>>2]=m,f&&(xt(f),r=A[i+8>>2])}else r=t;A[r>>2]=E,A[i+8>>2]=A[i+8>>2]+4;break A}if(A[c+24>>2]=i+12,!((t=(0|t)==(0|r)?1:a>>1)>>>0>=1073741824)){if(t=Fa(r=t<<2),A[c+8>>2]=t,a=t+(f<<2)|0,A[c+16>>2]=a,A[c+20>>2]=t+r,A[c+12>>2]=a,A[c+4>>2]=Fa(4096),VA(c+8|0,c+4|0),(0|(s=A[i+8>>2]))==A[i+4>>2]){t=s;break e}for(;BA(c+8|0,s=s-4|0),A[i+4>>2]!=(0|s););break r}}Ui(),kA()}t=A[i+8>>2]}r=A[i>>2],A[i>>2]=A[c+8>>2],A[c+8>>2]=r,A[i+4>>2]=A[c+12>>2],A[c+12>>2]=s,A[i+8>>2]=A[c+16>>2],A[c+16>>2]=t,a=A[i+12>>2],A[i+12>>2]=A[c+20>>2],A[c+20>>2]=a,(0|t)!=(0|s)&&(A[c+16>>2]=t+(3+(s-t|0)&-4)),r&&xt(r)}J=c+32|0,r=(a=A[e+24>>2])+A[e+20>>2]|0,t=A[e+8>>2]}A[A[t+(r>>>8&16777212)>>2]+((1023&r)<<2)>>2]=o,A[e+24>>2]=a+1},function(e){var t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0;r=A[420+(e|=0)>>2]+1|0,A[e+420>>2]=r;A:{if(t=A[e+32>>2]){if(r>>>0>(c=A[t+4>>2])>>>0){(r=A[e+28>>2])&&(xt(r),t=A[e+32>>2]),A[e+32>>2]=0,A[e+28>>2]=t;break A}for(i=e+40|0,o=t+16|0,f=A[e+28>>2]+16|0,m=+(r>>>0)/+(c>>>0),t=0;;){if(a=D[(r=t<<3)+o>>3],s=D[r+f>>3],D[r+i>>3]=a==a?(a-s)*m+s:s,(0|(r=1|t))==47)break A;a=D[(r<<=3)+o>>3],s=D[r+f>>3],D[r+i>>3]=a==a?(a-s)*m+s:s,t=t+2|0}}if(t=A[e+28>>2],r>>>0>uA[t>>2]){if(i=A[e+24>>2]){if(g[e+416|0]=0,o=A[e+8>>2],r=A[e+20>>2],t=A[A[o+(r>>>8&16777212)>>2]+((1023&r)<<2)>>2],A[e+32>>2]=t,A[e+24>>2]=i-1,r=r+1|0,A[e+20>>2]=r,r>>>0>=2048&&(xt(A[o>>2]),A[e+8>>2]=A[e+8>>2]+4,A[e+20>>2]=A[e+20>>2]-1024,t=A[e+32>>2]),l[t+8|0])wt(t+16|0,A[e+28>>2]+16|0,376),t=A[e+32>>2],A[t+368>>2]=0,A[t+372>>2]=0,a=D[e+40>>3],A[t+392>>2]=0,A[t+396>>2]=0,D[t+16>>3]=a;else if(r=A[e+28>>2],l[r+8|0]&&(wt(r+16|0,t+16|0,376),t=A[e+28>>2],A[t+368>>2]=0,A[t+372>>2]=0,!(t=A[e+32>>2])))break A;(0|(r=A[t+400>>2]))!=-1&&(A[e+424>>2]=r),A[e+420>>2]=0,D[t+16>>3]=D[t+392>>3]*+uA[t+4>>2]+D[t+16>>3];break A}g[e+416|0]=1}else a=D[t+392>>3]+D[e+40>>3],D[e+40>>3]=a,D[t+16>>3]=a}return 0|(l[e+416|0]?0:e+40)},function(e){return A[424+(e|=0)>>2]},function(e){var t=0;return A[(e|=0)>>2]=132304,(t=A[e+28>>2])&&xt(t),(t=A[e+32>>2])&&xt(t),a0(e+4|0),0|e},function(e){var t=0;A[(e|=0)>>2]=132304,(t=A[e+28>>2])&&xt(t),(t=A[e+32>>2])&&xt(t),a0(e+4|0),xt(e)},function(e,t,r){t|=0,r|=0;var a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0;if(!A[1088+(e|=0)>>2])return 0;A:if(t){for(m=e+648|0,f=e- -64|0;;){if(a=A[e+1088>>2],!(a=0|lt[A[A[a>>2]+4>>2]](a)))break A;if(s=Ns(D[e+32>>3]+D[a+16>>3]/+A[e+24>>2]),D[e+32>>3]=s,s=Si(6.283185307179586*s),s=Ns(D[e+16>>3]+D[a>>3]*(.06*s*D[a+8>>3]+1)/+A[e+8>>2]),D[e+16>>3]=s,c=bt(A[56848],A[56849],1284865837,1481765933),i=$,i=(c=c+1|0)?i:i+1|0,A[56848]=c,A[56849]=i,o=.75*D[e+40>>3]+ +(i>>>1|0)/2147483647,D[e+40>>3]=o,p=D[a+24>>3],i=s>=D[a+32>>3],g[e+48|0]=i,o=(E=p)*(p=.2*o),o=xr(f+512|0,xr(f+440|0,s=D[a+352>>3]*(p*D[a+48>>3]+D[a+40>>3]*(s+s+-1+(i?o:.01*o)))*.5,D[a+104>>3],D[a+168>>3]),D[a+112>>3],D[a+176>>3]),o=xr(f+8|0,xr(f+80|0,xr(f+152|0,xr(f+224|0,xr(f+296|0,xr(f+368|0,o==o?(o-s)*D[a+184>>3]+s:s,D[a+96>>3],D[a+160>>3]),D[a+88>>3],D[a+152>>3]),D[a+80>>3],D[a+144>>3]),D[a+72>>3],D[a+136>>3]),D[a+64>>3],D[a+128>>3]),D[a+56>>3],D[a+120>>3]),c=bt(A[56848],A[56849],1284865837,1481765933),i=$,i=(c=c+1|0)?i:i+1|0,A[56848]=c,A[56849]=i,s=.75*D[e+56>>3]+ +(i>>>1|0)/2147483647,D[e+56>>3]=s,i=(I<<1)+r|0,p=xr(m+8|0,s=D[a+352>>3]*(D[a+192>>3]*(.3*s))*.5,D[a+200>>3],D[a+248>>3]),T=D[a+296>>3],O=xr(m+80|0,s,D[a+208>>3],D[a+256>>3]),Z=D[a+304>>3],AA=xr(m+152|0,s,D[a+216>>3],D[a+264>>3]),cA=D[a+312>>3],hA=xr(m+224|0,s,D[a+224>>3],D[a+272>>3]),vA=D[a+320>>3],QA=xr(m+296|0,s,D[a+232>>3],D[a+280>>3]),WA=D[a+328>>3],E=o,o=(xr(m+368|0,s,D[a+240>>3],D[a+288>>3])-s)*D[a+336>>3]+(WA*(QA-s)+(vA*(hA-s)+(cA*(AA-s)+(Z*(O-s)+(T*(p-s)+0))))),s=(E+(s==s?(s-o)*D[a+344>>3]+o:o))*D[a+360>>3]*4e3,a=(0|(a=SA(s)<2147483648?~~s:-2147483648))>=32e3?32e3:a,b[i>>1]=(0|a)<=-32e3?-32e3:a,(0|(I=I+1|0))==(0|t))break}I=t}return 0|(t>>>0>I>>>0?I:t)},function(e,t){t|=0,A[1088+(e|=0)>>2]=t},Zi,js,Ln,function(e,t,r,a){return $=0,0}],li.grow=function(e){var t=this.length;return this.length=this.length+e,t},li.set=function(e,t){this[e]=t},li.get=function(e){return this[e]},li);return{v:function(){var e,t=0;J=e=J-16|0,0|Ee(e+12|0,e+8|0)||(t=Ct(4+(A[e+12>>2]<<2)|0),A[56800]=t,t&&(!(t=Ct(A[e+8>>2]))||(A[A[56800]+(A[e+12>>2]<<2)>>2]=0,0|fe(A[56800],0|t)))&&(A[56800]=0)),J=e+16|0,A[56841]=227236,A[56823]=42},w:yi,x:v0,y:function(e,t){t|=0,A[(e|=0)>>2]=t},z:function(e,t){return t|=0,g[A[4+(e|=0)>>2]+t|0]},A:Ca,B:B0,C:function(e){return l[12+(e|=0)|0]},D:function(e,t){t|=0,g[12+(e|=0)|0]=t},E:function(e){return l[13+(e|=0)|0]},F:function(e,t){t|=0,g[13+(e|=0)|0]=t},G:function(e){return l[14+(e|=0)|0]},H:function(e,t){t|=0,g[14+(e|=0)|0]=t},I:function(e){return l[15+(e|=0)|0]},J:function(e,t){t|=0,g[15+(e|=0)|0]=t},K:Vs,L:function(e,t){t|=0,A[16+(e|=0)>>2]=t},M:Nn,N:function(e,t){t|=0,A[20+(e|=0)>>2]=t},O:yi,P:v0,Q:On,R:Ca,S:Ws,T:Vs,U:Nn,V:function(e){return A[24+(e|=0)>>2]},W:yi,X:function(){var e,t=0,r=0,a=0,s=0,i=0,o=0,c=0,f=0,m=0,p=0,I=0,E=0,T=0,O=0,Z=0,AA=0,cA=0,hA=0,vA=0,QA=0,WA=0,KA=0,re=0;if(e=Fa(20),A[e+16>>2]=0,A[e+8>>2]=175,A[e+12>>2]=50,!(t=A[33208])){J=t=(J=vA=J-16|0)-80|0;A:{if((r=ti(84292))&&(A[t+32>>2]=r,as(137584,160,85959,t+32|0),(0|ss(137584))==-31||(A[t+16>>2]=r,as(137584,160,86031,t+16|0),(0|ss(137584))==-31)))break A;(r=ti(84619))&&(A[t>>2]=r,as(137584,160,85959,t),(0|ss(137584))==-31)||(r=l[84826]|l[84827]<<8|l[84828]<<16|l[84829]<<24,A[34396]=l[84822]|l[84823]<<8|l[84824]<<16|l[84825]<<24,A[34397]=r,b[68804]=l[84846]|l[84847]<<8,r=l[84842]|l[84843]<<8|l[84844]<<16|l[84845]<<24,A[34400]=l[84838]|l[84839]<<8|l[84840]<<16|l[84841]<<24,A[34401]=r,r=l[84834]|l[84835]<<8|l[84836]<<16|l[84837]<<24,A[34398]=l[84830]|l[84831]<<8|l[84832]<<16|l[84833]<<24,A[34399]=r)}if(J=t+80|0,A[vA+12>>2]=0,s=vA+12|0,J=c=J-16|0,A[c+12>>2]=22050,Ve(85144)||Ve(85315)||Ve(85473)||Ve(85698),I=c+12|0,J=i=J-16|0,A[i+12>>2]=0,!((t=zi(137832,84262,0,s))||(t=zi(137836,84420,0,s))||(t=zi(137840,84813,0,s))||(t=zi(137820,85016,i+12|0,s))))if(A[34454]=uA[i+12>>2]/68,r=A[34460],A[34456]=r,r&&(0|(m=l[0|r]|l[r+1|0]<<8|l[r+2|0]<<16|l[r+3|0]<<24))==83969){if(E=l[r+4|0]|l[r+5|0]<<8|l[r+6|0]<<16|l[r+7|0]<<24,r=A[34458],O=l[0|r],A[34461]=O,O)for(t=r+4|0,m=0;a=P(m,44)+137856|0,s=l[0|t],A[a+36>>2]=s,A[a+40>>2]=l[t+1|0],o=l[t+8|0]|l[t+9|0]<<8|l[t+10|0]<<16|l[t+11|0]<<24,r=l[t+4|0]|l[t+5|0]<<8|l[t+6|0]<<16|l[t+7|0]<<24,g[0|a]=r,g[a+1|0]=r>>>8,g[a+2|0]=r>>>16,g[a+3|0]=r>>>24,g[a+4|0]=o,g[a+5|0]=o>>>8,g[a+6|0]=o>>>16,g[a+7|0]=o>>>24,o=l[t+16|0]|l[t+17|0]<<8|l[t+18|0]<<16|l[t+19|0]<<24,r=l[t+12|0]|l[t+13|0]<<8|l[t+14|0]<<16|l[t+15|0]<<24,g[a+8|0]=r,g[a+9|0]=r>>>8,g[a+10|0]=r>>>16,g[a+11|0]=r>>>24,g[a+12|0]=o,g[a+13|0]=o>>>8,g[a+14|0]=o>>>16,g[a+15|0]=o>>>24,o=l[t+24|0]|l[t+25|0]<<8|l[t+26|0]<<16|l[t+27|0]<<24,r=l[t+20|0]|l[t+21|0]<<8|l[t+22|0]<<16|l[t+23|0]<<24,g[a+16|0]=r,g[a+17|0]=r>>>8,g[a+18|0]=r>>>16,g[a+19|0]=r>>>24,g[a+20|0]=o,g[a+21|0]=o>>>8,g[a+22|0]=o>>>16,g[a+23|0]=o>>>24,o=l[t+32|0]|l[t+33|0]<<8|l[t+34|0]<<16|l[t+35|0]<<24,r=l[t+28|0]|l[t+29|0]<<8|l[t+30|0]<<16|l[t+31|0]<<24,g[a+24|0]=r,g[a+25|0]=r>>>8,g[a+26|0]=r>>>16,g[a+27|0]=r>>>24,g[a+28|0]=o,g[a+29|0]=o>>>8,g[a+30|0]=o>>>16,g[a+31|0]=o>>>24,r=t+36|0,A[a+32>>2]=r,t=r+(s<<4)|0,(0|O)!=(0|(m=m+1|0)););(0|O)<=A[34457]&&(A[34457]=0),t=0,I&&(A[I>>2]=E)}else A:{e:{if(s){if(r=A[s>>2]){xt(A[r+4>>2]),t=A[s>>2];break e}if(t=Ct(16),A[s>>2]=t,t)break e;t=48}else t=268436223;break A}A[t>>2]=1,A[t+4>>2]=Ki(137584),r=A[s>>2],A[r+12>>2]=83969,A[r+8>>2]=m,t=268436223}if(J=i+16|0,r=t,!t){if(I=A[c+12>>2],A[50754]=I,A[50759]=0,A[50760]=134217728/(0|I),A[50762]=0,A[50763]=0,A[50765]=2147483647,A[50781]=100,A[50779]=32,A[50761]=(I<<6)/(0|I),t=A[26385],A[50784]=A[26384],A[50785]=t,t=A[26387],A[50786]=A[26386],A[50787]=t,t=A[26389],A[50788]=A[26388],A[50789]=t,t=A[26391],A[50790]=A[26390],A[50791]=t,t=A[26393],A[50792]=A[26392],A[50793]=t,t=A[26395],A[50794]=A[26394],A[50795]=t,t=A[26397],A[50796]=A[26396],A[50797]=t,A[50798]=A[26398],E=(0|(t=(0|(s=P(I,60)))/12800|0))>=128?128:t,A[50799]=E,A[50800]=(0|E)/2,!((0|I)==22050|(0|s)<12800)){if(I=1&(t=(0|E)<=1?1:E),cA=+(0|E),m=0,(0|E)>=2)for(E=2147483646&t,t=0;Z=m+132160|0,f=127*(1-Da(6.283185307179586*+(0|m)/cA)),T=SA(f)<2147483648?~~f:-2147483648,g[0|Z]=T,Z=132160+(s=1|m)|0,f=127*(1-Da(6.283185307179586*+(0|s)/cA)),T=SA(f)<2147483648?~~f:-2147483648,g[0|Z]=T,m=m+2|0,(0|E)!=(0|(t=t+2|0)););I&&(t=m+132160|0,f=127*(1-Da(6.283185307179586*+(0|m)/cA)),Z=SA(f)<2147483648?~~f:-2147483648,g[0|t]=Z)}if(A[50801]=105792,A[56797]=ts(),A[55964]=38,A[55921]=1,A[55918]=22050,A[56606]=0,A[55960]=110928,A[55958]=0,A[55959]=1074266112,A[55956]=100,A[55922]=20,A[55923]=220,A[55916]=1,A[55917]=0,Wi(),A[56244]=0,A[56245]=0,A[55928]=0,A[55926]=0,A[55927]=0,A[55924]=0,A[56246]=0,A[56247]=0,A[56260]=0,A[56261]=0,A[56262]=0,A[56263]=0,A[56276]=0,A[56277]=0,A[56278]=0,A[56279]=0,A[55974]=0,A[55975]=0,A[55972]=0,A[55973]=0,cA=-3.141592653589793/+(0|(t=A[55918])),D[27967]=cA,s=(0|P(t,630))/1e4|0,A[55920]=s,t=(0|P(t,950))/1e4|0,A[55919]=t,f=-2*cA,D[27968]=f,cA=(KA=zt(cA*+(0|s)))*-KA,D[28129]=cA,f=KA*Da(f*+(0|t)),f+=f,D[28128]=f,D[28127]=1-f-cA,A[55990]=0,A[55991]=0,A[55988]=0,A[55989]=0,A[56006]=0,A[56007]=0,A[56004]=0,A[56005]=0,A[56022]=0,A[56023]=0,A[56020]=0,A[56021]=0,A[56038]=0,A[56039]=0,A[56036]=0,A[56037]=0,A[56054]=0,A[56055]=0,A[56052]=0,A[56053]=0,A[56070]=0,A[56071]=0,A[56068]=0,A[56069]=0,A[56086]=0,A[56087]=0,A[56084]=0,A[56085]=0,A[56102]=0,A[56103]=0,A[56100]=0,A[56101]=0,A[56118]=0,A[56119]=0,A[56116]=0,A[56117]=0,A[56134]=0,A[56135]=0,A[56132]=0,A[56133]=0,A[56150]=0,A[56151]=0,A[56148]=0,A[56149]=0,A[56166]=0,A[56167]=0,A[56164]=0,A[56165]=0,A[56182]=0,A[56183]=0,A[56180]=0,A[56181]=0,A[56198]=0,A[56199]=0,A[56196]=0,A[56197]=0,A[56214]=0,A[56215]=0,A[56212]=0,A[56213]=0,A[56230]=0,A[56231]=0,A[56228]=0,A[56229]=0,A[56639]=59,A[56640]=59,A[56629]=0,A[56630]=59,A[56619]=89,A[56620]=160,A[56609]=280,A[56610]=688,A[56611]=1064,A[56621]=70,A[56631]=59,A[56612]=2806,A[56613]=3260,A[56622]=160,A[56623]=200,A[56632]=59,A[56633]=59,A[56641]=89,A[56642]=149,A[56643]=200,A[56644]=200,A[56634]=59,A[56635]=59,A[56624]=200,A[56625]=500,A[56614]=3700,A[56615]=6500,A[56645]=500,A[56646]=0,A[56616]=7e3,A[56626]=500,A[56636]=0,A[56647]=0,A[56637]=0,A[56627]=500,A[56617]=8e3,A[56669]=89,A[56648]=0,A[56638]=0,A[56628]=89,A[56618]=280,A[56657]=62,A[56655]=0,A[56656]=0,A[56653]=50,A[56654]=0,A[56651]=0,A[56652]=0,A[56649]=0,A[56650]=40,A[56607]=1e3,A[56608]=59,J=i=J-416|0,A[i+16>>2]=137584,A[i+20>>2]=47,A[i+24>>2]=85952,De(t=i+240|0,85699,i+16|0),o=ka(t,86034)){if(Jt(i+240|0,170,o))for(I=5|(t=i+240|0),E=10|t;l[i+240|0]!=47&&(A[i+240>>2]!=1701736308?Ba(i+240|0,86614,9)||(A[i+4>>2]=i+32,A[i>>2]=i+239,(0|dt(E,86829,i))==2&&(s=A[34064],A[(O=136272+(s<<4)|0)>>2]=g[i+239|0],t=Ki(i+32|0),A[34064]=s+1,A[O+12>>2]=t,A[O+4>>2]=0)):(J=t=J-48|0,A[32960]=-1,A[32961]=-1,A[32970]=-1,A[32971]=-1,A[32968]=-1,A[32969]=-1,A[32966]=-1,A[32967]=-1,A[32964]=-1,A[32965]=-1,A[32962]=-1,A[32963]=-1,A[t+36>>2]=131876,A[t+32>>2]=131872,A[t+28>>2]=131868,A[t+24>>2]=131864,A[t+20>>2]=131860,A[t+16>>2]=131856,A[t+12>>2]=131852,A[t+8>>2]=131848,A[t+4>>2]=131844,A[t>>2]=131840,dt(I,84222,t),J=t+48|0)),Jt(i+240|0,170,o););aa(o)}J=i+416|0,A[50297]=0,A[50298]=0,A[50301]=0,A[50302]=0,A[50299]=0,A[50300]=0,hi(0,85698),A[36425]=0,A[36424]=0,A[36426]=0,A[36427]=-1,Va(),Xt(0),a=A[25690],A[34062]=a,p=A[25689],i=A[25688],A[34060]=i,A[34061]=p,AA=A[25687],o=A[25686],A[34058]=o,A[34059]=AA,hA=A[25685],O=A[25684],A[34056]=O,A[34057]=hA,QA=A[25683],I=A[25682],A[34054]=I,A[34055]=QA,WA=A[25681],E=A[25680],A[34052]=E,A[34053]=WA,T=A[25679],s=A[25678],A[34050]=s,A[34051]=T,Z=A[25677],t=A[25676],A[34048]=t,A[34049]=Z,A[33729]=t,A[33730]=Z,A[33731]=s,A[33732]=T,A[33733]=E,A[33734]=WA,A[33735]=I,A[33736]=QA,A[33737]=O,A[33738]=hA,A[33739]=o,A[33740]=AA,A[33741]=i,A[33742]=p,A[33743]=a,Cr(1,175),Cr(2,100),Cr(6,A[47200]),Cr(5,A[47201]),Cr(7,0),A[47198]=0,A[47197]=0,f=+UA()/1e3,s=bt(t=SA(f)<9223372036854776e3?~~f>>>0:0,0,1103515245,0),t=$,t=(s=s+12345|0)>>>0<12345?t+1|0:t,A[33209]=Sn(s,t)}if(J=c+16|0,r){Z=A[30450],QA=A[vA+12>>2],c=48+(p=J-560|0)|0,J=a=(J=p)-16|0;A:{switch(0|ma(r-268435967|0,24)){case 0:ar(c,84133,512);break A;case 1:ar(c,84580,512);break A;case 2:ar(c,84747,512);break A;case 3:ar(c,85084,512);break A;case 4:ar(c,85251,512);break A;case 5:ar(c,85380,512);break A;case 6:ar(c,85607,512);break A;case 7:ar(c,85722,512);break A;case 8:ar(c,85913,512);break A;case 9:ar(c,86046,512);break A;case 10:ar(c,86153,512);break A;case 11:ar(c,86678,512);break A;case 12:ar(c,86773,512);break A;case 14:ar(c,86958,512);break A;case 15:ar(c,87071,512);break A}if(1879048192&r)A[a>>2]=r,as(c,512,87182,a);else{if(m=0,i=M[123728+((r>>>0<=153?r:0)<<1)>>1]+121804|0,r=A[A[56841]+20>>2]){WA=A[r+4>>2],AA=A[r>>2],hA=A[AA>>2]+1794895138|0,T=ys(A[AA+8>>2],hA),s=ys(A[AA+12>>2],hA),t=ys(A[AA+16>>2],hA);e:if(!(WA>>>2>>>0<=T>>>0||3&(t|s)|(r=WA-(T<<2)|0)>>>0<=s>>>0|t>>>0>=r>>>0))for(I=t>>>2|0,E=s>>>2|0;;){if(O=ys(A[(r=((t=(s=(o=T>>>1|0)+re|0)<<1)+E<<2)+AA|0)>>2],hA),(r=ys(A[r+4>>2],hA))>>>0>=WA>>>0|O>>>0>=WA-r>>>0|l[(r+O|0)+AA|0])break e;if(!(r=vr(i,r+AA|0))){if(t=ys(A[(r=(t+I<<2)+AA|0)>>2],hA),(r=ys(A[r+4>>2],hA))>>>0>=WA>>>0|t>>>0>=WA-r>>>0)break e;m=l[(t+r|0)+AA|0]?0:r+AA|0;break e}if((0|T)==1)break e;T=(r=(0|r)<0)?o:T-o|0,re=r?re:s}}if((r=He(t=m||i))>>>0>=512){wt(c,t,511),g[c+511|0]=0;break A}wt(c,t,r+1|0)}}J=a+16|0;A:if(QA){e:switch(A[QA>>2]){case 0:A[p+16>>2]=A[QA+4>>2],A[p+20>>2]=p+48,fr(Z,87384,p+16|0);break A;case 1:break e;default:break A}t=A[QA+12>>2],r=A[QA+8>>2],A[p+36>>2]=A[QA+4>>2],$=r,A[p+40>>2]=t,A[p+44>>2]=$,A[p+32>>2]=p+48,fr(Z,87521,p+32|0)}else A[p>>2]=p+48,fr(Z,87700,p);J=p+560|0,(0|vA)!=-12&&(r=A[vA+12>>2])&&(xt(A[r+4>>2]),xt(A[vA+12>>2]),A[vA+12>>2]=0)}r=A[24806],A[34389]=0,A[32538]=r,r=(1e3+((r=P(A[50754],100))-((0|r)%1e3|0)|0)|0)/500|0,A[34390]=r,r=Ur(A[34391],r),A[34392]=r,r&&(A[34391]=r,A[34393]=40,(r=Ur(A[34388],1440))&&(A[34388]=r)),A[47198]=0,J=vA+16|0,t=A[50754],A[33208]=t}return A[e+4>>2]=t,A[e>>2]=Ke(),0|e},Y:function(e,t,r){e|=0,t|=0,r|=0,A[34440]=r,xn(3,A[e+12>>2]),xn(1,A[e+8>>2]),(e=A[e+16>>2])?Ta(e):ai(1024),he(t),A[34440]=0},Z:function(e,t,r){return e|=0,t|=0,r|=0,A[34440]=0,(e=ka(r,1032))?(A[47195]=e,A[47197]=130,e||(A[47195]=A[30450]),he(t),A[47195]=0,A[47197]=0,A[47195]=A[30450],aa(e),0):-1},_:function(e){return 36},$:function(e,t,r){var a;return e|=0,t|=0,J=a=J-32|0,(r|=0)?(A[a+24>>2]=0,A[a+28>>2]=0,A[a+16>>2]=0,A[a+20>>2]=0,A[a+12>>2]=r,A[a+8>>2]=t,g[a+21|0]=0,t=Ta(a+8|0)):t=ai(t),A[e+16>>2]=201188,J=a+32|0,0|t},aa:function(e,t,r,a){var s;return e|=0,t|=0,J=s=J-32|0,(r|=0)|(a|=0)?(A[s+24>>2]=0,A[s+28>>2]=0,A[s+16>>2]=0,A[s+20>>2]=0,A[s+12>>2]=r,A[s+8>>2]=t,g[s+22|0]=0,g[s+20|0]=a,t=Ta(s+8|0)):t=ai(t),A[e+16>>2]=201188,J=s+32|0,0|t},ba:function(e,t,r,a,s){var i;return e|=0,t|=0,J=i=J-32|0,(a|=0)|(s|=0)|(r|=0)?(A[i+24>>2]=0,A[i+28>>2]=0,A[i+16>>2]=0,A[i+20>>2]=0,A[i+12>>2]=r,A[i+8>>2]=t,g[i+21|0]=s,g[i+20|0]=a,t=Ta(i+8|0)):t=ai(t),A[e+16>>2]=201188,J=i+32|0,0|t},ca:function(e,t,r,a,s,i){var o;return e|=0,t|=0,J=o=J-32|0,(a|=0)|(s|=0)|(i|=0)|(r|=0)?(A[o+24>>2]=0,A[o+28>>2]=0,A[o+16>>2]=0,A[o+20>>2]=0,A[o+12>>2]=r,A[o+8>>2]=t,g[o+22|0]=i,g[o+21|0]=s,g[o+20|0]=a,t=Ta(o+8|0)):t=ai(t),A[e+16>>2]=201188,J=o+32|0,0|t},da:function(e,t){return t|=0,A[A[(e|=0)>>2]+(t<<2)>>2]},ea:function(e,t,r){t|=0,r|=0,A[A[(e|=0)>>2]+(t<<2)>>2]=r},fa:On,ga:Ca,ha:B0,ia:Ws,ja:function(e,t){t|=0,A[12+(e|=0)>>2]=t},ka:yi,la:function(){return 0},ma:function(){return 1},na:function(){return 2},oa:function(){return 3},pa:function(){return 4},qa:function(){return 5},ra:function(){return 6},sa:function(){return 7},ta:function(){return 8},ua:lt,va:function(){return 227192},wa:xt,xa:Ct,ya:function(e){return(e|=0)?0|!!(0|sr(e,125228)):0}}}(d)}(C)},instantiate:function(x,C){return{then:function(d){var k=new d2.Module(x);d({instance:new d2.Instance(k,C)})}}},RuntimeError:Error};typeof d2!="object"&&A0("no native wasm support detected");var Xu=!1;function Zc(x,C){x||A0(C)}var ls,o2,ec,mr,Ea,qu,Ju,Hu=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function n2(x,C,d){for(var k=C+d,z=C;x[z]&&!(z>=k);)++z;if(z-C>16&&x.buffer&&Hu)return Hu.decode(x.subarray(C,z));for(var V="";C<z;){var L=x[C++];if(128&L){var U=63&x[C++];if((224&L)!=192){var q=63&x[C++];if((L=(240&L)==224?(15&L)<<12|U<<6|q:(7&L)<<18|U<<12|q<<6|63&x[C++])<65536)V+=String.fromCharCode(L);else{var W=L-65536;V+=String.fromCharCode(55296|W>>10,56320|1023&W)}}else V+=String.fromCharCode((31&L)<<6|U)}else V+=String.fromCharCode(L)}return V}function l2(x,C){return x?n2(o2,x,C):""}function tg(x,C,d,k){if(!(k>0))return 0;for(var z=d,V=d+k-1,L=0;L<x.length;++L){var U=x.charCodeAt(L);if(U>=55296&&U<=57343&&(U=65536+((1023&U)<<10)|1023&x.charCodeAt(++L)),U<=127){if(d>=V)break;C[d++]=U}else if(U<=2047){if(d+1>=V)break;C[d++]=192|U>>6,C[d++]=128|63&U}else if(U<=65535){if(d+2>=V)break;C[d++]=224|U>>12,C[d++]=128|U>>6&63,C[d++]=128|63&U}else{if(d+3>=V)break;C[d++]=240|U>>18,C[d++]=128|U>>12&63,C[d++]=128|U>>6&63,C[d++]=128|63&U}}return C[d]=0,d-z}function _u(x){for(var C=0,d=0;d<x.length;++d){var k=x.charCodeAt(d);k<=127?C++:k<=2047?C+=2:k>=55296&&k<=57343?(C+=4,++d):C+=3}return C}var _n,Xc=pA.INITIAL_MEMORY||16777216;_n=(Ag=pA.wasmMemory?pA.wasmMemory:new d2.Memory({initial:Xc/65536,maximum:Xc/65536})).buffer,pA.HEAP8=ls=new Int8Array(_n),pA.HEAP16=ec=new Int16Array(_n),pA.HEAP32=mr=new Int32Array(_n),pA.HEAPU8=o2=new Uint8Array(_n),pA.HEAPU16=new Uint16Array(_n),pA.HEAPU32=Ea=new Uint32Array(_n),pA.HEAPF32=qu=new Float32Array(_n),pA.HEAPF64=Ju=new Float64Array(_n),Xc=Ag.buffer.byteLength;var Ru=[],$u=[],Wu=[],Ad=!1;function ed(x){$u.unshift(x)}var Lt,fa,go=0,C1=null;function td(x){go++,pA.monitorRunDependencies&&pA.monitorRunDependencies(go)}function rd(x){if(go--,pA.monitorRunDependencies&&pA.monitorRunDependencies(go),go==0&&C1){var C=C1;C1=null,C()}}function A0(x){throw pA.onAbort&&pA.onAbort(x),u2(x="Aborted("+x+")"),Xu=!0,x+=". Build with -sASSERTIONS for more info.",new d2.RuntimeError(x)}function Fp(x){this.name="ExitStatus",this.message="Program terminated with exit("+x+")",this.status=x}function qc(x){for(;x.length>0;)x.shift()(pA)}function Sp(x,C="i8"){switch(C.endsWith("*")&&(C="*"),C){case"i1":case"i8":return ls[0|x];case"i16":return ec[x>>1];case"i32":case"i64":return mr[x>>2];case"float":return qu[x>>2];case"double":return Ju[x>>3];case"*":return Ea[x>>2];default:A0("invalid type for getValue: "+C)}return null}function Np(x){this.excPtr=x,this.ptr=x-24,this.set_type=function(C){Ea[this.ptr+4>>2]=C},this.get_type=function(){return Ea[this.ptr+4>>2]},this.set_destructor=function(C){Ea[this.ptr+8>>2]=C},this.get_destructor=function(){return Ea[this.ptr+8>>2]},this.set_refcount=function(C){mr[this.ptr>>2]=C},this.set_caught=function(C){C=C?1:0,ls[this.ptr+12|0]=C},this.get_caught=function(){return ls[this.ptr+12|0]!=0},this.set_rethrown=function(C){C=C?1:0,ls[this.ptr+13|0]=C},this.get_rethrown=function(){return ls[this.ptr+13|0]!=0},this.init=function(C,d){this.set_adjusted_ptr(0),this.set_type(C),this.set_destructor(d),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var C=mr[this.ptr>>2];mr[this.ptr>>2]=C+1},this.release_ref=function(){var C=mr[this.ptr>>2];return mr[this.ptr>>2]=C-1,C===1},this.set_adjusted_ptr=function(C){Ea[this.ptr+16>>2]=C},this.get_adjusted_ptr=function(){return Ea[this.ptr+16>>2]},this.get_exception_ptr=function(){if(sf(this.get_type()))return Ea[this.excPtr>>2];var C=this.get_adjusted_ptr();return C!==0?C:this.excPtr}}var Gr={isAbs:x=>x.charAt(0)==="/",splitPath:x=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(x).slice(1),normalizeArray:(x,C)=>{for(var d=0,k=x.length-1;k>=0;k--){var z=x[k];z==="."?x.splice(k,1):z===".."?(x.splice(k,1),d++):d&&(x.splice(k,1),d--)}if(C)for(;d;d--)x.unshift("..");return x},normalize:x=>{var C=Gr.isAbs(x),d=x.substr(-1)==="/";return(x=Gr.normalizeArray(x.split("/").filter(k=>!!k),!C).join("/"))||C||(x="."),x&&d&&(x+="/"),(C?"/":"")+x},dirname:x=>{var C=Gr.splitPath(x),d=C[0],k=C[1];return d||k?(k&&(k=k.substr(0,k.length-1)),d+k):"."},basename:x=>{if(x==="/")return"/";var C=(x=(x=Gr.normalize(x)).replace(/\/$/,"")).lastIndexOf("/");return C===-1?x:x.substr(C+1)},join:function(){var x=Array.prototype.slice.call(arguments);return Gr.normalize(x.join("/"))},join2:(x,C)=>Gr.normalize(x+"/"+C)},H0={resolve:function(){for(var x="",C=!1,d=arguments.length-1;d>=-1&&!C;d--){var k=d>=0?arguments[d]:rA.cwd();if(typeof k!="string")throw new TypeError("Arguments to path.resolve must be strings");if(!k)return"";x=k+"/"+x,C=Gr.isAbs(k)}return(C?"/":"")+(x=Gr.normalizeArray(x.split("/").filter(z=>!!z),!C).join("/"))||"."},relative:(x,C)=>{function d(W){for(var S=0;S<W.length&&W[S]==="";S++);for(var X=W.length-1;X>=0&&W[X]==="";X--);return S>X?[]:W.slice(S,X-S+1)}x=H0.resolve(x).substr(1),C=H0.resolve(C).substr(1);for(var k=d(x.split("/")),z=d(C.split("/")),V=Math.min(k.length,z.length),L=V,U=0;U<V;U++)if(k[U]!==z[U]){L=U;break}var q=[];for(U=L;U<k.length;U++)q.push("..");return(q=q.concat(z.slice(L))).join("/")}};function ad(x,C,d){var k=_u(x)+1,z=new Array(k),V=tg(x,z,0,z.length);return C&&(z.length=V),z}var co={ttys:[],init:function(){},shutdown:function(){},register:function(x,C){co.ttys[x]={input:[],output:[],ops:C},rA.registerDevice(x,co.stream_ops)},stream_ops:{open:function(x){var C=co.ttys[x.node.rdev];if(!C)throw new rA.ErrnoError(43);x.tty=C,x.seekable=!1},close:function(x){x.tty.ops.fsync(x.tty)},fsync:function(x){x.tty.ops.fsync(x.tty)},read:function(x,C,d,k,z){if(!x.tty||!x.tty.ops.get_char)throw new rA.ErrnoError(60);for(var V=0,L=0;L<k;L++){var U;try{U=x.tty.ops.get_char(x.tty)}catch{throw new rA.ErrnoError(29)}if(U===void 0&&V===0)throw new rA.ErrnoError(6);if(U==null)break;V++,C[d+L]=U}return V&&(x.node.timestamp=Date.now()),V},write:function(x,C,d,k,z){if(!x.tty||!x.tty.ops.put_char)throw new rA.ErrnoError(60);try{for(var V=0;V<k;V++)x.tty.ops.put_char(x.tty,C[d+V])}catch{throw new rA.ErrnoError(29)}return k&&(x.node.timestamp=Date.now()),V}},default_tty_ops:{put_char:function(x,C){C===null||C===10?(Ac(n2(x.output,0)),x.output=[]):C!=0&&x.output.push(C)},fsync:function(x){x.output&&x.output.length>0&&(Ac(n2(x.output,0)),x.output=[])}},default_tty1_ops:{put_char:function(x,C){C===null||C===10?(u2(n2(x.output,0)),x.output=[]):C!=0&&x.output.push(C)},fsync:function(x){x.output&&x.output.length>0&&(u2(n2(x.output,0)),x.output=[])}}};function sd(x){A0()}var qt={ops_table:null,mount:function(x){return qt.createNode(null,"/",16895,0)},createNode:function(x,C,d,k){if(rA.isBlkdev(d)||rA.isFIFO(d))throw new rA.ErrnoError(63);qt.ops_table||(qt.ops_table={dir:{node:{getattr:qt.node_ops.getattr,setattr:qt.node_ops.setattr,lookup:qt.node_ops.lookup,mknod:qt.node_ops.mknod,rename:qt.node_ops.rename,unlink:qt.node_ops.unlink,rmdir:qt.node_ops.rmdir,readdir:qt.node_ops.readdir,symlink:qt.node_ops.symlink},stream:{llseek:qt.stream_ops.llseek}},file:{node:{getattr:qt.node_ops.getattr,setattr:qt.node_ops.setattr},stream:{llseek:qt.stream_ops.llseek,read:qt.stream_ops.read,write:qt.stream_ops.write,allocate:qt.stream_ops.allocate,mmap:qt.stream_ops.mmap,msync:qt.stream_ops.msync}},link:{node:{getattr:qt.node_ops.getattr,setattr:qt.node_ops.setattr,readlink:qt.node_ops.readlink},stream:{}},chrdev:{node:{getattr:qt.node_ops.getattr,setattr:qt.node_ops.setattr},stream:rA.chrdev_stream_ops}});var z=rA.createNode(x,C,d,k);return rA.isDir(z.mode)?(z.node_ops=qt.ops_table.dir.node,z.stream_ops=qt.ops_table.dir.stream,z.contents={}):rA.isFile(z.mode)?(z.node_ops=qt.ops_table.file.node,z.stream_ops=qt.ops_table.file.stream,z.usedBytes=0,z.contents=null):rA.isLink(z.mode)?(z.node_ops=qt.ops_table.link.node,z.stream_ops=qt.ops_table.link.stream):rA.isChrdev(z.mode)&&(z.node_ops=qt.ops_table.chrdev.node,z.stream_ops=qt.ops_table.chrdev.stream),z.timestamp=Date.now(),x&&(x.contents[C]=z,x.timestamp=z.timestamp),z},getFileDataAsTypedArray:function(x){return x.contents?x.contents.subarray?x.contents.subarray(0,x.usedBytes):new Uint8Array(x.contents):new Uint8Array(0)},expandFileStorage:function(x,C){var d=x.contents?x.contents.length:0;if(!(d>=C)){C=Math.max(C,d*(d<1048576?2:1.125)>>>0),d!=0&&(C=Math.max(C,256));var k=x.contents;x.contents=new Uint8Array(C),x.usedBytes>0&&x.contents.set(k.subarray(0,x.usedBytes),0)}},resizeFileStorage:function(x,C){if(x.usedBytes!=C)if(C==0)x.contents=null,x.usedBytes=0;else{var d=x.contents;x.contents=new Uint8Array(C),d&&x.contents.set(d.subarray(0,Math.min(C,x.usedBytes))),x.usedBytes=C}},node_ops:{getattr:function(x){var C={};return C.dev=rA.isChrdev(x.mode)?x.id:1,C.ino=x.id,C.mode=x.mode,C.nlink=1,C.uid=0,C.gid=0,C.rdev=x.rdev,rA.isDir(x.mode)?C.size=4096:rA.isFile(x.mode)?C.size=x.usedBytes:rA.isLink(x.mode)?C.size=x.link.length:C.size=0,C.atime=new Date(x.timestamp),C.mtime=new Date(x.timestamp),C.ctime=new Date(x.timestamp),C.blksize=4096,C.blocks=Math.ceil(C.size/C.blksize),C},setattr:function(x,C){C.mode!==void 0&&(x.mode=C.mode),C.timestamp!==void 0&&(x.timestamp=C.timestamp),C.size!==void 0&&qt.resizeFileStorage(x,C.size)},lookup:function(x,C){throw rA.genericErrors[44]},mknod:function(x,C,d,k){return qt.createNode(x,C,d,k)},rename:function(x,C,d){if(rA.isDir(x.mode)){var k;try{k=rA.lookupNode(C,d)}catch{}if(k)for(var z in k.contents)throw new rA.ErrnoError(55)}delete x.parent.contents[x.name],x.parent.timestamp=Date.now(),x.name=d,C.contents[d]=x,C.timestamp=x.parent.timestamp,x.parent=C},unlink:function(x,C){delete x.contents[C],x.timestamp=Date.now()},rmdir:function(x,C){var d=rA.lookupNode(x,C);for(var k in d.contents)throw new rA.ErrnoError(55);delete x.contents[C],x.timestamp=Date.now()},readdir:function(x){var C=[".",".."];for(var d in x.contents)x.contents.hasOwnProperty(d)&&C.push(d);return C},symlink:function(x,C,d){var k=qt.createNode(x,C,41471,0);return k.link=d,k},readlink:function(x){if(!rA.isLink(x.mode))throw new rA.ErrnoError(28);return x.link}},stream_ops:{read:function(x,C,d,k,z){var V=x.node.contents;if(z>=x.node.usedBytes)return 0;var L=Math.min(x.node.usedBytes-z,k);if(L>8&&V.subarray)C.set(V.subarray(z,z+L),d);else for(var U=0;U<L;U++)C[d+U]=V[z+U];return L},write:function(x,C,d,k,z,V){if(!k)return 0;var L=x.node;if(L.timestamp=Date.now(),C.subarray&&(!L.contents||L.contents.subarray)){if(V)return L.contents=C.subarray(d,d+k),L.usedBytes=k,k;if(L.usedBytes===0&&z===0)return L.contents=C.slice(d,d+k),L.usedBytes=k,k;if(z+k<=L.usedBytes)return L.contents.set(C.subarray(d,d+k),z),k}if(qt.expandFileStorage(L,z+k),L.contents.subarray&&C.subarray)L.contents.set(C.subarray(d,d+k),z);else for(var U=0;U<k;U++)L.contents[z+U]=C[d+U];return L.usedBytes=Math.max(L.usedBytes,z+k),k},llseek:function(x,C,d){var k=C;if(d===1?k+=x.position:d===2&&rA.isFile(x.node.mode)&&(k+=x.node.usedBytes),k<0)throw new rA.ErrnoError(28);return k},allocate:function(x,C,d){qt.expandFileStorage(x.node,C+d),x.node.usedBytes=Math.max(x.node.usedBytes,C+d)},mmap:function(x,C,d,k,z){if(!rA.isFile(x.node.mode))throw new rA.ErrnoError(43);var V,L,U=x.node.contents;if(2&z||U.buffer!==ls.buffer){if((d>0||d+C<U.length)&&(U=U.subarray?U.subarray(d,d+C):Array.prototype.slice.call(U,d,d+C)),L=!0,!(V=sd()))throw new rA.ErrnoError(48);ls.set(U,V)}else L=!1,V=U.byteOffset;return{ptr:V,allocated:L}},msync:function(x,C,d,k,z){return qt.stream_ops.write(x,C,0,k,d,!1),0}}},rA={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(x,C={})=>{if(!(x=H0.resolve(x)))return{path:"",node:null};if((C=Object.assign({follow_mount:!0,recurse_count:0},C)).recurse_count>8)throw new rA.ErrnoError(32);for(var d=x.split("/").filter(W=>!!W),k=rA.root,z="/",V=0;V<d.length;V++){var L=V===d.length-1;if(L&&C.parent)break;if(k=rA.lookupNode(k,d[V]),z=Gr.join2(z,d[V]),rA.isMountpoint(k)&&(!L||L&&C.follow_mount)&&(k=k.mounted.root),!L||C.follow)for(var U=0;rA.isLink(k.mode);){var q=rA.readlink(z);if(z=H0.resolve(Gr.dirname(z),q),k=rA.lookupPath(z,{recurse_count:C.recurse_count+1}).node,U++>40)throw new rA.ErrnoError(32)}}return{path:z,node:k}},getPath:x=>{for(var C;;){if(rA.isRoot(x)){var d=x.mount.mountpoint;return C?d[d.length-1]!=="/"?d+"/"+C:d+C:d}C=C?x.name+"/"+C:x.name,x=x.parent}},hashName:(x,C)=>{for(var d=0,k=0;k<C.length;k++)d=(d<<5)-d+C.charCodeAt(k)|0;return(x+d>>>0)%rA.nameTable.length},hashAddNode:x=>{var C=rA.hashName(x.parent.id,x.name);x.name_next=rA.nameTable[C],rA.nameTable[C]=x},hashRemoveNode:x=>{var C=rA.hashName(x.parent.id,x.name);if(rA.nameTable[C]===x)rA.nameTable[C]=x.name_next;else for(var d=rA.nameTable[C];d;){if(d.name_next===x){d.name_next=x.name_next;break}d=d.name_next}},lookupNode:(x,C)=>{var d=rA.mayLookup(x);if(d)throw new rA.ErrnoError(d,x);for(var k=rA.hashName(x.id,C),z=rA.nameTable[k];z;z=z.name_next){var V=z.name;if(z.parent.id===x.id&&V===C)return z}return rA.lookup(x,C)},createNode:(x,C,d,k)=>{var z=new rA.FSNode(x,C,d,k);return rA.hashAddNode(z),z},destroyNode:x=>{rA.hashRemoveNode(x)},isRoot:x=>x===x.parent,isMountpoint:x=>!!x.mounted,isFile:x=>(61440&x)==32768,isDir:x=>(61440&x)==16384,isLink:x=>(61440&x)==40960,isChrdev:x=>(61440&x)==8192,isBlkdev:x=>(61440&x)==24576,isFIFO:x=>(61440&x)==4096,isSocket:x=>!(49152&~x),flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:x=>{var C=rA.flagModes[x];if(C===void 0)throw new Error("Unknown file open mode: "+x);return C},flagsToPermissionString:x=>{var C=["r","w","rw"][3&x];return 512&x&&(C+="w"),C},nodePermissions:(x,C)=>rA.ignorePermissions||(!C.includes("r")||292&x.mode)&&(!C.includes("w")||146&x.mode)&&(!C.includes("x")||73&x.mode)?0:2,mayLookup:x=>rA.nodePermissions(x,"x")||(x.node_ops.lookup?0:2),mayCreate:(x,C)=>{try{return rA.lookupNode(x,C),20}catch{}return rA.nodePermissions(x,"wx")},mayDelete:(x,C,d)=>{var k;try{k=rA.lookupNode(x,C)}catch(V){return V.errno}var z=rA.nodePermissions(x,"wx");if(z)return z;if(d){if(!rA.isDir(k.mode))return 54;if(rA.isRoot(k)||rA.getPath(k)===rA.cwd())return 10}else if(rA.isDir(k.mode))return 31;return 0},mayOpen:(x,C)=>x?rA.isLink(x.mode)?32:rA.isDir(x.mode)&&(rA.flagsToPermissionString(C)!=="r"||512&C)?31:rA.nodePermissions(x,rA.flagsToPermissionString(C)):44,MAX_OPEN_FDS:4096,nextfd:(x=0,C=rA.MAX_OPEN_FDS)=>{for(var d=x;d<=C;d++)if(!rA.streams[d])return d;throw new rA.ErrnoError(33)},getStream:x=>rA.streams[x],createStream:(x,C,d)=>{rA.FSStream||(rA.FSStream=function(){this.shared={}},rA.FSStream.prototype={},Object.defineProperties(rA.FSStream.prototype,{object:{get:function(){return this.node},set:function(z){this.node=z}},isRead:{get:function(){return(2097155&this.flags)!=1}},isWrite:{get:function(){return!!(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}},flags:{get:function(){return this.shared.flags},set:function(z){this.shared.flags=z}},position:{get:function(){return this.shared.position},set:function(z){this.shared.position=z}}})),x=Object.assign(new rA.FSStream,x);var k=rA.nextfd(C,d);return x.fd=k,rA.streams[k]=x,x},closeStream:x=>{rA.streams[x]=null},chrdev_stream_ops:{open:x=>{var C=rA.getDevice(x.node.rdev);x.stream_ops=C.stream_ops,x.stream_ops.open&&x.stream_ops.open(x)},llseek:()=>{throw new rA.ErrnoError(70)}},major:x=>x>>8,minor:x=>255&x,makedev:(x,C)=>x<<8|C,registerDevice:(x,C)=>{rA.devices[x]={stream_ops:C}},getDevice:x=>rA.devices[x],getMounts:x=>{for(var C=[],d=[x];d.length;){var k=d.pop();C.push(k),d.push.apply(d,k.mounts)}return C},syncfs:(x,C)=>{typeof x=="function"&&(C=x,x=!1),rA.syncFSRequests++,rA.syncFSRequests>1&&u2("warning: "+rA.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var d=rA.getMounts(rA.root.mount),k=0;function z(L){return rA.syncFSRequests--,C(L)}function V(L){if(L)return V.errored?void 0:(V.errored=!0,z(L));++k>=d.length&&z(null)}d.forEach(L=>{if(!L.type.syncfs)return V(null);L.type.syncfs(L,x,V)})},mount:(x,C,d)=>{var k,z=d==="/",V=!d;if(z&&rA.root)throw new rA.ErrnoError(10);if(!z&&!V){var L=rA.lookupPath(d,{follow_mount:!1});if(d=L.path,k=L.node,rA.isMountpoint(k))throw new rA.ErrnoError(10);if(!rA.isDir(k.mode))throw new rA.ErrnoError(54)}var U={type:x,opts:C,mountpoint:d,mounts:[]},q=x.mount(U);return q.mount=U,U.root=q,z?rA.root=q:k&&(k.mounted=U,k.mount&&k.mount.mounts.push(U)),q},unmount:x=>{var C=rA.lookupPath(x,{follow_mount:!1});if(!rA.isMountpoint(C.node))throw new rA.ErrnoError(28);var d=C.node,k=d.mounted,z=rA.getMounts(k);Object.keys(rA.nameTable).forEach(L=>{for(var U=rA.nameTable[L];U;){var q=U.name_next;z.includes(U.mount)&&rA.destroyNode(U),U=q}}),d.mounted=null;var V=d.mount.mounts.indexOf(k);d.mount.mounts.splice(V,1)},lookup:(x,C)=>x.node_ops.lookup(x,C),mknod:(x,C,d)=>{var k=rA.lookupPath(x,{parent:!0}).node,z=Gr.basename(x);if(!z||z==="."||z==="..")throw new rA.ErrnoError(28);var V=rA.mayCreate(k,z);if(V)throw new rA.ErrnoError(V);if(!k.node_ops.mknod)throw new rA.ErrnoError(63);return k.node_ops.mknod(k,z,C,d)},create:(x,C)=>(C=C!==void 0?C:438,C&=4095,C|=32768,rA.mknod(x,C,0)),mkdir:(x,C)=>(C=C!==void 0?C:511,C&=1023,C|=16384,rA.mknod(x,C,0)),mkdirTree:(x,C)=>{for(var d=x.split("/"),k="",z=0;z<d.length;++z)if(d[z]){k+="/"+d[z];try{rA.mkdir(k,C)}catch(V){if(V.errno!=20)throw V}}},mkdev:(x,C,d)=>(d===void 0&&(d=C,C=438),C|=8192,rA.mknod(x,C,d)),symlink:(x,C)=>{if(!H0.resolve(x))throw new rA.ErrnoError(44);var d=rA.lookupPath(C,{parent:!0}).node;if(!d)throw new rA.ErrnoError(44);var k=Gr.basename(C),z=rA.mayCreate(d,k);if(z)throw new rA.ErrnoError(z);if(!d.node_ops.symlink)throw new rA.ErrnoError(63);return d.node_ops.symlink(d,k,x)},rename:(x,C)=>{var d,k,z=Gr.dirname(x),V=Gr.dirname(C),L=Gr.basename(x),U=Gr.basename(C);if(d=rA.lookupPath(x,{parent:!0}).node,k=rA.lookupPath(C,{parent:!0}).node,!d||!k)throw new rA.ErrnoError(44);if(d.mount!==k.mount)throw new rA.ErrnoError(75);var q,W=rA.lookupNode(d,L),S=H0.relative(x,V);if(S.charAt(0)!==".")throw new rA.ErrnoError(28);if((S=H0.relative(C,z)).charAt(0)!==".")throw new rA.ErrnoError(55);try{q=rA.lookupNode(k,U)}catch{}if(W!==q){var X=rA.isDir(W.mode),R=rA.mayDelete(d,L,X);if(R)throw new rA.ErrnoError(R);if(R=q?rA.mayDelete(k,U,X):rA.mayCreate(k,U))throw new rA.ErrnoError(R);if(!d.node_ops.rename)throw new rA.ErrnoError(63);if(rA.isMountpoint(W)||q&&rA.isMountpoint(q))throw new rA.ErrnoError(10);if(k!==d&&(R=rA.nodePermissions(d,"w")))throw new rA.ErrnoError(R);rA.hashRemoveNode(W);try{d.node_ops.rename(W,k,U)}catch(aA){throw aA}finally{rA.hashAddNode(W)}}},rmdir:x=>{var C=rA.lookupPath(x,{parent:!0}).node,d=Gr.basename(x),k=rA.lookupNode(C,d),z=rA.mayDelete(C,d,!0);if(z)throw new rA.ErrnoError(z);if(!C.node_ops.rmdir)throw new rA.ErrnoError(63);if(rA.isMountpoint(k))throw new rA.ErrnoError(10);C.node_ops.rmdir(C,d),rA.destroyNode(k)},readdir:x=>{var C=rA.lookupPath(x,{follow:!0}).node;if(!C.node_ops.readdir)throw new rA.ErrnoError(54);return C.node_ops.readdir(C)},unlink:x=>{var C=rA.lookupPath(x,{parent:!0}).node;if(!C)throw new rA.ErrnoError(44);var d=Gr.basename(x),k=rA.lookupNode(C,d),z=rA.mayDelete(C,d,!1);if(z)throw new rA.ErrnoError(z);if(!C.node_ops.unlink)throw new rA.ErrnoError(63);if(rA.isMountpoint(k))throw new rA.ErrnoError(10);C.node_ops.unlink(C,d),rA.destroyNode(k)},readlink:x=>{var C=rA.lookupPath(x).node;if(!C)throw new rA.ErrnoError(44);if(!C.node_ops.readlink)throw new rA.ErrnoError(28);return H0.resolve(rA.getPath(C.parent),C.node_ops.readlink(C))},stat:(x,C)=>{var d=rA.lookupPath(x,{follow:!C}).node;if(!d)throw new rA.ErrnoError(44);if(!d.node_ops.getattr)throw new rA.ErrnoError(63);return d.node_ops.getattr(d)},lstat:x=>rA.stat(x,!0),chmod:(x,C,d)=>{var k;if(!(k=typeof x=="string"?rA.lookupPath(x,{follow:!d}).node:x).node_ops.setattr)throw new rA.ErrnoError(63);k.node_ops.setattr(k,{mode:4095&C|-4096&k.mode,timestamp:Date.now()})},lchmod:(x,C)=>{rA.chmod(x,C,!0)},fchmod:(x,C)=>{var d=rA.getStream(x);if(!d)throw new rA.ErrnoError(8);rA.chmod(d.node,C)},chown:(x,C,d,k)=>{var z;if(!(z=typeof x=="string"?rA.lookupPath(x,{follow:!k}).node:x).node_ops.setattr)throw new rA.ErrnoError(63);z.node_ops.setattr(z,{timestamp:Date.now()})},lchown:(x,C,d)=>{rA.chown(x,C,d,!0)},fchown:(x,C,d)=>{var k=rA.getStream(x);if(!k)throw new rA.ErrnoError(8);rA.chown(k.node,C,d)},truncate:(x,C)=>{if(C<0)throw new rA.ErrnoError(28);var d;if(!(d=typeof x=="string"?rA.lookupPath(x,{follow:!0}).node:x).node_ops.setattr)throw new rA.ErrnoError(63);if(rA.isDir(d.mode))throw new rA.ErrnoError(31);if(!rA.isFile(d.mode))throw new rA.ErrnoError(28);var k=rA.nodePermissions(d,"w");if(k)throw new rA.ErrnoError(k);d.node_ops.setattr(d,{size:C,timestamp:Date.now()})},ftruncate:(x,C)=>{var d=rA.getStream(x);if(!d)throw new rA.ErrnoError(8);if(!(2097155&d.flags))throw new rA.ErrnoError(28);rA.truncate(d.node,C)},utime:(x,C,d)=>{var k=rA.lookupPath(x,{follow:!0}).node;k.node_ops.setattr(k,{timestamp:Math.max(C,d)})},open:(x,C,d)=>{if(x==="")throw new rA.ErrnoError(44);var k;if(d=d===void 0?438:d,d=64&(C=typeof C=="string"?rA.modeStringToFlags(C):C)?4095&d|32768:0,typeof x=="object")k=x;else{x=Gr.normalize(x);try{k=rA.lookupPath(x,{follow:!(131072&C)}).node}catch{}}var z=!1;if(64&C)if(k){if(128&C)throw new rA.ErrnoError(20)}else k=rA.mknod(x,d,0),z=!0;if(!k)throw new rA.ErrnoError(44);if(rA.isChrdev(k.mode)&&(C&=-513),65536&C&&!rA.isDir(k.mode))throw new rA.ErrnoError(54);if(!z){var V=rA.mayOpen(k,C);if(V)throw new rA.ErrnoError(V)}512&C&&!z&&rA.truncate(k,0),C&=-131713;var L=rA.createStream({node:k,path:rA.getPath(k),flags:C,seekable:!0,position:0,stream_ops:k.stream_ops,ungotten:[],error:!1});return L.stream_ops.open&&L.stream_ops.open(L),!pA.logReadFiles||1&C||(rA.readFiles||(rA.readFiles={}),x in rA.readFiles||(rA.readFiles[x]=1)),L},close:x=>{if(rA.isClosed(x))throw new rA.ErrnoError(8);x.getdents&&(x.getdents=null);try{x.stream_ops.close&&x.stream_ops.close(x)}catch(C){throw C}finally{rA.closeStream(x.fd)}x.fd=null},isClosed:x=>x.fd===null,llseek:(x,C,d)=>{if(rA.isClosed(x))throw new rA.ErrnoError(8);if(!x.seekable||!x.stream_ops.llseek)throw new rA.ErrnoError(70);if(d!=0&&d!=1&&d!=2)throw new rA.ErrnoError(28);return x.position=x.stream_ops.llseek(x,C,d),x.ungotten=[],x.position},read:(x,C,d,k,z)=>{if(k<0||z<0)throw new rA.ErrnoError(28);if(rA.isClosed(x))throw new rA.ErrnoError(8);if((2097155&x.flags)==1)throw new rA.ErrnoError(8);if(rA.isDir(x.node.mode))throw new rA.ErrnoError(31);if(!x.stream_ops.read)throw new rA.ErrnoError(28);var V=z!==void 0;if(V){if(!x.seekable)throw new rA.ErrnoError(70)}else z=x.position;var L=x.stream_ops.read(x,C,d,k,z);return V||(x.position+=L),L},write:(x,C,d,k,z,V)=>{if(k<0||z<0)throw new rA.ErrnoError(28);if(rA.isClosed(x))throw new rA.ErrnoError(8);if(!(2097155&x.flags))throw new rA.ErrnoError(8);if(rA.isDir(x.node.mode))throw new rA.ErrnoError(31);if(!x.stream_ops.write)throw new rA.ErrnoError(28);x.seekable&&1024&x.flags&&rA.llseek(x,0,2);var L=z!==void 0;if(L){if(!x.seekable)throw new rA.ErrnoError(70)}else z=x.position;var U=x.stream_ops.write(x,C,d,k,z,V);return L||(x.position+=U),U},allocate:(x,C,d)=>{if(rA.isClosed(x))throw new rA.ErrnoError(8);if(C<0||d<=0)throw new rA.ErrnoError(28);if(!(2097155&x.flags))throw new rA.ErrnoError(8);if(!rA.isFile(x.node.mode)&&!rA.isDir(x.node.mode))throw new rA.ErrnoError(43);if(!x.stream_ops.allocate)throw new rA.ErrnoError(138);x.stream_ops.allocate(x,C,d)},mmap:(x,C,d,k,z)=>{if(2&k&&!(2&z)&&(2097155&x.flags)!=2)throw new rA.ErrnoError(2);if((2097155&x.flags)==1)throw new rA.ErrnoError(2);if(!x.stream_ops.mmap)throw new rA.ErrnoError(43);return x.stream_ops.mmap(x,C,d,k,z)},msync:(x,C,d,k,z)=>x.stream_ops.msync?x.stream_ops.msync(x,C,d,k,z):0,munmap:x=>0,ioctl:(x,C,d)=>{if(!x.stream_ops.ioctl)throw new rA.ErrnoError(59);return x.stream_ops.ioctl(x,C,d)},readFile:(x,C={})=>{if(C.flags=C.flags||0,C.encoding=C.encoding||"binary",C.encoding!=="utf8"&&C.encoding!=="binary")throw new Error('Invalid encoding type "'+C.encoding+'"');var d,k=rA.open(x,C.flags),z=rA.stat(x).size,V=new Uint8Array(z);return rA.read(k,V,0,z,0),C.encoding==="utf8"?d=n2(V,0):C.encoding==="binary"&&(d=V),rA.close(k),d},writeFile:(x,C,d={})=>{d.flags=d.flags||577;var k=rA.open(x,d.flags,d.mode);if(typeof C=="string"){var z=new Uint8Array(_u(C)+1),V=tg(C,z,0,z.length);rA.write(k,z,0,V,void 0,d.canOwn)}else{if(!ArrayBuffer.isView(C))throw new Error("Unsupported data type");rA.write(k,C,0,C.byteLength,void 0,d.canOwn)}rA.close(k)},cwd:()=>rA.currentPath,chdir:x=>{var C=rA.lookupPath(x,{follow:!0});if(C.node===null)throw new rA.ErrnoError(44);if(!rA.isDir(C.node.mode))throw new rA.ErrnoError(54);var d=rA.nodePermissions(C.node,"x");if(d)throw new rA.ErrnoError(d);rA.currentPath=C.path},createDefaultDirectories:()=>{rA.mkdir("/tmp"),rA.mkdir("/home"),rA.mkdir("/home/web_user")},createDefaultDevices:()=>{rA.mkdir("/dev"),rA.registerDevice(rA.makedev(1,3),{read:()=>0,write:(x,C,d,k,z)=>k}),rA.mkdev("/dev/null",rA.makedev(1,3)),co.register(rA.makedev(5,0),co.default_tty_ops),co.register(rA.makedev(6,0),co.default_tty1_ops),rA.mkdev("/dev/tty",rA.makedev(5,0)),rA.mkdev("/dev/tty1",rA.makedev(6,0)),rA.mkdir("/dev/shm"),rA.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{rA.mkdir("/proc");var x=rA.mkdir("/proc/self");rA.mkdir("/proc/self/fd"),rA.mount({mount:()=>{var C=rA.createNode(x,"fd",16895,73);return C.node_ops={lookup:(d,k)=>{var z=+k,V=rA.getStream(z);if(!V)throw new rA.ErrnoError(8);var L={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>V.path}};return L.parent=L,L}},C}},{},"/proc/self/fd")},createStandardStreams:()=>{pA.stdin?rA.createDevice("/dev","stdin",pA.stdin):rA.symlink("/dev/tty","/dev/stdin"),pA.stdout?rA.createDevice("/dev","stdout",null,pA.stdout):rA.symlink("/dev/tty","/dev/stdout"),pA.stderr?rA.createDevice("/dev","stderr",null,pA.stderr):rA.symlink("/dev/tty1","/dev/stderr"),rA.open("/dev/stdin",0),rA.open("/dev/stdout",1),rA.open("/dev/stderr",1)},ensureErrnoError:()=>{rA.ErrnoError||(rA.ErrnoError=function(x,C){this.node=C,this.setErrno=function(d){this.errno=d},this.setErrno(x),this.message="FS error"},rA.ErrnoError.prototype=new Error,rA.ErrnoError.prototype.constructor=rA.ErrnoError,[44].forEach(x=>{rA.genericErrors[x]=new rA.ErrnoError(x),rA.genericErrors[x].stack="<generic error, no stack>"}))},staticInit:()=>{rA.ensureErrnoError(),rA.nameTable=new Array(4096),rA.mount(qt,{},"/"),rA.createDefaultDirectories(),rA.createDefaultDevices(),rA.createSpecialDirectories(),rA.filesystems={MEMFS:qt}},init:(x,C,d)=>{rA.init.initialized=!0,rA.ensureErrnoError(),pA.stdin=x||pA.stdin,pA.stdout=C||pA.stdout,pA.stderr=d||pA.stderr,rA.createStandardStreams()},quit:()=>{rA.init.initialized=!1;for(var x=0;x<rA.streams.length;x++){var C=rA.streams[x];C&&rA.close(C)}},getMode:(x,C)=>{var d=0;return x&&(d|=365),C&&(d|=146),d},findObject:(x,C)=>{var d=rA.analyzePath(x,C);return d.exists?d.object:null},analyzePath:(x,C)=>{try{x=(k=rA.lookupPath(x,{follow:!C})).path}catch{}var d={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var k=rA.lookupPath(x,{parent:!0});d.parentExists=!0,d.parentPath=k.path,d.parentObject=k.node,d.name=Gr.basename(x),k=rA.lookupPath(x,{follow:!C}),d.exists=!0,d.path=k.path,d.object=k.node,d.name=k.node.name,d.isRoot=k.path==="/"}catch(z){d.error=z.errno}return d},createPath:(x,C,d,k)=>{x=typeof x=="string"?x:rA.getPath(x);for(var z=C.split("/").reverse();z.length;){var V=z.pop();if(V){var L=Gr.join2(x,V);try{rA.mkdir(L)}catch{}x=L}}return L},createFile:(x,C,d,k,z)=>{var V=Gr.join2(typeof x=="string"?x:rA.getPath(x),C),L=rA.getMode(k,z);return rA.create(V,L)},createDataFile:(x,C,d,k,z,V)=>{var L=C;x&&(x=typeof x=="string"?x:rA.getPath(x),L=C?Gr.join2(x,C):x);var U=rA.getMode(k,z),q=rA.create(L,U);if(d){if(typeof d=="string"){for(var W=new Array(d.length),S=0,X=d.length;S<X;++S)W[S]=d.charCodeAt(S);d=W}rA.chmod(q,146|U);var R=rA.open(q,577);rA.write(R,d,0,d.length,0,V),rA.close(R),rA.chmod(q,U)}return q},createDevice:(x,C,d,k)=>{var z=Gr.join2(typeof x=="string"?x:rA.getPath(x),C),V=rA.getMode(!!d,!!k);rA.createDevice.major||(rA.createDevice.major=64);var L=rA.makedev(rA.createDevice.major++,0);return rA.registerDevice(L,{open:U=>{U.seekable=!1},close:U=>{k&&k.buffer&&k.buffer.length&&k(10)},read:(U,q,W,S,X)=>{for(var R=0,aA=0;aA<S;aA++){var CA;try{CA=d()}catch{throw new rA.ErrnoError(29)}if(CA===void 0&&R===0)throw new rA.ErrnoError(6);if(CA==null)break;R++,q[W+aA]=CA}return R&&(U.node.timestamp=Date.now()),R},write:(U,q,W,S,X)=>{for(var R=0;R<S;R++)try{k(q[W+R])}catch{throw new rA.ErrnoError(29)}return S&&(U.node.timestamp=Date.now()),R}}),rA.mkdev(z,V,L)},forceLoadFile:x=>{if(x.isDevice||x.isFolder||x.link||x.contents)return!0;throw typeof XMLHttpRequest<"u"?new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."):new Error("Cannot load without read() or XMLHttpRequest.")},createLazyFile:(x,C,d,k,z)=>{function V(){this.lengthKnown=!1,this.chunks=[]}if(V.prototype.get=function(X){if(!(X>this.length-1||X<0)){var R=X%this.chunkSize,aA=X/this.chunkSize|0;return this.getter(aA)[R]}},V.prototype.setDataGetter=function(X){this.getter=X},V.prototype.cacheLength=function(){var X=new XMLHttpRequest;if(X.open("HEAD",d,!1),X.send(null),!(X.status>=200&&X.status<300||X.status===304))throw new Error("Couldn't load "+d+". Status: "+X.status);var R,aA=Number(X.getResponseHeader("Content-length")),CA=(R=X.getResponseHeader("Accept-Ranges"))&&R==="bytes",kA=(R=X.getResponseHeader("Content-Encoding"))&&R==="gzip",EA=1048576;CA||(EA=aA);var sA=this;sA.setDataGetter(nA=>{var xA=nA*EA,g=(nA+1)*EA-1;if(g=Math.min(g,aA-1),sA.chunks[nA]===void 0&&(sA.chunks[nA]=((b,A)=>{if(b>A)throw new Error("invalid range ("+b+", "+A+") or no bytes requested!");if(A>aA-1)throw new Error("only "+aA+" bytes available! programmer error!");var l=new XMLHttpRequest;if(l.open("GET",d,!1),aA!==EA&&l.setRequestHeader("Range","bytes="+b+"-"+A),l.responseType="arraybuffer",l.overrideMimeType&&l.overrideMimeType("text/plain; charset=x-user-defined"),l.send(null),!(l.status>=200&&l.status<300||l.status===304))throw new Error("Couldn't load "+d+". Status: "+l.status);return l.response!==void 0?new Uint8Array(l.response||[]):ad(l.responseText||"",!0)})(xA,g)),sA.chunks[nA]===void 0)throw new Error("doXHR failed!");return sA.chunks[nA]}),!kA&&aA||(EA=aA=1,aA=this.getter(0).length,EA=aA,Ac("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=aA,this._chunkSize=EA,this.lengthKnown=!0},typeof XMLHttpRequest<"u"){if(!zp)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var L=new V;Object.defineProperties(L,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var U={isDevice:!1,contents:L}}else U={isDevice:!1,url:d};var q=rA.createFile(x,C,U,k,z);U.contents?q.contents=U.contents:U.url&&(q.contents=null,q.url=U.url),Object.defineProperties(q,{usedBytes:{get:function(){return this.contents.length}}});var W={};function S(X,R,aA,CA,kA){var EA=X.node.contents;if(kA>=EA.length)return 0;var sA=Math.min(EA.length-kA,CA);if(EA.slice)for(var nA=0;nA<sA;nA++)R[aA+nA]=EA[kA+nA];else for(nA=0;nA<sA;nA++)R[aA+nA]=EA.get(kA+nA);return sA}return Object.keys(q.stream_ops).forEach(X=>{var R=q.stream_ops[X];W[X]=function(){return rA.forceLoadFile(q),R.apply(null,arguments)}}),W.read=(X,R,aA,CA,kA)=>(rA.forceLoadFile(q),S(X,R,aA,CA,kA)),W.mmap=(X,R,aA,CA,kA)=>{rA.forceLoadFile(q);var EA=sd();if(!EA)throw new rA.ErrnoError(48);return S(X,ls,EA,R,aA),{ptr:EA,allocated:!0}},q.stream_ops=W,q},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,DB_NAME:()=>"EM_FS_"+window.location.pathname,DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(x,C,d)=>{C=C||(()=>{}),d=d||(()=>{});var k=rA.indexedDB();try{var z=k.open(rA.DB_NAME(),rA.DB_VERSION)}catch(V){return d(V)}z.onupgradeneeded=()=>{Ac("creating db"),z.result.createObjectStore(rA.DB_STORE_NAME)},z.onsuccess=()=>{var V=z.result.transaction([rA.DB_STORE_NAME],"readwrite"),L=V.objectStore(rA.DB_STORE_NAME),U=0,q=0,W=x.length;function S(){q==0?C():d()}x.forEach(X=>{var R=L.put(rA.analyzePath(X).object.contents,X);R.onsuccess=()=>{++U+q==W&&S()},R.onerror=()=>{q++,U+q==W&&S()}}),V.onerror=d},z.onerror=d},loadFilesFromDB:(x,C,d)=>{C=C||(()=>{}),d=d||(()=>{});var k=rA.indexedDB();try{var z=k.open(rA.DB_NAME(),rA.DB_VERSION)}catch(V){return d(V)}z.onupgradeneeded=d,z.onsuccess=()=>{var V=z.result;try{var L=V.transaction([rA.DB_STORE_NAME],"readonly")}catch(R){return void d(R)}var U=L.objectStore(rA.DB_STORE_NAME),q=0,W=0,S=x.length;function X(){W==0?C():d()}x.forEach(R=>{var aA=U.get(R);aA.onsuccess=()=>{rA.analyzePath(R).exists&&rA.unlink(R),rA.createDataFile(Gr.dirname(R),Gr.basename(R),aA.result,!0,!0,!0),++q+W==S&&X()},aA.onerror=()=>{W++,q+W==S&&X()}}),L.onerror=d},z.onerror=d}},jr={DEFAULT_POLLMASK:5,calculateAt:function(x,C,d){if(Gr.isAbs(C))return C;var k;if(k=x===-100?rA.cwd():jr.getStreamFromFD(x).path,C.length==0){if(!d)throw new rA.ErrnoError(44);return k}return Gr.join2(k,C)},doStat:function(x,C,d){try{var k=x(C)}catch(U){if(U&&U.node&&Gr.normalize(C)!==Gr.normalize(rA.getPath(U.node)))return-54;throw U}mr[d>>2]=k.dev,mr[d+8>>2]=k.ino,mr[d+12>>2]=k.mode,Ea[d+16>>2]=k.nlink,mr[d+20>>2]=k.uid,mr[d+24>>2]=k.gid,mr[d+28>>2]=k.rdev,fa=[k.size>>>0,(Lt=k.size,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+40>>2]=fa[0],mr[d+44>>2]=fa[1],mr[d+48>>2]=4096,mr[d+52>>2]=k.blocks;var z=k.atime.getTime(),V=k.mtime.getTime(),L=k.ctime.getTime();return fa=[Math.floor(z/1e3)>>>0,(Lt=Math.floor(z/1e3),+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+56>>2]=fa[0],mr[d+60>>2]=fa[1],Ea[d+64>>2]=z%1e3*1e3,fa=[Math.floor(V/1e3)>>>0,(Lt=Math.floor(V/1e3),+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+72>>2]=fa[0],mr[d+76>>2]=fa[1],Ea[d+80>>2]=V%1e3*1e3,fa=[Math.floor(L/1e3)>>>0,(Lt=Math.floor(L/1e3),+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+88>>2]=fa[0],mr[d+92>>2]=fa[1],Ea[d+96>>2]=L%1e3*1e3,fa=[k.ino>>>0,(Lt=k.ino,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[d+104>>2]=fa[0],mr[d+108>>2]=fa[1],0},doMsync:function(x,C,d,k,z){if(!rA.isFile(C.node.mode))throw new rA.ErrnoError(43);if(2&k)return 0;var V=o2.slice(x,x+d);rA.msync(C,V,z,d,k)},varargs:void 0,get:function(){return jr.varargs+=4,mr[jr.varargs-4>>2]},getStr:function(x){return l2(x)},getStreamFromFD:function(x){var C=rA.getStream(x);if(!C)throw new rA.ErrnoError(8);return C}},Jc={};function b1(){if(!b1.strings){var x={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:eg||"./this.program"};for(var C in Jc)Jc[C]===void 0?delete x[C]:x[C]=Jc[C];var d=[];for(var C in x)d.push(C+"="+x[C]);b1.strings=d}return b1.strings}var Vu=function(x,C,d,k){x||(x=this),this.parent=x,this.mount=x.mount,this.mounted=null,this.id=rA.nextInode++,this.name=C,this.mode=d,this.node_ops={},this.stream_ops={},this.rdev=k};Object.defineProperties(Vu.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(x){x?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(x){x?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return rA.isDir(this.mode)}},isDevice:{get:function(){return rA.isChrdev(this.mode)}}}),rA.FSNode=Vu,rA.staticInit(),pA.FS_createPath=rA.createPath,pA.FS_createDataFile=rA.createDataFile,pA.FS_unlink=rA.unlink,pA.FS_createLazyFile=rA.createLazyFile,pA.FS_createDevice=rA.createDevice;var Op={g:function(x,C,d,k){A0("Assertion failed: "+l2(x)+", at: "+[C?l2(C):"unknown filename",d,k?l2(k):"unknown function"])},u:function(x,C,d){throw new Np(x).init(C,d),x},d:function(x,C,d){jr.varargs=d;try{var k=jr.getStreamFromFD(x);switch(C){case 0:return(z=jr.get())<0?-28:rA.createStream(k,z).fd;case 1:case 2:case 6:case 7:return 0;case 3:return k.flags;case 4:var z=jr.get();return k.flags|=z,0;case 5:return z=jr.get(),ec[z+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return mr[af()>>2]=28,-1}}catch(V){if(rA===void 0||!(V instanceof rA.ErrnoError))throw V;return-V.errno}},q:function(x,C,d){try{var k=jr.getStreamFromFD(x);k.getdents||(k.getdents=rA.readdir(k.path));for(var z=280,V=0,L=rA.llseek(k,0,1),U=Math.floor(L/z);U<k.getdents.length&&V+z<=d;){var q,W,S=k.getdents[U];if(S===".")q=k.node.id,W=4;else if(S==="..")q=rA.lookupPath(k.path,{parent:!0}).node.id,W=4;else{var X=rA.lookupNode(k.node,S);q=X.id,W=rA.isChrdev(X.mode)?2:rA.isDir(X.mode)?4:rA.isLink(X.mode)?10:8}fa=[q>>>0,(Lt=q,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[C+V>>2]=fa[0],mr[C+V+4>>2]=fa[1],fa=[(U+1)*z>>>0,(Lt=(U+1)*z,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[C+V+8>>2]=fa[0],mr[C+V+12>>2]=fa[1],ec[C+V+16>>1]=280,ls[C+V+18|0]=W,tg(S,o2,C+V+19,256),V+=z,U+=1}return rA.llseek(k,U*z,0),V}catch(R){if(rA===void 0||!(R instanceof rA.ErrnoError))throw R;return-R.errno}},h:function(x,C,d){jr.varargs=d;try{var k=jr.getStreamFromFD(x);switch(C){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return k.tty?0:-59;case 21519:if(!k.tty)return-59;var z=jr.get();return mr[z>>2]=0,0;case 21520:return k.tty?-28:-59;case 21531:return z=jr.get(),rA.ioctl(k,C,z);default:return-28}}catch(V){if(rA===void 0||!(V instanceof rA.ErrnoError))throw V;return-V.errno}},e:function(x,C,d,k){jr.varargs=k;try{C=jr.getStr(C),C=jr.calculateAt(x,C);var z=k?jr.get():0;return rA.open(C,d,z).fd}catch(V){if(rA===void 0||!(V instanceof rA.ErrnoError))throw V;return-V.errno}},o:function(x){try{return x=jr.getStr(x),rA.rmdir(x),0}catch(C){if(rA===void 0||!(C instanceof rA.ErrnoError))throw C;return-C.errno}},n:function(x,C){try{return x=jr.getStr(x),jr.doStat(rA.stat,x,C)}catch(d){if(rA===void 0||!(d instanceof rA.ErrnoError))throw d;return-d.errno}},p:function(x,C,d){try{return C=jr.getStr(C),C=jr.calculateAt(x,C),d===0?rA.unlink(C):d===512?rA.rmdir(C):A0("Invalid flags passed to unlinkat"),0}catch(k){if(rA===void 0||!(k instanceof rA.ErrnoError))throw k;return-k.errno}},i:function(){return!0},l:function(){A0("")},f:function(){return Date.now()},j:function(x,C,d){o2.copyWithin(x,C,C+d)},m:function(x){o2.length,A0("OOM")},r:function(x,C){var d=0;return b1().forEach(function(k,z){var V=C+d;Ea[x+4*z>>2]=V,function(L,U){for(var q=0;q<L.length;++q)ls[0|U++]=L.charCodeAt(q);ls[0|U]=0}(k,V),d+=k.length+1}),0},s:function(x,C){var d=b1();Ea[x>>2]=d.length;var k=0;return d.forEach(function(z){k+=z.length+1}),Ea[C>>2]=k,0},b:function(x){try{var C=jr.getStreamFromFD(x);return rA.close(C),0}catch(d){if(rA===void 0||!(d instanceof rA.ErrnoError))throw d;return d.errno}},t:function(x,C,d,k){try{var z=function(V,L,U){for(var q=0,W=0;W<U;W++){var S=Ea[L>>2],X=Ea[L+4>>2];L+=8;var R=rA.read(V,ls,S,X,void 0);if(R<0)return-1;if(q+=R,R<X)break}return q}(jr.getStreamFromFD(x),C,d);return Ea[k>>2]=z,0}catch(V){if(rA===void 0||!(V instanceof rA.ErrnoError))throw V;return V.errno}},k:function(x,C,d,k,z){try{var V=(q=d)+2097152>>>0<4194305-!!(U=C)?(U>>>0)+4294967296*q:NaN;if(isNaN(V))return 61;var L=jr.getStreamFromFD(x);return rA.llseek(L,V,k),fa=[L.position>>>0,(Lt=L.position,+Math.abs(Lt)>=1?Lt>0?(0|Math.min(+Math.floor(Lt/4294967296),4294967295))>>>0:~~+Math.ceil((Lt-+(~~Lt>>>0))/4294967296)>>>0:0)],mr[z>>2]=fa[0],mr[z+4>>2]=fa[1],L.getdents&&V===0&&k===0&&(L.getdents=null),0}catch(W){if(rA===void 0||!(W instanceof rA.ErrnoError))throw W;return W.errno}var U,q},c:function(x,C,d,k){try{var z=function(V,L,U){for(var q=0,W=0;W<U;W++){var S=Ea[L>>2],X=Ea[L+4>>2];L+=8;var R=rA.write(V,ls,S,X,void 0);if(R<0)return-1;q+=R}return q}(jr.getStreamFromFD(x),C,d);return Ea[k>>2]=z,0}catch(V){if(rA===void 0||!(V instanceof rA.ErrnoError))throw V;return V.errno}},a:Ag};(function(){var x,C={a:Op};function d(k,z){var V=k.exports;pA.asm=V,pA.asm.ua,ed(pA.asm.v),rd()}if(td(),pA.instantiateWasm)try{return pA.instantiateWasm(C,d)}catch(k){return u2("Module.instantiateWasm callback failed with error: "+k),!1}x=function(k){d(k.instance)},async function(){return[]}().then(function(k){return d2.instantiate(k,C)}).then(function(k){return k}).then(x,function(k){u2("failed to asynchronously prepare wasm: "+k),A0(k)})})(),pA.___wasm_call_ctors=function(){return(pA.___wasm_call_ctors=pA.asm.v).apply(null,arguments)};var id=pA._emscripten_bind_VoidPtr___destroy___0=function(){return(id=pA._emscripten_bind_VoidPtr___destroy___0=pA.asm.w).apply(null,arguments)},nd=pA._emscripten_bind_espeak_VOICE_get_name_0=function(){return(nd=pA._emscripten_bind_espeak_VOICE_get_name_0=pA.asm.x).apply(null,arguments)},od=pA._emscripten_bind_espeak_VOICE_set_name_1=function(){return(od=pA._emscripten_bind_espeak_VOICE_set_name_1=pA.asm.y).apply(null,arguments)},ld=pA._emscripten_bind_espeak_VOICE_get_languages_1=function(){return(ld=pA._emscripten_bind_espeak_VOICE_get_languages_1=pA.asm.z).apply(null,arguments)},cd=pA._emscripten_bind_espeak_VOICE_get_identifier_0=function(){return(cd=pA._emscripten_bind_espeak_VOICE_get_identifier_0=pA.asm.A).apply(null,arguments)},gd=pA._emscripten_bind_espeak_VOICE_set_identifier_1=function(){return(gd=pA._emscripten_bind_espeak_VOICE_set_identifier_1=pA.asm.B).apply(null,arguments)},ud=pA._emscripten_bind_espeak_VOICE_get_gender_0=function(){return(ud=pA._emscripten_bind_espeak_VOICE_get_gender_0=pA.asm.C).apply(null,arguments)},dd=pA._emscripten_bind_espeak_VOICE_set_gender_1=function(){return(dd=pA._emscripten_bind_espeak_VOICE_set_gender_1=pA.asm.D).apply(null,arguments)},fd=pA._emscripten_bind_espeak_VOICE_get_age_0=function(){return(fd=pA._emscripten_bind_espeak_VOICE_get_age_0=pA.asm.E).apply(null,arguments)},pd=pA._emscripten_bind_espeak_VOICE_set_age_1=function(){return(pd=pA._emscripten_bind_espeak_VOICE_set_age_1=pA.asm.F).apply(null,arguments)},hd=pA._emscripten_bind_espeak_VOICE_get_variant_0=function(){return(hd=pA._emscripten_bind_espeak_VOICE_get_variant_0=pA.asm.G).apply(null,arguments)},md=pA._emscripten_bind_espeak_VOICE_set_variant_1=function(){return(md=pA._emscripten_bind_espeak_VOICE_set_variant_1=pA.asm.H).apply(null,arguments)},Cd=pA._emscripten_bind_espeak_VOICE_get_xx1_0=function(){return(Cd=pA._emscripten_bind_espeak_VOICE_get_xx1_0=pA.asm.I).apply(null,arguments)},bd=pA._emscripten_bind_espeak_VOICE_set_xx1_1=function(){return(bd=pA._emscripten_bind_espeak_VOICE_set_xx1_1=pA.asm.J).apply(null,arguments)},Id=pA._emscripten_bind_espeak_VOICE_get_score_0=function(){return(Id=pA._emscripten_bind_espeak_VOICE_get_score_0=pA.asm.K).apply(null,arguments)},wd=pA._emscripten_bind_espeak_VOICE_set_score_1=function(){return(wd=pA._emscripten_bind_espeak_VOICE_set_score_1=pA.asm.L).apply(null,arguments)},kd=pA._emscripten_bind_espeak_VOICE_get_spare_0=function(){return(kd=pA._emscripten_bind_espeak_VOICE_get_spare_0=pA.asm.M).apply(null,arguments)},xd=pA._emscripten_bind_espeak_VOICE_set_spare_1=function(){return(xd=pA._emscripten_bind_espeak_VOICE_set_spare_1=pA.asm.N).apply(null,arguments)},Bd=pA._emscripten_bind_espeak_VOICE___destroy___0=function(){return(Bd=pA._emscripten_bind_espeak_VOICE___destroy___0=pA.asm.O).apply(null,arguments)},vd=pA._emscripten_bind_espeak_EVENT_get_type_0=function(){return(vd=pA._emscripten_bind_espeak_EVENT_get_type_0=pA.asm.P).apply(null,arguments)},yd=pA._emscripten_bind_espeak_EVENT_get_unique_identifier_0=function(){return(yd=pA._emscripten_bind_espeak_EVENT_get_unique_identifier_0=pA.asm.Q).apply(null,arguments)},Ed=pA._emscripten_bind_espeak_EVENT_get_text_position_0=function(){return(Ed=pA._emscripten_bind_espeak_EVENT_get_text_position_0=pA.asm.R).apply(null,arguments)},Md=pA._emscripten_bind_espeak_EVENT_get_length_0=function(){return(Md=pA._emscripten_bind_espeak_EVENT_get_length_0=pA.asm.S).apply(null,arguments)},Gd=pA._emscripten_bind_espeak_EVENT_get_audio_position_0=function(){return(Gd=pA._emscripten_bind_espeak_EVENT_get_audio_position_0=pA.asm.T).apply(null,arguments)},Dd=pA._emscripten_bind_espeak_EVENT_get_sample_0=function(){return(Dd=pA._emscripten_bind_espeak_EVENT_get_sample_0=pA.asm.U).apply(null,arguments)},Qd=pA._emscripten_bind_espeak_EVENT_get_user_data_0=function(){return(Qd=pA._emscripten_bind_espeak_EVENT_get_user_data_0=pA.asm.V).apply(null,arguments)},Td=pA._emscripten_bind_espeak_EVENT___destroy___0=function(){return(Td=pA._emscripten_bind_espeak_EVENT___destroy___0=pA.asm.W).apply(null,arguments)},Pd=pA._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=function(){return(Pd=pA._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=pA.asm.X).apply(null,arguments)},zd=pA._emscripten_bind_eSpeakNGWorker_synth__2=function(){return(zd=pA._emscripten_bind_eSpeakNGWorker_synth__2=pA.asm.Y).apply(null,arguments)},Fd=pA._emscripten_bind_eSpeakNGWorker_synth_ipa__2=function(){return(Fd=pA._emscripten_bind_eSpeakNGWorker_synth_ipa__2=pA.asm.Z).apply(null,arguments)},Sd=pA._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=function(){return(Sd=pA._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=pA.asm._).apply(null,arguments)},Nd=pA._emscripten_bind_eSpeakNGWorker_set_voice_2=function(){return(Nd=pA._emscripten_bind_eSpeakNGWorker_set_voice_2=pA.asm.$).apply(null,arguments)},Od=pA._emscripten_bind_eSpeakNGWorker_set_voice_3=function(){return(Od=pA._emscripten_bind_eSpeakNGWorker_set_voice_3=pA.asm.aa).apply(null,arguments)},Ld=pA._emscripten_bind_eSpeakNGWorker_set_voice_4=function(){return(Ld=pA._emscripten_bind_eSpeakNGWorker_set_voice_4=pA.asm.ba).apply(null,arguments)},Yd=pA._emscripten_bind_eSpeakNGWorker_set_voice_5=function(){return(Yd=pA._emscripten_bind_eSpeakNGWorker_set_voice_5=pA.asm.ca).apply(null,arguments)},Hd=pA._emscripten_bind_eSpeakNGWorker_get_voices_1=function(){return(Hd=pA._emscripten_bind_eSpeakNGWorker_get_voices_1=pA.asm.da).apply(null,arguments)},Rd=pA._emscripten_bind_eSpeakNGWorker_set_voices_2=function(){return(Rd=pA._emscripten_bind_eSpeakNGWorker_set_voices_2=pA.asm.ea).apply(null,arguments)},Wd=pA._emscripten_bind_eSpeakNGWorker_get_samplerate_0=function(){return(Wd=pA._emscripten_bind_eSpeakNGWorker_get_samplerate_0=pA.asm.fa).apply(null,arguments)},Vd=pA._emscripten_bind_eSpeakNGWorker_get_rate_0=function(){return(Vd=pA._emscripten_bind_eSpeakNGWorker_get_rate_0=pA.asm.ga).apply(null,arguments)},jd=pA._emscripten_bind_eSpeakNGWorker_set_rate_1=function(){return(jd=pA._emscripten_bind_eSpeakNGWorker_set_rate_1=pA.asm.ha).apply(null,arguments)},Ud=pA._emscripten_bind_eSpeakNGWorker_get_pitch_0=function(){return(Ud=pA._emscripten_bind_eSpeakNGWorker_get_pitch_0=pA.asm.ia).apply(null,arguments)},Kd=pA._emscripten_bind_eSpeakNGWorker_set_pitch_1=function(){return(Kd=pA._emscripten_bind_eSpeakNGWorker_set_pitch_1=pA.asm.ja).apply(null,arguments)},Zd=pA._emscripten_bind_eSpeakNGWorker___destroy___0=function(){return(Zd=pA._emscripten_bind_eSpeakNGWorker___destroy___0=pA.asm.ka).apply(null,arguments)},Xd=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=function(){return(Xd=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=pA.asm.la).apply(null,arguments)},qd=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=function(){return(qd=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=pA.asm.ma).apply(null,arguments)},Jd=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=function(){return(Jd=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=pA.asm.na).apply(null,arguments)},_d=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=function(){return(_d=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=pA.asm.oa).apply(null,arguments)},$d=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=function(){return($d=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=pA.asm.pa).apply(null,arguments)},Af=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=function(){return(Af=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=pA.asm.qa).apply(null,arguments)},ef=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=function(){return(ef=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=pA.asm.ra).apply(null,arguments)},tf=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=function(){return(tf=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=pA.asm.sa).apply(null,arguments)},rf=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=function(){return(rf=pA._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=pA.asm.ta).apply(null,arguments)},af=pA.___errno_location=function(){return(af=pA.___errno_location=pA.asm.va).apply(null,arguments)};pA._free=function(){return(pA._free=pA.asm.wa).apply(null,arguments)},pA._malloc=function(){return(pA._malloc=pA.asm.xa).apply(null,arguments)};var tc,sf=pA.___cxa_is_pointer_type=function(){return(sf=pA.___cxa_is_pointer_type=pA.asm.ya).apply(null,arguments)};function nf(x){function C(){tc||(tc=!0,pA.calledRun=!0,Xu||(Ad=!0,pA.noFSInit||rA.init.initialized||rA.init(),rA.ignorePermissions=!1,qc($u),pA.onRuntimeInitialized&&pA.onRuntimeInitialized(),function(){if(pA.postRun)for(typeof pA.postRun=="function"&&(pA.postRun=[pA.postRun]);pA.postRun.length;)d=pA.postRun.shift(),Wu.unshift(d);var d;qc(Wu)}()))}go>0||(function(){if(pA.preRun)for(typeof pA.preRun=="function"&&(pA.preRun=[pA.preRun]);pA.preRun.length;)d=pA.preRun.shift(),Ru.unshift(d);var d;qc(Ru)}(),go>0||(pA.setStatus?(pA.setStatus("Running..."),setTimeout(function(){setTimeout(function(){pA.setStatus("")},1),C()},1)):C()))}if(pA.___start_em_js=132724,pA.___stop_em_js=132822,pA.addRunDependency=td,pA.removeRunDependency=rd,pA.FS_createPath=rA.createPath,pA.FS_createDataFile=rA.createDataFile,pA.FS_createLazyFile=rA.createLazyFile,pA.FS_createDevice=rA.createDevice,pA.FS_unlink=rA.unlink,C1=function x(){tc||nf(),tc||(C1=x)},pA.preInit)for(typeof pA.preInit=="function"&&(pA.preInit=[pA.preInit]);pA.preInit.length>0;)pA.preInit.pop()();function Ds(){}function rc(x){return(x||Ds).__cache__}function c2(x,C){var d=rc(C),k=d[x];return k||((k=Object.create((C||Ds).prototype)).ptr=x,d[x]=k)}nf(),Ds.prototype=Object.create(Ds.prototype),Ds.prototype.constructor=Ds,Ds.prototype.__class__=Ds,Ds.__cache__={},pA.WrapperObject=Ds,pA.getCache=rc,pA.wrapPointer=c2,pA.castObject=function(x,C){return c2(x.ptr,C)},pA.NULL=c2(0),pA.destroy=function(x){if(!x.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";x.__destroy__(),delete rc(x.__class__)[x.ptr]},pA.compare=function(x,C){return x.ptr===C.ptr},pA.getPointer=function(x){return x.ptr},pA.getClass=function(x){return x.__class__};var Br={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(Br.needed){for(var x=0;x<Br.temps.length;x++)pA._free(Br.temps[x]);Br.temps.length=0,pA._free(Br.buffer),Br.buffer=0,Br.size+=Br.needed,Br.needed=0}Br.buffer||(Br.size+=128,Br.buffer=pA._malloc(Br.size),Zc(Br.buffer)),Br.pos=0},alloc:function(x,C){Zc(Br.buffer);var d,k=C.BYTES_PER_ELEMENT,z=x.length*k;return z=z+7&-8,Br.pos+z>=Br.size?(Zc(z>0),Br.needed+=z,d=pA._malloc(z),Br.temps.push(d)):(d=Br.buffer+Br.pos,Br.pos+=z),d},copy:function(x,C,d){switch(d>>>=0,C.BYTES_PER_ELEMENT){case 2:d>>>=1;break;case 4:d>>>=2;break;case 8:d>>>=3}for(var k=0;k<x.length;k++)C[d+k]=x[k]}};function lo(x){if(typeof x=="string"){var C=ad(x),d=Br.alloc(C,ls);return Br.copy(C,ls,d),d}return x}function $n(){throw"cannot construct a VoidPtr, no constructor in IDL"}function ot(){throw"cannot construct a espeak_VOICE, no constructor in IDL"}function tr(){throw"cannot construct a espeak_EVENT, no constructor in IDL"}function Wt(){this.ptr=Pd(),rc(Wt)[this.ptr]=this}$n.prototype=Object.create(Ds.prototype),$n.prototype.constructor=$n,$n.prototype.__class__=$n,$n.__cache__={},pA.VoidPtr=$n,$n.prototype.__destroy__=$n.prototype.__destroy__=function(){var x=this.ptr;id(x)},ot.prototype=Object.create(Ds.prototype),ot.prototype.constructor=ot,ot.prototype.__class__=ot,ot.__cache__={},pA.espeak_VOICE=ot,ot.prototype.get_name=ot.prototype.get_name=function(){var x=this.ptr;return l2(nd(x))},ot.prototype.set_name=ot.prototype.set_name=function(x){var C=this.ptr;Br.prepare(),x=x&&typeof x=="object"?x.ptr:lo(x),od(C,x)},Object.defineProperty(ot.prototype,"name",{get:ot.prototype.get_name,set:ot.prototype.set_name}),ot.prototype.get_languages=ot.prototype.get_languages=function(x){var C=this.ptr;return x&&typeof x=="object"&&(x=x.ptr),ld(C,x)},Object.defineProperty(ot.prototype,"languages",{get:ot.prototype.get_languages}),ot.prototype.get_identifier=ot.prototype.get_identifier=function(){var x=this.ptr;return l2(cd(x))},ot.prototype.set_identifier=ot.prototype.set_identifier=function(x){var C=this.ptr;Br.prepare(),x=x&&typeof x=="object"?x.ptr:lo(x),gd(C,x)},Object.defineProperty(ot.prototype,"identifier",{get:ot.prototype.get_identifier,set:ot.prototype.set_identifier}),ot.prototype.get_gender=ot.prototype.get_gender=function(){var x=this.ptr;return ud(x)},ot.prototype.set_gender=ot.prototype.set_gender=function(x){var C=this.ptr;x&&typeof x=="object"&&(x=x.ptr),dd(C,x)},Object.defineProperty(ot.prototype,"gender",{get:ot.prototype.get_gender,set:ot.prototype.set_gender}),ot.prototype.get_age=ot.prototype.get_age=function(){var x=this.ptr;return fd(x)},ot.prototype.set_age=ot.prototype.set_age=function(x){var C=this.ptr;x&&typeof x=="object"&&(x=x.ptr),pd(C,x)},Object.defineProperty(ot.prototype,"age",{get:ot.prototype.get_age,set:ot.prototype.set_age}),ot.prototype.get_variant=ot.prototype.get_variant=function(){var x=this.ptr;return hd(x)},ot.prototype.set_variant=ot.prototype.set_variant=function(x){var C=this.ptr;x&&typeof x=="object"&&(x=x.ptr),md(C,x)},Object.defineProperty(ot.prototype,"variant",{get:ot.prototype.get_variant,set:ot.prototype.set_variant}),ot.prototype.get_xx1=ot.prototype.get_xx1=function(){var x=this.ptr;return Cd(x)},ot.prototype.set_xx1=ot.prototype.set_xx1=function(x){var C=this.ptr;x&&typeof x=="object"&&(x=x.ptr),bd(C,x)},Object.defineProperty(ot.prototype,"xx1",{get:ot.prototype.get_xx1,set:ot.prototype.set_xx1}),ot.prototype.get_score=ot.prototype.get_score=function(){var x=this.ptr;return Id(x)},ot.prototype.set_score=ot.prototype.set_score=function(x){var C=this.ptr;x&&typeof x=="object"&&(x=x.ptr),wd(C,x)},Object.defineProperty(ot.prototype,"score",{get:ot.prototype.get_score,set:ot.prototype.set_score}),ot.prototype.get_spare=ot.prototype.get_spare=function(){var x=this.ptr;return kd(x)},ot.prototype.set_spare=ot.prototype.set_spare=function(x){var C=this.ptr;x&&typeof x=="object"&&(x=x.ptr),xd(C,x)},Object.defineProperty(ot.prototype,"spare",{get:ot.prototype.get_spare,set:ot.prototype.set_spare}),ot.prototype.__destroy__=ot.prototype.__destroy__=function(){var x=this.ptr;Bd(x)},tr.prototype=Object.create(Ds.prototype),tr.prototype.constructor=tr,tr.prototype.__class__=tr,tr.__cache__={},pA.espeak_EVENT=tr,tr.prototype.get_type=tr.prototype.get_type=function(){var x=this.ptr;return vd(x)},Object.defineProperty(tr.prototype,"type",{get:tr.prototype.get_type}),tr.prototype.get_unique_identifier=tr.prototype.get_unique_identifier=function(){var x=this.ptr;return yd(x)},Object.defineProperty(tr.prototype,"unique_identifier",{get:tr.prototype.get_unique_identifier}),tr.prototype.get_text_position=tr.prototype.get_text_position=function(){var x=this.ptr;return Ed(x)},Object.defineProperty(tr.prototype,"text_position",{get:tr.prototype.get_text_position}),tr.prototype.get_length=tr.prototype.get_length=function(){var x=this.ptr;return Md(x)},Object.defineProperty(tr.prototype,"length",{get:tr.prototype.get_length}),tr.prototype.get_audio_position=tr.prototype.get_audio_position=function(){var x=this.ptr;return Gd(x)},Object.defineProperty(tr.prototype,"audio_position",{get:tr.prototype.get_audio_position}),tr.prototype.get_sample=tr.prototype.get_sample=function(){var x=this.ptr;return Dd(x)},Object.defineProperty(tr.prototype,"sample",{get:tr.prototype.get_sample}),tr.prototype.get_user_data=tr.prototype.get_user_data=function(){var x=this.ptr;return Qd(x)},Object.defineProperty(tr.prototype,"user_data",{get:tr.prototype.get_user_data}),tr.prototype.__destroy__=tr.prototype.__destroy__=function(){var x=this.ptr;Td(x)},Wt.prototype=Object.create(Ds.prototype),Wt.prototype.constructor=Wt,Wt.prototype.__class__=Wt,Wt.__cache__={},pA.eSpeakNGWorker=Wt,Wt.prototype.synth_=Wt.prototype.synth_=function(x,C){var d=this.ptr;Br.prepare(),x=x&&typeof x=="object"?x.ptr:lo(x),C&&typeof C=="object"&&(C=C.ptr),zd(d,x,C)},Wt.prototype.synth_ipa_=Wt.prototype.synth_ipa_=function(x,C){var d=this.ptr;return Br.prepare(),x=x&&typeof x=="object"?x.ptr:lo(x),C=C&&typeof C=="object"?C.ptr:lo(C),Fd(d,x,C)},Wt.prototype.getSizeOfEventStruct_=Wt.prototype.getSizeOfEventStruct_=function(){var x=this.ptr;return Sd(x)},Wt.prototype.set_voice=Wt.prototype.set_voice=function(x,C,d,k,z){var V=this.ptr;return Br.prepare(),x=x&&typeof x=="object"?x.ptr:lo(x),C=C&&typeof C=="object"?C.ptr:lo(C),d&&typeof d=="object"&&(d=d.ptr),k&&typeof k=="object"&&(k=k.ptr),z&&typeof z=="object"&&(z=z.ptr),d===void 0?Nd(V,x,C):k===void 0?Od(V,x,C,d):z===void 0?Ld(V,x,C,d,k):Yd(V,x,C,d,k,z)},Wt.prototype.get_voices=Wt.prototype.get_voices=function(x){var C=this.ptr;return x&&typeof x=="object"&&(x=x.ptr),c2(Hd(C,x),ot)},Wt.prototype.set_voices=Wt.prototype.set_voices=function(x,C){var d=this.ptr;Br.prepare(),x&&typeof x=="object"&&(x=x.ptr),C&&typeof C=="object"&&(C=C.ptr),Rd(d,x,C)},Object.defineProperty(Wt.prototype,"voices",{get:Wt.prototype.get_voices,set:Wt.prototype.set_voices}),Wt.prototype.get_samplerate=Wt.prototype.get_samplerate=function(){var x=this.ptr;return Wd(x)},Object.defineProperty(Wt.prototype,"samplerate",{get:Wt.prototype.get_samplerate}),Wt.prototype.get_rate=Wt.prototype.get_rate=function(){var x=this.ptr;return Vd(x)},Wt.prototype.set_rate=Wt.prototype.set_rate=function(x){var C=this.ptr;x&&typeof x=="object"&&(x=x.ptr),jd(C,x)},Object.defineProperty(Wt.prototype,"rate",{get:Wt.prototype.get_rate,set:Wt.prototype.set_rate}),Wt.prototype.get_pitch=Wt.prototype.get_pitch=function(){var x=this.ptr;return Ud(x)},Wt.prototype.set_pitch=Wt.prototype.set_pitch=function(x){var C=this.ptr;x&&typeof x=="object"&&(x=x.ptr),Kd(C,x)},Object.defineProperty(Wt.prototype,"pitch",{get:Wt.prototype.get_pitch,set:Wt.prototype.set_pitch}),Wt.prototype.__destroy__=Wt.prototype.__destroy__=function(){var x=this.ptr;Zd(x)},function(){function x(){pA.espeakEVENT_LIST_TERMINATED=Xd(),pA.espeakEVENT_WORD=qd(),pA.espeakEVENT_SENTENCE=Jd(),pA.espeakEVENT_MARK=_d(),pA.espeakEVENT_PLAY=$d(),pA.espeakEVENT_END=Af(),pA.espeakEVENT_MSG_TERMINATED=ef(),pA.espeakEVENT_PHONEME=tf(),pA.espeakEVENT_SAMPLERATE=rf()}Ad?x():ed(x)}(),Wt.prototype.list_voices=function(){for(var x,C=[],d=this.get_voices(x=0);d.ptr!=0;d=this.get_voices(++x)){let U=function(q){for(var W="",S=q,X=d.get_languages(S++);X!=0;)W+=String.fromCharCode(X),X=d.get_languages(S++);return W};for(var k={name:d.get_name(),identifier:d.get_identifier(),languages:[]},z=0,V=d.get_languages(z);V!=0;){var L={priority:V,name:U(++z)};k.languages.push(L),z+=L.name.length+1,V=d.get_languages(z)}C.push(k)}return C};var Lp=["list_terminated","word","sentence","mark","play","end","msg_terminated","phoneme","samplerate"];Wt.prototype.synthesize=function(x,C){var d=this.getSizeOfEventStruct_(),k=addFunction(function(z,V,L){for(var U=new Float32Array(2*V),q=0;q<V;q++)U[2*q]=Math.max(-1,Math.min(1,Sp(z+2*q,"i16")/32768)),U[2*q+1]=U[2*q];var W=[];for(z=L,ev=c2(z,tr);ev.get_type()!=pA.espeakEVENT_LIST_TERMINATED;ev=c2(z+=d,tr))W.push({type:Lp[ev.get_type()],text_position:ev.get_text_position(),word_length:ev.get_length(),audio_position:ev.get_audio_position()});return C(U,W)?1:0});this.synth_(x,k),removeFunction(k)},Wt.prototype.synthesize_ipa=function(x,C){var d="espeak-ng-ipa-tmp-"+Math.random().toString().substring(2),k="",z=this.synth_ipa_(x,d);return z==0&&(k=rA.readFile(d,{encoding:"utf8"})),rA.unlink(d),{code:z,ipa:k}};const of=new Promise(x=>{pA.calledRun?x(new pA.eSpeakNGWorker):pA.onRuntimeInitialized=()=>x(new pA.eSpeakNGWorker)}),Yp=["en"],Hp=of.then(x=>{const C=x.list_voices().map(({name:k,identifier:z,languages:V})=>({name:k,identifier:z,languages:V.filter(L=>Yp.includes(L.name.split("-")[0]))})).filter(k=>k.languages.length>0),d=new Set;for(const k of C){d.add(k.identifier);for(const z of k.languages)d.add(z.name)}return{voices:C,identifiers:d}});function Rp(x){if(x.includes("."))return x;if(x.includes(":")){let[V,L]=x.split(":").map(Number);return L===0?`${V} o'clock`:L<10?`${V} oh ${L}`:`${V} ${L}`}let C=parseInt(x.slice(0,4),10);if(C<1100||C%1e3<10)return x;let d=x.slice(0,2),k=parseInt(x.slice(2,4),10),z=x.endsWith("s")?"s":"";if(C%1e3>=100&&C%1e3<=999){if(k===0)return`${d} hundred${z}`;if(k<10)return`${d} oh ${k}${z}`}return`${d} ${k}${z}`}function Wp(x){const C=x[0]==="$"?"dollar":"pound";if(isNaN(Number(x.slice(1))))return`${x.slice(1)} ${C}s`;if(!x.includes(".")){let V=x.slice(1)==="1"?"":"s";return`${x.slice(1)} ${C}${V}`}const[d,k]=x.slice(1).split("."),z=parseInt(k.padEnd(2,"0"),10);return`${d} ${C}${d==="1"?"":"s"} and ${z} ${x[0]==="$"?z===1?"cent":"cents":z===1?"penny":"pence"}`}function Vp(x){let[C,d]=x.split(".");return`${C} point ${d.split("").join(" ")}`}const jp=new RegExp(`(\\s*[${ju=';:,.!?¡¿—…"«»“”(){}[]',ju.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}]+\\s*)+`,"g");var ju;async function Up(x,C="a",d=!0){d&&(x=function(U){return U.replace(/[‘’]/g,"'").replace(/«/g,"“").replace(/»/g,"”").replace(/[“”]/g,'"').replace(/\(/g,"«").replace(/\)/g,"»").replace(/、/g,", ").replace(/。/g,". ").replace(/！/g,"! ").replace(/，/g,", ").replace(/：/g,": ").replace(/；/g,"; ").replace(/？/g,"? ").replace(/[^\S \n]/g," ").replace(/  +/," ").replace(/(?<=\n) +(?=\n)/g,"").replace(/\bD[Rr]\.(?= [A-Z])/g,"Doctor").replace(/\b(?:Mr\.|MR\.(?= [A-Z]))/g,"Mister").replace(/\b(?:Ms\.|MS\.(?= [A-Z]))/g,"Miss").replace(/\b(?:Mrs\.|MRS\.(?= [A-Z]))/g,"Mrs").replace(/\betc\.(?! [A-Z])/gi,"etc").replace(/\b(y)eah?\b/gi,"$1e'a").replace(/\d*\.\d+|\b\d{4}s?\b|(?<!:)\b(?:[1-9]|1[0-2]):[0-5]\d\b(?!:)/g,Rp).replace(/(?<=\d),(?=\d)/g,"").replace(/[$£]\d+(?:\.\d+)?(?: hundred| thousand| (?:[bm]|tr)illion)*\b|[$£]\d+\.\d\d?\b/gi,Wp).replace(/\d*\.\d+/g,Vp).replace(/(?<=\d)-(?=\d)/g," to ").replace(/(?<=\d)S/g," S").replace(/(?<=[BCDFGHJ-NP-TV-Z])'?s\b/g,"'S").replace(/(?<=X')S\b/g,"s").replace(/(?:[A-Za-z]\.){2,} [a-z]/g,q=>q.replace(/\./g,"-")).replace(/(?<=[A-Z])\.(?=[A-Z])/gi,"-").trim()}(x));const k=function(U,q){const W=[];let S=0;for(const X of U.matchAll(q)){const R=X[0];S<X.index&&W.push({match:!1,text:U.slice(S,X.index)}),R.length>0&&W.push({match:!0,text:R}),S=X.index+R.length}return S<U.length&&W.push({match:!1,text:U.slice(S)}),W}(x,jp),z=C==="a"?"en-us":"en";let L=(await Promise.all(k.map(async({match:U,text:q})=>U?q:(await(async(W,S="en-us")=>{const X=await of,{identifiers:R}=await Hp;if(!R.has(S))throw new Error(`Invalid language identifier: "${S}". Should be one of: ${Array.from(R).toSorted().join(", ")}.`);return X.set_voice(S),X.synthesize_ipa(W).ipa?.split(`
`).filter(aA=>aA.length>0)??[]})(q,z)).join(" ")))).join("").replace(/kəkˈoːɹoʊ/g,"kˈoʊkəɹoʊ").replace(/kəkˈɔːɹəʊ/g,"kˈəʊkəɹəʊ").replace(/ʲ/g,"j").replace(/r/g,"ɹ").replace(/x/g,"k").replace(/ɬ/g,"l").replace(/(?<=[a-zɹː])(?=hˈʌndɹɪd)/g," ").replace(/ z(?=[;:,.!?¡¿—…"«»“” ]|$)/g,"z");return C==="a"&&(L=L.replace(/(?<=nˈaɪn)ti(?!ː)/g,"di")),L.trim()}var _c={};const h1=Object.freeze({af:{name:"Default",language:"en-us",gender:"Female"},af_bella:{name:"Bella",language:"en-us",gender:"Female"},af_nicole:{name:"Nicole",language:"en-us",gender:"Female"},af_sarah:{name:"Sarah",language:"en-us",gender:"Female"},af_sky:{name:"Sky",language:"en-us",gender:"Female"},am_adam:{name:"Adam",language:"en-us",gender:"Male"},am_michael:{name:"Michael",language:"en-us",gender:"Male"},bf_emma:{name:"Emma",language:"en-gb",gender:"Female"},bf_isabella:{name:"Isabella",language:"en-gb",gender:"Female"},bm_george:{name:"George",language:"en-gb",gender:"Male"},bm_lewis:{name:"Lewis",language:"en-gb",gender:"Male"}}),$c=new Map;async function Kp(x){if($c.has(x))return $c.get(x);const C=new Float32Array(await async function(d){if(_c?.readFile){const U=_c.resolve(import.meta.dirname??__dirname,`../voices/${d}.bin`),{buffer:q}=await _c.readFile(U);return q}const k=`https://huggingface.co/onnx-community/Kokoro-82M-ONNX/resolve/main/voices/${d}.bin`;let z;try{z=await caches.open("kokoro-voices");const U=await z.match(k);if(U)return await U.arrayBuffer()}catch(U){console.warn("Unable to open cache",U)}const V=await fetch(k),L=await V.arrayBuffer();if(z)try{await z.put(k,new Response(L,{headers:V.headers}))}catch(U){console.warn("Unable to cache file",U)}return L}(x));return $c.set(x,C),C}class rg{constructor(C,d){this.model=C,this.tokenizer=d}static async from_pretrained(C,{dtype:d="fp32",device:k=null,progress_callback:z=null}={}){const V=Pp.from_pretrained(C,{progress_callback:z,dtype:d,device:k}),L=Qp.from_pretrained(C,{progress_callback:z}),U=await Promise.all([V,L]);return new rg(...U)}get voices(){return h1}list_voices(){console.table(h1)}async generate(C,{voice:d="af",speed:k=1}={}){if(!h1.hasOwnProperty(d))throw console.error(`Voice "${d}" not found. Available voices:`),console.table(h1),new Error(`Voice "${d}" not found. Should be one of: ${Object.keys(h1).join(", ")}.`);const z=d.at(0),V=await Up(C,z),{input_ids:L}=this.tokenizer(V,{truncation:!0}),U=256*Math.max(L.dims.at(-1)-2,0),q=(await Kp(d)).slice(U,U+256),W={input_ids:L,style:new Ou("float32",q,[1,256]),speed:new Ou("float32",[k],[1])},{waveform:S}=await this.model(W);return new Tp(S.data,24e3)}}const Zp="onnx-community/Kokoro-82M-ONNX",Xp=await rg.from_pretrained(Zp,{dtype:"q8"});self.postMessage({status:"ready"});self.addEventListener("message",async x=>{const{text:C,voice:d}=x.data,z=(await Xp.generate(C,{voice:d})).toBlob();self.postMessage({status:"complete",audio:URL.createObjectURL(z),text:C})});
